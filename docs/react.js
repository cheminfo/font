(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    __markAsModule(target);
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement167(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render2.displayName == null) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement167.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              new Map([[frozenObject, null]]);
              new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React168 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React168.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React168) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React168.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React168.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map();
          var eventPriorities = new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement167(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement167(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React168.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render3 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              new Map([[nonExtensibleObject, null]]);
              new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = new Set();
              this.pendingInteractionMap = new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render2(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render2;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // build/react-docs.tsx
  var import_react = __toModule(require_react());
  var import_react_dom = __toModule(require_react_dom());

  // build/react.index.ts
  var react_index_exports = {};
  __export(react_index_exports, {
    SvgBioDna: () => Dna_default,
    SvgBioEppendorf: () => Eppendorf_default,
    SvgBioFlowCytometry: () => FlowCytometry_default,
    SvgBioIsoelectricPoint: () => IsoelectricPoint_default,
    SvgBioMicroscopy: () => Microscopy_default,
    SvgBioPeptideCharge: () => PeptideCharge_default,
    SvgBioPetri: () => Petri_default,
    SvgBioProtein: () => Protein_default,
    SvgBioSeahorse: () => Seahorse_default,
    SvgBioSearchDna: () => SearchDna_default,
    SvgBioUnimod: () => Unimod_default,
    SvgBioUploadDna: () => UploadDna_default,
    SvgChartMonitoring: () => Monitoring_default,
    SvgChartMulti: () => Multi_default,
    SvgChartMulti2: () => Multi2_default,
    SvgChartScatter: () => Scatter_default,
    SvgChartScatterLine: () => ScatterLine_default,
    SvgChemConcentration: () => Concentration_default,
    SvgChemIupacNameStructure: () => IupacNameStructure_default,
    SvgChemIupacStructureName: () => IupacStructureName_default,
    SvgChemMineralFormulaName: () => MineralFormulaName_default,
    SvgChemMineralNameFormula: () => MineralNameFormula_default,
    SvgChemPh: () => Ph_default,
    SvgChemPrecipitation: () => Precipitation_default,
    SvgCheminfoSdfTable: () => SdfTable_default,
    SvgCheminfoSearchSdf: () => SearchSdf_default,
    SvgCvAssignment: () => Assignment_default,
    SvgDscAssignment: () => Assignment_default2,
    SvgEaRequest: () => Request_default,
    SvgGlasswareBeaker: () => Beaker_default,
    SvgGlasswareBeaker2: () => Beaker2_default,
    SvgGlasswareErlen: () => Erlen_default,
    SvgGlasswareRoundFlask: () => RoundFlask_default,
    SvgGlasswareTitration: () => Titration_default,
    SvgIcpRequest: () => Request_default2,
    SvgInventoryAdd: () => Add_default,
    SvgInventoryEmpty: () => Empty_default,
    SvgInventoryFull: () => Full_default,
    SvgInventoryStatus: () => Status_default,
    SvgInventoryToxic: () => Toxic_default,
    SvgIrAssignment: () => Assignment_default3,
    SvgIrOverlay: () => Overlay_default,
    SvgIsothermAssignment: () => Assignment_default4,
    SvgIvAssignment: () => Assignment_default5,
    SvgLogoCmaup: () => Cmaup_default,
    SvgLogoCoconuts: () => Coconuts_default,
    SvgLogoGnps: () => Gnps_default,
    SvgLogoLotuses: () => Lotuses_default,
    SvgLogoMassBank: () => MassBank_default,
    SvgLogoNmrium: () => Nmrium_default,
    SvgLogoNpass: () => Npass_default,
    SvgLogoNpatlases: () => Npatlases_default,
    SvgLogoPubchemColor: () => PubchemColor_default,
    SvgLogoPubmed: () => Pubmed_default,
    SvgLogoWikipedia: () => Wikipedia_default,
    SvgLogoZakodium: () => Zakodium_default,
    SvgMassImpurities: () => Impurities_default,
    SvgMassMonoisotopic: () => Monoisotopic_default,
    SvgMassOverlay: () => Overlay_default2,
    SvgMassRequest: () => Request_default3,
    SvgMassRequestProtein: () => RequestProtein_default,
    SvgMassSum: () => Sum_default,
    SvgMassUpload: () => Upload_default,
    SvgMiscChromatography: () => Chromatography_default,
    SvgMiscCristal: () => Cristal_default,
    SvgMiscCristal2: () => Cristal2_default,
    SvgMiscCyclicVoltammetry: () => CyclicVoltammetry_default,
    SvgMiscEdit: () => Edit_default,
    SvgMiscElectronMicroscopy: () => ElectronMicroscopy_default,
    SvgMiscOctochemdb: () => Octochemdb_default,
    SvgMiscPeptide: () => Peptide_default,
    SvgMiscPercent: () => Percent_default,
    SvgMiscPolymer: () => Polymer_default,
    SvgMiscPubchem: () => Pubchem_default,
    SvgMiscSearchRequest: () => SearchRequest_default,
    SvgMiscWeight: () => Weight_default,
    SvgMiscXps: () => Xps_default,
    SvgMiscZenodo: () => Zenodo_default,
    SvgNmr13C: () => C_default,
    SvgNmr1H: () => H_default,
    SvgNmr1H13C: () => H13C_default,
    SvgNmr1H1H: () => H1H_default,
    SvgNmr2D: () => D_default,
    SvgNmrAddFilter: () => AddFilter_default,
    SvgNmrAlignBottom: () => AlignBottom_default,
    SvgNmrAlignCenter: () => AlignCenter_default,
    SvgNmrApodization: () => Apodization_default,
    SvgNmrAssignment: () => Assignment_default6,
    SvgNmrAssignment2: () => Assignment2_default,
    SvgNmrBaselineCorrection: () => BaselineCorrection_default,
    SvgNmrExportAsMatrix: () => ExportAsMatrix_default,
    SvgNmrFid: () => Fid_default,
    SvgNmrFourierTransform: () => FourierTransform_default,
    SvgNmrFt: () => Ft_default,
    SvgNmrImpurities: () => Impurities_default2,
    SvgNmrImpuritiesStars: () => ImpuritiesStars_default,
    SvgNmrIntegrate: () => Integrate_default,
    SvgNmrLineshapedeconvolution: () => Lineshapedeconvolution_default,
    SvgNmrMultipleAnalysis: () => MultipleAnalysis_default,
    SvgNmrMultiplet: () => Multiplet_default,
    SvgNmrOverlay: () => Overlay_default3,
    SvgNmrOverlay3: () => Overlay3_default,
    SvgNmrOverlay3Aligned: () => Overlay3Aligned_default,
    SvgNmrPeakPicking: () => PeakPicking_default,
    SvgNmrPeakPicking2: () => PeakPicking2_default,
    SvgNmrPeaks: () => Peaks_default,
    SvgNmrPhaseCorr: () => PhaseCorr_default,
    SvgNmrPhaseCorrection: () => PhaseCorrection_default,
    SvgNmrRangePicking: () => RangePicking_default,
    SvgNmrRealImag: () => RealImag_default,
    SvgNmrReference: () => Reference_default,
    SvgNmrResetScale: () => ResetScale_default,
    SvgNmrSameTop: () => SameTop_default,
    SvgNmrSearch: () => Search_default,
    SvgNmrSearchq: () => Searchq_default,
    SvgNmrSignals: () => Signals_default,
    SvgNmrSimulator: () => Simulator_default,
    SvgNmrSimulatormicro: () => Simulatormicro_default,
    SvgNmrSum: () => Sum_default2,
    SvgNmrTools: () => Tools_default,
    SvgNmrTree: () => Tree_default,
    SvgNmrZeroFilling: () => ZeroFilling_default,
    SvgPeriodicCarbon: () => Carbon_default,
    SvgPeriodicElectronegativity: () => Electronegativity_default,
    SvgPeriodicElectronicBoron: () => ElectronicBoron_default,
    SvgPeriodicElectronicLithium: () => ElectronicLithium_default,
    SvgPeriodicIsotopeCarbon: () => IsotopeCarbon_default,
    SvgPeriodicIsotopeFluor: () => IsotopeFluor_default,
    SvgPeriodicIsotopeHydrogen: () => IsotopeHydrogen_default,
    SvgPeriodicMass: () => Mass_default,
    SvgPeriodicOxidationState: () => OxidationState_default,
    SvgRamanAssignment: () => Assignment_default7,
    SvgRamanOverlay: () => Overlay_default4,
    SvgReactionEquilibrium: () => Equilibrium_default,
    SvgReactionSearch: () => Search_default2,
    SvgSafetyToxic: () => Toxic_default2,
    SvgSpectraAnalyse: () => Analyse_default,
    SvgSpectraCompare: () => Compare_default,
    SvgSpectraDeconvolution: () => Deconvolution_default,
    SvgSpectraPca: () => Pca_default,
    SvgSpectraPhylogram: () => Phylogram_default,
    SvgStructure3DModel: () => DModel_default,
    SvgStructure3DModelText: () => DModelText_default,
    SvgStructureAbundance: () => Abundance_default,
    SvgStructureAtomistic: () => Atomistic_default,
    SvgStructureAtomistic2: () => Atomistic2_default,
    SvgStructureAtomisticElectron: () => AtomisticElectron_default,
    SvgStructureAtomisticNeutron: () => AtomisticNeutron_default,
    SvgStructureBohr: () => Bohr_default,
    SvgStructureConformers: () => Conformers_default,
    SvgStructureDiastereotopic: () => Diastereotopic_default,
    SvgStructureLcao: () => Lcao_default,
    SvgStructureLewisNitrogen: () => LewisNitrogen_default,
    SvgStructureLewisOxygen: () => LewisOxygen_default,
    SvgStructureMagnifier5: () => Magnifier5_default,
    SvgStructureOrbital: () => Orbital_default,
    SvgStructureSearch: () => Search_default3,
    SvgStructureSearchLipinski: () => SearchLipinski_default,
    SvgStructureSo4: () => So4_default,
    SvgStructureStructuralIsomers: () => StructuralIsomers_default,
    SvgStructureStructuralIsomers2: () => StructuralIsomers2_default,
    SvgStructureUnsaturationFormula: () => UnsaturationFormula_default,
    SvgStructureUnsaturationStructure: () => UnsaturationStructure_default,
    SvgStructureVirtual: () => Virtual_default,
    SvgTgaAssignment: () => Assignment_default8,
    SvgXrayRequest: () => Request_default4
  });

  // build/lib-react-tsx/bio/Dna.tsx
  var React = __toModule(require_react());
  function SvgDna({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React.createElement("path", {
      d: "M740.423 738.693c-6.813-376.799-517.565-328.038-483.986-656.07M254.734 738.693C261.547 361.894 772.3 410.655 738.72 82.623",
      fill: "none",
      strokeWidth: 73.439,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React.createElement("path", {
      d: "M716.09 131.875H364.233M694.92 203.54H419.47M675.21 275.453H484.926M279.067 689.189h351.857M299.994 617.523h275.694M319.704 545.858h190.285",
      fill: "none",
      strokeWidth: 24.48,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Dna_default = SvgDna;

  // build/lib-react-tsx/bio/Eppendorf.tsx
  var React2 = __toModule(require_react());
  function SvgEppendorf({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React2.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React2.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React2.createElement("path", {
      d: "M405.1 65.978h192.897V480.29c0 53.27-28.518 249.475-93.31 249.475-65.82 0-99.586-189.474-99.586-249.475z",
      fill: "none",
      strokeWidth: 37.188,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M521.797 170.81H405.101M521.797 294.579H405.101M521.797 418.347H405.101",
      fill: "none",
      strokeWidth: 37.302,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M595.374 501.62c-8.556 90.23-37.302 228.145-90.688 228.145-54.755 0-87.265-136.316-96.733-228.146z",
      fill: "none",
      strokeWidth: 37.188,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M595.374 501.62c-8.556 90.23-37.302 228.145-90.688 228.145-54.755 0-87.265-136.316-96.733-228.146z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M585.563 92.67H367.457M629.481 61.757H350.916",
      fill: "none",
      strokeWidth: 37.302,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React2.createElement("path", {
      d: "M605.412 61.643h51.56c11.636 0 21.218 10.837 21.218 23.955 0 14.031-8.213 25.666-21.218 25.666h-51.56c-2.623 0-5.133-.455-7.529-1.482V63.24c2.396-1.027 4.906-1.597 7.53-1.597z",
      fill: "none",
      strokeWidth: 37.188,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Eppendorf_default = SvgEppendorf;

  // build/lib-react-tsx/bio/FlowCytometry.tsx
  var React3 = __toModule(require_react());
  function SvgFlowCytometry({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React3.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React3.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React3.createElement("path", {
      d: "M300.99 463.374l427.984-7.345s-13.282 19.095 0 51.41c13.282 32.313 44.274 51.408 44.274 51.408l-472.257-7.344s17.71-5.875 17.71-44.065-17.71-44.064-17.71-44.064z",
      fillOpacity: 0.406,
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("path", {
      d: "M37.313 441.341c3.548-29.657 6.888-41.127 6.888-41.127l153.21-.46 103.58 63.62s-16.234 2.937-16.234 44.064 16.234 44.065 16.234 44.065l-103.643 64.774-148.72-.146s-7.38-14.688-11.315-57.284c-3.935-42.596-1.967-58.753-1.967-58.753s-2.952-17.626 1.967-58.753z",
      fill: "none",
      strokeWidth: 4.543
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 301.164,
      cy: 506.835,
      rx: 17.403,
      ry: 42.868,
      strokeWidth: 5.331,
      fill: "none"
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 300.97,
      cy: 507.349,
      rx: 4.364,
      ry: 10.62,
      strokeWidth: 1.329
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 37.574,
      cy: 548.819,
      rx: 92.25,
      ry: 84.774,
      transform: "matrix(.58553 -.81065 .81327 .58188 0 0)",
      fillOpacity: 0.012,
      strokeWidth: 4.965
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 400.152,
      cy: 369.502,
      rx: 18.443,
      ry: 33.057,
      transform: "rotate(-13.36) skewX(.123)",
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: -628.913,
      cy: 431.468,
      rx: 92.219,
      ry: 84.802,
      transform: "matrix(-.52265 -.85255 .85474 -.51905 0 0)",
      strokeWidth: 4.965
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: -177.303,
      cy: 745.862,
      rx: 18.363,
      ry: 33.201,
      transform: "rotate(-80.478) skewX(.088)",
      fill: "#fff",
      stroke: "#fff",
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: -783.104,
      cy: 686.763,
      rx: 92.118,
      ry: 84.895,
      transform: "rotate(-101.564) skewX(-.106)",
      fillOpacity: 0.506,
      strokeWidth: 4.965
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: -132.915,
      cy: 1013.149,
      rx: 18.381,
      ry: 33.168,
      transform: "matrix(.492 -.8706 .87258 .48847 0 0)",
      fillOpacity: 0.506,
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 799.731,
      cy: -515.834,
      rx: 92.103,
      ry: 84.909,
      transform: "rotate(93.924) skewX(.037)",
      fillOpacity: 0.012,
      strokeWidth: 4.965
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 281.522,
      cy: -933.526,
      rx: 18.404,
      ry: 33.128,
      transform: "matrix(-.70598 .70824 -.71157 -.70261 0 0)",
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 815.824,
      cy: 623.128,
      rx: 92.523,
      ry: 84.523,
      transform: "rotate(10.619) skewX(-.099)",
      fillOpacity: 0.012,
      strokeWidth: 4.965
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 1052.179,
      cy: -100.988,
      rx: 18.394,
      ry: 33.145,
      transform: "matrix(.62384 .78155 -.78443 .62022 0 0)",
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 941.357,
      cy: 132.648,
      rx: 92.473,
      ry: 84.569,
      transform: "matrix(.92315 .38444 -.38755 .92185 0 0)",
      strokeWidth: 4.965
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 808.524,
      cy: -535.029,
      rx: 18.378,
      ry: 33.175,
      transform: "matrix(.44676 .89466 -.89634 .44337 0 0)",
      fill: "#fff",
      stroke: "#fff",
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 106.312,
      cy: 818.108,
      rx: 92.423,
      ry: 84.615,
      transform: "matrix(.85875 -.5124 .51599 .8566 0 0)",
      fillOpacity: 0.506,
      strokeWidth: 4.965
    }), /* @__PURE__ */ React3.createElement("ellipse", {
      cx: 629.645,
      cy: 528.873,
      rx: 18.445,
      ry: 33.053,
      transform: "rotate(9.878) skewX(-.092)",
      fillOpacity: 0.506,
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("path", {
      d: "M352.644 52.103v411.27M197.684 400.214S160.79 419.31 160.79 507.438c0 88.13 36.895 108.693 36.895 108.693M352.644 551.503v396.583",
      fill: "none",
      strokeWidth: 5.565
    }), /* @__PURE__ */ React3.createElement("path", {
      d: "M883.934 426.653l60.508-44.065s11.806 41.127 13.282 102.818c1.476 61.69-7.38 117.506-7.38 117.506l-73.79-44.065s32.468-39.658 30.992-73.441c-1.475-33.783-23.612-58.753-23.612-58.753z",
      fillOpacity: 0.406,
      strokeWidth: 5.565
    }));
  }
  var FlowCytometry_default = SvgFlowCytometry;

  // build/lib-react-tsx/bio/IsoelectricPoint.tsx
  var React4 = __toModule(require_react());
  function SvgIsoelectricPoint({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React4.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React4.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React4.createElement("path", {
      d: "M52 330.1c41.584-2.198 64.755 18.303 95.99 52.087 48.583 52.551 59.88 34.243 151.616 54.681C412.72 462.07 493.282 547.111 542.454 632.256c24.59 42.578 34.115 39.736 67.116 3.409C727.599 505.73 800.05 469.199 952 454.837",
      className: "fil0 str0",
      clipRule: "evenodd",
      fill: "none",
      strokeWidth: 29.709,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }));
  }
  var IsoelectricPoint_default = SvgIsoelectricPoint;

  // build/lib-react-tsx/bio/Microscopy.tsx
  var React5 = __toModule(require_react());
  function SvgMicroscopy({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React5.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React5.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React5.createElement("ellipse", {
      cx: 724.723,
      cy: 334.664,
      rx: 73.05,
      ry: 67.343,
      fill: "none",
      stroke: "#0e0000",
      strokeWidth: 24.49
    }), /* @__PURE__ */ React5.createElement("path", {
      d: "M797.306 316.424s139.391 51.766 140.95 153.108c1.557 101.342-.141 475.439-.141 475.439l-873.625-.113.25-56.421 126.96 1.732.464-39.752-38.281-.646-.982-30.998 197.062-1.96-.688 30.63-41.163.56 1.056 43.96 569.815-2.703s-.584-346.789-2.218-414.41C875.13 407.226 798.9 361.571 798.9 361.571z",
      strokeWidth: 27.461
    }), /* @__PURE__ */ React5.createElement("path", {
      d: "M367.929 672.04c0 60.018-54.044 108.672-120.71 108.672-66.667 0-120.71-48.654-120.71-108.672 0-60.017 54.043-108.671 120.71-108.671 15.668 0 46.863-77.125 46.863-77.125 1.406.5-44.336-18.657-44.336-18.657l155.937 60.97-45.991-18.037s-31.984 80.116-25.617 86.054c20.96 19.547 33.854 46.151 33.854 75.466z",
      strokeWidth: 26.562,
      fill: "none"
    }), /* @__PURE__ */ React5.createElement("path", {
      d: "M338.423 707.914c-19.403 42.83-76.67 63.894-127.91 47.046-51.24-16.848-77.049-65.227-57.646-108.057 9.215-20.34 37.188 24.574 58.745 15.717 46.526-19.114 43.185 17.391 70.09 26.238 51.24 16.847 76.124-23.775 56.721 19.056z",
      fillOpacity: 0.99,
      stroke: "none"
    }), /* @__PURE__ */ React5.createElement("path", {
      transform: "matrix(.87765 -.4793 .54039 .84141 0 0)",
      fillOpacity: 0.022,
      strokeWidth: 34.345,
      d: "M251.723 491.46h346.926v135.624H251.723z"
    }), /* @__PURE__ */ React5.createElement("ellipse", {
      cx: 724.084,
      cy: 333.435,
      rx: 60.875,
      ry: 56.119,
      fill: "#fff",
      stroke: "none"
    }), /* @__PURE__ */ React5.createElement("path", {
      stroke: "none",
      d: "M470.628 344.225l23.062-11.822 32.941 54.614-23.063 11.822zM835.11 53.435L949.879 235.46l-53.205 28.51L781.906 81.943z"
    }));
  }
  var Microscopy_default = SvgMicroscopy;

  // build/lib-react-tsx/bio/PeptideCharge.tsx
  var React6 = __toModule(require_react());
  function SvgPeptideCharge({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React6.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React6.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React6.createElement("path", {
      d: "M235.988 69.112c-73.491 0-133.067 59.577-133.067 133.07 0 73.49 59.576 133.067 133.067 133.067 73.493 0 133.069-59.577 133.069-133.068 0-73.492-59.576-133.069-133.069-133.069zM181.89 202.184h108.19M235.993 148.081v108.191M761.589 69.112c-73.491 0-133.068 59.577-133.068 133.07 0 73.49 59.577 133.067 133.068 133.067 73.492 0 133.069-59.577 133.069-133.068 0-73.492-59.577-133.069-133.07-133.069zM707.502 202.184h108.176",
      className: "fil0 str0",
      fill: "none",
      strokeWidth: 27.29000375,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      clipRule: "evenodd",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React6.createElement("path", {
      d: "M236.2 558.724c30.793 0 55.91-25.113 55.91-55.906 0-30.795-25.117-55.91-55.91-55.91-30.79 0-55.919 25.115-55.919 55.91 0 30.793 25.128 55.906 55.92 55.906zM509.769 863.956L387.356 812.28M445.422 461.6c30.792 0 55.91-25.114 55.91-55.907 0-30.795-25.118-55.908-55.91-55.908-30.792 0-55.918 25.113-55.918 55.908 0 30.793 25.126 55.906 55.918 55.906zM527.215 671.938c30.792 0 55.91-25.113 55.91-55.904 0-30.797-25.118-55.91-55.91-55.91-30.793 0-55.918 25.114-55.918 55.91 0 30.79 25.125 55.904 55.918 55.904zM340.948 826.44c30.792 0 55.912-25.114 55.912-55.906 0-30.795-25.12-55.909-55.912-55.909-30.793 0-55.918 25.114-55.918 55.909 0 30.792 25.125 55.906 55.918 55.906zM567.645 930.402c30.793 0 55.909-25.114 55.909-55.906 0-30.797-25.116-55.91-55.909-55.91-30.792 0-55.918 25.114-55.918 55.91 0 30.792 25.126 55.906 55.918 55.906zM514.812 560.03l-44.08-105.025M484.001 655.49l-89.45 80.533M394.859 429.714L290.51 476.453M779.902 812c30.79 0 55.908-25.114 55.908-55.906 0-30.795-25.117-55.908-55.908-55.908-30.793 0-55.92 25.113-55.92 55.908 0 30.793 25.127 55.906 55.92 55.906zM719.256 582.416c30.793 0 55.913-25.113 55.913-55.905 0-30.797-25.12-55.91-55.913-55.91-30.792 0-55.918 25.113-55.918 55.91 0 30.792 25.126 55.905 55.918 55.905zM726.121 786.037l-101.965 56.286M765.603 699.923l-31.795-119.507",
      className: "fil1 str0",
      fill: "none",
      strokeWidth: 27.29000375,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      clipRule: "evenodd",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }));
  }
  var PeptideCharge_default = SvgPeptideCharge;

  // build/lib-react-tsx/bio/Petri.tsx
  var React7 = __toModule(require_react());
  function SvgPetri({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React7.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React7.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React7.createElement("path", {
      d: "M389.728 447.682v63.077h0v1.935c0 76.629 111.311 138.898 248.76 138.898 137.445 0 248.915-62.27 248.915-138.898 0-.644 0-1.29-.163-1.935h.163v-63.077H389.728z",
      fill: "none",
      strokeWidth: 48.396,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M389.728 447.682v65.012c0 76.629 111.311 138.898 248.76 138.898 137.445 0 248.915-62.27 248.915-138.898 0-.644 0-1.29-.163-1.935h.163v-63.077H389.728z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M638.487 285.716c-137.448 0-248.76 71.788-248.76 160.191 0 88.566 111.312 160.353 248.76 160.353 137.446 0 248.916-71.787 248.916-160.353 0-88.403-111.47-160.191-248.916-160.191z",
      fill: "none",
      strokeWidth: 48.396,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M638.487 285.716c-137.448 0-248.76 71.788-248.76 160.191 0 88.566 111.312 160.353 248.76 160.353 137.446 0 248.916-71.787 248.916-160.353 0-88.403-111.47-160.191-248.916-160.191z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M567.017 362.182c-10.324-2.742-20.968 3.387-23.713 13.712-2.74 10.325 3.39 20.972 13.714 23.876 10.324 2.742 20.974-3.388 23.714-13.712 2.902-10.486-3.386-21.134-13.715-23.876zM756.088 361.698c-10.487-2.904-21.131 3.226-23.876 13.712-2.74 10.325 3.39 20.972 13.714 23.714 10.482 2.743 21.132-3.387 23.876-13.712 2.74-10.324-3.39-20.971-13.714-23.714zM691.561 440.584c-10.324-2.743-20.973 3.388-23.876 13.712-2.744 10.486 3.386 21.133 13.873 23.876 10.324 2.742 20.973-3.388 23.713-13.712 2.745-10.325-3.386-20.972-13.71-23.876zM507.17 477.043c-10.325-2.743-20.972 3.387-23.715 13.712-2.904 10.486 3.227 21.133 13.712 23.875 10.325 2.743 20.975-3.387 23.715-13.712 2.744-10.486-3.386-21.133-13.712-23.875z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M447.804 450.908c19.358-20.003 42.427-26.779 69.85-18.713M738.505 444.133c10.97 25.489 30.164 40.169 58.559 42.428M692.527 400.415c-19.199 19.842-42.267 26.78-69.69 18.713M577.346 551.895c19.195-20.003 42.262-26.779 69.691-18.713M592.026 447.682c-10.486-2.742-21.135 3.388-23.876 13.874-2.744 10.324 3.386 20.971 13.71 23.714 10.324 2.742 20.974-3.388 23.876-13.713 2.745-10.324-3.385-20.971-13.71-23.875zM823.842 409.288c-10.324-2.743-20.973 3.387-23.713 13.712-2.903 10.486 3.386 21.133 13.71 23.876 10.328 2.742 20.973-3.388 23.718-13.713 2.74-10.324-3.39-20.972-13.715-23.875zM663.004 339.597c-10.324-2.742-20.969 3.388-23.713 13.712-2.74 10.325 3.39 20.972 13.714 23.876 10.324 2.742 20.969-3.388 23.876-13.712 2.74-10.487-3.39-21.133-13.877-23.876zM715.757 506.08c-10.324-2.742-20.973 3.388-23.875 13.713-2.74 10.324 3.39 20.972 13.714 23.875 10.482 2.742 21.131-3.388 23.876-13.874 2.74-10.324-3.39-20.971-13.715-23.714z",
      fill: "none",
      strokeWidth: 16.132,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M116.611 423.645l19.682 36.136h0c.161.485.323.806.644 1.13 23.876 44.04 141.157 26.456 261.824-39.363 120.83-65.658 199.233-154.546 175.194-198.586-.163-.323-.32-.645-.646-1.13h.163l-19.844-36.135C409.086 264.26 261.155 344.92 116.61 423.646z",
      fill: "none",
      strokeWidth: 48.396,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M116.611 423.645l19.682 36.136c.161.485.323.806.644 1.13 23.876 44.04 141.157 26.456 261.824-39.363 120.83-65.658 199.233-154.546 175.194-198.586-.163-.323-.32-.645-.646-1.13h.163l-19.844-36.135C409.086 264.26 261.155 344.92 116.61 423.646z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M292.29 225.865C171.46 291.523 91.607 377.83 113.869 418.483c22.1 40.814 137.93 20.488 258.598-45.17 120.83-65.657 200.68-151.964 178.42-192.778-22.1-40.653-137.929-20.488-258.597 45.33z",
      fill: "none",
      strokeWidth: 48.396,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React7.createElement("path", {
      d: "M292.29 225.865C171.46 291.523 91.607 377.83 113.869 418.483c22.1 40.814 137.93 20.488 258.598-45.17 120.83-65.657 200.68-151.964 178.42-192.778-22.1-40.653-137.929-20.488-258.597 45.33z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Petri_default = SvgPetri;

  // build/lib-react-tsx/bio/Protein.tsx
  var React8 = __toModule(require_react());
  function SvgProtein({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React8.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React8.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React8.createElement("path", {
      d: "M15.49 11.851l.456.587-.014.013-.014.012-.014.011-.015.01-.015.01-.016.008-.015.007-.016.007-.016.005-.016.005-.017.004-.016.003-.017.002h-.049l-.017-.002-.016-.002-.017-.004-.016-.004-.016-.005-.015-.006-.016-.007-.015-.008-.015-.008-.015-.01-.014-.01-.014-.012-.014-.012-.013-.013-.012-.014-.012-.015-.012-.015-.01-.016-.01-.016-.01-.017-.007-.017-.008-.017-.006-.018-.006-.018-.005-.018-.004-.019-.003-.018-.003-.019-.001-.018-.001-.02v-.037l.002-.018.002-.019.003-.018.004-.019.004-.018.006-.018.006-.017.007-.018.007-.017.009-.016.009-.016.01-.016.01-.016.012-.014.013-.015zm.697.346l-.241.241-.457-.587.242-.24zm1.615-7.582l.398-.639v0l.147.138.125.16.106.18.086.194.068.206.052.218.037.229.023.238.01.248-.001.256-.014.264-.026.271-.036.278-.048.284-.058.288-.069.293-.08.296-.089.298-.099.3-.11.3-.118.3-.129.298-.138.295-.147.293-.157.288-.166.282-.174.276-.184.27-.193.26-.202.25-.21.241-.219.23-.456-.588.196-.204.189-.216.182-.227.175-.237.168-.246.16-.253.153-.26.144-.265.136-.27.128-.274.119-.276.11-.277.1-.277.092-.276.082-.274.073-.271.063-.267.052-.26.043-.255.032-.246.023-.237.012-.227.001-.214-.008-.2-.018-.187-.028-.17-.036-.152-.044-.133-.05-.114-.055-.094-.06-.076-.063-.06v0zm-4.785 4.568l-.669.193v0l-.059-.342-.024-.34.01-.334.039-.328.069-.32.095-.311.118-.301.14-.291.16-.28.177-.27.193-.258.207-.247.219-.235.23-.224.238-.21.245-.199.252-.185.256-.171.258-.157.26-.143.26-.127.258-.111.255-.095.251-.078.246-.06.24-.04.232-.021h.225l.217.025.207.052.197.083.181.118-.398.639-.075-.049-.098-.04-.121-.03-.144-.017h-.163l-.18.016-.195.033-.207.05-.216.067-.223.083-.23.1-.231.113-.234.128-.233.142-.231.154-.227.167-.221.179-.214.189-.204.199-.194.208-.18.216-.167.223-.15.229-.134.234-.115.238-.095.241-.075.244-.053.246-.03.248-.007.249.018.252.044.256zm-.097 4.508l.005-.782v0l.188-.006.156-.02.123-.03.091-.035.063-.038.04-.035.024-.033.017-.036.013-.047.008-.063v-.083l-.01-.1-.022-.115-.032-.128-.043-.138-.053-.147-.062-.152-.068-.158-.075-.161-.079-.164-.082-.165-.085-.165-.085-.164-.085-.163-.084-.16-.08-.158-.076-.153-.07-.15-.065-.145-.058-.142-.048-.14-.038-.14.67-.192.02.073.032.093.044.11.054.122.064.134.07.143.078.15.081.158.085.162.087.167.088.171.086.173.085.175.082.177.077.177.07.178.065.177.055.178.045.177.033.18.018.18v.182l-.024.184-.052.182-.084.172-.115.153-.142.127-.163.098-.181.071-.199.049-.218.027-.239.008v0zm-.85-9.64l.667.199v0l-.048.155-.067.164-.085.191-.103.22-.118.249-.132.276-.142.3-.15.322-.156.342-.157.357-.156.372-.153.381-.147.39-.137.393-.126.395-.11.393-.093.388-.073.379-.05.366-.025.35.002.33.03.307.057.281.087.254.118.228.151.204.192.182.238.16.293.134.352.103.415.067.481.026-.005.782-.54-.03-.485-.078-.432-.127-.382-.175-.332-.222-.281-.267-.229-.307-.175-.34-.125-.363-.08-.38-.037-.395-.002-.404.029-.412.057-.417.08-.422.102-.423.119-.423.133-.42.144-.414.154-.407.159-.397.162-.384.161-.368.16-.35.152-.328.144-.304.132-.277.117-.246.1-.211.077-.172.05-.124.018-.053v0zm-8.958.816l-.521-.512v0l.276-.328.304-.302.327-.274.347-.249.366-.223.382-.2.396-.177.406-.155.416-.134.422-.113.427-.093.429-.074.429-.055.427-.037.422-.019.416-.002.407.015.396.03.384.048.367.062.351.077.332.093.31.108.288.124.264.14.238.159.21.18.179.206.14.236.093.268.03.29-.035.294-.667-.199.012-.104-.01-.09-.032-.092-.063-.105-.1-.115-.14-.118-.176-.118-.211-.112-.243-.104-.27-.094-.297-.083-.32-.07-.338-.058-.356-.043-.37-.03-.382-.013-.391.002-.398.018-.402.035-.403.051-.403.07-.4.087-.392.105-.385.124-.374.142-.36.161-.346.18-.326.2-.306.22-.284.237-.259.257-.233.276v0zm3.164 2.509l.095.774v0l-.249.032-.246.016-.242.001-.239-.012-.234-.025-.229-.038-.223-.05-.217-.062-.211-.072-.204-.083-.196-.093-.189-.102-.18-.11-.171-.12-.162-.126-.152-.135-.141-.142-.13-.148-.12-.156-.106-.162-.093-.169-.08-.174-.064-.181-.047-.186-.03-.19-.01-.194.01-.195.033-.194.053-.191.076-.186.096-.178.117-.17.521.512-.07.104-.056.101-.04.1-.028.099-.016.098-.005.1.005.102.016.105.028.108.04.11.05.113.064.114.075.114.086.114.099.112.109.11.12.105.13.102.138.097.148.09.157.085.164.078.171.07.178.06.185.052.19.043.194.032.2.022.203.01h.207l.21-.015.212-.026v0zm10.683.146l-.575.432v0l-.032-.038-.078-.06-.127-.069-.172-.066-.211-.06-.247-.052-.277-.043-.304-.034-.33-.025-.35-.016-.368-.008-.384-.001-.398.006-.408.012-.416.019-.422.023-.424.028-.426.033-.423.035-.42.04-.412.04-.403.043-.391.044-.377.044-.36.044-.342.044-.32.042-.296.04-.27.038-.24.035-.21.031-.175.027-.095-.774.179-.028.212-.031.243-.035.272-.039.299-.04.322-.043.345-.044.363-.045.38-.044.395-.044.407-.044.416-.04.424-.04.428-.036.431-.033.431-.029.429-.024.424-.018.416-.013.408-.006h.396l.382.01.366.017.348.026.328.037.306.047.284.06.26.074.235.091.211.114.188.149.155.197v0zm-11.171 2.81l-.381-.651v0l.271-.17.308-.136.34-.11.372-.089.401-.07.428-.056.453-.043.473-.03.49-.022.504-.014.515-.007.521-.003h1.048l.519.002.51-.001.499-.005.482-.01.462-.015.438-.025.41-.033.375-.045.339-.056.294-.07.245-.08.188-.087.124-.086.061-.069.02-.043.003-.056-.028-.115-.088-.183.575-.432.151.317.076.33-.021.336-.125.3-.197.23-.24.169-.273.129-.307.1-.34.08-.37.062-.402.047-.428.036-.452.025-.473.016-.49.01-.504.005H11.53l-.523-.002h-.522l-.517.003-.508.008-.495.013-.48.021-.457.03-.433.04-.404.053-.37.065-.33.08-.287.092-.236.104-.18.112v0zm1.156-2.797l.293-.708v0l1.06.587.9.549.748.51.608.477.478.447.358.424.248.413.134.42.004.424-.135.382-.235.3-.297.226-.345.172-.387.131-.421.096-.45.065-.472.036-.484.009-.49-.018-.485-.042-.474-.067-.454-.09-.426-.114-.39-.138-.35-.165-.301-.197-.25-.247-.175-.326-.041-.397.118-.383.237-.33.339-.3.38.652-.244.216-.119.16-.026.08.005.036.046.077.125.12.21.137.28.131.337.12.383.102.418.083.44.062.455.04.458.016.45-.008.433-.033.406-.059.367-.083.316-.107.253-.125.177-.133.1-.122.039-.106-.002-.131-.067-.205-.17-.283-.292-.345-.426-.397-.567-.445-.716-.488-.873-.533-1.039-.575v0zm-2.14-3.4l.643.282-.027.094-.018.09-.009.088-.001.087.006.086.014.087.021.088.03.09.035.09.043.09.05.091.057.091.063.091.069.09.073.089.078.087.082.085.085.083.087.08.09.078.09.075.09.072.09.068.09.065.088.061.086.058.082.054.08.049.074.045.07.04.065.037.057.03-.293.709-.067-.037-.073-.04-.079-.046-.083-.05-.088-.056-.093-.06-.095-.063-.098-.069-.1-.073-.103-.077-.103-.082-.103-.085-.103-.09-.102-.094-.1-.099-.099-.102-.096-.107-.092-.112-.088-.116-.084-.12-.079-.126-.072-.131-.064-.137-.057-.141-.047-.147-.037-.153-.025-.158-.012-.161.002-.166.017-.167.033-.168zm.643.282l-.644-.282.007-.018.008-.018.008-.018.009-.016.01-.017.01-.015.01-.015.012-.014.012-.013.012-.013.013-.012.014-.01.014-.011.014-.01.014-.008.015-.008.016-.008.015-.006.016-.005.016-.005.017-.004.016-.003.017-.002h.016l.017-.001h.017l.017.003.017.002.017.004.017.005.017.005.017.007.016.008.016.009.015.009.015.01.014.01.014.012.013.013.012.013.012.013.011.014.01.015.01.015.01.016.008.016.008.017.007.017.006.017.006.018.005.018.004.018.003.018.003.019.001.019.001.019v.038l-.002.02-.002.018-.004.02-.004.019-.005.019z",
      transform: "matrix(58.61673 0 0 59.70826 -120.089 -16.89)"
    }));
  }
  var Protein_default = SvgProtein;

  // build/lib-react-tsx/bio/Seahorse.tsx
  var React9 = __toModule(require_react());
  function SvgSeahorse({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React9.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React9.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React9.createElement("path", {
      d: "M456.004 719.548c-11.381 22.261-24.085 58.21-11.6 95.902 1.903 5.744 31.48 96.863 121.72 97.09 36.694.091 105.806-30.092 85.418-108.025-1.059-4.047-15.125-41.083-55.24-35.104-40.466 6.03-60.343 54.09-69.442 46.293-10.588-9.072 10.714-68.523 68.91-78.57 76.02-13.123 109.703 24.84 121.263 57.35 10.481 29.471 3.057 61.889.303 69.27-25.324 67.871-83.314 125.204-197.943 123.513-114.723-1.692-227.125-104.538-237.12-195.559-1.508-13.723-4.824-53.624 3.824-89.356 7.766-32.084 21.835-51.574 19.192-61.535-1.266-4.769-2.39-5.057-7.675-5.643-21.858-2.422-75.385 17.817-86.739 15.413 0 0 25.38-31.509 9.59-43.533-15.667-11.93-61.325-13.598-61.325-13.598 11.792-10.467 64.623-18.559 62.273-38.683-2.19-18.75-44.96-15.125-64.817-26.895-4.106-2.434 65.18-6.456 73.075-30.879 5.166-15.978-34.43-44.607-35.48-53.467-.435-3.664 36.685 18.54 72.714 14.076 16.57-2.052 36.49-7.669 57.63-26.342 3.056-2.7 7.38 31.504 19.227 49.898 4.433 6.883 12.5 9.346 18.214 10.026 5.17.616 17.179-1.18 27.745-6.428 6.272-3.116 13.371-6.397 14.58-13.986 1.288-8.1-28.143-28.582-47.431-54.432-14.937-20.019-20.093-44.838-23.544-59.631-5.792-24.823 1.327-54.724 7.197-66.917 39.528-82.105 53.5-67.812 58.07-89.292 2.454-11.54-48.186-32.8-45.631-41.311.81-2.701 30.215-15.518 33.228-27.856 9.826-40.232-10.393-40.186-3.745-42.748 8.821-3.4 16.965 2.67 44.252-8.848 24.968-10.54 6.355-43.663 14.866-44.524 17.893-1.812 20.209 18.288 42.42 18.288 12.53 0 46.449-30.778 59.338-31.11 5.32-.136-3.557 21.049 1.688 21.062 2.34.006 2.78 2.82 7.639 2.454 12.696-.957 29.746-11.534 42.406-11.718 7.268-.106-11 25.294-3.903 25.656 2.172.111 3.447 1.81 5.657 1.92 21.986 1.105 33.829 6.121 52.578 19.71 4.932 3.576 16.257 18.591 23.785 37.26 8.997 22.309 14.52 53.136 23.815 60.402 7.805 6.102 14.244 24.39 29.734 39.047 29.342 27.764 72.219 53.339 85.316 67.688 4.67 5.117 3.55 9.977 1.75 15.493-3.86 11.828-9.226 11.66-35.717 18.874-3.998 1.088-19.319-2.821-33.093-9.177-10.754-4.962-18.182-11.884-34.176-16.007-20.74-5.346-45.561-5.19-64.107-7.385-25.116-2.972-20.671-.813-30.947-2.355-7.197-1.08-34.132-8.06-48.144-23.995-11.835-13.46-11.34-36.715-13.614-33.479-2.326 3.31-37.46 37.353-13.263 61.991 3.795 3.865 8.035 10.352 34.868 25.986 33.273 19.385 96.581 50.902 125.272 80.518 31.34 32.35 37.508 87.178 36.873 106.833-.369 11.413-9.309 29.58-12.95 37.043-3.293 6.75-29.309 38.095-63.182 59.611-32.771 20.816-93.015 35.895-129.511 55.599-52.081 28.117-73.34 58.743-76.09 64.122z",
      fillRule: "evenodd",
      strokeWidth: 1.042
    }));
  }
  var Seahorse_default = SvgSeahorse;

  // build/lib-react-tsx/bio/SearchDna.tsx
  var React10 = __toModule(require_react());
  function SvgSearchDna({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React10.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React10.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React10.createElement("path", {
      strokeMiterlimit: 22.926,
      d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251",
      fill: "none",
      strokeWidth: 46.91,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React10.createElement("path", {
      strokeMiterlimit: 22.926,
      fill: "none",
      strokeWidth: 46.909,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M897.765 890.229l-235.87-315.79-82.569 61.672 235.871 315.791M815.197 951.902c12.543 16.792 36.556 20.275 53.355 7.72M868.553 959.624l21.484-16.054M890.037 943.57c16.795-12.541 20.277-36.542 7.728-53.342"
    }), /* @__PURE__ */ React10.createElement("path", {
      strokeMiterlimit: 22.926,
      d: "M419.367 610.974c-144.301 0-262.007-117.703-262.007-262.009 0-144.317 117.706-262.011 262.007-262.011 144.314 0 262.009 117.694 262.009 262.011.001 144.306-117.693 262.009-262.009 262.009",
      fill: "none",
      strokeWidth: 21.586,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React10.createElement("path", {
      d: "M541.026 505.55C537.81 321.98 296.635 345.736 312.491 185.922M311.687 505.55c3.217-183.571 244.391-159.815 228.535-319.629",
      fill: "none",
      strokeWidth: 35.224,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React10.createElement("path", {
      d: "M529.536 209.916H363.391M519.54 244.83H389.474M510.233 279.866h-89.851M323.177 481.433H489.32M333.058 446.518H463.24M342.365 411.604h89.852",
      fill: "none",
      strokeWidth: 11.741,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var SearchDna_default = SvgSearchDna;

  // build/lib-react-tsx/bio/Unimod.tsx
  var React11 = __toModule(require_react());
  function SvgUnimod({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React11.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React11.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React11.createElement("path", {
      d: "M612.58 150.608h212.953v411.77q0 61.248-19.316 115.9-18.846 54.18-59.834 95.169-40.518 40.517-85.275 57.007-62.19 23.085-149.35 23.085-50.411 0-110.245-7.067-59.363-7.067-99.41-27.796-40.046-21.202-73.496-59.834-32.98-38.633-45.23-79.622-19.787-65.959-19.787-116.841V150.608h212.953v421.665q0 56.536 31.095 88.573 31.566 31.566 87.16 31.566 55.122 0 86.217-31.095 31.566-31.566 31.566-89.044z",
      strokeWidth: 24.122
    }));
  }
  var Unimod_default = SvgUnimod;

  // build/lib-react-tsx/bio/UploadDna.tsx
  var React12 = __toModule(require_react());
  function SvgUploadDna({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React12.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React12.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React12.createElement("path", {
      d: "M740.423 738.693c-6.813-376.799-517.565-328.038-483.986-656.07M254.734 738.693C261.547 361.894 772.3 410.655 738.72 82.623",
      fill: "none",
      strokeWidth: 73.439,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React12.createElement("path", {
      d: "M716.09 131.875H364.233M694.92 203.54H419.47M675.21 275.453H484.926M279.067 689.189h351.857M299.994 617.523h275.694M319.704 545.858h190.285",
      fill: "none",
      strokeWidth: 24.48,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React12.createElement("g", {
      transform: "translate(1031.815 214.854)"
    }, /* @__PURE__ */ React12.createElement("ellipse", {
      ry: 282,
      rx: 274,
      transform: "rotate(.457) skewX(.026)",
      cy: 467.199,
      cx: -311.215,
      fill: "#fff",
      strokeWidth: 0.794
    }), /* @__PURE__ */ React12.createElement("path", {
      d: "M-314.728 241.219c-123.42 0-223.487 100.083-223.487 223.488 0 123.436 100.067 223.48 223.487 223.48S-91.232 588.142-91.232 464.698c-.008-123.397-100.075-223.48-223.496-223.48zm112.913 243.927a24.21 24.21 0 01-17.456 7.39c-6.102 0-12.197-2.282-16.887-6.86l-53.985-52.383v138.152c0 13.421-10.919 24.308-24.316 24.308-13.414 0-24.285-10.887-24.285-24.308V433.293l-53.985 52.382c-9.624 9.324-24.995 9.111-34.358-.52-9.332-9.625-9.111-25.004.52-34.351l95.205-92.339c9.419-9.15 24.38-9.15 33.83 0l95.172 92.339c9.663 9.355 9.892 24.719.545 34.342z",
      strokeWidth: 7.895
    })));
  }
  var UploadDna_default = SvgUploadDna;

  // build/lib-react-tsx/chart/Monitoring.tsx
  var React13 = __toModule(require_react());
  function SvgMonitoring({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React13.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React13.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React13.createElement("path", {
      d: "M323.673 162.97H674.53c44.021 0 79.985 35.964 79.985 79.987v398.97c0 44.021-35.964 79.985-79.985 79.985H323.673c-43.903 0-79.987-35.964-79.987-79.985v-398.97c0-44.023 35.964-79.987 79.987-79.987z",
      fill: "none",
      strokeWidth: 39.211,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React13.createElement("path", {
      d: "M385.857 221.907c22.132 0 40.054-32.836 40.054-73.37 0-40.535-17.922-73.371-40.054-73.371-22.131 0-40.053 32.836-40.053 73.37M612.347 221.907c22.13 0 40.053-32.836 40.053-73.37 0-40.535-17.923-73.371-40.053-73.371-22.013 0-39.936 32.836-39.936 73.37",
      fill: "none",
      strokeWidth: 39.211,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React13.createElement("path", {
      d: "M318.14 438.773h85.519l42.579 73.732 91.654-158.53 47.63 84.798h94.541",
      fill: "none",
      strokeWidth: 34.039,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Monitoring_default = SvgMonitoring;

  // build/lib-react-tsx/chart/Multi.tsx
  var React14 = __toModule(require_react());
  function SvgMulti({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React14.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React14.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React14.createElement("path", {
      d: "M220.443 665.916c0 10.724 8.7 19.544 19.424 19.544 10.843 0 19.542-8.82 19.542-19.544zm0 0V124.09h38.966v541.827zM259.41 124.09c0-10.724-8.699-19.543-19.542-19.543-10.725 0-19.424 8.819-19.424 19.543z",
      stroke: "none"
    }), /* @__PURE__ */ React14.createElement("path", {
      d: "M239.867 97.159l50.048 66.015M189.938 163.174l49.929-66.015",
      fill: "none",
      strokeWidth: 38.847,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React14.createElement("path", {
      d: "M239.867 646.373c-10.725 0-19.424 8.82-19.424 19.543 0 10.844 8.7 19.544 19.424 19.544zm0 0h541.828v39.087H239.867zm541.828 39.087c10.844 0 19.54-8.7 19.54-19.544 0-10.723-8.696-19.543-19.54-19.543z",
      stroke: "none"
    }), /* @__PURE__ */ React14.createElement("path", {
      d: "M808.624 665.916l-65.896 49.928M742.728 615.989l65.896 49.927",
      fill: "none",
      strokeWidth: 38.847,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React14.createElement("path", {
      d: "M273.47 653.285c-1.668 6.316-8.222 10.127-14.538 8.46-6.315-1.787-10.01-8.34-8.34-14.655zm0 0l52.789-194.591-22.88-6.316-52.788 194.712zm41.35-197.809l11.439 3.218c1.668-6.436-2.026-12.988-8.342-14.655-6.315-1.787-12.87 2.024-14.537 8.34zm9.413 7.27L460.91 283.407l-18.828-14.419-136.677 179.338zm127.264-186.607l9.414 7.27c4.051-5.244 2.979-12.632-2.145-16.684-5.243-4.051-12.63-2.979-16.683 2.264zm-8.222 8.46l116.539 114.753 16.566-17.04-116.541-114.633zm124.762 106.173l-8.223 8.58c4.648 4.646 12.154 4.53 16.802-.239 4.529-4.647 4.409-12.154-.236-16.801zm8.223 8.58l113.8-109.39-16.446-17.16-113.68 109.51zm105.577-117.97l8.222 8.699c4.645-4.647 4.885-12.154.357-16.92-4.528-4.768-12.034-4.887-16.802-.359zm-9.77 6.792l30.147 43.256 19.423-13.585-30.147-43.255zm49.57 29.671c3.695 5.363 2.381 12.75-2.981 16.564-5.362 3.694-12.631 2.383-16.442-2.98z",
      stroke: "none"
    }), /* @__PURE__ */ React14.createElement("path", {
      d: "M253.094 462.625c-3.933 5.245-11.32 6.316-16.564 2.385-5.243-3.932-6.315-11.441-2.383-16.683zm0 0l71.139-94.85-18.947-14.3-71.139 94.852zm61.725-102l9.414 7.15a11.946 11.946 0 00-2.264-16.683c-5.243-3.933-12.75-2.86-16.683 2.383zm-9.175 7.507l136.44 168.376 18.35-15.015-136.44-168.376zm145.615 160.867l-9.176 7.509c4.171 5.122 11.56 5.839 16.683 1.667 5.124-4.051 5.839-11.557 1.668-16.682zm11.44 3.217l87.465-313.513-22.761-6.434L439.82 525.78zm76.144-316.73l11.32 3.217c1.788-6.434-1.907-12.988-8.222-14.776-6.196-1.787-12.751 1.907-14.538 8.342zm-10.607 5.362l108.558 211.273 20.97-10.843L549.33 210.004zM647.278 426.64l-10.604 5.481c3.098 5.84 10.247 8.223 15.969 5.126 5.839-2.982 8.103-10.13 5.122-16.09zm-.593 11.917l64.702 3.098 1.074-23.715-64.706-3.098zm65.776-20.617a11.94 11.94 0 0111.32 12.394c-.356 6.552-5.838 11.677-12.394 11.32zM717.942 508.982c5.6 3.334 7.506 10.603 4.172 16.205-3.338 5.719-10.487 7.626-16.206 4.288zm0 0L611.89 446.42l-12.034 20.377 106.053 62.678zM605.93 456.67l5.959-10.367c-5.602-3.338-12.871-1.43-16.206 4.288-3.338 5.602-1.43 12.988 4.172 16.326zm-9.177-7.51L451.147 590.562l18.35 15.015 145.61-141.52zM460.32 598.07l-9.173-7.509c-4.172 5.125-3.338 12.631 1.667 16.683 5.125 4.171 12.631 3.458 16.803-1.668zm-.236-11.917l-93.906 4.214.715 23.715 93.784-4.097zm-93.548 16.011l-.358-11.797c-6.554.12-11.678 5.602-11.559 12.274.239 6.556 5.72 11.677 12.274 11.44zm8.46-8.223l-42.898-44.565-17.04 16.562 43.017 44.569zm-51.359-36.222l8.461-8.343c-4.528-4.765-12.035-4.885-16.802-.237-4.647 4.529-4.766 12.155-.239 16.8zm-9.77-6.793L236.53 664.723l19.542 13.348 77.336-113.68zm-57.794 127.145c-3.694 5.482-11.082 6.912-16.444 3.097-5.481-3.694-6.792-11.08-3.098-16.445z",
      stroke: "none"
    }));
  }
  var Multi_default = SvgMulti;

  // build/lib-react-tsx/chart/Multi2.tsx
  var React15 = __toModule(require_react());
  function SvgMulti2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React15.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React15.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React15.createElement("path", {
      d: "M220.444 665.913c0 10.727 8.698 19.424 19.542 19.424 10.724 0 19.423-8.697 19.423-19.424zm0 0V124.087h38.965v541.826zm38.965-541.826c0-10.844-8.699-19.544-19.423-19.544a19.479 19.479 0 00-19.542 19.544z",
      stroke: "none"
    }), /* @__PURE__ */ React15.createElement("path", {
      d: "M239.986 97.158l49.929 66.013M189.938 163.17l50.048-66.012",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React15.createElement("path", {
      d: "M239.986 646.373a19.476 19.476 0 00-19.542 19.54c0 10.727 8.698 19.424 19.542 19.424zm0 0h541.828v38.964H239.986zm541.828 38.964c10.724 0 19.423-8.697 19.423-19.424 0-10.844-8.7-19.54-19.423-19.54z",
      stroke: "none"
    }), /* @__PURE__ */ React15.createElement("path", {
      d: "M808.623 665.913l-65.896 49.93M742.727 615.986l65.896 49.927",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React15.createElement("path", {
      d: "M251.783 514.937a11.747 11.747 0 01-11.797-11.798c0-6.552 5.243-11.917 11.797-11.917zm0 0l84.366.236v-23.711l-84.366-.24zm84.366-11.678v11.915c6.554 0 11.797-5.242 11.797-11.915 0-6.555-5.243-11.917-11.797-11.917zm9.414 7.27l136.678-179.34-18.828-14.418-136.677 179.34zM472.827 323.92l9.414 7.27c4.051-5.242 2.979-12.752-2.145-16.683-5.243-4.052-12.63-2.978-16.683 2.144zm-9.533 6.913l116.54 162.296 19.186-13.821L482.48 317.01zM589.367 486.22l-9.534 7.03c3.815 5.361 11.201 6.552 16.566 2.62 5.242-3.811 6.432-11.2 2.621-16.562zm0 11.914l71.378.718.236-23.835-71.495-.594zm71.498-11.2l-.12 11.917c6.552.118 11.917-5.245 12.034-11.797 0-6.556-5.242-11.918-11.798-12.038zm-6.555 9.89l72.331 48.737 13.228-19.78-72.452-48.737zm85.56 28.957c5.361 3.694 6.792 11.08 3.214 16.442a11.895 11.895 0 01-16.443 3.338z",
      stroke: "none"
    }), /* @__PURE__ */ React15.createElement("path", {
      d: "M260.6 463.459c-4.289 4.885-11.796 5.362-16.682.953-4.885-4.291-5.243-11.797-.953-16.682zm0 0l84.367-94.853-17.636-15.73-84.366 94.854zm75.55-102.716l8.817 7.983c4.41-4.885 3.932-12.511-.953-16.923-4.886-4.288-12.393-3.931-16.683.954zm-9.176 7.506l136.44 168.376 18.35-15.016-136.44-168.375zm145.615 160.866l-9.176 7.51c4.171 5.125 11.56 5.838 16.683 1.667 5.124-4.172 5.839-11.678 1.668-16.683zm11.44 3.218L571.494 218.7l-22.761-6.316-87.583 313.517zm76.144-316.847l11.32 3.214c1.788-6.316-1.907-12.868-8.222-14.655-6.195-1.787-12.751 1.907-14.538 8.223zm-10.367 5.955l97.711 171.117 20.617-11.798-97.714-171.113zm108.078 165.158l-10.367 5.959c3.338 5.718 10.487 7.746 16.206 4.408 5.722-3.218 7.626-10.604 4.411-16.206zm4.051 11.204l75.43-27.767-8.223-22.4-75.426 27.882zm67.207-50.168c6.2-2.264 12.991.954 15.256 7.03 2.264 6.195-.954 13.107-7.033 15.371z",
      stroke: "none"
    }));
  }
  var Multi2_default = SvgMulti2;

  // build/lib-react-tsx/chart/ScatterLine.tsx
  var React16 = __toModule(require_react());
  function SvgScatterLine({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React16.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React16.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React16.createElement("path", {
      d: "M256.907 424.731c-6.316 1.431-10.368 7.867-8.938 14.182 1.43 6.432 7.746 10.484 14.18 9.056zm0 0L372.97 398.16l5.123 23.234L262.15 447.97zm118.565-15.014l-2.622-11.558c6.435-1.43 12.75 2.501 14.18 8.937 1.55 6.434-2.502 12.87-8.937 14.297zm7.865-8.817l91.636 82.46-15.732 17.635-91.634-82.34zm83.77 91.278l7.866-8.819c4.885 4.291 5.362 11.917.95 16.803-4.408 4.884-11.794 5.24-16.683.957zm-11.082-4.17l79.6-214.372 22.164 8.339-79.602 214.371zm90.683-210.2l-11.084-4.172c2.264-6.08 9.057-9.294 15.252-6.914 6.08 2.265 9.297 9.058 6.913 15.253zm10.247-6.08L644.3 420.084l-20.377 12.037-87.344-148.237zm77.217 154.434l10.127-6.079c3.338 5.602 1.55 12.99-4.168 16.326-5.602 3.338-12.871 1.43-16.21-4.172zm-8.82-7.982l93.663-104.15 17.516 15.848-93.66 104.147zm111.18-88.302c4.407-4.765 4.05-12.27-.835-16.682-4.885-4.408-12.274-4.051-16.683.84z",
      stroke: "none"
    }), /* @__PURE__ */ React16.createElement("path", {
      d: "M220.324 665.796a19.479 19.479 0 0019.542 19.543c10.725 0 19.424-8.7 19.424-19.543zm0 0V123.969h38.966v541.827zm38.966-541.827c0-10.727-8.699-19.423-19.424-19.423-10.843 0-19.542 8.696-19.542 19.423z",
      stroke: "none"
    }), /* @__PURE__ */ React16.createElement("path", {
      d: "M239.866 97.157l49.929 65.897M189.938 163.054l49.928-65.897",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React16.createElement("path", {
      d: "M239.866 646.373c-10.843 0-19.542 8.7-19.542 19.423a19.479 19.479 0 0019.542 19.543zm0 0h541.828v38.966H239.866zm541.828 38.966c10.723 0 19.423-8.7 19.423-19.543 0-10.724-8.7-19.423-19.423-19.423z",
      stroke: "none"
    }), /* @__PURE__ */ React16.createElement("path", {
      d: "M808.503 665.796l-65.896 50.048M742.607 615.869l65.896 49.927",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React16.createElement("path", {
      d: "M371.897 377.305c18.113 0 32.77 14.658 32.77 32.651 0 18.113-14.657 32.769-32.77 32.769-18.112 0-32.77-14.656-32.77-32.769 0-17.993 14.658-32.65 32.77-32.65zM462.935 454.879c18.113 0 32.772 14.658 32.772 32.771 0 17.993-14.659 32.769-32.772 32.769-18.111 0-32.768-14.776-32.768-32.769 0-18.113 14.657-32.771 32.768-32.771zM546.588 247.42c18.113 0 32.768 14.658 32.768 32.768 0 18.113-14.655 32.77-32.768 32.77-17.993 0-32.651-14.657-32.651-32.77 0-18.11 14.658-32.768 32.651-32.768zM636.08 391.606c17.992 0 32.647 14.656 32.647 32.768 0 17.994-14.655 32.652-32.648 32.652-18.113 0-32.771-14.658-32.771-32.652 0-18.112 14.658-32.768 32.771-32.768zM726.284 287.34c18.113 0 32.768 14.655 32.768 32.768 0 18.114-14.655 32.768-32.768 32.768s-32.771-14.654-32.771-32.768c0-18.113 14.658-32.768 32.771-32.768z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var ScatterLine_default = SvgScatterLine;

  // build/lib-react-tsx/chart/Scatter.tsx
  var React17 = __toModule(require_react());
  function SvgScatter({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React17.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React17.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React17.createElement("path", {
      d: "M207.87 67.966l55.83 73.818M151.907 141.784l55.963-73.818",
      fill: "none",
      strokeWidth: 43.438,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React17.createElement("path", {
      d: "M207.87 703.95h605.87m-605.87 0V98.08",
      fill: "none",
      strokeWidth: 43.571,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React17.createElement("path", {
      d: "M843.718 703.95l-73.685 55.828M770.033 648.12l73.685 55.83",
      fill: "none",
      strokeWidth: 43.438,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React17.createElement("path", {
      d: "M357.772 485.825c26.116 0 47.302 21.186 47.302 47.17 0 26.116-21.186 47.302-47.302 47.302-25.983 0-47.17-21.186-47.17-47.302 0-25.984 21.187-47.17 47.17-47.17zM485.82 536.325c26.118 0 47.17 21.186 47.17 47.301 0 25.985-21.052 47.171-47.17 47.171-26.115 0-47.168-21.186-47.168-47.17 0-26.116 21.053-47.302 47.169-47.302zM458.905 359.508c25.983 0 47.168 21.186 47.168 47.169 0 26.115-21.185 47.301-47.168 47.301-26.116 0-47.302-21.186-47.302-47.301 0-25.983 21.186-47.169 47.302-47.169zM559.907 435.324c26.115 0 47.167 21.056 47.167 47.17 0 26.116-21.052 47.168-47.167 47.168-26.12 0-47.171-21.052-47.171-47.167 0-26.115 21.052-47.171 47.17-47.171zM610.407 307.276c26.116 0 47.301 21.186 47.301 47.302 0 25.983-21.185 47.169-47.3 47.169-25.986 0-47.172-21.186-47.172-47.169 0-26.116 21.186-47.302 47.171-47.302zM714.872 411.74c26.115 0 47.167 21.052 47.167 47.168 0 26.119-21.052 47.305-47.167 47.305-26.119 0-47.17-21.186-47.17-47.305 0-26.116 21.051-47.167 47.17-47.167zM760.309 285.423c26.115 0 47.301 21.053 47.301 47.17 0 26.116-21.186 47.302-47.301 47.302-25.985 0-47.17-21.186-47.17-47.303 0-26.116 21.185-47.169 47.17-47.169zM664.372 184.29c25.98 0 47.167 21.186 47.167 47.302 0 25.983-21.186 47.169-47.167 47.169-26.12 0-47.306-21.186-47.306-47.169 0-26.116 21.187-47.302 47.306-47.302zM812.54 128.726c26.115 0 47.17 21.186 47.17 47.302 0 25.984-21.055 47.17-47.17 47.17-26.116 0-47.171-21.186-47.171-47.17 0-26.116 21.055-47.302 47.17-47.302z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Scatter_default = SvgScatter;

  // build/lib-react-tsx/chem/Concentration.tsx
  var React18 = __toModule(require_react());
  function SvgConcentration({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React18.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React18.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React18.createElement("path", {
      d: "M500 100h150v50H500z",
      fill: "none"
    }), /* @__PURE__ */ React18.createElement("path", {
      d: "M372.06 636.583q0 13.021-2.344 18.23-2.344 5.208-6.771 5.208h-80.469q-4.427 0-8.073-1.302-3.646-1.302-6.25-3.907-2.604-2.604-4.167-6.77-1.562-4.167-1.562-9.896V225.125q0-5.469 1.562-9.635 1.563-4.167 4.167-6.771 2.604-2.865 6.25-3.907 3.646-1.302 8.073-1.302h80.469q2.083 0 3.906 1.302 1.823 1.042 2.865 3.907 1.302 2.604 1.822 7.031.521 4.427.521 11.198 0 13.281-2.343 18.49-2.344 4.947-6.771 4.947h-39.323v362.76h39.323q2.083 0 3.906 1.042t2.865 3.907q1.302 2.864 1.822 7.291.521 4.427.521 11.198zM768.934 638.146q0 5.729-1.823 9.896-1.562 4.166-4.166 6.77-2.604 2.605-6.25 3.907t-8.073 1.302h-80.73q-4.426 0-6.77-5.209-2.344-5.208-2.344-18.229 0-6.77.52-11.198.782-4.427 1.824-7.291 1.302-2.865 2.864-3.907 1.823-1.041 3.907-1.041h39.583v-362.76h-39.583q-4.427 0-6.771-4.949-2.344-5.208-2.344-18.49 0-6.77.52-11.197.782-4.427 1.824-7.031 1.302-2.865 2.864-3.907 1.823-1.302 3.907-1.302h80.729q4.427 0 8.073 1.302 3.646 1.042 6.25 3.907 2.604 2.604 4.166 6.77 1.823 4.167 1.823 9.636v413.02z"
    }), /* @__PURE__ */ React18.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React18.createElement("path", {
      d: "M439.305 859.243q0 .938-.562 1.688-.563.656-1.875 1.125-1.313.469-3.563.656-2.25.281-5.718.281-3.563 0-5.813-.281-2.25-.187-3.656-.656-1.313-.469-1.875-1.125-.469-.75-.469-1.688V809.65q0-4.22-.844-7.688-.75-3.469-2.437-5.906-1.594-2.531-4.125-3.844-2.438-1.406-5.906-1.406-4.22 0-8.532 3.281t-9.375 9.563v55.593q0 .938-.562 1.688-.563.656-1.969 1.125-1.312.469-3.562.656-2.25.281-5.625.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688V809.65q0-4.22-.844-7.688-.75-3.469-2.343-5.906-1.594-2.531-4.125-3.844-2.532-1.406-5.907-1.406-4.312 0-8.625 3.281-4.312 3.281-9.28 9.563v55.593q0 .938-.563 1.688-.563.656-1.97 1.125-1.312.469-3.562.656-2.25.281-5.718.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688v-83.625q0-.937.469-1.593.469-.75 1.687-1.22 1.22-.468 3.094-.655 1.969-.282 4.875-.282 3 0 4.969.282 1.969.187 3 .656 1.125.469 1.594 1.219.468.656.468 1.593v9.657q6.938-7.5 13.782-11.25 6.937-3.75 14.437-3.75 5.156 0 9.281 1.125 4.125 1.03 7.313 3.093 3.281 1.969 5.625 4.782 2.344 2.812 3.937 6.28 3.75-4.03 7.313-6.937 3.656-2.906 7.125-4.687 3.562-1.875 7.031-2.719 3.563-.937 7.219-.937 8.344 0 14.062 2.812 5.72 2.813 9.188 7.688 3.562 4.78 5.062 11.25 1.5 6.468 1.5 13.687v53.531zM546.837 816.587q0 10.688-2.813 19.5-2.812 8.813-8.531 15.188-5.719 6.375-14.344 9.843-8.625 3.469-20.156 3.469-11.156 0-19.406-3.094-8.25-3.093-13.688-9-5.437-5.906-8.062-14.531-2.625-8.625-2.625-19.687 0-10.688 2.812-19.5 2.906-8.907 8.625-15.188 5.719-6.375 14.25-9.844 8.625-3.468 20.156-3.468 11.25 0 19.5 3.093 8.25 3 13.594 8.907 5.438 5.906 8.063 14.53 2.625 8.626 2.625 19.782zm-24.282.938q0-6.188-1.03-11.344-.938-5.25-3.282-9.094-2.344-3.844-6.281-6-3.844-2.156-9.75-2.156-5.25 0-9.188 1.969-3.937 1.875-6.469 5.625-2.53 3.656-3.843 8.906-1.22 5.156-1.22 11.812 0 6.188 1.032 11.438 1.031 5.156 3.281 9 2.344 3.844 6.282 6 3.937 2.062 9.75 2.062 5.343 0 9.28-1.875 3.938-1.968 6.47-5.625 2.53-3.656 3.75-8.812 1.218-5.25 1.218-11.906zM589.024 859.243q0 .938-.562 1.688-.563.656-1.97 1.125-1.312.469-3.562.656-2.25.281-5.718.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688V735.962q0-.937.563-1.687.562-.75 1.875-1.22 1.406-.562 3.656-.843 2.25-.281 5.719-.281 3.468 0 5.718.281t3.563.844q1.406.469 1.969 1.219.562.75.562 1.687v123.281zM624.087 886.712q-.47 1.219-1.22 1.969t-2.155 1.219q-1.313.468-3.375.656-1.97.281-5.063.281-3.844 0-6.281-.375-2.438-.375-3.75-1.125-1.219-.75-1.406-1.969-.188-1.125.375-2.718l56.062-157.407q.375-1.218 1.125-1.968.75-.844 2.063-1.313 1.312-.469 3.375-.656 2.156-.281 5.156-.281 3.937 0 6.281.375 2.438.375 3.656 1.125 1.22.75 1.407 1.968.187 1.125-.282 2.719l-55.968 157.5zM718.4 859.243q0 .938-.563 1.688-.563.656-1.97 1.125-1.312.469-3.562.656-2.25.281-5.718.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688V735.962q0-.937.563-1.687.562-.75 1.875-1.22 1.406-.562 3.656-.843 2.25-.281 5.719-.281 3.468 0 5.718.281t3.563.844q1.406.469 1.969 1.219.562.75.562 1.687v123.281z"
    })));
  }
  var Concentration_default = SvgConcentration;

  // build/lib-react-tsx/chem/IupacNameStructure.tsx
  var React19 = __toModule(require_react());
  function SvgIupacNameStructure({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React19.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React19.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React19.createElement("path", {
      d: "M602.475 401.935c6.064 3.5 13.834 1.451 17.418-4.61 3.586-6.149 1.538-13.918-4.526-17.42zm0 0L394.31 281.715l12.893-22.029 208.164 120.22zM407.203 259.686c-6.062-3.5-13.832-1.366-17.418 4.696-3.586 6.062-1.536 13.832 4.525 17.333z",
      stroke: "none"
    }), /* @__PURE__ */ React19.createElement("path", {
      d: "M88.382 436.771c-6.062 3.586-8.197 11.356-4.696 17.418 3.5 6.063 11.27 8.112 17.333 4.611zm0 0l306.014-177 12.637 21.944L101.02 458.8zm318.651-155.056c6.148-3.586 8.195-11.356 4.781-17.418-3.5-6.062-11.27-8.112-17.418-4.525z",
      stroke: "none"
    }), /* @__PURE__ */ React19.createElement("path", {
      d: "M779.987 458.032c0 12.55-1.45 23.907-4.44 33.982-2.988 10.075-7.428 18.614-13.234 25.701-5.892 7.087-13.32 12.465-22.199 16.307-8.881 3.758-19.212 5.722-30.993 5.722-11.699 0-21.774-1.794-30.314-5.295-8.537-3.5-15.54-8.453-21.088-15.112-5.55-6.661-9.65-14.942-12.38-24.761-2.734-9.82-4.1-21.09-4.1-33.897 0-12.21 1.452-23.31 4.44-33.3 2.988-10.075 7.343-18.528 13.321-25.53 5.89-7 13.318-12.38 22.199-16.222 8.795-3.757 19.21-5.636 30.994-5.636 11.442 0 21.431 1.708 29.885 5.123 8.451 3.501 15.54 8.453 21.174 15.113 5.637 6.575 9.82 14.686 12.55 24.42 2.734 9.733 4.185 20.833 4.185 33.385zm-21.771 1.451c0-8.794-.77-16.991-2.307-24.505-1.535-7.599-4.1-14.088-7.77-19.723-3.671-5.55-8.538-9.905-14.6-12.979-6.062-3.073-13.576-4.696-22.54-4.696-8.968 0-16.48 1.708-22.544 5.038-6.062 3.415-11.014 7.855-14.77 13.49-3.842 5.55-6.575 12.125-8.198 19.553-1.622 7.514-2.475 15.37-2.475 23.566 0 9.136.853 17.504 2.306 25.188 1.536 7.685 4.097 14.26 7.683 19.81 3.586 5.634 8.454 9.904 14.431 12.976 6.062 3.075 13.66 4.612 22.797 4.612 8.964 0 16.565-1.709 22.712-5.037 6.148-3.33 11.1-7.856 14.943-13.576 3.67-5.722 6.403-12.381 7.94-19.81 1.622-7.599 2.392-15.54 2.392-23.907zM924.37 534.28c0 .598-.169 1.195-.516 1.706-.254.514-.853.855-1.622 1.11-.854.343-1.879.512-3.245.77-1.281.17-2.903.256-4.867.256-2.047 0-3.67-.086-5.037-.256-1.194-.258-2.305-.427-3.072-.77-.77-.255-1.367-.597-1.708-1.11-.339-.512-.424-1.109-.424-1.706v-68.82H833.27v68.82a3.03 3.03 0 01-.516 1.706c-.34.514-.854.855-1.709 1.11-.77.343-1.792.512-3.159.77-1.28.17-2.989.256-4.95.256-1.965 0-3.587-.086-4.953-.256-1.28-.258-2.392-.427-3.159-.77-.856-.255-1.452-.597-1.708-1.11a3.1 3.1 0 01-.517-1.706V385.37c0-.597.17-1.195.517-1.707.254-.427.852-.854 1.708-1.11.77-.257 1.878-.512 3.159-.683 1.366-.171 2.988-.342 4.953-.342 1.961 0 3.67.171 4.95.342 1.367.17 2.392.426 3.16.683.854.255 1.366.683 1.708 1.11.338.512.516 1.11.516 1.708v62.158h70.611v-62.158c0-.598.085-1.196.424-1.708.338-.427.939-.854 1.708-1.11.77-.257 1.878-.512 3.072-.683 1.367-.171 2.99-.342 5.037-.342 1.964 0 3.586.171 4.867.342 1.366.17 2.391.426 3.245.683.77.255 1.366.683 1.622 1.11.339.512.516 1.11.516 1.708z",
      fill: "none",
      strokeWidth: 2.562,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React19.createElement("path", {
      d: "M779.987 458.032c0 12.55-1.45 23.907-4.44 33.982-2.988 10.075-7.428 18.614-13.234 25.701-5.892 7.087-13.32 12.465-22.199 16.307-8.881 3.758-19.212 5.722-30.993 5.722-11.699 0-21.774-1.794-30.314-5.295-8.537-3.5-15.54-8.453-21.088-15.112-5.55-6.661-9.65-14.942-12.38-24.761-2.734-9.82-4.1-21.09-4.1-33.897 0-12.21 1.452-23.31 4.44-33.3 2.988-10.075 7.343-18.528 13.321-25.53 5.89-7 13.318-12.38 22.199-16.222 8.795-3.757 19.21-5.636 30.994-5.636 11.442 0 21.431 1.708 29.885 5.123 8.451 3.501 15.54 8.453 21.174 15.113 5.637 6.575 9.82 14.686 12.55 24.42 2.734 9.733 4.185 20.833 4.185 33.385zm-21.771 1.451c0-8.794-.77-16.991-2.307-24.505-1.535-7.599-4.1-14.088-7.77-19.723-3.671-5.55-8.538-9.905-14.6-12.979-6.062-3.073-13.576-4.696-22.54-4.696-8.968 0-16.48 1.708-22.544 5.038-6.062 3.415-11.014 7.855-14.77 13.49-3.842 5.55-6.575 12.125-8.198 19.553-1.622 7.514-2.475 15.37-2.475 23.566 0 9.136.853 17.504 2.306 25.188 1.536 7.685 4.097 14.26 7.683 19.81 3.586 5.634 8.454 9.904 14.431 12.976 6.062 3.075 13.66 4.612 22.797 4.612 8.964 0 16.565-1.709 22.712-5.037 6.148-3.33 11.1-7.856 14.943-13.576 3.67-5.722 6.403-12.381 7.94-19.81 1.622-7.599 2.392-15.54 2.392-23.907zM924.37 534.28c0 .598-.169 1.195-.516 1.706-.254.514-.853.855-1.622 1.11-.854.343-1.879.512-3.245.77-1.281.17-2.903.256-4.867.256-2.047 0-3.67-.086-5.037-.256-1.194-.258-2.305-.427-3.072-.77-.77-.255-1.367-.597-1.708-1.11-.339-.512-.424-1.109-.424-1.706v-68.82H833.27v68.82a3.03 3.03 0 01-.516 1.706c-.34.514-.854.855-1.709 1.11-.77.343-1.792.512-3.159.77-1.28.17-2.989.256-4.95.256-1.965 0-3.587-.086-4.953-.256-1.28-.258-2.392-.427-3.159-.77-.856-.255-1.452-.597-1.708-1.11a3.1 3.1 0 01-.517-1.706V385.37c0-.597.17-1.195.517-1.707.254-.427.852-.854 1.708-1.11.77-.257 1.878-.512 3.159-.683 1.366-.171 2.988-.342 4.953-.342 1.961 0 3.67.171 4.95.342 1.367.17 2.392.426 3.16.683.854.255 1.366.683 1.708 1.11.338.512.516 1.11.516 1.708v62.158h70.611v-62.158c0-.598.085-1.196.424-1.708.338-.427.939-.854 1.708-1.11.77-.257 1.878-.512 3.072-.683 1.367-.171 2.99-.342 5.037-.342 1.964 0 3.586.171 4.867.342 1.366.17 2.391.426 3.245.683.77.255 1.366.683 1.622 1.11.339.512.516 1.11.516 1.708z",
      stroke: "none"
    }));
  }
  var IupacNameStructure_default = SvgIupacNameStructure;

  // build/lib-react-tsx/chem/IupacStructureName.tsx
  var React20 = __toModule(require_react());
  function SvgIupacStructureName({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React20.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React20.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React20.createElement("path", {
      d: "M182.965 456.404c0 4.185-.916 7.324-2.877 9.285-1.831 2.093-4.447 3.008-7.716 3.008H97.309c0 5.362.653 10.07 1.83 14.385 1.308 4.185 3.27 7.846 6.016 10.854 2.746 3.008 6.146 5.362 10.462 6.8 4.315 1.57 9.415 2.485 15.431 2.485 6.146 0 11.377-.524 15.954-1.438 4.708-.785 8.631-1.831 12.031-2.877 3.27-1.047 6.146-1.962 8.37-2.877 2.092-.916 3.923-1.308 5.361-1.308.785 0 1.57.131 1.962.523.654.261 1.046.784 1.439 1.7.391.784.653 1.961.784 3.53.131 1.439.262 3.4.262 5.754 0 1.962-.13 3.662-.262 5.1 0 1.439-.13 2.616-.391 3.662a7.664 7.664 0 01-.785 2.615c-.393.654-.784 1.308-1.438 1.962-.654.654-2.223 1.57-4.97 2.616-2.615 1.046-6.016 2.223-10.2 3.269-4.185 1.046-8.892 1.961-14.124 2.746-5.361.784-11.115 1.177-17.13 1.177-10.986 0-20.663-1.438-28.901-4.185-8.108-2.746-15.04-6.93-20.532-12.554-5.623-5.623-9.677-12.685-12.423-21.185-2.617-8.63-4.055-18.7-4.055-30.208 0-10.854 1.438-20.793 4.315-29.555 2.877-8.761 6.931-16.215 12.424-22.362 5.362-6.146 12.03-10.854 19.746-13.992 7.847-3.27 16.609-4.839 26.286-4.839 10.33 0 19.223 1.439 26.547 4.577 7.323 3.008 13.338 7.193 17.916 12.554 4.708 5.362 8.238 11.77 10.461 19.224 2.223 7.323 3.27 15.3 3.27 23.931zm-33.74-9.938c.262-9.808-1.57-17.524-5.885-23.016-4.184-5.624-10.592-8.37-19.354-8.37-4.446 0-8.238.785-11.508 2.485-3.269 1.57-6.015 3.923-8.108 6.67-2.223 2.746-3.792 6.146-4.969 9.938-1.177 3.793-1.83 7.847-2.092 12.293zm133.258 62.901c0 4.054-.131 7.062-.654 9.285-.524 2.223-1.177 3.662-2.092 4.577-.785.916-1.962 1.7-3.662 2.354-1.569.654-3.4 1.308-5.623 1.83a56.67 56.67 0 01-7.062 1.178 73.6 73.6 0 01-7.585.392c-6.93 0-12.946-.915-18.046-2.616-5.1-1.83-9.154-4.446-12.554-8.107-3.27-3.662-5.754-8.239-7.324-13.732-1.569-5.492-2.353-12.03-2.353-19.615v-63.164H200.75c-1.7 0-3.008-1.046-3.923-3.138-.916-2.223-1.439-5.754-1.439-10.854 0-2.616.131-4.97.393-6.8.262-1.831.523-3.27 1.047-4.316a5.486 5.486 0 011.7-2.354c.653-.393 1.438-.653 2.485-.653h14.515v-27.462c0-.916.262-1.7.785-2.485.522-.785 1.438-1.308 2.746-1.831 1.308-.522 3.139-.915 5.362-1.177 2.354-.131 5.1-.262 8.37-.262 3.4 0 6.276.131 8.5.262 2.223.261 4.053.653 5.361 1.177 1.308.522 2.223 1.046 2.746 1.83.523.785.785 1.57.785 2.486v27.462h26.808c.916 0 1.7.262 2.485.653.653.523 1.177 1.308 1.7 2.354.392 1.046.784 2.485 1.046 4.316.262 1.83.262 4.184.262 6.8 0 5.1-.392 8.63-1.308 10.854-.915 2.092-2.223 3.138-4.054 3.138h-26.939v57.933c0 6.67 1.046 11.77 3.27 15.039 2.092 3.4 5.884 5.1 11.246 5.1 1.83 0 3.53-.131 4.969-.524 1.438-.262 2.877-.654 3.923-1.047 1.178-.392 2.093-.784 3.008-1.177a5.916 5.916 0 012.092-.392 3.49 3.49 0 011.57.392c.522.393.915 1.046 1.177 1.961.262 1.047.523 2.355.785 3.924.261 1.7.261 3.792.261 6.408zm142.803 12.162c0 .916-.261 1.7-.784 2.354a7.05 7.05 0 01-2.746 1.7c-1.308.524-3.139.916-5.362 1.047-2.223.261-5.1.391-8.37.391-3.4 0-6.277-.13-8.5-.391-2.223-.132-4.054-.523-5.362-1.047-1.177-.392-2.223-1.046-2.746-1.7-.523-.653-.784-1.438-.784-2.354v-70.355c0-5.885-.393-10.593-1.308-13.993-.915-3.4-2.092-6.408-3.792-8.762-1.7-2.484-3.793-4.315-6.408-5.754-2.615-1.308-5.754-1.962-9.285-1.962-4.315 0-8.762 1.57-13.339 4.84-4.446 3.268-9.154 7.976-14.123 14.122v81.864c0 .916-.131 1.7-.785 2.354-.522.654-1.438 1.308-2.746 1.7-1.438.524-3.138.916-5.362 1.047-2.223.261-4.97.391-8.5.391-3.4 0-6.146-.13-8.37-.391-2.223-.132-3.922-.523-5.23-1.047-1.439-.392-2.354-1.046-2.877-1.7-.523-.653-.916-1.438-.916-2.354V340.017c0-1.047.392-1.83.916-2.616.524-.653 1.438-1.307 2.877-1.83 1.308-.523 3.007-.785 5.23-1.178 2.224-.262 4.97-.393 8.37-.393 3.53 0 6.277.131 8.5.393 2.224.392 3.924.654 5.362 1.178 1.308.522 2.223 1.177 2.746 1.83.654.785.785 1.57.785 2.616v68.002c6.015-5.885 12.162-10.331 18.439-13.208 6.146-2.877 12.554-4.316 19.354-4.316 8.37 0 15.431 1.308 21.185 4.185 5.754 2.746 10.331 6.539 13.993 11.246 3.53 4.839 6.015 10.331 7.585 16.74 1.57 6.407 2.354 14.122 2.354 23.277zm139.012.392c0 1.308-.392 2.354-1.306 3.008-.918.784-2.357 1.308-4.45 1.57-1.962.392-4.838.522-8.76.522-4.055 0-7.063-.132-9.025-.523-1.83-.262-3.136-.784-3.923-1.57-.783-.653-1.175-1.699-1.175-3.007v-9.808c-5.1 5.362-10.853 9.677-17.393 12.685-6.407 3.008-13.73 4.577-21.58 4.577-6.535 0-12.551-.915-18.044-2.615-5.493-1.7-10.202-4.185-14.253-7.585-3.923-3.27-7.063-7.454-9.288-12.423-2.221-4.97-3.268-10.854-3.268-17.393 0-7.193 1.438-13.47 4.187-18.7 2.876-5.362 7.059-9.678 12.551-13.209 5.625-3.4 12.556-5.885 20.793-7.585 8.241-1.7 17.917-2.485 28.902-2.485h11.9v-7.453c0-3.924-.263-7.324-1.178-10.2-.655-2.878-1.961-5.231-3.791-7.193-1.83-1.962-4.186-3.4-7.195-4.316-3.008-.915-6.667-1.307-11.113-1.307-5.756 0-10.986.522-15.564 1.83-4.446 1.308-8.5 2.747-12.028 4.316-3.531 1.57-6.411 3.008-8.764 4.316-2.353 1.307-4.315 1.83-5.753 1.83-1.046 0-1.962-.261-2.748-.915-.651-.654-1.307-1.569-1.83-2.746-.524-1.177-.914-2.616-1.179-4.447-.391-1.7-.391-3.661-.391-5.754 0-2.876.132-5.1.654-6.8.392-1.569 1.307-3.138 2.617-4.446 1.306-1.308 3.531-2.877 6.667-4.446a79.706 79.706 0 0111.377-4.446c4.315-1.439 9.156-2.485 14.126-3.4 5.097-.916 10.462-1.308 15.823-1.308 9.676 0 17.917.915 24.848 2.746 6.799 1.962 12.42 4.839 16.866 8.762 4.45 3.923 7.586 9.023 9.679 15.17 1.961 6.146 3.008 13.47 3.008 21.838zm-34.131-52.701h-13.21c-5.622 0-10.331.393-14.382 1.177-3.927.915-7.063 2.092-9.68 3.792-2.484 1.57-4.182 3.662-5.36 6.016-1.18 2.354-1.702 4.969-1.702 7.977 0 5.23 1.57 9.285 4.841 12.162 3.268 3.007 7.846 4.446 13.599 4.446 4.837 0 9.415-1.177 13.47-3.662 4.055-2.484 8.237-6.146 12.424-10.984zm186.48 52.309c0 .915-.26 1.7-.783 2.354a6.73 6.73 0 01-2.876 1.7c-1.179.524-3.008.915-5.233 1.046-2.353.262-5.102.393-8.37.393-3.4 0-6.275-.131-8.5-.393-2.221-.131-4.055-.522-5.361-1.046-1.179-.393-2.222-1.047-2.745-1.7-.524-.654-.787-1.439-.787-2.354v-70.356c0-5.885-.391-10.592-1.306-13.993-.916-3.4-2.094-6.407-3.795-8.761-1.698-2.485-3.791-4.316-6.408-5.754-2.613-1.308-5.752-1.962-9.284-1.962-4.314 0-8.76 1.57-13.338 4.839-4.446 3.269-9.153 7.977-14.122 14.123v81.864c0 .915-.263 1.7-.787 2.354-.524.653-1.438 1.307-2.876 1.7-1.307.524-3.008.915-5.23 1.046-2.225.262-4.969.392-8.5.392-3.4 0-6.148-.131-8.37-.392-2.224-.131-4.054-.522-5.364-1.046-1.307-.392-2.222-1.047-2.745-1.7-.655-.654-.914-1.439-.914-2.354V398.34c0-.915.26-1.7.783-2.354.396-.785 1.179-1.307 2.485-1.83 1.179-.394 2.748-.785 4.578-1.047 1.961-.131 4.314-.262 7.194-.262 2.877 0 5.361.131 7.191.262 1.962.262 3.531.653 4.578 1.046 1.046.524 1.83 1.047 2.221 1.83.524.654.655 1.44.655 2.355v14.254c6.931-7.323 13.862-12.946 20.793-16.608 7.062-3.662 14.385-5.492 22.1-5.492 8.368 0 15.43 1.307 21.187 4.185 5.753 2.746 10.33 6.407 13.862 11.246 3.528 4.708 6.144 10.2 7.714 16.608 1.57 6.408 2.353 13.993 2.353 22.885zm158.628-62.902c0 10.593-1.438 20.14-4.186 28.77-2.745 8.631-6.93 16.085-12.552 22.362-5.624 6.277-12.555 11.116-21.056 14.516-8.5 3.4-18.44 5.1-29.685 5.1-10.986 0-20.53-1.57-28.639-4.577-8.109-3.008-14.776-7.454-20.138-13.208-5.364-5.885-9.287-12.946-11.9-21.447-2.616-8.369-3.795-18.046-3.795-29.031 0-10.462 1.438-20.008 4.187-28.77 2.744-8.631 7.062-16.085 12.555-22.362 5.753-6.147 12.684-10.985 21.184-14.385 8.37-3.4 18.177-5.1 29.554-5.1 11.117 0 20.661 1.438 28.77 4.446 8.11 3.008 14.777 7.454 20.01 13.208 5.361 5.754 9.284 12.946 11.9 21.447 2.485 8.37 3.791 18.177 3.791 29.031zm-35.7 1.439c0-6.016-.525-11.64-1.57-16.74-.916-5.1-2.485-9.546-4.838-13.338s-5.361-6.8-9.156-8.893c-3.791-2.092-8.63-3.138-14.513-3.138-5.102 0-9.548.915-13.47 2.877-3.924 1.83-7.064 4.577-9.548 8.239-2.485 3.661-4.315 7.977-5.621 13.077-1.179 5.1-1.834 10.985-1.834 17.523 0 6.016.525 11.64 1.57 16.74.916 5.1 2.617 9.545 4.838 13.338 2.357 3.792 5.361 6.67 9.288 8.762 3.79 2.092 8.629 3.139 14.253 3.139 5.23 0 9.807-1.047 13.73-2.877 3.923-1.831 7.063-4.578 9.548-8.24 2.484-3.53 4.314-7.846 5.492-13.077 1.175-4.969 1.83-10.854 1.83-17.392zm97.947 61.463c0 .915-.26 1.7-.783 2.354-.524.653-1.438 1.307-2.876 1.7-1.31.524-3.008.915-5.233 1.046-2.221.262-4.97.392-8.501.392-3.4 0-6.144-.131-8.37-.392-2.22-.131-4.054-.522-5.36-1.046-1.307-.392-2.221-1.047-2.745-1.7-.655-.654-.918-1.439-.918-2.354V340.016c0-1.046.264-1.83.918-2.615.524-.654 1.438-1.308 2.745-1.83 1.306-.523 3.14-.785 5.36-1.178 2.226-.262 4.97-.393 8.37-.393 3.531 0 6.28.131 8.5.393 2.226.392 3.924.653 5.234 1.177 1.438.523 2.353 1.178 2.876 1.831.524.784.783 1.57.783 2.615z",
      stroke: "none"
    }));
  }
  var IupacStructureName_default = SvgIupacStructureName;

  // build/lib-react-tsx/chem/MineralFormulaName.tsx
  var React21 = __toModule(require_react());
  function SvgMineralFormulaName({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React21.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React21.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React21.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React21.createElement("path", {
      d: "M367.42 727.473q0 3.357-1.83 6.104-1.526 2.441-6.409 4.272-4.577 1.526-12.817 2.442-8.24.915-20.752.915-19.837 0-28.687-1.526-8.545-1.526-12.512-4.577-3.662-3.052-5.798-7.325L159.29 540.4v187.378q0 3.357-1.831 5.799-1.831 2.441-6.409 4.272-4.577 1.526-12.207 2.442-7.63.915-19.531.915-11.597 0-19.531-.915-7.63-.916-12.207-2.442-4.578-1.83-6.714-4.272-1.831-2.442-1.831-5.799V355.77q0-3.357 1.83-5.798 2.137-2.442 6.715-3.968 4.577-1.525 12.207-2.441 7.934-.916 19.531-.916 11.902 0 19.531.916 7.63.916 12.207 2.441 4.578 1.526 6.409 3.968 1.831 2.441 1.831 5.798v168.152l115.662-167.847q2.136-3.967 5.188-6.408 3.051-2.747 7.934-4.273 4.883-1.526 12.512-2.136 7.63-.61 19.532-.61 12.207 0 20.141.915 7.935.916 12.512 2.747 4.883 1.525 6.714 3.967 1.831 2.441 1.831 5.493 0 5.188-2.746 10.681-2.747 5.493-10.376 17.395L239.857 525.752 357.96 704.28q6.714 12.512 7.935 16.784 1.526 3.968 1.526 6.41zM706.776 620.967q0 21.057-5.798 38.147t-16.174 30.212q-10.071 13.123-24.414 22.583-14.038 9.46-31.128 15.564-17.09 6.104-36.621 9.155-19.226 2.747-43.03 2.747H444.63q-10.071 0-17.09-5.798-6.714-6.104-6.714-19.532V369.807q0-13.428 6.714-19.226 7.019-6.103 17.09-6.103h99.182q36.315 0 61.34 6.103 25.33 6.104 42.42 18.616 17.394 12.207 26.55 31.128 9.155 18.92 9.155 44.555 0 14.344-3.662 27.161-3.662 12.512-10.681 22.888-7.02 10.376-17.395 18.31-10.071 7.935-23.194 12.818 16.785 3.052 30.823 10.681 14.343 7.63 24.72 19.837 10.68 11.902 16.784 28.076 6.103 16.174 6.103 36.316zm-103.76-166.321q0-11.902-3.662-21.362-3.662-9.46-10.986-15.564-7.324-6.409-18.616-9.766-10.986-3.357-29.602-3.357h-40.588v102.54h44.86q17.396 0 27.772-3.968 10.376-4.273 17.09-11.292 7.019-7.324 10.376-16.784 3.357-9.766 3.357-20.447zm20.447 169.067q0-13.733-4.577-24.414-4.578-10.986-13.428-18.31-8.85-7.324-22.583-11.292-13.733-3.967-35.706-3.967h-47.607v112.305h57.983q16.785 0 28.077-3.357 11.596-3.662 19.836-10.376 8.545-7.02 13.123-17.09 4.882-10.376 4.882-23.499zM941.457 482.112q0 10.986-.61 18.005-.611 7.02-1.832 10.987-1.22 3.967-3.357 5.493-1.83 1.526-4.883 1.526-2.441 0-5.493-.916-3.052-1.22-7.019-2.441-3.662-1.221-8.24-2.137-4.577-1.22-10.07-1.22-6.409 0-12.818 2.746-6.408 2.442-13.427 7.935-6.714 5.493-14.344 14.648-7.324 9.156-15.869 22.583V729q0 3.052-1.83 5.493-1.832 2.136-6.41 3.662-4.272 1.526-11.596 2.137-7.325.915-18.616.915-11.292 0-18.616-.915-7.324-.61-11.902-2.137-4.272-1.526-6.103-3.662-1.831-2.441-1.831-5.493V456.782q0-3.052 1.526-5.188 1.526-2.441 5.493-3.967 3.967-1.526 10.07-2.136 6.41-.916 15.87-.916 9.765 0 16.174.916 6.409.61 9.766 2.136 3.662 1.526 5.188 3.967 1.526 2.136 1.526 5.188v33.875q10.68-15.259 20.141-25.025 9.46-10.07 18.006-15.869 8.545-5.798 17.09-7.934 8.544-2.442 17.09-2.442 3.967 0 8.544.61 4.578.306 9.46 1.526 4.883.916 8.546 2.442 3.662 1.22 5.188 2.746 1.83 1.526 2.441 3.357.915 1.831 1.526 5.188.61 3.052.915 9.46.306 6.41.306 17.396z"
    })));
  }
  var MineralFormulaName_default = SvgMineralFormulaName;

  // build/lib-react-tsx/chem/MineralNameFormula.tsx
  var React22 = __toModule(require_react());
  function SvgMineralNameFormula({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React22.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React22.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React22.createElement("path", {
      d: "M500 100h150v50H500z",
      fill: "none"
    }), /* @__PURE__ */ React22.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React22.createElement("path", {
      d: "M419.776 386.85q0 8.85-.916 15.26-.61 6.103-2.136 10.07-1.526 3.662-3.968 5.493-2.136 1.831-4.882 1.831h-98.877v318.299q0 3.051-2.137 5.493-1.83 2.441-6.408 3.967-4.578 1.526-12.512 2.442-7.63.915-19.227.915-11.596 0-19.53-.915-7.63-.916-12.208-2.442-4.577-1.526-6.714-3.967-1.83-2.442-1.83-5.493V419.504h-98.878q-3.051 0-5.188-1.83-2.136-1.832-3.662-5.494-1.526-3.967-2.441-10.07-.61-6.41-.61-15.26 0-9.155.61-15.563.915-6.41 2.441-10.071 1.526-3.967 3.662-5.493 2.137-1.831 5.188-1.831h278.32q2.747 0 4.883 1.83 2.442 1.527 3.968 5.494 1.526 3.662 2.136 10.07.916 6.41.916 15.565zM539.404 738.413q0 3.052-1.83 5.493-1.832 2.136-6.41 3.662-4.272 1.526-11.596 2.137-7.324.915-18.616.915-11.291 0-18.615-.915-7.325-.61-11.902-2.137-4.273-1.526-6.104-3.662-1.83-2.441-1.83-5.493V466.807q0-3.052 1.83-5.188 1.831-2.442 6.104-3.968 4.577-1.83 11.902-2.746 7.324-.916 18.615-.916 11.292 0 18.616.916 7.324.915 11.597 2.746 4.577 1.526 6.408 3.968 1.831 2.136 1.831 5.188v271.606zm5.799-364.38q0 23.194-9.46 32.044-9.461 8.85-35.096 8.85-25.94 0-35.095-8.545-8.85-8.545-8.85-30.823 0-23.193 9.155-32.043 9.46-9.156 35.4-9.156 25.635 0 34.79 8.85 9.156 8.545 9.156 30.823zM877.54 738.413q0 3.052-1.832 5.493-1.83 2.136-6.103 3.662-4.273 1.526-11.902 2.137-7.324.915-18.31.915-11.292 0-18.922-.915-7.324-.61-11.596-2.137-4.273-1.526-6.104-3.662-1.83-2.441-1.83-5.493V583.08q0-19.837-3.053-31.128-2.746-11.292-8.24-19.226-5.493-8.24-14.343-12.513-8.545-4.577-20.141-4.577-14.649 0-29.602 10.68-14.954 10.682-31.128 31.129v180.97q0 3.05-1.831 5.492-1.831 2.136-6.409 3.662-4.272 1.526-11.597 2.137-7.324.915-18.615.915-11.292 0-18.616-.915-7.324-.61-11.902-2.137-4.272-1.526-6.104-3.662-1.83-2.441-1.83-5.493V466.196q0-3.051 1.525-5.188 1.526-2.441 5.493-3.967 3.968-1.526 10.071-2.136 6.409-.916 15.87-.916 9.765 0 16.174.916 6.408.61 9.765 2.136 3.662 1.526 5.188 3.967 1.526 2.137 1.526 5.188v31.433q22.583-24.414 45.777-36.62 23.498-12.208 48.828-12.208 27.77 0 46.692 9.156 19.226 9.155 30.822 25.024 11.902 15.564 17.09 36.621 5.188 21.057 5.188 50.66v168.151z"
    })));
  }
  var MineralNameFormula_default = SvgMineralNameFormula;

  // build/lib-react-tsx/chem/Ph.tsx
  var React23 = __toModule(require_react());
  function SvgPh({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React23.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React23.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React23.createElement("path", {
      d: "M500 100h150v50H500z",
      fill: "none"
    }), /* @__PURE__ */ React23.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontSize: 693.333,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React23.createElement("path", {
      d: "M470.347 550.178q0 30.99-6.77 55.99-6.511 24.74-19.272 42.188-12.76 17.447-31.77 26.822-19.01 9.375-43.49 9.375-10.156 0-18.75-2.083-8.333-1.823-16.406-5.73-7.813-4.166-15.625-10.155-7.813-5.99-16.146-14.063v109.375q0 2.604-1.563 4.688-1.562 2.083-5.468 3.385-3.646 1.563-9.896 2.344-6.25.781-15.886.781-9.635 0-15.885-.781t-10.156-2.344q-3.646-1.302-5.209-3.385-1.562-2.084-1.562-4.688V437.418q0-2.604 1.302-4.427 1.302-2.083 4.427-3.385 3.385-1.303 8.594-1.823 5.469-.782 13.541-.782 7.813 0 13.021.782 5.47.52 8.594 1.823 3.385 1.302 4.688 3.385 1.302 1.823 1.302 4.427v27.344q10.156-10.417 19.791-18.23 9.896-8.072 20.052-13.28 10.157-5.47 20.834-8.074 10.937-2.604 23.177-2.604 25.52 0 43.49 10.157 17.968 9.895 29.166 27.343 11.458 17.448 16.667 40.625 5.208 23.177 5.208 49.48zm-68.23 4.688q0-14.844-2.343-28.385-2.083-13.803-7.552-24.48-5.208-10.677-14.062-16.927-8.594-6.51-21.615-6.51-6.51 0-13.02 2.083-6.25 1.823-13.022 6.25-6.51 4.427-13.541 11.459-7.032 7.03-14.844 17.447v76.563q13.802 17.448 26.302 27.083 12.5 9.375 26.042 9.375 12.76 0 21.614-6.51 9.115-6.51 14.844-16.927 5.73-10.677 8.333-23.959 2.865-13.28 2.865-26.562zM789.878 669.189q0 2.604-1.823 4.687-1.562 2.084-5.468 3.386-3.907 1.302-10.417 2.083-6.51.781-16.406.781-10.157 0-16.927-.78-6.51-.782-10.417-2.084-3.646-1.302-5.469-3.386-1.562-2.083-1.562-4.687V532.99H595.347v136.198q0 2.604-1.562 4.687-1.563 2.084-5.47 3.386-3.905 1.302-10.416 2.083-6.51.781-16.667.781-9.895 0-16.666-.78-6.51-.782-10.417-2.084-3.906-1.302-5.729-3.386-1.563-2.083-1.563-4.687v-318.23q0-2.603 1.563-4.687 1.823-2.083 5.73-3.385 3.905-1.302 10.416-2.084 6.77-.78 16.666-.78 10.157 0 16.667.78 6.51.782 10.417 2.084 3.906 1.302 5.469 3.385 1.562 2.084 1.562 4.688v123.698H721.39V350.96q0-2.604 1.562-4.688 1.823-2.083 5.469-3.385 3.906-1.302 10.417-2.084 6.77-.78 16.927-.78 9.896 0 16.406.78 6.51.782 10.417 2.084 3.906 1.302 5.468 3.385 1.823 2.084 1.823 4.688v318.229z"
    })));
  }
  var Ph_default = SvgPh;

  // build/lib-react-tsx/chem/Precipitation.tsx
  var React24 = __toModule(require_react());
  function SvgPrecipitation({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React24.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React24.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React24.createElement("path", {
      d: "M10.6 1.557L8.997 2.77",
      transform: "matrix(-48.73938 58.7678 57.8907 48.01196 838.661 32.817)",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 0.882,
      strokeLinecap: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React24.createElement("path", {
      d: "M8.997.343L10.6 1.557",
      transform: "matrix(-48.73938 58.7678 57.8907 48.01196 838.661 32.817)",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 0.882,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React24.createElement("path", {
      d: "M204.243 233.03l609.9-1.415-400 500",
      fill: "none",
      strokeWidth: 60,
      strokeLinejoin: "round"
    }));
  }
  var Precipitation_default = SvgPrecipitation;

  // build/lib-react-tsx/cheminfo/SdfTable.tsx
  var React25 = __toModule(require_react());
  function SvgSdfTable({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React25.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React25.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React25.createElement("text", {
      style: {
        lineHeight: 1.25
      },
      x: 249.115,
      y: 394.333,
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      fill: "#000",
      stroke: "none"
    }), /* @__PURE__ */ React25.createElement("path", {
      d: "M247.934 446.281h684.77M247.934 602.912h684.77M247.934 759.543h684.77M247.934 916.175h684.77M280.992 451.004v472.255M639.906 425.03v472.255M898.465 451.004v472.255",
      fill: "none",
      stroke: "#000",
      strokeWidth: 66.667
    }), /* @__PURE__ */ React25.createElement("g", {
      "aria-label": "SDF",
      style: {
        lineHeight: 1.25
      },
      fontSize: 40,
      fill: "#000",
      stroke: "none"
    }, /* @__PURE__ */ React25.createElement("path", {
      d: "M253.27 252.045q0 35.808-30.436 58.269-30.274 22.298-82.357 22.298-30.11 0-52.571-5.209-22.299-5.37-41.83-13.509V255.79h6.836q19.369 15.462 43.294 23.763 24.089 8.3 46.224 8.3 5.697 0 14.974-.976 9.278-.976 15.137-3.255 7.161-2.93 11.719-7.324 4.72-4.395 4.72-13.021 0-7.975-6.836-13.672-6.673-5.86-19.694-8.952-13.672-3.255-28.972-6.022-15.136-2.93-28.483-7.324-30.599-9.928-44.108-26.856-13.346-17.09-13.346-42.317 0-33.854 30.273-55.176 30.437-21.484 78.125-21.484 23.926 0 47.2 4.72 23.438 4.557 40.528 11.556v55.827h-6.673q-14.648-11.72-35.97-19.532-21.159-7.975-43.294-7.975-7.813 0-15.625 1.14-7.65.976-14.811 3.906-6.348 2.441-10.905 7.487-4.558 4.882-4.558 11.23 0 9.603 7.325 14.811 7.324 5.046 27.669 9.278 13.346 2.766 25.553 5.37 12.37 2.605 26.53 7.162 27.832 9.115 41.016 24.902 13.346 15.625 13.346 40.69zM525.242 207.286q0 33.855-15.462 60.71-15.462 26.693-39.062 41.016-17.741 10.742-38.9 14.973-21.159 4.232-50.13 4.232h-85.45V85.867h87.891q29.623 0 51.107 5.046 21.484 4.883 36.133 13.997 25.065 15.3 39.388 41.341 14.485 25.88 14.485 61.035zm-64.615-.488q0-23.926-8.79-40.853-8.626-17.09-27.506-26.692-9.603-4.72-19.694-6.348-9.928-1.79-30.11-1.79h-15.788v151.692h15.787q22.299 0 32.715-1.953 10.417-2.116 20.345-7.487 17.09-9.766 25.065-26.042 7.976-16.438 7.976-40.527zM746.596 132.742h-111.49v45.085h103.352v46.875H635.106v103.515H572.93V85.867h173.665z"
    })));
  }
  var SdfTable_default = SvgSdfTable;

  // build/lib-react-tsx/cheminfo/SearchSdf.tsx
  var React26 = __toModule(require_react());
  function SvgSearchSdf({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React26.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React26.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React26.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React26.createElement("path", {
      strokeWidth: 46.91,
      d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251"
    }), /* @__PURE__ */ React26.createElement("path", {
      strokeWidth: 46.908,
      d: "M897.764 890.229l-235.87-315.79-82.568 61.672 235.871 315.791M815.197 951.902c21.303 26.598 23.303 26.598 53.354 7.72M868.552 959.624l21.485-16.054M890.037 943.57c29.463-22.07 29.463-23.07 7.728-53.342"
    })), /* @__PURE__ */ React26.createElement("g", {
      "aria-label": "SDF",
      style: {
        lineHeight: 1.25
      },
      fontSize: 40,
      fill: "#000",
      stroke: "none"
    }, /* @__PURE__ */ React26.createElement("path", {
      d: "M307.172 377.27q0 25.78-21.915 41.953-21.796 16.054-59.296 16.054-21.68 0-37.852-3.75-16.055-3.867-30.117-9.726v-41.836h4.922q13.945 11.133 31.172 17.11 17.343 5.976 33.28 5.976 4.102 0 10.782-.703t10.899-2.344q5.156-2.11 8.437-5.273 3.398-3.165 3.398-9.375 0-5.743-4.921-9.844-4.805-4.219-14.18-6.446-9.844-2.343-20.86-4.335-10.898-2.11-20.507-5.274-22.032-7.148-31.758-19.336-9.61-12.305-9.61-30.469 0-24.375 21.797-39.726 21.914-15.469 56.25-15.469 17.227 0 33.985 3.399 16.875 3.28 29.18 8.32v40.195h-4.805q-10.547-8.437-25.899-14.062-15.234-5.743-31.172-5.743-5.625 0-11.25.82-5.507.704-10.664 2.813-4.57 1.758-7.851 5.39-3.281 3.517-3.281 8.087 0 6.914 5.273 10.664 5.273 3.633 19.922 6.68 9.61 1.992 18.398 3.867 8.907 1.875 19.102 5.156 20.039 6.563 29.531 17.93 9.61 11.25 9.61 29.297zM502.992 345.043q0 24.375-11.133 43.711-11.133 19.219-28.125 29.531-12.773 7.735-28.008 10.781-15.234 3.047-36.094 3.047H338.11V257.621h63.281q21.328 0 36.797 3.633 15.469 3.516 26.016 10.078 18.047 11.016 28.36 29.766 10.429 18.633 10.429 43.945zm-46.524-.352q0-17.226-6.328-29.414-6.21-12.304-19.804-19.218-6.914-3.399-14.18-4.57-7.149-1.29-21.68-1.29H383.11v109.219h11.367q16.055 0 23.555-1.406 7.5-1.524 14.648-5.39 12.305-7.032 18.047-18.75 5.742-11.837 5.742-29.18zM662.367 291.371h-80.274v32.461h74.414v33.75h-74.414v74.531h-44.765V257.621h125.039z"
    })), /* @__PURE__ */ React26.createElement("text", {
      x: 249.115,
      y: 394.333
    }));
  }
  var SearchSdf_default = SvgSearchSdf;

  // build/lib-react-tsx/cv/Assignment.tsx
  var React27 = __toModule(require_react());
  function SvgAssignment({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React27.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React27.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React27.createElement("path", {
      d: "M250 710.809a19.661 19.661 0 00-19.662 19.662A19.661 19.661 0 00250 750.133h683.604a19.661 19.661 0 0019.66-19.662 19.661 19.661 0 00-19.66-19.662H250z"
    }), /* @__PURE__ */ React27.createElement("path", {
      d: "M947.408 710.81a19.661 19.661 0 00-11.734 4.004l-51.27 38.956a19.661 19.661 0 00-3.761 27.55 19.661 19.661 0 0027.55 3.76l51.27-38.955a19.661 19.661 0 003.76-27.549 19.661 19.661 0 00-15.815-7.765z"
    }), /* @__PURE__ */ React27.createElement("path", {
      d: "M896.352 672.04a19.661 19.661 0 00-15.737 7.802 19.661 19.661 0 003.824 27.54l51.27 38.77a19.661 19.661 0 0027.541-3.822 19.661 19.661 0 00-3.822-27.54l-51.272-38.772a19.661 19.661 0 00-11.804-3.979zM199.373 261.646h-37.218l-9.657-28.219h-51.75l-9.656 28.22H54.811l51.562-139.595h41.438zm-55.593-53.812l-17.157-50.063-17.156 50.063zM864.079 816.338l-50.907 139.594H772.86l-50.906-139.594h37.78l33.75 98.063 33.75-98.063zM230.34 733.603A19.661 19.661 0 00250 753.265a19.661 19.661 0 0019.662-19.662V50a19.661 19.661 0 00-19.663-19.66A19.661 19.661 0 00230.34 50v683.603z"
    }), /* @__PURE__ */ React27.createElement("path", {
      d: "M230.34 36.195a19.661 19.661 0 004.005 11.734L273.3 99.2a19.661 19.661 0 0027.55 3.761 19.661 19.661 0 003.76-27.55l-38.954-51.27a19.661 19.661 0 00-27.551-3.76 19.661 19.661 0 00-7.766 15.815z"
    }), /* @__PURE__ */ React27.createElement("path", {
      d: "M191.568 87.252a19.661 19.661 0 007.803 15.736 19.661 19.661 0 0027.54-3.824l38.772-51.27a19.661 19.661 0 00-3.824-27.54 19.661 19.661 0 00-27.541 3.821l-38.77 51.272a19.661 19.661 0 00-3.98 11.805z"
    }), /* @__PURE__ */ React27.createElement("path", {
      d: "M350 650s107.143-254.286 157.143-254.286c100 0 130 1.429 180 1.429s138.571-244.286 188.571-244.286C875.714 152.857 820 530 770 530H528.571C416.768 530 350 650 350 650",
      fill: "none",
      stroke: "#000",
      strokeWidth: 50
    }));
  }
  var Assignment_default = SvgAssignment;

  // build/lib-react-tsx/dsc/Assignment.tsx
  var React28 = __toModule(require_react());
  function SvgAssignment2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React28.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React28.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React28.createElement("path", {
      d: "M111.034 811.033c0 12.99 8.7 23.41 19.543 23.41 10.724 0 19.423-10.42 19.423-23.41zm0 0V162.016H150v649.017zM150 162.016c0-12.849-8.699-23.265-19.423-23.265-10.844 0-19.543 10.416-19.543 23.265z",
      stroke: "none"
    }), /* @__PURE__ */ React28.createElement("path", {
      d: "M130.577 131.362l49.928 65.896M80.648 197.258l49.929-65.896",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React28.createElement("path", {
      d: "M150 811.033c-14.708 0-26.506 8.7-26.506 19.423C123.494 841.3 135.292 850 150 850zm0 0h734.906V850H150zM884.906 850c14.545 0 26.345-8.7 26.345-19.544 0-10.723-11.8-19.423-26.345-19.423z",
      stroke: "none"
    }), /* @__PURE__ */ React28.createElement("path", {
      d: "M918.637 830.456l-65.897 50.048M852.74 780.53l65.897 49.926",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React28.createElement("path", {
      d: "M211.263 544.971c83.577 2.322 58.81-201.228 124.404-198.3 55.383 2.473 47.375 220.412 158.829 219.194 163.146-1.782 118.444 102.363 188.047 102.15 39.234-.214 41.71-104.406 88.313-102.017 66.087 3.387 122.268 4.986 148.351 3.001",
      fill: "none",
      strokeWidth: 29.9991052
    }));
  }
  var Assignment_default2 = SvgAssignment2;

  // build/lib-react-tsx/ea/Request.tsx
  var React29 = __toModule(require_react());
  function SvgRequest({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React29.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React29.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React29.createElement("path", {
      d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235l-217.03 251.696-37.674-32.266 217.03-251.899zM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008l53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89l-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38V153.654l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307zM336.331 208.886c-9.922 11.001-14.883 25.67-14.883 40.554l-53.711.43c.216-27.825 9.922-55.436 29.336-76.791zm-14.883 40.554c-.216 14.883 4.961 29.551 14.883 40.768l-39.905 36.023c-19.198-21.14-28.69-48.965-28.69-76.36zm14.883 40.768c1.294 1.51 2.59 2.804 3.883 3.883l-36.239 39.69c-2.588-2.373-5.177-4.746-7.55-7.55zm3.883 3.883c8.628 7.765 19.198 11.864 29.552 11.864l-.648 53.495c-23.296 0-46.377-8.628-65.143-25.669zm29.552 11.864c10.354 0 20.708-3.883 29.337-11.649l35.591 39.475c-18.982 17.257-42.278 25.67-65.575 25.67zm29.337-11.649a29.444 29.444 0 003.667-3.667l39.474 35.808c-2.373 2.588-4.962 5.177-7.55 7.334zm3.667-3.667c10.138-11 15.099-25.67 15.099-40.552l53.495-.432c0 27.61-9.706 55.436-29.12 76.792zm15.099-40.552c0-14.884-4.961-29.768-15.1-40.985l39.906-36.023c19.198 21.355 28.69 48.966 28.69 76.576zm-15.1-40.985l-3.666-3.667 36.023-39.906c2.803 2.373 5.176 4.961 7.55 7.55zm-3.666-3.667c-8.845-7.981-19.198-11.864-29.768-11.864l.864-53.495c23.08 0 46.161 8.412 64.927 25.453zm-29.768-11.864c-10.139 0-20.493 3.667-29.12 11.433l-35.808-39.475c18.982-17.04 42.279-25.67 65.79-25.453zm-29.12 11.433l-3.884 3.882-39.258-35.807c2.372-2.804 4.745-5.177 7.334-7.55zM388.101 589.825c-5.824 13.59.648 29.337 14.237 34.946 13.805 5.608 29.336-1.078 35.16-14.669zm0 0l180.98-433.14 49.396 20.061-180.979 433.356zm230.376-413.079c5.824-13.59-.648-29.336-14.237-34.73-13.59-5.607-29.336.863-35.16 14.67zM603.809 476.148c-9.923 11-14.884 25.67-15.1 40.553l-53.495.216c.216-27.61 9.922-55.22 29.336-76.576zm-15.1 40.553c0 14.883 5.177 29.552 15.1 40.768l-39.906 36.023c-19.198-21.139-28.69-48.965-28.69-76.575zm15.1 40.768c1.294 1.51 2.588 2.59 3.883 3.883l-36.24 39.69a124.455 124.455 0 01-7.55-7.55zm3.883 3.883c8.628 7.766 19.197 11.864 29.551 11.864l-.648 53.496c-23.296 0-46.377-8.629-65.143-25.67zm29.551 11.864c10.355 0 20.708-3.883 29.337-11.648l35.591 39.475c-18.982 17.256-42.278 25.669-65.575 25.669zm29.337-11.648a29.4 29.4 0 003.667-3.667l39.474 35.808c-2.373 2.588-4.961 5.176-7.55 7.334zm3.667-3.667c9.922-11 15.099-25.67 15.099-40.553l53.496-.432c0 27.61-9.707 55.437-29.12 76.792zm15.099-40.553c0-14.884-4.961-29.768-15.1-40.985l39.907-36.023c19.198 21.355 28.689 48.966 28.689 76.577zm-15.1-40.985l-3.666-3.667 36.023-39.905c2.804 2.372 5.177 4.96 7.55 7.55zm-3.666-3.667c-8.845-7.98-19.198-11.863-29.768-11.863l.862-53.712c23.08.216 46.162 8.628 64.928 25.67zm-29.768-11.863c-10.138-.216-20.492 3.667-29.12 11.432l-35.808-39.474c18.982-17.042 42.279-25.67 65.79-25.67zm-29.12 11.432l-3.883 3.883-39.26-35.808c2.374-2.804 4.746-5.177 7.335-7.55z",
      stroke: "none"
    }));
  }
  var Request_default = SvgRequest;

  // build/lib-react-tsx/glassware/Beaker2.tsx
  var React30 = __toModule(require_react());
  function SvgBeaker2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React30.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React30.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React30.createElement("path", {
      d: "M305.834 420.256H666.58v208.723H305.834V420.256z"
    }), /* @__PURE__ */ React30.createElement("path", {
      fill: "none",
      strokeWidth: 31.668,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M708.795 174.282h-402.96v454.697H666.58V231.243l42.215-56.961z"
    }), /* @__PURE__ */ React30.createElement("path", {
      fill: "none",
      strokeWidth: 31.475,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M305.834 250.75h69.98M305.834 308.2h69.98M305.834 365.652h69.98"
    }), /* @__PURE__ */ React30.createElement("path", {
      fill: "#FEFEFE",
      d: "M641.5 420.5l8 21-2 186-29 17 18-22 1-183zM604.5 421.5l8 21-2 186-29 17 8-22 1-183z"
    }));
  }
  var Beaker2_default = SvgBeaker2;

  // build/lib-react-tsx/glassware/Beaker.tsx
  var React31 = __toModule(require_react());
  function SvgBeaker({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React31.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React31.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React31.createElement("path", {
      d: "M305.835 420.256H666.58v208.722H305.835z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React31.createElement("path", {
      d: "M708.796 174.281H305.835v454.697H666.58V231.242z",
      fill: "none",
      strokeWidth: 31.668,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React31.createElement("path", {
      d: "M612.097 482.02c-10.267-2.842-20.918 3.432-23.675 14.02-2.759 10.687 3.422 21.568 13.692 24.412 10.268 2.843 20.823-3.432 23.58-14.117 2.759-10.59-3.329-21.472-13.597-24.315zM579.485 534.96c-14.264-4.02-28.906 4.707-32.711 19.412-3.802 14.707 4.659 29.804 18.923 33.724 14.168 3.923 28.81-4.804 32.708-19.41 3.802-14.707-4.659-29.804-18.92-33.727z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React31.createElement("path", {
      d: "M305.835 250.75h69.98M305.835 308.2h69.98M305.835 365.651h69.98",
      fill: "none",
      strokeWidth: 31.475,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Beaker_default = SvgBeaker;

  // build/lib-react-tsx/glassware/Erlen.tsx
  var React32 = __toModule(require_react());
  function SvgErlen({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React32.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React32.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React32.createElement("path", {
      d: "M557.846 307.002V97.791H442.793v209.211h-.284l-135.114 288.23c-.285.687-.474 1.276-.758 2.058-8.084 24.51-8.273 53.136-.381 76.861 7.604 22.844 21.488 36.668 37.175 36.668h313.68c15.691 0 29.572-13.629 37.275-36.57 7.796-23.625 7.604-52.351-.38-76.762-.191-.686-.476-1.275-.666-1.863L557.942 307.002z",
      fill: "none",
      strokeWidth: 31.475,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React32.createElement("path", {
      d: "M351.323 501.606l-43.928 93.626c-.285.687-.474 1.276-.758 2.058-8.084 24.51-8.273 53.136-.381 76.861 7.604 22.844 21.488 36.668 37.175 36.668h313.68c15.691 0 29.572-13.629 37.275-36.57 7.796-23.625 7.604-52.351-.38-76.762-.191-.686-.476-1.275-.666-1.863l-44.12-94.018z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React32.createElement("path", {
      d: "M626.687 563.763c-10.27-2.845-20.826 3.528-23.582 14.117-2.757 10.587 3.328 21.47 13.596 24.312 10.27 2.845 20.826-3.432 23.582-14.019 2.756-10.586-3.329-21.568-13.596-24.41zM594.072 616.702c-14.262-3.92-28.904 4.804-32.709 19.51-3.802 14.607 4.66 29.706 18.923 33.725 14.262 3.92 28.904-4.803 32.709-19.51 3.802-14.705-4.66-29.802-18.923-33.725z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React32.createElement("path", {
      d: "M443.84 156.809h69.981M443.84 214.259h69.981M443.84 271.709h69.981",
      fill: "none",
      strokeWidth: 31.475,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Erlen_default = SvgErlen;

  // build/lib-react-tsx/glassware/RoundFlask.tsx
  var React33 = __toModule(require_react());
  function SvgRoundFlask({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React33.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React33.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React33.createElement("path", {
      d: "M448.326 388.312c-81.754 23.07-141.578 98.158-141.578 187.282 0 69.648 36.666 130.788 91.754 165.173h205.7c55.09-34.385 91.754-95.525 91.754-165.173 0-89.124-59.824-164.211-141.49-187.282V192.349h-106.14z",
      fill: "none",
      strokeWidth: 28.596,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React33.createElement("path", {
      d: "M308.064 553.313a186.466 186.466 0 00-1.316 22.28c0 69.649 36.666 130.789 91.754 165.174h205.7c55.09-34.385 91.754-95.525 91.754-165.173 0-7.546-.437-15-1.227-22.281z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React33.createElement("path", {
      d: "M621.833 590.68c-9.472-2.543-19.21 3.07-21.753 12.631-2.545 9.475 3.071 19.21 12.544 21.756 9.475 2.543 19.298-3.07 21.841-12.546 2.546-9.56-3.157-19.296-12.632-21.841zM591.747 638.05c-13.157-3.51-26.667 4.21-30.175 17.366-3.51 13.16 4.298 26.667 17.455 30.175 13.16 3.51 26.667-4.21 30.175-17.367 3.51-13.159-4.298-26.667-17.455-30.174z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React33.createElement("path", {
      d: "M581.396 50.946c-14.65-3.948-29.824 4.824-33.771 19.561-3.947 14.65 4.823 29.825 19.56 33.772 14.65 3.947 29.825-4.825 33.772-19.561 3.947-14.65-4.824-29.825-19.561-33.772zM552.011 121.033c-10.616-2.895-21.492 3.421-24.387 14.035-2.807 10.614 3.509 21.579 14.122 24.386 10.614 2.895 21.493-3.421 24.387-14.035 2.808-10.614-3.508-21.579-14.122-24.386zM520.08 82.875c-8.245-2.28-16.754 2.632-18.947 10.878-2.193 8.333 2.72 16.754 10.965 19.035 8.246 2.193 16.754-2.72 18.947-10.965 2.193-8.246-2.72-16.755-10.965-18.948zM502.624 144.63c-5.614-1.492-11.403 1.842-12.894 7.456-1.58 5.614 1.754 11.403 7.456 12.982 5.614 1.491 11.403-1.842 12.894-7.544 1.492-5.614-1.842-11.403-7.456-12.895z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var RoundFlask_default = SvgRoundFlask;

  // build/lib-react-tsx/glassware/Titration.tsx
  var React34 = __toModule(require_react());
  function SvgTitration({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React34.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React34.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React34.createElement("path", {
      d: "M469.9 100h150v50h-150z",
      fill: "none"
    }), /* @__PURE__ */ React34.createElement("path", {
      d: "M610.371 722.195V581.683h29.402v140.512zM399.202 668.633h201.255v-33.388H399.202z",
      fill: "none",
      strokeWidth: 17.094,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React34.createElement("path", {
      d: "M403.418 122.078h192.708v388.605l-47.864 56.981v182.454l-48.433 68.716-48.548-68.716V567.664l-47.863-56.98z",
      fill: "#fff",
      strokeWidth: 37.265,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React34.createElement("path", {
      d: "M520 205.953H403.418M520 277.977H403.418M520 350H403.418M520 422.024H403.418",
      fill: "none",
      strokeWidth: 37.265,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React34.createElement("path", {
      d: "M597.608 684.476h55.043v-65.074h-55.043z",
      fill: "#fff",
      fillRule: "evenodd",
      strokeWidth: 17.094,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Titration_default = SvgTitration;

  // build/lib-react-tsx/icp/Request.tsx
  var React35 = __toModule(require_react());
  function SvgRequest2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React35.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React35.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React35.createElement("path", {
      d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235l-217.03 251.696-37.674-32.266 217.03-251.899zM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008l53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89l-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38V153.654l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307zM134 516.944v-264.14c0-13.66 3.084-24.013 9.473-30.843 6.168-6.829 14.32-10.354 24.233-10.354 10.134 0 18.285 3.305 24.674 10.134 6.389 6.83 9.473 17.184 9.473 31.062v264.14c0 13.88-3.084 24.234-9.473 31.064-6.39 6.829-14.54 10.353-24.674 10.353-9.693 0-17.844-3.524-24.233-10.353-6.169-7.05-9.473-17.405-9.473-31.063zm429.586-70.276c0 10.795-2.643 22.25-7.93 34.587-5.288 12.557-13.439 24.674-24.895 36.79-11.235 11.896-25.555 21.59-43.178 29.08-17.404 7.49-37.892 11.235-61.244 11.235-17.624 0-33.706-1.763-48.246-5.067-14.54-3.304-27.758-8.591-39.434-15.64-11.896-7.05-22.69-16.523-32.604-27.98-8.812-10.573-16.523-22.25-22.69-35.468-6.17-12.997-11.016-26.876-14.1-41.636-3.084-14.76-4.627-30.622-4.627-47.145 0-26.876 3.966-51.11 11.676-72.479 7.931-21.369 19.166-39.653 33.706-54.854 14.76-14.98 31.944-26.657 51.55-34.587 19.607-7.931 40.757-11.897 63.007-11.897 27.097 0 51.11 5.508 72.478 16.303 21.15 10.794 37.451 24.233 48.687 40.094 11.235 15.862 16.963 31.063 16.963 45.162 0 7.71-2.864 14.54-8.372 20.488-5.507 5.948-12.116 9.032-19.827 9.032-8.591 0-15.2-2.203-19.606-6.168-4.406-4.186-9.253-11.236-14.54-21.37-8.812-16.522-19.166-29.08-31.062-37.23-12.117-8.152-26.877-12.337-44.28-12.337-27.98 0-50.23 10.574-66.752 31.723-16.522 21.37-24.894 51.33-24.894 90.323 0 26.216 3.745 47.806 11.015 65.21 7.27 17.183 17.624 30.18 31.063 38.772 13.438 8.371 29.3 12.778 47.144 12.778 19.607 0 36.13-4.847 49.567-14.54 13.439-9.693 23.573-23.793 30.622-42.738 2.864-8.812 6.389-15.862 10.795-21.59 4.186-5.507 11.015-8.371 20.488-8.371 8.151 0 14.98 2.864 20.708 8.591 5.948 5.508 8.812 12.558 8.812 20.929zm191-24.674h-62.124v94.95c0 13.658-3.084 23.792-9.693 30.842-6.389 7.05-14.32 10.574-24.233 10.574-10.134 0-18.285-3.524-24.674-10.353-6.168-7.05-9.253-17.184-9.253-30.622V258.972c0-14.98 3.305-25.555 10.355-31.944 6.829-6.609 17.624-9.693 32.604-9.693h87.017c25.775 0 45.606 1.983 59.483 5.948 13.66 3.745 25.553 10.134 35.687 18.946 9.913 8.812 17.403 19.607 22.693 32.384 5.289 12.998 7.712 27.317 7.712 43.4 0 34.146-10.579 59.92-31.502 77.545-21.151 17.624-52.437 26.436-94.073 26.436zm-16.302-153.77h-45.822v102.66h45.822c15.863 0 29.302-1.762 40.097-5.066 10.572-3.305 18.944-8.812 24.449-16.523 5.733-7.71 8.593-17.624 8.593-29.96 0-14.76-4.407-26.877-12.995-36.13-9.913-9.913-29.96-14.98-60.144-14.98z",
      stroke: "none"
    }));
  }
  var Request_default2 = SvgRequest2;

  // build/lib-react-tsx/inventory/Add.tsx
  var React36 = __toModule(require_react());
  function SvgAdd({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React36.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React36.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React36.createElement("path", {
      d: "M424.176 303.053V170.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H356.46c-30.357 0-55.108-24.752-55.108-55.106V450.163c0-3.425.312-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29zM391.33 170.42H610.67",
      fill: "none",
      strokeWidth: 46.702,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React36.createElement("path", {
      d: "M539.53 402.527c.155-21.327-17.125-38.606-38.452-38.45-21.327.155-38.606 17.59-38.763 38.917zm0 0v217.32l-77.215.62V402.994zm-77.215 217.939c0 21.328 17.28 38.452 38.607 38.3 21.328-.158 38.607-17.595 38.607-38.919zm147.11-70.361c21.328-.158 38.763-17.438 38.919-38.761.156-21.328-17.124-38.609-38.451-38.453zm0 0H391.953l.624-77.214h217.317zm-216.85-77.214c-21.327 0-38.763 17.282-38.918 38.605-.156 21.328 16.968 38.609 38.295 38.609z",
      stroke: "none"
    }), /* @__PURE__ */ React36.createElement("path", {
      d: "M418.105 54.133h165.79c14.01 0 28.956 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H430.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Add_default = SvgAdd;

  // build/lib-react-tsx/inventory/Empty.tsx
  var React37 = __toModule(require_react());
  function SvgEmpty({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React37.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React37.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React37.createElement("path", {
      d: "M426.176 299.053V166.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H358.46c-30.356 0-55.108-24.752-55.108-55.106V446.163c0-3.425.311-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29z",
      fill: "none",
      strokeWidth: 46.702,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React37.createElement("path", {
      d: "M694.65 652.426v20.552c0 30.198-24.908 55.106-55.109 55.106H350.46c-30.2 0-55.108-24.752-55.108-55.106v-20.552c141.194-24.281 259.66 19.616 399.298 0z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React37.createElement("path", {
      d: "M385.33 166.42H604.67",
      fill: "none",
      strokeWidth: 46.702,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React37.createElement("path", {
      d: "M412.105 50.133h165.79c14.01 0 28.955 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H424.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Empty_default = SvgEmpty;

  // build/lib-react-tsx/inventory/Full.tsx
  var React38 = __toModule(require_react());
  function SvgFull({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React38.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React38.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React38.createElement("path", {
      d: "M424.176 301.053V168.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H356.46c-30.357 0-55.108-24.752-55.108-55.106V448.163c0-3.425.312-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29z",
      fill: "none",
      strokeWidth: 46.702,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React38.createElement("path", {
      d: "M700.65 358.651v316.327c0 30.354-24.908 55.106-55.108 55.106H356.459c-30.356 0-55.108-24.752-55.108-55.106V358.651c141.194-24.285 259.66 19.615 399.298 0z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React38.createElement("path", {
      d: "M391.33 168.42H610.67",
      fill: "none",
      strokeWidth: 46.702,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React38.createElement("path", {
      d: "M418.105 52.133h165.79c14.01 0 28.956 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H430.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Full_default = SvgFull;

  // build/lib-react-tsx/inventory/Status.tsx
  var React39 = __toModule(require_react());
  function SvgStatus({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React39.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React39.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React39.createElement("path", {
      d: "M344.382 172.769h311.365c39.067 0 70.982 31.916 70.982 70.983V640.51c0 38.961-31.915 70.985-70.982 70.985H344.382c-38.96 0-70.983-32.024-70.983-70.985V243.752c0-39.067 31.916-70.983 70.983-70.983z",
      fill: "none",
      strokeWidth: 34.798,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M500.118 65.493c33.944 0 62.23 24.124 68.85 56.04H636v90.837H364.129v-90.837h67.034c6.618-31.916 35.011-56.04 68.955-56.04z",
      fill: "#fff",
      strokeWidth: 34.798,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M508.23 100.932c-16.758-4.484-33.943 5.444-38.427 22.202-4.483 16.652 5.444 33.837 22.203 38.32 16.651 4.483 33.837-5.444 38.32-22.095 4.483-16.759-5.444-33.944-22.096-38.427z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M503.427 118.65c-6.938-1.92-14.09 2.242-15.904 9.18-1.922 6.939 2.241 14.09 9.18 15.905 6.938 1.921 14.09-2.241 16.01-9.18 1.815-6.938-2.348-14.09-9.286-15.904z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M646.034 331.814H419.528",
      fill: "none",
      strokeWidth: 35.011,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M356.87 313.347c-10.246-2.775-20.707 3.31-23.376 13.557-2.775 10.14 3.31 20.708 13.45 23.375 10.247 2.775 20.708-3.306 23.483-13.448 2.669-10.247-3.309-20.708-13.556-23.484z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M646.034 418.809H419.528",
      fill: "none",
      strokeWidth: 35.011,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M356.87 400.34c-10.246-2.774-20.707 3.31-23.376 13.558-2.775 10.14 3.31 20.709 13.45 23.376 10.247 2.775 20.708-3.31 23.483-13.45 2.669-10.245-3.309-20.706-13.556-23.484z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M646.034 505.804H419.528",
      fill: "none",
      strokeWidth: 35.011,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M356.87 487.335c-10.246-2.774-20.707 3.31-23.376 13.558-2.775 10.141 3.31 20.706 13.45 23.376 10.247 2.775 20.708-3.31 23.483-13.558 2.669-10.137-3.309-20.6-13.556-23.376z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M646.034 592.796H419.528",
      fill: "none",
      strokeWidth: 35.011,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M356.87 574.33c-10.246-2.774-20.707 3.31-23.376 13.558-2.775 10.138 3.31 20.706 13.45 23.376 10.247 2.775 20.708-3.31 23.483-13.557 2.669-10.141-3.309-20.602-13.556-23.376z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M561.067 685.476l62.657 62.658 161.714-168.226",
      fill: "none",
      stroke: "#fefefe",
      strokeWidth: 74.719,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React39.createElement("path", {
      d: "M561.067 685.476l62.657 62.658 161.714-168.226",
      fill: "none",
      strokeWidth: 35.011,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Status_default = SvgStatus;

  // build/lib-react-tsx/inventory/Toxic.tsx
  var React40 = __toModule(require_react());
  function SvgToxic({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React40.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React40.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React40.createElement("path", {
      d: "M424.176 303.053V170.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H356.46c-30.357 0-55.108-24.752-55.108-55.106V450.163c0-3.425.312-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29zM391.33 170.42H610.67",
      fill: "none",
      strokeWidth: 46.702,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React40.createElement("path", {
      d: "M418.105 54.133h165.79c14.01 0 28.956 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H430.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53zM564.125 643.353c-.466 1.399-.934 2.801-1.09 4.204L529.41 632.92l37.984-16.501.156.313c3.58 8.094 12.92 11.675 21.016 8.25 8.095-3.58 11.83-12.92 8.25-21.018-1.867-4.356-5.292-7.314-9.34-8.716a18.21 18.21 0 002.18-18.057c-3.892-8.873-14.322-13.077-23.352-9.187-8.873 3.895-13.076 14.323-9.184 23.354a15.316 15.316 0 002.335 3.737L502.324 620l-1.402.624-1.401-.624-56.976-24.904c.934-1.093 1.556-2.34 2.18-3.737 3.891-9.03-.157-19.46-9.185-23.354-8.874-3.89-19.304.313-23.351 9.187-2.647 6.225-1.557 13.077 2.335 18.057-4.048 1.403-7.628 4.36-9.496 8.716-3.425 8.098.311 17.438 8.406 21.019 8.095 3.424 17.435-.158 21.016-8.25v-.314l38.14 16.501-33.625 14.637c-.156-1.403-.624-2.806-1.246-4.204-3.892-9.03-14.322-13.077-23.351-9.187-8.873 3.894-13.076 14.323-9.184 23.354 2.801 6.068 8.561 9.962 14.788 10.585-1.712 3.89-2.024 8.56-.156 12.764 3.581 8.093 12.921 11.83 21.172 8.407 8.095-3.58 11.675-13.077 8.25-21.171l-.155-.157 51.838-22.574 51.995 22.574-.156.157c-3.58 8.094.156 17.59 8.25 21.171 8.096 3.424 17.592-.313 21.017-8.407 1.867-4.204 1.712-8.874 0-12.764 6.226-.624 11.986-4.517 14.632-10.585 3.892-9.03-.156-19.46-9.184-23.354-8.873-3.89-19.303.157-23.351 9.187zM551.983 484.1c-20.549 0-37.05-16.658-37.05-37.05 0-20.55 16.501-37.206 37.05-37.206 20.549 0 37.205 16.657 37.205 37.206 0 20.392-16.656 37.05-37.205 37.05zm-65.071 4.514l16.501-19.46 17.124 19.46zm-32.536-4.515c-20.548 0-37.205-16.657-37.205-37.05 0-20.548 16.657-37.205 37.205-37.205 20.55 0 37.206 16.657 37.206 37.206 0 20.392-16.657 37.05-37.206 37.05zM563.97 360.34H438.03c-22.883 0-41.563 18.68-41.563 41.564v89.358c0 22.883 18.68 41.562 41.564 41.562h4.67v20.239c0 6.072 4.982 10.895 11.053 10.895h.934c6.071 0 10.897-4.823 10.897-10.895v-20.239h8.406v20.239c0 6.072 4.826 10.895 10.897 10.895h1.09c5.916 0 10.897-4.823 10.897-10.895v-20.239h8.25v20.239c0 6.072 4.982 10.895 10.898 10.895h1.09c5.915 0 10.896-4.823 10.896-10.895v-20.239h8.25v20.239c0 6.072 4.983 10.895 10.898 10.895h1.09c6.07 0 10.896-4.823 10.896-10.895v-20.239h4.826c22.884 0 41.565-18.68 41.565-41.562v-89.358c0-22.883-18.68-41.564-41.565-41.564z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Toxic_default = SvgToxic;

  // build/lib-react-tsx/ir/Assignment.tsx
  var React41 = __toModule(require_react());
  function SvgAssignment3({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React41.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React41.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React41.createElement("path", {
      d: "M49.941 730.47h883.662M947.568 730.47l-51.27 38.956M896.298 691.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React41.createElement("path", {
      d: "M97.35 114.927c87.832-20.764 119.621 79.197 124.583 157.475 11.576 179.157 25.725 256.15 86.179 252.84 158.21 1.105 12.679-436.775 212.233-419.503 95.92 8.27 85.445 76.992 90.222 155.822 4.962 83.974 6.062 143.326 16.171 209.66 37.85-109.516-11.394-356.845 162.804-360.337 35.649-.734 64.68.919 96.653 2.573",
      fill: "none",
      strokeWidth: 31.973,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React41.createElement("path", {
      d: "M326.284 588.229c0-7.485-6.092-13.576-13.402-13.576-7.485 0-13.576 6.091-13.576 13.576zm0 0v90.333h-26.978V588.23zm-26.978 90.333c0 7.31 6.091 13.402 13.576 13.402 7.31 0 13.402-6.092 13.402-13.402zM644.174 533.576c0-7.484-6.092-13.576-13.576-13.576-7.31 0-13.402 6.092-13.402 13.576zm0 0v90.334h-26.978v-90.334zm-26.978 90.334c0 7.31 6.091 13.402 13.402 13.402 7.484 0 13.576-6.092 13.576-13.402zM447.477 902.976c0 3.312-1.102 6.803-2.94 10.474-2.021 3.677-4.962 7.353-9.004 10.66-4.043 3.306-9.004 6.062-15.252 8.083-6.063 2.205-12.862 3.126-20.58 3.126-16.17 0-28.848-4.777-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.655 2.021-20.213 6.248-28.482 4.042-8.268 10.106-14.7 18.008-19.292 7.9-4.412 17.456-6.798 28.48-6.798 6.8 0 13.047 1.1 18.744 3.121 5.512 1.841 10.473 4.412 14.332 7.533 4.043 3.312 6.983 6.618 9.004 10.11 2.205 3.676 3.124 6.982 3.124 9.923 0 3.306-1.102 5.878-3.491 8.083-2.39 2.206-5.145 3.307-8.453 3.307-2.205 0-4.043-.55-5.512-1.651-1.47-1.106-2.94-2.941-4.778-5.512-3.308-4.962-6.615-8.454-10.106-11.03-3.491-2.385-7.902-3.671-13.414-3.671-7.718 0-13.965 3.121-18.743 9.183-4.777 6.068-7.166 14.336-7.166 24.81 0 4.962.734 9.554 1.837 13.78 1.287 4.042 3.124 7.533 5.33 10.475 2.388 2.941 5.144 5.147 8.452 6.612 3.307 1.656 6.798 2.391 10.84 2.391 5.146 0 9.74-1.286 13.415-3.676 3.859-2.571 7.166-6.248 9.923-11.21 1.654-2.936 3.49-5.327 5.328-6.982 1.838-1.651 4.043-2.386 6.8-2.386 3.123 0 5.88 1.1 7.9 3.491 2.205 2.571 3.308 5.142 3.308 7.898zm110.25-18.922v34.908c0 5.518-1.102 9.74-3.674 12.5-2.573 2.757-5.88 4.042-9.923 4.042-4.042 0-7.166-1.286-9.739-4.042-2.388-2.76-3.675-6.982-3.675-12.5v-41.89c0-6.618-.184-11.76-.734-15.437-.368-3.676-1.655-6.617-3.675-9.003-1.838-2.391-5.145-3.492-9.372-3.492-8.636 0-14.332 2.942-16.905 8.819-2.756 5.882-4.226 14.335-4.226 25.54v35.463c0 5.518-1.286 9.56-3.675 12.315-2.389 2.942-5.696 4.227-9.739 4.227-4.042 0-7.35-1.286-9.739-4.227-2.572-2.756-3.859-6.797-3.859-12.315v-75.149c0-4.962 1.103-8.823 3.492-11.394 2.205-2.571 5.145-3.862 9.004-3.862 3.491 0 6.43 1.29 9.003 3.677 2.39 2.39 3.492 5.697 3.492 9.924v2.57c4.593-5.512 9.555-9.553 14.7-12.124 5.145-2.576 11.025-3.862 17.273-3.862 6.615 0 12.311 1.47 17.088 4.042 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.513 9.188-9.37 14.333-11.945 4.961-2.571 10.658-4.042 16.722-4.042 7.166 0 13.414 1.47 18.556 4.227 5.332 2.941 9.188 6.983 11.764 12.31 2.201 4.597 3.307 12.13 3.307 22.419v51.264c0 5.518-1.287 9.74-3.677 12.5-2.57 2.757-5.877 4.042-9.924 4.042-4.041 0-7.347-1.286-9.739-4.227-2.57-2.756-3.856-6.797-3.856-12.315V874.68c0-5.512-.186-10.104-.736-13.595-.55-3.311-1.838-6.247-3.859-8.453-2.205-2.391-5.329-3.492-9.739-3.492-3.491 0-6.799 1.1-9.739 3.122-3.123 2.02-5.512 4.776-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.524zM742.583 873.76v-67.802c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.57-1.656-1.657-2.39-3.492-2.39-5.698 0-2.571.735-4.412 2.39-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.941 10.845-5.882 14.521-9.004 3.491-3.126 6.798-6.617 9.554-10.474 2.756-3.861 4.592-6.247 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.777 1.106 6.247 3.126 1.656 2.021 2.391 4.962 2.391 8.449v85.628c0 9.924-3.311 14.886-10.109 14.886-3.121 0-5.512-.92-7.348-2.941-1.84-2.021-2.756-5.142-2.756-9.189zM641.306 850c-4.412 0-7.903-4.042-7.903-9.189 0-4.961 3.491-9.183 7.903-9.183zm0 0H690v-18.372h-48.694zM690 831.628c4.412 0 7.903 4.222 7.903 9.183 0 5.147-3.491 9.189-7.903 9.189z",
      stroke: "none"
    }));
  }
  var Assignment_default3 = SvgAssignment3;

  // build/lib-react-tsx/ir/Overlay.tsx
  var React42 = __toModule(require_react());
  function SvgOverlay({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React42.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React42.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React42.createElement("path", {
      d: "M49.941 730.47h883.662M947.568 730.47l-51.27 38.956M896.298 691.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M448.044 905.942c0 3.311-1.102 6.802-2.94 10.474-2.021 3.676-4.962 7.353-9.004 10.66-4.043 3.305-9.004 6.061-15.252 8.082-6.063 2.206-12.862 3.126-20.58 3.126-16.17 0-28.849-4.776-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.654 2.021-20.213 6.248-28.481 4.042-8.268 10.106-14.7 18.008-19.293 7.9-4.411 17.456-6.797 28.48-6.797 6.8 0 13.047 1.1 18.744 3.12 5.512 1.842 10.473 4.413 14.332 7.534 4.043 3.311 6.983 6.618 9.004 10.109 2.205 3.676 3.124 6.983 3.124 9.924 0 3.306-1.102 5.877-3.491 8.083-2.39 2.206-5.146 3.306-8.453 3.306-2.205 0-4.043-.55-5.512-1.65-1.47-1.106-2.94-2.942-4.778-5.513-3.308-4.962-6.615-8.453-10.106-11.03-3.492-2.385-7.902-3.67-13.414-3.67-7.718 0-13.965 3.12-18.743 9.183-4.778 6.067-7.166 14.336-7.166 24.81 0 4.962.734 9.553 1.837 13.78 1.286 4.042 3.124 7.533 5.33 10.474 2.388 2.941 5.144 5.147 8.451 6.613 3.308 1.656 6.8 2.39 10.842 2.39 5.145 0 9.739-1.285 13.414-3.676 3.858-2.57 7.166-6.247 9.922-11.21 1.655-2.935 3.492-5.326 5.329-6.982 1.838-1.65 4.043-2.386 6.8-2.386 3.123 0 5.879 1.1 7.9 3.492 2.205 2.57 3.308 5.142 3.308 7.898zm110.25-18.922v34.908c0 5.517-1.102 9.739-3.675 12.5-2.572 2.756-5.88 4.042-9.922 4.042-4.042 0-7.166-1.287-9.739-4.042-2.389-2.761-3.675-6.983-3.675-12.5v-41.891c0-6.618-.184-11.76-.734-15.436-.369-3.677-1.655-6.618-3.675-9.004-1.838-2.39-5.145-3.491-9.372-3.491-8.636 0-14.333 2.941-16.905 8.818-2.756 5.883-4.226 14.336-4.226 25.54v35.464c0 5.517-1.286 9.559-3.675 12.315-2.389 2.941-5.696 4.227-9.739 4.227-4.042 0-7.35-1.287-9.739-4.227-2.572-2.756-3.859-6.798-3.859-12.315v-75.15c0-4.961 1.103-8.823 3.492-11.394 2.205-2.57 5.145-3.861 9.004-3.861 3.491 0 6.43 1.29 9.003 3.676 2.39 2.391 3.492 5.697 3.492 9.924v2.571c4.593-5.512 9.555-9.554 14.7-12.125 5.145-2.576 11.025-3.861 17.273-3.861 6.615 0 12.31 1.47 17.088 4.041 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.512 9.188-9.369 14.333-11.945 4.961-2.57 10.658-4.041 16.721-4.041 7.167 0 13.415 1.47 18.557 4.227 5.332 2.94 9.188 6.982 11.764 12.31 2.201 4.596 3.307 12.13 3.307 22.418v51.265c0 5.517-1.287 9.739-3.677 12.5-2.57 2.756-5.877 4.042-9.924 4.042-4.041 0-7.347-1.287-9.739-4.227-2.57-2.756-3.856-6.798-3.856-12.315v-44.282c0-5.512-.186-10.104-.736-13.595-.55-3.312-1.838-6.248-3.86-8.454-2.204-2.39-5.328-3.491-9.738-3.491-3.491 0-6.799 1.1-9.739 3.121-3.123 2.02-5.512 4.777-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.525zM743.15 876.725v-67.801c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.571-1.656-1.656-2.391-3.492-2.391-5.698 0-2.57.736-4.411 2.391-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.94 10.844-5.882 14.521-9.003 3.491-3.126 6.798-6.618 9.554-10.474 2.756-3.862 4.592-6.248 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.776 1.106 6.247 3.126 1.656 2.02 2.391 4.962 2.391 8.448v85.629c0 9.923-3.311 14.885-10.109 14.885-3.121 0-5.512-.92-7.348-2.94-1.84-2.022-2.756-5.143-2.756-9.19zM641.873 852.966c-4.412 0-7.903-4.042-7.903-9.19 0-4.961 3.491-9.183 7.903-9.183zm0 0h48.694v-18.373h-48.694zm48.694-18.373c4.412 0 7.903 4.222 7.903 9.184 0 5.147-3.491 9.189-7.903 9.189z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M97.35 220.927c87.832-20.764 119.621 79.197 124.583 157.475 11.576 179.157 25.725 256.15 86.179 252.84 158.21 1.105 12.679-436.775 212.233-419.503 95.92 8.27 85.445 76.992 90.222 155.822 4.962 83.974 6.062 143.326 16.171 209.66 37.85-109.516-11.394-356.845 162.804-360.337 35.649-.734 64.68.919 96.653 2.573",
      fill: "none",
      strokeWidth: 31.973,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M94.042 91.75l-.736.184-.735.183-.734.369-.55.184-.736.368-.55.368-.552.368-.55.368-.737.368-.368.55-.552.369-.552.552-.368.552-.55.552-.368.552-.368.552-.368.552-.184.734-.368.552-.184.552-.368.734-.184.735-.184.552v.734l-.184.734v.734l-.184.552v.735l.184.734v.734l.184.734.184.735.184.734.184.734.184.552.368.734.184.552.368.735.368.552.368.552.552.552.368.552.55.552.552.368.368.552.552.368.55.368.553.552.736.184.552.368.55.368.734.184.552.184.734.368h.735l.552.184.736.184h3.673l.552-.184.736-.184-6.431-27.93z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M126.75 89.36l-1.838-.183h-2.389l-2.389-.184H115.356l-2.204.184h-2.389l-2.389.184-2.389.368-2.388.184-2.39.368-2.388.552-2.388.368-2.39.552 6.432 27.93 1.837-.368 1.655-.368 1.837-.184 1.655-.368 1.654-.184 1.838-.184 1.654-.184h1.838l1.654-.184h3.492l1.654.184h1.838l1.837.184z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M124.912 118.026h2.206l.552-.184h.734l.736-.184.735-.183.552-.184.734-.369.552-.183.734-.369.552-.368.55-.368.55-.368.553-.368.55-.368.552-.552.552-.552.368-.368.368-.552.55-.55.368-.735.369-.552.184-.552.368-.734.368-.552.184-.734.184-.552.184-.734.184-.735v-.734l.184-.734V103.139l-.184-.734v-.734l-.184-.734v-.552l-.184-.735-.368-.734-.184-.552-.184-.734-.368-.552-.368-.552-.369-.735-.368-.552-.368-.552-.552-.55-.368-.368-.552-.552-.55-.368-.552-.552-.552-.368-.55-.369-.552-.367-.55-.369-.737-.367-.55-.184-.734-.184-.736-.184-.734-.184-.55-.184-.737-.184h-.734l-1.838 28.666zM186.836 110.676l-.55-.552-.735-.184-.55-.368-.736-.184-.552-.368-.734-.184-.734-.184h-.735l-.552-.184H177.467l-.734.184-.736.184-.55.184-.734.184-.55.184-.737.183-.552.369-.55.367-.734.369-.552.368-.552.368-.55.552-.55.368-.369.552-.552.552-.55.552-.368.552-.368.552-.368.735-.368.552-.368.734-.184.734-.184.552-.184.734-.184.735-.184.552-.184.734v2.755l.184.734v.734l.184.552.184.735.184.734.184.552.368.734.184.55.368.552.368.735.368.552.368.552.55.552.368.552.552.368.55.552.55.368.553.552.736.368 15.067-24.256z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M211.643 129.051l-1.47-1.286-1.839-1.654-2.02-1.47-1.838-1.655-1.838-1.47-2.021-1.47-1.837-1.471-2.022-1.47-2.02-1.287-2.022-1.47-2.021-1.286-1.838-1.286-2.021-1.103-15.068 24.256 1.47.918 1.655 1.102 1.654 1.102 1.838 1.287 1.654 1.102 1.655 1.286 1.654 1.286 1.654 1.103 1.655 1.47 1.654 1.286 1.47 1.287 1.655 1.286 1.47 1.286z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M192.9 150.734l.55.552.736.366.55.369.552.367.735.369.55.366.736.184.552.366.734.184h.736l.552.184.735.184h3.49l.55-.184.737-.184.734-.184.55-.184.736-.184.55-.184.735-.366.552-.368.55-.368.736-.368.55-.368.55-.552.55-.368.553-.552.368-.553.55-.552.368-.55.368-.736.368-.552.368-.552.368-.734.184-.736.184-.55.184-.735.184-.552.184-.734.184-.734v-2.757l-.184-.734v-.552l-.184-.736-.184-.734-.184-.552-.184-.737-.368-.55-.184-.734-.368-.552-.368-.552-.368-.734-.368-.552-.55-.552-.368-.553-.552-.368-.55-.55-18.743 21.683zM251.884 174.438l-.368-.552-.368-.552-.55-.552-.553-.552-.552-.369-.55-.55-.55-.368-.55-.368-.552-.366-.735-.368-.552-.184-.734-.368-.552-.184-.734-.184-.55-.184-.735-.184h-.736l-.55-.183h-2.205l-.552.183h-.736l-.734.184-.736.184-.55.184-.734.184-.736.368-.55.184-.735.368-.552.366-.552.368-.736.552-.55.368-.55.552-.369.552-.55.552-.368.552-.552.552-.368.553-.368.552-.184.552-.368.734-.184.55-.368.736-.184.552-.184.734v.737l-.184.734v1.286l-.184.736.184.552v1.47l.184.735.184.55.184.736.184.734.368.552.368.736.184.552.368.735.55.552 23.336-16.538z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M267.87 200.347l-.918-1.654-1.102-2.205-1.286-2.021-1.287-2.205-1.102-2.022-1.286-2.205-1.286-2.02-1.47-2.022-1.287-2.206-1.286-2.02-1.47-2.022-1.287-2.02-.918-1.287-23.336 16.537.552.919 1.286 1.837 1.286 1.838 1.103 1.837 1.286 1.838 1.102 1.837 1.102 2.022 1.103 1.837 1.286 1.837 1.102 1.838.919 2.021 1.102 1.838.918 1.654z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M242.697 214.128l.368.55.368.735.368.552.55.552.368.552.552.368.55.552.55.369.553.552.55.368.552.366.734.368.55.184.552.368.735.184.55.184.734.184.736.184.55.183H256.66l.734-.183h.736l.735-.184.55-.184.736-.184.734-.368.55-.184.736-.368.55-.368.735-.552.552-.368.55-.368.55-.552.553-.552.368-.368.552-.552.368-.552.368-.552.368-.735.368-.552.184-.55.368-.736.184-.552.184-.734.184-.735.184-.552.184-.734V205.671l-.184-.734v-.552l-.184-.736-.184-.734-.184-.552-.368-.736-.184-.734-.368-.553-25.174 13.782zM289.737 257.493l-.184-.734-.184-.736-.184-.734-.368-.55-.369-.735-.184-.552-.368-.552-.552-.734-.368-.552-.368-.552-.552-.368-.368-.552-.552-.369-.552-.552-.55-.368-.55-.368-.735-.368-.55-.368-.55-.184-.736-.368-.55-.183-.735-.184-.55-.184-.736-.184-.734-.184h-3.491l-.736.184-.734.184-.734.184-.737.184-.734.183-.55.368-.736.184-.55.368-.55.368-.735.368-.552.552-.368.368-.55.552-.552.368-.368.552-.55.552-.368.55-.368.552-.368.552-.368.737-.184.55-.369.552-.184.734-.184.736-.184.552-.184.734-.184.736V262.273l.184.735.184.736 27.93-6.248z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M293.044 280.095l-.184-2.021-.184-2.206-.184-2.02-.184-2.022-.368-2.205-.184-2.021-.368-2.205-.368-2.021-.552-2.205-.368-2.022-.368-1.654-27.93 6.248.184 1.286.368 1.838.368 1.654.368 1.655.184 1.837.368 1.655.184 1.654.184 1.654.184 1.655.184 1.654v1.654z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M293.596 288.18l-28.666 1.837-.55-8.085 28.665-1.837z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M264.93 290.017v.735l.185.736.183.552.185.734.184.736.184.734.184.55.368.737.368.552.368.55.368.552.368.552.368.552.552.552.55.552.368.368.55.552.55.368.553.369.734.368.55.368.552.368.736.184.55.184.735.368.736.184h.55l.734.184h.734l.736.184h1.471l.734-.184h.736l.734-.184.736-.184.55-.184.735-.184.55-.368.736-.368.552-.184.55-.368.735-.368.55-.552.552-.368.368-.366.55-.552.552-.553.368-.552.368-.552.368-.552.368-.552.368-.552.368-.734.184-.552.368-.736.184-.552.184-.734.184-.736v-.735l.184-.736V288.178l-28.665 1.838zM295.985 345.878v-1.47l-.184-.735-.185-.552-.184-.736-.184-.734-.184-.552-.368-.736-.184-.552-.368-.734-.368-.553-.368-.552-.368-.55-.55-.552-.368-.552-.55-.366-.55-.552-.553-.368-.55-.369-.552-.368-.55-.368-.55-.368-.736-.368-.55-.184-.735-.184-.736-.368-.55-.184h-.734l-.736-.184h-3.675l-.734.184-.737.184-.55.184-.734.183-.736.184-.552.369-.734.183-.55.369-.55.368-.553.368-.55.368-.552.552-.552.368-.368.552-.552.55-.368.553-.55.55-.369.552-.368.552-.184.552-.368.736-.184.552-.368.734-.184.737-.184.552-.184.734v.736l-.184.734v1.47l28.665-.918z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M296.72 374.91l-.185-5.329v-6.43l-.184-6.8-.184-6.798-.184-3.675-28.665.918.184 3.491.184 6.615v6.8l.184 6.43v5.146zM267.87 375.278l.185.735v1.47l.184.734.184.55.184.736.368.735.184.552.368.736.184.552.368.55.368.552.552.552.368.552.368.552.55.552.552.368.55.55.552.369.55.368.55.366.551.368.734.369.55.183.737.184.55.369.734.184h.736l.734.183h.736l.735.184h1.47l.734-.184h.55l.736-.183.735-.184.736-.184.55-.184.734-.366.55-.184.737-.368.55-.368.55-.369.552-.368.55-.552.55-.368.369-.55.55-.552.368-.552.55-.553.368-.552.368-.55.368-.552.184-.552.368-.734.184-.736.184-.552.184-.735.184-.736.184-.734v-1.286l.184-.734-28.849.368zM297.087 432.24V430.772l-.184-.735v-.552l-.184-.736-.184-.734-.368-.552-.184-.736-.368-.552-.184-.734-.368-.55-.368-.553-.55-.552-.368-.55-.369-.552-.552-.552-.552-.368-.552-.552-.55-.368-.55-.368-.55-.368-.552-.366-.735-.368-.55-.184-.736-.366-.55-.184-.734-.184-.736-.184h-.735l-.55-.184h-2.941l-.736.184-.734.184h-.734l-.736.368-.55.184-.735.184-.55.368-.736.368-.55.368-.55.367-.55.368-.553.368-.55.552-.368.368-.55.552-.368.552-.55.552-.368.55-.368.552-.368.552-.184.735-.368.552-.184.734-.368.552-.185.734v.736l-.183.735-.185.736v1.47l28.666-.368z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M297.822 460.539l-.184-3.675-.184-3.859v-4.042l-.184-4.227v-4.226l-.184-4.594v-3.675l-28.665.368v3.675l.184 4.594v4.594l.184 4.41v4.226l.184 4.043.184 3.49z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M269.156 461.64v.737l.184.734.184.736v.734l.184.737.368.552.185.734.368.552.184.736.368.552.368.552.368.552.55.55.368.552.55.552.368.552.55.369.55.367.55.553.553.368.734.184.552.366.55.368.736.184.55.183.735.368h.734l.736.184.735.184h2.758l.734-.184h.736l.734-.184.737-.184.552-.184.734-.368.734-.184.552-.368.55-.368.552-.368.552-.368.55-.368.55-.552.551-.368.552-.552.368-.552.368-.552.552-.552.368-.55.368-.552.184-.735.368-.552.184-.734.368-.552.184-.734.184-.736v-.55l.184-.735v-2.206l-28.665 1.102zM308.847 502.801l-.55-.368-.736-.368-.55-.368-.735-.368-.55-.368-.736-.184-.55-.184-.734-.184-.737-.184-.55-.183h-.734l-.736-.184h-2.021l-.734.184h-.734l-.552.183-.734.184-.55.184-.735.184-.736.368-.552.184-.55.368-.736.368-.552.368-.55.552-.55.368-.55.55-.553.368-.368.552-.55.55-.368.734-.368.553-.368.552-.368.736-.368.552-.184.734-.184.736-.184.552-.184.734-.184.736-.184.552v2.757l.184.736v.734l.184.736.184.552.184.735.184.55.368.736.184.552.368.734.368.552.368.552.368.552.55.552.368.552.552.552.55.367.55.552 17.64-22.785z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M313.073 513.092l11.944-7.718-1.102.184H319.689l-.918-.184h-1.836l-.736-.184-.735-.184h-.736l-.734-.184-.736-.184-.552-.183-.55-.184-.55-.184h-.55l-.369-.184-.55-.368-.368-.184-.368-.184-.368-.183-.368-.184-.368-.184.55.184-17.64 22.784.55.369 1.102.736 1.287.918 1.286.736 1.286.734 1.47.552 1.287.552 1.47.553 1.286.552 1.47.552 1.47.367 1.471.369 1.287.368 1.47.184 1.654.368 1.47.184 1.47.183 1.471.184h1.654l1.47.184h6.434l1.47-.184 12.128-7.717z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M326.487 534.04h.736l.734-.185h.736l.735-.184.734-.183.552-.369.734-.184.55-.368.736-.184.55-.368.55-.368.551-.366.55-.552.552-.366.552-.552.368-.552.55-.369.369-.552.368-.552.368-.736.368-.552.368-.552.184-.734.368-.552.184-.736.184-.55.184-.735.184-.736V517.494l-.184-.736-.184-.552-.184-.734-.184-.736-.368-.55-.184-.735-.368-.552-.368-.552-.368-.736-.368-.552-.552-.552-.368-.368-.55-.552-.369-.552-.552-.368-.552-.55-.55-.369-.55-.368-.736-.368-.55-.184-.553-.368-.734-.184-.736-.184-.552-.184-.734-.183-.736-.184h-.734l-.737-.184h-1.47l1.47 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M313.808 511.805l-.368.552-.368.734 25.542 13.23.55-1.286.368-.552z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M339.533 524.484l.185-.734.368-.552.184-.736.184-.735.184-.736.184-.55v-.734l.184-.736v-2.021l-.184-.736v-.734l-.184-.552-.184-.736-.184-.734-.368-.55-.184-.737-.369-.55-.183-.552-.369-.552-.368-.734-.55-.552-.368-.552-.55-.368-.368-.55-.55-.552-.55-.367-.553-.368-.736-.55-.55-.368-.734-.368-.55-.184-.736-.368-.735-.184-.55-.184-.736-.184-.734-.184h-.734l-.736-.184H326.124l-.736.184h-.734l-.552.184h-.736l-.735.184-.552.184-.736.367-.55.184-.734.368-.55.368-.55.184-.553.552-.55.368-.55.368-.552.552-.55.368-.368.55-.55.553-.369.552-.368.734-.368.552-.368.734 25.725 12.679zM323.73 461.09v2.206l.185.734v.736l.184.552.184.735.184.734.184.552.368.734.184.552.368.552.368.736.368.552.368.552.55.553.368.55.552.368.55.55.369.368.55.368.736.552.55.369.552.184.734.368.552.368.735.184.552.184.734.184.736.184h.734l.736.184h2.941l.734-.184.55-.184.735-.184.736-.184.55-.184.734-.368.552-.184.736-.368.55-.369.55-.368.551-.368.55-.552.552-.369.368-.552.55-.367.369-.552.368-.55.55-.553.368-.734.184-.552.368-.552.368-.734.184-.736.184-.552.184-.735.184-.734.184-.736v-.734l-28.665-2.206z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M325.201 433.16v3.858l-.184 3.86-.184 3.674-.184 3.675-.184 3.675-.368 3.676-.184 3.49-.184 2.022 28.665 2.205.184-2.205.184-3.675.366-3.859.184-3.859.184-3.858.184-3.86.184-3.858v-4.042zM353.866 434.079v-2.207l-.184-.734v-.736l-.184-.734-.368-.552-.184-.736-.184-.552-.368-.735-.368-.552-.368-.552-.368-.552-.368-.736-.368-.368-.552-.552-.366-.552-.552-.366-.55-.552-.553-.369-.552-.367-.55-.369-.734-.366-.552-.368-.55-.184-.737-.367-.734-.184-.55-.184-.736-.184h-.734l-.736-.184h-2.205l-.734.184h-.736l-.734.184-.55.184-.737.184-.734.184-.55.368-.736.184-.55.368-.553.368-.55.366-.552.368-.55.55-.55.368-.55.552-.369.552-.55.369-.368.552-.368.552-.368.734-.368.552-.368.552-.184.734-.184.55-.368.737-.184.734v.734l-.184.736v.734l-.184.736 28.665.919zM326.487 375.83v1.47l.184.734v.734l.184.736.184.735.184.552.368.736.184.552.368.734.368.552.368.552.368.552.368.552.368.552.55.552.55.552.369.368.55.552.55.366.55.368.736.368.55.369.553.184.734.367.736.184.552.184.734.184.736.184h.735l.736.184H342.108l.734-.184h.553l.736-.184.734-.184.736-.184.552-.368.734-.184.55-.368.552-.368.737-.366.552-.369.55-.368.55-.368.368-.552.55-.368.55-.552.369-.552.368-.552.368-.552.368-.734.368-.55.368-.553.184-.736.184-.55.184-.734.184-.734.184-.736.184-.735v-1.47l-28.665-.55zM327.222 346.98v.184l-.184 9.004-.368 9.004-.184 9.003v1.654l28.665.553v-1.47l.368-9.005.184-8.82.368-9.004zM356.071 348.083v-.919l-.184-.552v-.736l-.184-.734v-.736l-.184-.734-.184-.552-.368-.736-.184-.735-.368-.552-.184-.552-.368-.736-.368-.552-.55-.55-.368-.552-.368-.368-.552-.553-.55-.552-.553-.367-.552-.369-.55-.552-.55-.184-.55-.366-.735-.368-.55-.368-.736-.184-.55-.184-.734-.184-.737-.183-.734-.184h-3.675l-.736.184-.55.183-.734.184-.736.184-.55.184-.735.184-.552.366-.736.368-.552.368-.552.369-.55.368-.55.368-.552.552-.368.368-.552.552-.368.552-.55.552-.369.55-.368.552-.368.735-.184.552-.368.734-.184.552-.184.734-.184.736-.184.552-.184.735v.736l-.184.734 28.849 1.102zM331.08 288.915l-.183.734v.736l.184.735v1.288l.184.734.184.734.184.736.184.552.368.735.184.552.368.552.368.734.368.552.368.552.368.552.55.552.368.368.55.552.55.368.551.55.552.369.552.366.55.368.735.368.55.184.736.368.55.184.734.184.736.184h.735l.734.184h2.94l.737-.184h.552l.734-.184.736-.184.55-.184.734-.368.55-.184.737-.368.552-.368.55-.366.55-.369.55-.367.55-.55.553-.369.368-.55.55-.552.368-.552.368-.552.368-.552.368-.735.368-.552.184-.552.368-.734.184-.734.184-.552.184-.734.184-.735v-.736l-28.482-2.756zM334.756 259.699l-.55 4.042-.735 4.594-.55 4.594-.55 4.594-.552 4.777-.55 4.594-.185 2.021 28.482 2.756.184-1.837.55-4.41.552-4.41.552-4.41.55-4.41.55-4.227.553-4.042z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M363.054 263.925l.184-.735V260.252l-.184-.736v-.552l-.184-.735-.184-.734-.368-.552-.184-.734-.184-.552-.368-.736-.369-.552-.368-.552-.368-.55-.368-.553-.552-.552-.55-.552-.368-.368-.552-.552-.552-.368-.55-.368-.55-.368-.737-.369-.55-.367-.734-.369-.55-.184-.736-.184-.735-.183-.736-.184-.55-.184h-.734l-.734-.184h-1.471l-.736.184h-.734l-.736.184-.55.184-.734.183-.737.184-.552.184-.734.369-.55.367-.552.369-.552.368-.55.368-.55.368-.553.368-.55.552-.55.552-.368.552-.368.552-.55.55-.368.553-.184.552-.368.736-.368.552-.185.734-.183.552-.369.734v.735l-.184.736 28.299 4.226zM348.537 201.45l-.184.734-.184.736-.184.552-.184.734v3.493l.184.734.184.734v.734l.368.552.184.737.184.552.368.734.368.552.184.552.55.552.368.552.368.55.55.552.369.552.552.369.55.552.55.367.552.369.55.368.735.368.55.368.736.184.734.366.734.184.736.184.553.184h.734l.736.184H363.236l.55-.184h.737l.734-.184.55-.184.736-.184.734-.184.55-.368.553-.184.736-.368.552-.368.55-.368.55-.368.55-.552.55-.368.553-.552.368-.368.55-.552.368-.552.368-.735.368-.55.368-.552.368-.736.184-.734.368-.552-27.195-9.188zM359.93 173.335l-.736 1.655-.918 1.838-.919 2.02-.918 2.022-.918 2.021-.918 2.021-.735 2.022-.918 2.205-.734 2.021-.736 2.021-.918 2.022-.735 2.204-.736 2.022-.552 2.021 27.196 9.188.55-1.838.734-1.837.55-1.838.737-1.838.734-1.837.734-1.838.552-1.837.734-1.654.919-1.837.734-1.838.736-1.654.734-1.838.919-1.654.734-1.655z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M385.839 185.647l.368-.736.184-.55.184-.735.184-.734.184-.736.184-.552v-.734l.184-.737v-1.47l-.184-.552v-.734l-.184-.736-.184-.734-.184-.552-.184-.737-.184-.552-.368-.734-.184-.552-.368-.552-.368-.552-.368-.736-.368-.552-.55-.368-.55-.552-.369-.552-.55-.367-.552-.552-.55-.366-.735-.368-.552-.368-.734-.368-.552-.368-.736-.184-.734-.184-.735-.184-.55-.184-.736-.183h-.734l-.736-.184h-1.286l-.736.184h-.735l-.736.183-.55.184-.734.184-.552.184-.736.184-.55.368-.735.184-.552.367-.55.367-.55.367-.55.369-.553.552-.55.367-.55.553-.368.552-.55.552-.368.55-.368.734-.368.552-.368.734 25.908 12.312zM396.864 122.988l-.552.368-.55.552-.368.552-.552.552-.368.734-.368.552-.368.552-.184.735-.368.552-.185.734-.184.552-.184.734-.184.734-.184.552V134.934l.184.734v.735l.184.552.184.734.184.552.369.736.184.734.368.552.368.552.368.735.55.552.368.552.55.552.55.552.368.368.55.552.737.368.55.552.552.184.552.368.734.366.55.184.737.368.734.184.55.184h.736l.734.184h.552l.736.184h1.471l.552-.184h.734l.736-.184.552-.184.734-.184.736-.184.552-.184.735-.367.55-.369.552-.366.736-.368.55-.368.55-.552.55-.368-19.477-20.948z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M422.405 104.245l-1.654.918-2.021 1.102-1.838 1.287-2.021 1.286-1.838 1.102-1.837 1.287-1.838 1.47-1.837 1.286-1.654 1.286-1.838 1.47-1.654 1.287-1.654 1.47-1.655 1.47-1.654 1.471-.55.552 19.477 20.947.184-.366 1.47-1.102 1.287-1.102 1.286-1.103 1.47-1.102 1.287-1.102 1.47-1.102 1.47-1.103 1.47-1.102 1.471-.918 1.47-1.103 1.47-.918 1.655-.918 1.47-.918 1.838-1.103zM437.106 128.867l.552-.367.552-.369.55-.552.55-.367.55-.552.552-.552.368-.369.552-.734.368-.552.368-.552.368-.552.184-.552.368-.734.184-.552.184-.735.184-.734.184-.552.184-.734v-.734l.183-.553v-2.202l-.183-.552v-.735l-.184-.734-.184-.734-.184-.55-.368-.735-.184-.734-.368-.552-.368-.734-.368-.552-.368-.552-.552-.552-.368-.552-.552-.552-.55-.552-.55-.369-.55-.552-.552-.368-.55-.368-.553-.368-.734-.368-.55-.184-.736-.184-.552-.368-.735-.184h-.55l-.736-.184-.734-.184h-2.755l-.736.184h-.55l-.734.184-.736.184-.55.184-.735.183-.736.368-.55.368-.734.368 14.7 24.623zM481.757 84.4l-.736.184-.734.184-.736.183-.55.184-.735.369-.552.183-.736.368-.552.369-.55.367-.55.369-.552.552-.55.368-.553.552-.367.368-.552.552-.368.552-.369.552-.367.552-.369.735-.368.552-.184.552-.368.734-.184.734-.184.55-.184.735-.184.734v1.286l-.183.734.183.735v1.468l.184.734.184.735.184.734.184.734.368.552.184.734.368.552.369.553.367.734.369.552.552.552.368.368.552.552.368.552.55.369.553.368.55.552.55.368.736.184.55.368.553.368.734.184.736.184.55.184.734.184.736.184h.735l.55.183h1.47l.736-.183h.734l-4.226-28.482z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M512.26 82.195h-3.49l-2.94.184h-2.94l-2.94.183-2.757.184-2.756.184-2.757.368-2.756.184-2.756.368-2.756.368-1.655.184 4.226 28.481 1.287-.184 2.388-.368 2.39-.183 2.388-.369 2.389-.184 2.389-.183 2.572-.184 2.572-.184h2.39l2.755-.184h3.123z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M512.627 110.86h.736l.734-.184h.735l.736-.184.734-.184.55-.184.736-.184.735-.367.55-.184.55-.369.736-.368.55-.368.55-.368.553-.552.367-.368.552-.552.55-.368.368-.552.369-.552.552-.552.184-.734.367-.55.369-.553.367-.734.184-.552.184-.734.184-.734.184-.552v-.735l.184-.734v-2.937l-.184-.734-.184-.734-.184-.735-.184-.552-.184-.734-.183-.552-.369-.734-.367-.552-.369-.552-.368-.735-.368-.552-.368-.552-.55-.367-.368-.552-.552-.553-.55-.368-.552-.368-.55-.368-.55-.368-.735-.368-.55-.368-.55-.184-.737-.368-.734-.184-.552-.184-.736-.184h-.734l-.736-.184h-1.471l.369 28.665zM570.141 83.113h-1.472l-.736.184-.736.184h-.736l-.55.184-.736.184-.737.368-.55.184-.55.368-.736.368-.55.368-.556.368-.55.369-.55.367-.55.552-.37.552-.55.368-.365.552-.37.552-.55.735-.364.552-.186.552-.37.734-.182.552-.37.734-.186.552-.182.734-.186.735v1.468l-.186.734v.735l.186.734v.734l.186.734v.552l.182.735.37.734.186.55.182.736.37.55.364.552.37.735.364.552.37.552.55.552.364.368.556.552.55.552.55.367.55.369.55.368.557.368.55.368.736.368.55.184.736.184.55.367h.736l.736.184.737.184h1.472l.55-28.665zM598.807 83.665l-.55 28.665-28.666-.552.55-28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M598.257 112.33h2.202l.737-.184.736-.184.556-.184.736-.184.73-.183.556-.368.55-.184.736-.368.55-.369.55-.367.551-.552.556-.369.55-.368.365-.552.555-.552.364-.552.365-.552.37-.552.364-.552.37-.735.364-.55.186-.552.37-.734.182-.734.186-.735v-.552l.186-.734v-.734l.186-.734v-.735l-.186-.734v-.734l-.186-.734-.186-.735v-.734l-.364-.552-.186-.734-.186-.552-.364-.734-.37-.552-.364-.552-.37-.553-.365-.552-.55-.552-.37-.552-.55-.552-.55-.367-.55-.369-.55-.552-.556-.368-.55-.368-.55-.184-.737-.368-.55-.368-.736-.184-.736-.184-.55-.183-.736-.184h-.737l-.736-.184h-.736l-.55 28.665zM656.135 84.767h-1.467l-.736.184h-.736l-.556.184-.73.184-.737.184-.555.368-.736.184-.55.368-.55.368-.737.368-.55.368-.55.368-.556.368-.364.552-.55.552-.55.369-.37.552-.365.552-.37.734-.364.552-.37.552-.364.734-.186.552-.186.734-.182.553-.186.734-.186.734-.186.734v3.671l.186.735.186.552.186.734.182.736.186.55.364.735.186.552.37.552.364.734.37.552.55.552.364.552.37.368.55.552.55.552.55.368.556.368.55.368.55.368.737.368.55.368.55.184.737.184.736.184.736.184.55.183.736.184h1.472l.55-28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M684.8 85.318l-.55 28.666-28.666-.552.55-28.665zM684.25 113.984H686.46l.736-.184.736-.184.736-.184.55-.184.736-.184.55-.368.737-.184.55-.368.55-.368.556-.368.55-.552.55-.368.55-.368.55-.552.37-.552.55-.552.37-.553.365-.552.37-.552.364-.734.186-.552.364-.552.186-.734.186-.734.182-.735.186-.55v-.734l.186-.734v-2.203l-.186-.734v-.735l-.186-.734-.182-.734-.186-.552-.364-.734-.186-.552-.37-.735-.364-.552-.37-.552-.365-.552-.37-.552-.364-.552-.55-.552-.55-.552-.37-.368-.55-.368-.55-.552-.556-.368-.736-.369-.55-.183-.55-.369-.737-.368-.736-.184-.55-.184-.736-.184-.736-.184h-.736l-.736-.183h-.737l-.55 28.665zM742.318 86.421h-1.472l-.736.184h-.736l-.736.184-.736.184-.55.184-.736.367-.55.184-.737.369-.555.368-.55.368-.55.368-.55.368-.551.368-.556.552-.55.552-.365.368-.55.552-.37.552-.364.735-.37.552-.364.552-.186.734-.37.552-.182.734-.186.552-.186.734-.186.735v.734l-.183.734v2.203l.183.734v.736l.186.55.186.735.186.734.364.552.186.734.364.552.37.552.364.735.37.552.364.552.37.552.55.368.365.552.555.55.55.369.551.367.55.369.736.367.55.369.556.367.736.184.55.184.737.184.736.184.736.184.736.184h1.466l.556-28.665zM770.98 86.972l-.55 28.665-28.667-.552.556-28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M770.43 115.637h2.207l.55-.183.737-.184.736-.184.736-.184.55-.184.736-.368.55-.184.556-.367.736-.369.55-.367.55-.552.55-.369.37-.368.55-.552.366-.55.555-.552.365-.552.37-.552.364-.552.364-.734.37-.552.186-.552.182-.735.186-.734.186-.734.186-.552.182-.734V99.465l-.182-.734-.186-.734-.186-.734-.186-.552-.182-.735-.37-.552-.186-.734-.364-.552-.364-.55-.37-.552-.55-.552-.37-.552-.55-.552-.365-.552-.555-.368-.55-.368-.55-.553-.551-.367-.55-.369-.736-.183-.556-.369-.73-.368-.556-.183-.736-.184-.736-.184-.55-.184h-.737l-.736-.184h-.736l-.55 28.665zM828.312 88.075h-1.472l-.736.184h-.736l-.737.183-.55.184-.736.184-.736.184-.55.368-.55.369-.736.184-.55.368-.556.552-.55.368-.55.368-.551.552-.37.368-.55.552-.365.552-.37.552-.55.55-.364.552-.186.734-.37.552-.182.735-.37.552-.186.734-.182.734-.186.734v1.287l-.186.734v.734l.186.736v.735l.186.734v.734l.182.734.37.552.186.735.182.552.37.734.364.552.37.552.364.552.37.552.55.55.364.552.556.552.55.368.55.552.55.368.551.368.556.369.55.367.736.184.55.368.736.184.55.184.737.184.736.183h.736l.736.184h.736l.55-28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M857.163 88.81l-5.697-.184-5.882-.184-6.063-.184-5.882-.184h-5.327l-.55 28.666 5.327.183h5.882l5.877.184 5.698.184 5.697.184z",
      stroke: "none"
    }), /* @__PURE__ */ React42.createElement("path", {
      d: "M856.243 117.475h1.472l.736-.184h.736l.736-.184.736-.184.55-.184.736-.183.55-.369.737-.184.55-.368.55-.368.55-.368.556-.552.55-.368.55-.368.55-.552.37-.552.55-.55.365-.552.37-.553.364-.552.37-.552.364-.734.186-.552.186-.734.365-.734.186-.552v-.735l.186-.734v-.734l.182-.734v-.735l-.182-.734v-.734l-.186-.734v-.735l-.186-.552-.182-.734-.37-.552-.186-.734-.365-.552-.37-.734-.364-.553-.37-.55-.364-.552-.364-.552-.556-.552-.365-.368-.55-.552-.556-.368-.55-.552-.55-.368-.55-.368-.736-.368-.55-.184-.737-.368-.555-.184-.73-.184-.737-.184-.556-.184-.736-.184h-1.466l-.92 28.666z",
      stroke: "none"
    }));
  }
  var Overlay_default = SvgOverlay;

  // build/lib-react-tsx/isotherm/Assignment.tsx
  var React43 = __toModule(require_react());
  function SvgAssignment4({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React43.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React43.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React43.createElement("path", {
      d: "M111.034 811.033c0 12.99 8.7 23.41 19.543 23.41 10.724 0 19.423-10.42 19.423-23.41zm0 0V162.016H150v649.017zM150 162.016c0-12.849-8.699-23.265-19.423-23.265-10.844 0-19.543 10.416-19.543 23.265z",
      stroke: "none"
    }), /* @__PURE__ */ React43.createElement("path", {
      d: "M130.577 131.362l49.928 65.896M80.648 197.258l49.929-65.896",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React43.createElement("path", {
      d: "M150 811.033c-14.708 0-26.506 8.7-26.506 19.423C123.494 841.3 135.292 850 150 850zm0 0h734.906V850H150zM884.906 850c14.545 0 26.345-8.7 26.345-19.544 0-10.723-11.8-19.423-26.345-19.423z",
      stroke: "none"
    }), /* @__PURE__ */ React43.createElement("path", {
      d: "M918.637 830.456l-65.897 50.048M852.74 780.53l65.897 49.926",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React43.createElement("path", {
      d: "M219.63 767.864c76.235-2.83 156.832-70.087 163.185-205.925 6.353-135.838-23.838-275.492 76.879-289.503 104.44-16.446 364.288-20.986 382.088-23.47",
      fill: "none",
      strokeWidth: 31.633002
    }), /* @__PURE__ */ React43.createElement("path", {
      d: "M791.034 896.136q0 10.592-3.318 19.907-3.254 9.315-8.677 15.823-5.487 6.699-12.76 10.59-7.274 3.829-15.505 3.829-5.742 0-10.59-1.34-4.786-1.276-8.742-3.764l-6.89 29.987h-11.995l22.522-97.554h11.995l-1.723 7.465q5.934-4.147 11.676-6.763 5.742-2.68 12.697-2.68 10.4 0 15.823 6.444 5.487 6.445 5.487 18.056zm-12.57 2.297q0-7.592-3.317-11.675-3.318-4.147-10.591-4.147-5.296 0-10.974 2.615-5.679 2.616-10.591 5.934l-9.316 40.387q4.148 2.233 7.912 3.317 3.764 1.085 9.124 1.085 6.571 0 11.803-3.19 5.296-3.19 8.74-8.294 3.638-5.36 5.424-11.931 1.787-6.572 1.787-14.1z",
      fontWeight: 400,
      fontSize: 80.847,
      fontFamily: "sans-serif",
      stroke: "none",
      strokeWidth: 0.421
    }));
  }
  var Assignment_default4 = SvgAssignment4;

  // build/lib-react-tsx/iv/Assignment.tsx
  var React44 = __toModule(require_react());
  function SvgAssignment5({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React44.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React44.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React44.createElement("path", {
      d: "M250 710.809a19.661 19.661 0 00-19.662 19.662A19.661 19.661 0 00250 750.133h683.604a19.661 19.661 0 0019.66-19.662 19.661 19.661 0 00-19.66-19.662H250z"
    }), /* @__PURE__ */ React44.createElement("path", {
      d: "M947.408 710.81a19.661 19.661 0 00-11.734 4.004l-51.27 38.956a19.661 19.661 0 00-3.761 27.55 19.661 19.661 0 0027.55 3.76l51.27-38.955a19.661 19.661 0 003.76-27.549 19.661 19.661 0 00-15.815-7.765z"
    }), /* @__PURE__ */ React44.createElement("path", {
      d: "M896.352 672.04a19.661 19.661 0 00-15.737 7.802 19.661 19.661 0 003.824 27.54l51.27 38.77a19.661 19.661 0 0027.541-3.822 19.661 19.661 0 00-3.822-27.54l-51.272-38.772a19.661 19.661 0 00-11.804-3.979zM199.373 261.646h-37.218l-9.657-28.219h-51.75l-9.656 28.22H54.811l51.562-139.595h41.438zm-55.593-53.812l-17.157-50.063-17.156 50.063zM864.079 816.338l-50.907 139.594H772.86l-50.906-139.594h37.78l33.75 98.063 33.75-98.063zM230.34 733.603A19.661 19.661 0 00250 753.265a19.661 19.661 0 0019.662-19.662V50a19.661 19.661 0 00-19.663-19.66A19.661 19.661 0 00230.34 50v683.603z"
    }), /* @__PURE__ */ React44.createElement("path", {
      d: "M230.34 36.195a19.661 19.661 0 004.005 11.734L273.3 99.2a19.661 19.661 0 0027.55 3.761 19.661 19.661 0 003.76-27.55l-38.954-51.27a19.661 19.661 0 00-27.551-3.76 19.661 19.661 0 00-7.766 15.815z"
    }), /* @__PURE__ */ React44.createElement("path", {
      d: "M191.568 87.252a19.661 19.661 0 007.803 15.736 19.661 19.661 0 0027.54-3.824l38.772-51.27a19.661 19.661 0 00-3.824-27.54 19.661 19.661 0 00-27.541 3.821l-38.77 51.272a19.661 19.661 0 00-3.98 11.805z"
    }), /* @__PURE__ */ React44.createElement("path", {
      d: "M300 650s161.104-239.59 235.714-322.857C627.73 224.452 750 188.57 800 188.57S850 650 850 650v0",
      fill: "none",
      stroke: "#000",
      strokeWidth: 50
    }));
  }
  var Assignment_default5 = SvgAssignment5;

  // build/lib-react-tsx/logo/Cmaup.tsx
  var React45 = __toModule(require_react());
  function SvgCmaup({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React45.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React45.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React45.createElement("path", {
      d: "M1000 614.562h-34.807c-34.682 65.384-65.935 136.59-119.033 191.277-132.228 136.192-307.053 93.276-397.349-61.265C284.745 463.778 561.697-226.17 846.268 223.92c38.18 60.388 60.133 128.724 84.118 194.679h34.807V26.67h-34.807l-34.807 97.982C787.201 60.763 679.654 1.493 547.51.033c-93.32-1.03-196.477 21.511-278.319 63.86C-432.08 426.761 405.08 1345.52 872.993 862.97c66.728-68.816 95.719-162.415 127.007-248.407z",
      fill: "#11b45a",
      stroke: "none"
    }));
  }
  var Cmaup_default = SvgCmaup;

  // build/lib-react-tsx/logo/Coconuts.tsx
  var React46 = __toModule(require_react());
  function SvgCoconuts({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React46.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React46.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React46.createElement("path", {
      d: "M225.5 1030.84c-30.102-.575-85.358-4.627-121.5-8.91-61.136-7.242-107.648-18.677-126.688-31.145-7.042-4.61-9.828-10.238-8.915-18.003.359-3.057 1.43-6.875 2.378-8.486 5.576-9.463 36.019-20.734 76.55-28.342 30.748-5.77 42.26-7.385 85.175-11.941 15.272-1.622 26.325-3.287 27.779-4.185.444-.275-1.323-2.695-3.927-5.379-2.604-2.684-5.12-5.57-5.593-6.414-.472-.844-1.227-1.535-1.677-1.535-1.02 0-9.621-8.544-12.087-12.006-1.004-1.411-2.94-3.162-4.3-3.89-1.361-.728-3.087-2.512-3.835-3.964-1.77-3.434-2.694-4.675-6.61-8.863-1.787-1.912-3.25-3.729-3.25-4.036 0-.308-1.732-2.853-3.848-5.656-2.117-2.803-4.562-6.478-5.435-8.166-.873-1.688-3.642-6.133-6.152-9.877-2.51-3.744-4.565-7.232-4.565-7.751 0-.52-1.813-3.477-4.029-6.571-2.216-3.095-3.836-6.13-3.6-6.745.236-.615-.426-1.653-1.47-2.305-1.046-.653-1.901-1.858-1.901-2.678 0-.82-.45-1.492-1-1.492s-1-.948-1-2.107c0-1.527-.444-1.937-1.611-1.489-1.177.452-1.448.191-1.003-.967.66-1.719-.375-2.996-4.636-5.723-1.512-.968-2.75-2.448-2.75-3.288 0-.84-1.559-2.18-3.464-2.975-3.91-1.634-5.534-4.018-5.54-8.135-.004-1.745-1.144-4.031-3-6.012-1.777-1.895-2.996-4.279-2.996-5.857 0-1.954-.398-2.508-1.5-2.085-.914.35-1.5 0-1.5-.893 0-.808-.45-1.469-1-1.469s-1-.927-1-2.059c0-1.133-.427-1.795-.948-1.473-.521.322-2.434-1.46-4.25-3.959-1.816-2.5-5.44-7.442-8.052-10.982-2.612-3.541-4.75-6.663-4.75-6.938 0-.495-4.23-7.16-5.77-9.089-2.008-2.518-7.73-11.84-7.73-12.593 0-.463-.749-1.717-1.664-2.785-.915-1.069-2.6-3.896-3.743-6.283-1.144-2.386-2.977-5.689-4.075-7.339-1.097-1.65-2.75-4.575-3.674-6.5-.924-1.925-3.663-7.622-6.087-12.66-2.424-5.037-4.524-9.762-4.666-10.5-.143-.737-.747-2.465-1.344-3.84-2.021-4.66-2.563-6.496-2.328-7.894.13-.766-.29-1.718-.933-2.115-3.769-2.329-5.624-30.984-3.027-46.741.022-.137.518-.25 1.1-.25.582 0 .741.563.353 1.25-.542.96-.387.954.666-.025 1.102-1.024 1.13-1.662.147-3.236-.674-1.08-1.225-2.548-1.225-3.264 0-.716-.9-3.067-2-5.225-2.153-4.222-2.615-6.998-1-6 .55.34 1 1.31 1 2.155 0 .845.952 2.874 2.116 4.508 1.54 2.163 2.179 4.724 2.345 9.405.148 4.14.786 7.056 1.79 8.182 1.405 1.576 2.117 5.753 3.012 17.676.164 2.18.894 4.126 1.641 4.375C6.276 658.425 8 661.538 8 666.504c0 3.093.764 6.428 2 8.735 1.1 2.052 2 4.223 2 4.825 0 .601 1.462 3.288 3.25 5.97s4.215 7.597 5.395 10.921c1.18 3.325 3.097 8.714 4.259 11.975 1.162 3.262 2.784 6.673 3.604 7.58.82.906 1.492 1.936 1.492 2.29 0 .352 1.162 3.18 2.581 6.284 1.42 3.104 2.832 7.185 3.138 9.07.305 1.883 1.3 3.97 2.21 4.635 1.863 1.363 10.016 17.854 14.071 28.461.684 1.788 1.59 3.25 2.013 3.25.423 0 1.447 1.688 2.275 3.75.828 2.063 2.676 5.01 4.108 6.552 1.432 1.54 2.604 3.677 2.604 4.747 0 1.07 1.542 3.652 3.427 5.739 2.44 2.701 3.52 4.933 3.75 7.753.267 3.276.727 4.016 2.666 4.29 1.29.183 3.052 1.567 3.918 3.076.866 1.508 3.002 3.679 4.748 4.823 1.745 1.144 3.993 3.81 4.995 5.925 1.715 3.619 3.688 5.88 17.619 20.192 3.092 3.177 5.938 6.77 6.324 7.985.385 1.214 2.242 4.228 4.127 6.697 1.884 2.468 3.426 4.907 3.426 5.419 0 .512 1.8 3.01 4 5.552 2.38 2.75 4 5.64 4 7.136 0 2.231.362 2.478 3.208 2.19 2.708-.275 3.57.208 5.515 3.094 1.269 1.88 3.65 4.237 5.292 5.235 1.642.999 2.985 2.513 2.985 3.366 0 2.827 3.144 6.479 5.579 6.479 1.658 0 3.871 1.83 7.534 6.232 2.852 3.427 8.156 8.177 11.787 10.556 6.32 4.14 14.1 10.906 14.1 12.262 0 .763-18.512 3.332-39.5 5.482-47.267 4.841-77.692 9.059-100.367 13.913-32.88 7.038-55.485 14.676-62.374 21.074-9.372 8.703-7.837 24.372 3.073 31.373 19.74 12.667 85.156 26.055 157.168 32.167 97.534 8.278 209.148 7.681 298-1.592 41.531-4.335 78.932-10.427 101-16.452 4.125-1.126 12.093-3.161 17.706-4.522 8.872-2.152 14.802-4.252 21.53-7.623.955-.478 2.886-.87 4.29-.87 1.405 0 4.257-.869 6.338-1.93 2.082-1.063 6.441-2.242 9.688-2.621 3.247-.38 6.363-1.238 6.926-1.91.562-.67 3.272-2.025 6.022-3.01 2.75-.986 5.427-2.183 5.95-2.66.522-.478 2.102-.869 3.51-.869 1.476 0 3.087-.846 3.808-2 .687-1.1 2.119-2 3.181-2 1.063 0 2.211-.45 2.551-1 .34-.55 1.48-1 2.535-1 1.054 0 3.39-.898 5.19-1.996 1.802-1.098 3.921-1.998 4.71-2 .79 0 2.379-.89 3.531-1.972 2.92-2.744 31.197-17.032 33.706-17.032 3.224 0 9.88-4.2 11.441-7.219 1.27-2.454 6.756-7.143 15.767-13.473 1.716-1.206 4.245-2.225 5.62-2.266 3.22-.094 4.241-.838 6.517-4.751 1.185-2.038 3.565-3.94 6.52-5.212 5.52-2.375 6.674-3.595 7.125-7.543.273-2.398.925-3.084 3.408-3.587 3.472-.704 8.069-3.694 13.93-9.062 2.2-2.015 5.741-4.273 7.87-5.02 4.05-1.418 4.922-2.347 10.63-11.316 2.424-3.81 4.95-6.29 8.22-8.07 2.595-1.415 4.962-2.967 5.26-3.45.299-.482 1.775-1.156 3.281-1.496 1.568-.355 3.984-2.294 5.65-4.537 1.601-2.154 3.358-3.64 3.905-3.303.554.343.68.109.287-.529-.824-1.333 4.134-7.939 6.535-8.706.901-.288 2.75-2.197 4.107-4.242 1.358-2.045 4.22-5.518 6.362-7.718 3.52-3.617 5.948-6.732 13.249-16.997 1.377-1.937 4.129-3.99 6.626-4.943 3.96-1.512 4.608-2.318 8.894-11.07 2.543-5.191 4.624-10.295 4.624-11.342 0-1.047.71-2.492 1.578-3.213.868-.72 2.667-3.458 3.998-6.085 1.331-2.627 3.688-6.255 5.237-8.063 1.55-1.808 3.528-4.862 4.397-6.787 4.25-9.42 6.056-12.934 9.251-18 5.455-8.65 6.6-11.762 5.913-16.062-.887-5.548.142-8.398 4.574-12.663 3.045-2.93 4.577-5.725 6.847-12.486 1.608-4.79 3.662-9.837 4.564-11.215.903-1.377 1.641-3.618 1.641-4.98 0-1.362.45-2.754 1-3.094.55-.34 1.061-2.279 1.136-4.309.096-2.601.27-2.983.589-1.294.537 2.846-1.393 10.631-3.467 13.982-.81 1.308-2.276 5.133-3.257 8.5-2.599 8.916-5.73 15.621-7.296 15.621-.752 0-1.97 1.125-2.705 2.5-.736 1.375-1.712 2.5-2.169 2.5-1.304 0-.971 7.46.394 8.825.967.967.967 1.639 0 3.186-.674 1.08-1.225 2.643-1.225 3.475 0 .833-.344 1.514-.764 1.514-.775 0-4.36 7.332-4.84 9.9-.145.77-.855 1.775-1.58 2.235-1.251.793-.371 1.303 1.603.927.506-.096.338.525-.372 1.382-.71.856-.957 1.556-.547 1.556.41 0 .3.563-.245 1.25-.544.688-1.983 3.95-3.198 7.25-1.215 3.3-2.76 6.675-3.432 7.5-.673.825-2.304 3.975-3.625 7-1.321 3.025-2.987 6.21-3.701 7.079-.714.868-1.299 2.09-1.299 2.715s-1.34 2.662-2.977 4.527c-1.638 1.865-2.688 3.68-2.334 4.035.355.354.187.644-.373.644s-2.433 2.278-4.163 5.061c-1.73 2.784-3.593 4.785-4.138 4.448-.546-.337-.761-.01-.479.724.282.736-.398 2.315-1.511 3.51-1.114 1.196-2.025 2.594-2.025 3.108 0 .514-.628 1.176-1.396 1.47-.768.295-2.426 2.369-3.684 4.608-1.259 2.239-2.81 4.071-3.45 4.071-.638 0-2.017.977-3.065 2.172-1.048 1.194-1.374 1.862-.724 1.484 3.444-2.008-27.308 29.277-38.183 38.844-4.377 3.85-9.524 8.513-11.44 10.361-1.914 1.849-4.927 4.137-6.694 5.084-1.767.947-4.413 3.148-5.88 4.891-1.466 1.743-3.048 2.934-3.514 2.646-.466-.288-1.212.05-1.659.753-.446.702-2.611 2.61-4.811 4.24-2.2 1.63-4.45 3.328-5 3.773-4.05 3.273-10.987 7.57-11.604 7.187-.414-.255-1.037.435-1.386 1.533-.374 1.178-3.068 3.114-6.572 4.723-3.266 1.499-5.938 3.306-5.938 4.017 0 .71-.42 1.292-.933 1.292-.513 0-1.213.884-1.556 1.965-.41 1.29-1.894 2.195-4.317 2.634-4.679.846-8.824 2.94-11.887 6.003-1.319 1.319-2.782 2.398-3.252 2.398-1.132 0-8.055 6.95-8.055 8.088 0 1.402-7.162 5.521-10.865 6.248-4.397.862-28.94 13.074-32.603 16.221-1.564 1.344-3.56 2.445-4.438 2.447-.876 0-2.944.822-4.594 1.823-1.65 1.001-5.202 2.462-7.894 3.247-2.691.784-5.387 2.214-5.99 3.176-.603.963-1.701 1.75-2.44 1.75-2.196 0-16.574 6.027-17.342 7.269-.39.63-3.324 1.436-6.521 1.792-3.197.355-7.838 1.338-10.313 2.184l-11 3.757a4321.073 4321.073 0 00-15 5.165c-11.543 4-27.516 8.11-45.5 11.71-72.816 14.574-170.953 20.779-292 18.463zm567-164.34c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm102.515-184.25c-.01-1.164.755-1.75 2.285-1.75 1.265 0 2.84-.54 3.5-1.2.912-.912 1.2-.916 1.2-.019 0 .65-1.238 1.484-2.75 1.854-1.512.37-3.08 1.166-3.485 1.769-.451.674-.74.422-.75-.654zm6.985-7.191c0-1.343.369-2.669.82-2.947.45-.279.623.82.386 2.44-.525 3.575-1.206 3.86-1.206.507zm2.945-6.243c.58-1.202 1.055-4.014 1.055-6.25 0-3.355.339-4.066 1.937-4.066 1.435 0 2.04-.841 2.34-3.25l.403-3.25.16 3.344c.123 2.58-.297 3.463-1.84 3.866-1.544.404-2 1.364-2 4.215 0 2.031-.7 4.566-1.555 5.634-1.502 1.875-1.52 1.867-.5-.243zm6.123-18.684c-.038-1.027 1.282-3.406 2.932-5.285s3-2.891 3-2.25c0 .643-.8 1.896-1.78 2.786-.978.89-2.298 2.742-2.932 4.117-.924 2.004-1.166 2.13-1.22.632zM917 637.618c0-.55.45-1.278 1-1.618.55-.34 1-.168 1 .382s-.45 1.278-1 1.618c-.55.34-1 .168-1-.382zm2-7c0-.55.45-1.278 1-1.618.55-.34 1-.168 1 .382s-.45 1.278-1 1.618c-.55.34-1 .168-1-.382zm-.559-10.673c-1.864-1.494-1.852-1.512.309-.465 1.238.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zm-.877-4.738c.376-.986.935-1.541 1.243-1.233.308.307 0 1.114-.683 1.793-.988.98-1.102.865-.56-.56zm2.167-4.787c.354-1.352.807-1.806 1.057-1.057.24.722-.038 1.787-.62 2.369-.742.742-.872.351-.437-1.312zm1.427-4.92c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm.571-3.604c-.4-.401-.715-1.667-.699-2.813.029-1.923.11-1.946 1.071-.295 1.119 1.922.833 4.312-.372 3.108zM-8.65 592.5c0-4.675.173-6.588.383-4.25.21 2.337.21 6.162 0 8.5-.21 2.337-.383.425-.383-4.25zm401.453 5.132c-11.252-1.446-13.018-1.938-15.5-4.318-4.991-4.786-7.479-5.238-37.802-6.869-11.876-.638-23.656-1.858-29-3.002-10.287-2.201-31.008-5.53-43.5-6.987-13.183-1.537-17.49-2.516-32-7.273-7.425-2.435-15.938-4.697-18.917-5.027-3.842-.427-6.167-1.32-8-3.072-2.317-2.215-10.534-6.1-21.483-10.156-2.145-.795-6.87-3.824-10.5-6.732-9.297-7.448-12.173-9.364-19.846-13.225-3.715-1.87-9.004-5.002-11.754-6.961-11.729-8.356-16.945-11.51-19.035-11.51-1.395 0-3.543-1.584-5.762-4.25-2.33-2.797-5.506-5.088-9.295-6.7-3.166-1.348-7.59-4.273-9.832-6.5-2.752-2.734-6.188-4.785-10.576-6.312-7.411-2.578-10.847-2.117-16.53 2.217-2.82 2.15-3.43 3.373-4.013 8.04-.378 3.028-1.031 5.505-1.452 5.505-.997 0-7.463-7.988-8.297-10.25-.355-.963-1.11-1.75-1.677-1.75S57 491.14 57 489.478c0-2.165-1.203-4.328-4.24-7.623-2.957-3.207-4.147-5.313-3.931-6.956.212-1.616-.824-3.523-3.297-6.069-3.826-3.939-4.297-7.034-.994-6.531 1.08.164 2.964.46 4.19.66 1.224.198 3.439 1.314 4.92 2.48 1.847 1.451 3.018 1.795 3.723 1.09.566-.566 1.823-1.029 2.794-1.029.97 0 2.246-.9 2.835-2 .884-1.652 2.094-2 6.953-2 8.358 0 9.391-.565 6.437-3.52-2.923-2.922-3.105-5.48-.39-5.48 1.486 0 2-.667 2-2.596 0-1.427.767-3.894 1.705-5.481 1.67-2.83 1.65-2.943-1.06-5.773-2.576-2.687-2.652-3-1.108-4.544 2.142-2.142 1.176-4.606-1.806-4.606-2.66 0-7.711-2.126-7.723-3.25-.004-.412 1.316-.75 2.935-.75 4.813 0 8.174-6.716 4.415-8.82-.903-.505-2.553-.68-3.666-.39-1.389.364-2.68-.285-4.108-2.064-1.867-2.324-4.587-3.603-19.584-9.205-4.277-1.598-7.583-6.562-6.152-9.237.667-1.246.571-2.566-.304-4.203-1.981-3.701-.946-5.681 2.97-5.681 3.92 0 6.762-2.22 8.602-6.722.715-1.748 1.909-3.8 2.653-4.56.744-.761 2.03-3.011 2.856-5 .876-2.11 4.016-5.693 7.53-8.594 3.315-2.737 6.673-6.225 7.462-7.75.789-1.526 2.271-2.774 3.294-2.774 3.605 0 12.687 3.227 21.358 7.589 4.824 2.426 9.432 4.411 10.242 4.411.81 0 3.535 1.575 6.057 3.5 6.81 5.199 8.437 4.538 3.948-1.602-4.632-6.335-6.731-12.16-7.596-21.074-.462-4.772-.49-10.622-.06-13 .68-3.76.878-2.887 1.516 6.676.83 12.434 3.021 20.026 6.464 22.39 1.29.886 3.077 2.397 3.974 3.36 2.044 2.194 6.656 2.416 5.837.282-.94-2.447 1.04-2.69 4.539-.558 2.43 1.482 5.055 2.02 9.873 2.022 5.989.003 6.814-.258 9.437-2.996 1.58-1.65 3.41-3 4.065-3 .654 0 1.807-.744 2.561-1.652.755-.909 3.622-3.319 6.373-5.355 2.75-2.037 6.576-5.189 8.501-7.004 1.925-1.816 5.75-4.757 8.5-6.536 2.75-1.78 6.024-4.134 7.275-5.233 1.251-1.099 3.726-2.551 5.5-3.227 1.774-.677 5.133-2.076 7.464-3.111 2.332-1.035 4.867-1.882 5.635-1.882.768 0 2.12-1.104 3.004-2.453 2.044-3.12 10.176-7.932 12.134-7.18 1.16.444 1.491 2.51 1.503 9.352.019 10.67.843 12.555 4.009 9.17 4.498-4.811 10.956-14.443 10.988-16.389.018-1.1.912-3.125 1.988-4.5 4.14-5.293 1.57-8.83-11.706-16.1l-6.207-3.4-5.293 5.073c-8.563 8.207-15.279 13.315-20.45 15.555-9.615 4.166-17.277 7.954-17.8 8.8-.294.476-2.449 1.85-4.789 3.054-2.34 1.204-5.83 3.686-7.755 5.516-1.925 1.83-6.841 5.841-10.924 8.915-7.582 5.705-11.669 6.904-15.84 4.647-.955-.516-2.873-1.175-4.263-1.463-3.222-.667-10.58-6.935-12.5-10.648-.81-1.567-1.473-4.347-1.473-6.177 0-7.886-7.049-10.635-9.672-3.772l-1.337 3.5.588-3.953c.323-2.175 1.45-5.644 2.504-7.71 1.589-3.114 1.917-5.914 1.917-16.345 0-10.542.325-13.262 2-16.728 1.1-2.277 2-4.702 2-5.39 0-.688 1.382-2.74 3.072-4.562 4.625-4.987 6.949-8.458 6.179-9.228-.38-.38 0-.425.843-.102 1.643.631 5.185-2.56 4.698-4.233-.16-.55 1.283-2.748 3.208-4.884 1.925-2.135 5.3-6.07 7.5-8.744 6.067-7.373 7.737-9.244 7.028-7.871-.355.688-.165 1.25.422 1.25 1.372 0 7.188-5.529 6.52-6.198-.546-.544 12.18-3.399 19.53-4.38 8.954-1.196 10.269-2.014 14.699-9.149 2.298-3.7 4.028-6.88 3.845-7.062-.183-.184-5.33 2.173-11.439 5.236C180.997 219.01 176 221.3 176 221.034c0-.265 1.35-1.18 3-2.034 1.65-.853 3-2.172 3-2.932 0-.759 1.98-2.055 4.4-2.88 6.362-2.167 16.24-8.675 14.655-9.654-.932-.576-.965-.972-.121-1.493 1.966-1.215 5.884-8.106 6.336-11.143l.43-2.898.15 2.75c.202 3.702 2.638 3.536 4.316-.295 1.31-2.99 5.591-5.924 8.738-5.987.878-.017 2.434-.666 3.458-1.442 1.024-.776 4.4-2.152 7.5-3.059 8.507-2.487 10.138-3.283 10.138-4.946 0-.836-.525-1.521-1.167-1.521-.641 0-.877-.29-.524-.642.354-.354 1.317-.083 2.141.6 2.743 2.277 17.269-3.245 26.55-10.092 8.224-6.066 11.146-7.913 10.495-6.633-.354.697-.047.586.68-.247 2.117-2.418 6.825-5.144 6.825-3.95 0 .595.457.8 1.016.454.56-.346.787-1 .506-1.454-.28-.455.185-1.093 1.036-1.42.85-.326 1.311-.213 1.024.251-.287.464.616.627 2.006.36 1.687-.322 2.344-.96 1.976-1.92-.4-1.045-.032-1.273 1.348-.835 1.513.48 2.546-.529 5.09-4.976 3.018-5.274 3.155-5.954 2.507-12.405-.496-4.943-.266-8.173.835-11.709.836-2.685 1.894-6.218 2.351-7.851 1.105-3.948 6.807-7.868 9.416-6.472 1.81.97 1.776 1.23-.862 6.437-1.987 3.923-3.2 5.291-4.375 4.937-1.708-.514-2.834 1.997-2.86 6.376-.01 1.52.413 2.093 1.236 1.676.687-.348.462.012-.5.801-.963.789-1.75 2.368-1.75 3.51 0 1.14-.467 3.301-1.037 4.801-1.339 3.522.793 8.236 5.799 12.823l3.618 3.316-2.061 5.595c-1.133 3.076-1.853 5.802-1.598 6.057.254.254 2.213-.742 4.352-2.213 2.582-1.776 4.224-3.86 4.885-6.197 1.086-3.84 4.195-5.685 11.542-6.846l4-.632.214-10.928c.118-6.011.68-12.266 1.25-13.9 1.709-4.9 1.264-9.381-1.153-11.633-1.742-1.623-1.862-2.039-.588-2.039 2.14 0 5.912 4.624 8.865 10.867 1.327 2.804 2.663 5.106 2.969 5.115.306.01 1.017-1.22 1.58-2.732l1.023-2.75 1.165 4c.64 2.2 1.166 5.413 1.17 7.14.002 1.726.867 4.2 1.921 5.5 1.832 2.256 2.452 2.356 14.044 2.266 7.725-.06 12.547-.513 13.284-1.25.636-.636 1.955-1.156 2.932-1.156.977 0 3.249-.898 5.05-1.996 2.586-1.577 5.044-1.997 11.703-2 4.636-.002 9.81-.426 11.5-.94 10.528-3.213 14.22-4.064 17.627-4.064 2.104 0 4.104-.45 4.444-1 .34-.55 2.59-1 5-1s4.66-.45 5-1c.34-.55 1.946-1 3.57-1 1.623 0 4.86-.867 7.19-1.926 4.053-1.841 7.067-2.455 18.24-3.716 2.75-.31 5.515-.983 6.145-1.496.629-.512 10.053-1.375 20.942-1.916 14.015-.697 20.253-1.38 21.356-2.338 2.777-2.413 15.313-7.608 18.358-7.608 2.198 0 8.077-1.679 10.935-3.123.955-.482 2.63-.877 3.72-.877 1.933 0 7-2.499 12.044-5.94 1.375-.937 4.075-2.476 6-3.418 1.925-.942 5.525-3.26 8-5.152 2.475-1.892 6.3-4.317 8.5-5.389 2.2-1.071 5.55-3.557 7.446-5.524 1.896-1.968 3.945-3.577 4.554-3.577.61 0 2.634-1.575 4.5-3.5s3.91-3.5 4.541-3.5c.632 0 1.933-.866 2.892-1.925.958-1.06 4.079-3.07 6.935-4.467 2.856-1.397 6.53-3.942 8.162-5.655 1.634-1.712 4.781-3.943 6.995-4.956 2.213-1.013 4.87-2.777 5.905-3.92 1.034-1.142 2.941-2.077 4.239-2.077 1.297 0 3.14-.397 4.095-.883.955-.486 2.974-1.386 4.486-2l5.5-2.234c1.513-.614 3.531-1.514 4.486-2 .955-.485 2.418-.883 3.25-.883.833 0 2.314-.8 3.292-1.778.977-.977 4.423-3.03 7.656-4.56 3.233-1.531 8.83-5.006 12.438-7.723 3.608-2.716 7.288-4.939 8.177-4.939.89 0 2.93-1.337 4.534-2.972 2.781-2.834 3.317-2.974 11.513-3 5.76-.019 9.635-.546 11.743-1.598 1.73-.863 3.976-1.306 4.99-.984 2.371.752 7.886-4.391 8.773-8.183.828-3.54 7.868-10.913 12.398-12.986 6.286-2.877 9.8-6.168 12.52-11.727 3.484-7.122 5.069-8.473 6.98-5.948 1.678 2.217 2.09 16.916.5 17.898-.55.34-1 1.915-1 3.5s-.45 3.16-1 3.5c-.58.358-1 5.824-1 13s.42 12.642 1 13c1.665 1.03 1.122 4.364-.886 5.439-4.833 2.587-7.93 13.309-4.635 16.044 1.528 1.268 4.521 6.677 4.521 8.17 0 2.16-3.225.41-7.533-4.086-7.599-7.928-14.675-9.554-15.266-3.507l-.3 3.06-5.78-.418c-5.757-.416-5.795-.4-9.45 3.87C730.65 45.93 729 48.814 729 49.98c0 1.166-.496 2.616-1.103 3.223-.709.709-.862 3.013-.43 6.45.873 6.926.875 17.073.006 23.189-.441 3.1-.29 5.24.419 5.95.61.61 1.108 3.241 1.108 5.849s.45 5.02 1 5.359c.564.348 1 5.188 1 11.092 0 9.19.306 11.08 2.5 15.408 1.375 2.713 2.5 5.571 2.5 6.35 0 1.57 3.409 2.968 6.5 2.664 1.1-.109 7.806-3.087 14.903-6.62 7.097-3.531 13.069-6.255 13.271-6.053.46.46-25.259 13.16-28.674 14.16-1.375.403-5.752 2.281-9.727 4.174-6.47 3.082-7.33 3.83-8.2 7.134-.894 3.391-1.538 11.203-4.055 49.191-.492 7.425-1.378 17.977-1.97 23.45-.59 5.471-1.137 13.261-1.214 17.31-.077 4.05-.409 6.982-.737 6.517-.328-.466-3.191-2.546-6.361-4.624-6.093-3.994-8.333-4.129-10.516-.634-1.114 1.785-.863 2.619 2.003 6.637 1.802 2.528 3.975 5.753 4.83 7.168 2.19 3.627 7.027 6.242 8.87 4.794 1.185-.93 1.287-.698.607 1.382-.448 1.375-1.017 7.225-1.262 13l-.446 10.5-9.661 4.637C683.6 297.505 675.37 301.526 672 303.35c-1.925 1.042-4.85 2.465-6.5 3.162-5.726 2.419-10.018 4.498-13.5 6.537-4.566 2.675-11.482 4.863-13.24 4.188-.765-.293-2.164-2.93-3.11-5.858-.946-2.929-2.56-6.238-3.589-7.353-1.028-1.115-2.327-3.602-2.886-5.527-.559-1.925-1.952-5.969-3.096-8.986-1.143-3.017-2.079-6.375-2.079-7.462 0-1.087-1.225-2.954-2.723-4.148-2.357-1.88-2.735-2.928-2.815-7.802-.05-3.097-.625-6.165-1.277-6.817-.652-.652-1.192-3.683-1.2-6.735-.008-3.053-.394-6.147-.856-6.876-1.164-1.835.862-7.103 4.014-10.438 2.985-3.158 11.105-7.736 13.723-7.736.968 0 3.053-1.35 4.634-3 1.58-1.65 3.825-3 4.987-3 3.166 0 4.517-1.945 4.481-6.45-.03-3.871-1.747-7.55-3.524-7.55-1.576 0-6.444-5.375-6.444-7.116 0-.957-.706-2.447-1.57-3.31-1.426-1.427-1.335-1.66 1-2.548 2.662-1.011 3.304-2.454 1.57-3.526-.572-.353-1-5.49-1-12s.428-11.647 1-12c1.58-.977 1.174-11.843-.573-15.346-1.602-3.212-3.645-3.82-11.427-3.405-6.401.342-10.777-.903-14.194-4.037-3.349-3.072-3.497-3.499-3.404-9.784.072-4.827.562-7.035 1.847-8.32.961-.961 1.996-2.954 2.3-4.428 2.111-10.266 6.975-22.792 9.401-24.212.984-.576 1.094-.918.3-.938-2.178-.053-1.35-4.163 1.25-6.209 1.375-1.081 2.5-2.593 2.5-3.359s1.298-3.44 2.885-5.941c2.185-3.447 2.884-5.757 2.884-9.535 0-3.458-.403-4.986-1.317-4.986-.724 0-1.574.81-1.889 1.8-.314.99-2.157 2.375-4.096 3.076-1.939.7-5.633 3.266-8.21 5.7-2.575 2.433-5.007 4.424-5.404 4.424-.875 0-9.806 5.275-15.516 9.164-2.29 1.56-4.494 2.836-4.897 2.836-1.255 0-11.804 7.178-14.575 9.917-1.45 1.433-4.886 3.415-7.637 4.404-2.75.99-6.47 3.109-8.263 4.71-1.793 1.601-4.882 3.43-6.863 4.063-4.708 1.504-23.37 10.581-29.048 14.129-3.232 2.019-5.738 2.777-9.178 2.777-2.967 0-5.319.586-6.302 1.57-3.748 3.747-11.644 4.33-19.949 1.473-5.225-1.798-8.82-1.97-44.275-2.116-36.425-.15-38.96-.043-45.219 1.905-3.647 1.135-9.781 2.557-13.631 3.16-7.99 1.251-14.561 2.974-15.95 4.182-.522.454-1.991.826-3.264.826-1.272 0-3.32.52-4.55 1.156-4.775 2.469-5.77 2.844-7.535 2.844-2.472 0-10.201 3.806-10.201 5.023 0 .538-.857.977-1.905.977s-3.79 1.575-6.095 3.5c-2.304 1.925-5.16 3.51-6.345 3.522-1.185.012-4.117.912-6.514 2-2.398 1.088-5.409 1.978-6.691 1.978-1.283 0-2.61.45-2.95 1-.34.55-1.523 1-2.629 1s-4.054 1.406-6.552 3.125l-4.541 3.124.427 5.908c.399 5.515.764 6.254 5.497 11.125 8.411 8.658 9.418 12.935 4.192 17.817-2.683 2.506-3.89 2.901-8.865 2.901-6.577 0-10.36-2.2-11.485-6.68-.374-1.491-2-4.214-3.612-6.05-2.059-2.345-2.932-4.391-2.932-6.87 0-5.311-1.516-7.4-5.369-7.4-1.813 0-3.606.308-3.983.685-1.265 1.265-8.118 3.285-11.198 3.3-4.025.02-5.45 1.621-5.45 6.126 0 2.916.659 4.266 3.077 6.3 1.692 1.424 3.492 2.589 4 2.589s.923 1.102.923 2.45c0 1.675 1.184 3.315 3.75 5.192 2.063 1.51 4.296 3.395 4.962 4.19 1.052 1.255 1.565 1.217 3.865-.29 1.458-.956 4.694-1.806 7.19-1.89l4.538-.152.212 4.546c.116 2.5.664 5.426 1.217 6.5.553 1.075 2.077 4.165 3.386 6.868 1.309 2.703 3.1 6.303 3.978 8 .88 1.697 2.395 5.561 3.368 8.586.974 3.025 2.484 7.075 3.356 9 1.009 2.225 1.627 6.596 1.698 12 .062 4.675.646 9.485 1.299 10.69 2.512 4.635-1.193 3.073-15.87-6.692-8.325-5.538-16.556-10.709-18.292-11.492l-3.157-1.423 3 .209c2.428.168 3.061-.221 3.32-2.045.176-1.24-.612-3.438-1.75-4.885-1.139-1.448-2.07-3.213-2.07-3.924 0-1.847-4.883-5.439-7.385-5.433-1.163.003-3.875 1.07-6.025 2.372l-3.91 2.367 6.36 4.628c3.498 2.545 6.72 4.628 7.16 4.628.44 0 .8.48.8 1.066 0 .586-3.712-1.516-8.25-4.67-4.537-3.156-10.5-7.242-13.25-9.082-4.16-2.784-4.944-3.781-4.664-5.942.21-1.614-.058-2.353-.706-1.952-.573.354-.79 1.305-.48 2.112.813 2.116-.911 1.805-3.533-.638-1.243-1.158-3.465-2.427-4.939-2.82l-2.678-.715-.282-11.668c-.223-9.235.058-12.325 1.347-14.817 2.566-4.962 6.294-7.874 10.081-7.874 3.872 0 4.397-1.746 1.354-4.5-1.1-.995-2-2.36-2-3.033 0-.672-.722-1.821-1.604-2.553-.882-.733-1.996-2.363-2.475-3.623-2.04-5.362-9.334-.77-15.818 9.959-1.246 2.062-2.6 3.75-3.009 3.75-.409 0-2.02 2.767-3.581 6.149-2.396 5.188-2.672 6.592-1.768 8.987 2.247 5.951-6.07 16.992-13.21 17.538-6.199.474-11.706 2.138-13.902 4.201-2.407 2.261-5.243 2.796-5.81 1.096-.188-.566-1.668-1.128-3.289-1.25-2.348-.176-3.227.35-4.326 2.593-.758 1.548-2.024 3.062-2.813 3.365-1.303.5-11.38 14.674-14.245 20.037-.651 1.218-1.872 6.162-2.713 10.984-.884 5.07-2.275 9.62-3.298 10.785-2.17 2.47-5.42 7.621-4.969 7.872.182.1 2.685 1.3 5.564 2.663 5.14 2.435 6.399 4.447 4.173 6.673-1.77 1.77.522 4.78 4.973 6.528 2.198.863 4.249 1.317 4.558 1.008.31-.31.562-2.287.562-4.396 0-3.933.735-4.505 3.764-2.93 5.072 2.636 10.427 3.46 14.83 2.283 2.439-.652 5.445-1.186 6.68-1.186 1.235 0 2.807-.9 3.494-2 .704-1.128 2.332-2 3.733-2 1.499 0 3.543-1.19 5.157-3 1.47-1.65 3.48-3 4.467-3 .987 0 3.63-1.8 5.875-4 2.244-2.2 4.653-4 5.353-4 3.182 0 18.872 9.136 24.147 14.06 1.65 1.54 8.85 6.662 16 11.382s14.05 9.363 15.332 10.32c1.282.956 5.167 3.538 8.633 5.738 3.466 2.2 14.056 9.153 23.533 15.451l17.232 11.451-.555 8.05c-.304 4.426-1.03 15.777-1.611 25.224-.582 9.447-1.493 18.322-2.025 19.722-1.19 3.132-2.262 3.359-18.69 3.963-14.514.535-18.87 1.883-19.948 6.176-.345 1.375-.315 3.73.067 5.231.381 1.503.93 4.422 1.218 6.488.289 2.066.928 4.005 1.42 4.31.492.303.894 1.673.894 3.043s.705 3.854 1.567 5.521c.862 1.667 2.407 5.582 3.432 8.7 3.359 10.211 5.59 15.97 6.717 17.332 1.36 1.643 9.284 18.373 9.284 19.603 0 .487 1.17 1.977 2.599 3.31 1.43 1.334 3.67 4.53 4.98 7.101 1.387 2.725 3.327 4.974 4.65 5.39 1.25.392 4.55 2.788 7.337 5.324 11.004 10.013 35.87 20.156 55.096 22.473 9.07 1.093 10.837 1.643 15.536 4.84l5.302 3.609 23.5-.359c23.135-.353 32.183.332 40.574 3.073 6.591 2.153 38.92.439 47.264-2.506 5.791-2.044 6.983-2.141 13.791-1.128 4.1.61 11.147 1.113 15.662 1.12 4.515.007 10.684.709 13.709 1.56 4.034 1.136 9.982 1.53 22.31 1.477 21.782-.093 24.734-1.253 28.203-11.084.86-2.44 2.717-5.64 4.126-7.11 2.233-2.33 2.667-3.933 3.391-12.514.87-10.294 3.397-18.694 7.176-23.841 5.57-7.587 15.546-17.536 19.7-19.647 1.427-.725 4.465-2.92 6.752-4.88 2.286-1.96 8.586-5.743 14-8.408 10.256-5.049 11.275-5.48 17.842-7.547 2.2-.692 5.35-2.265 7-3.494 6.692-4.987 12.785-7.163 27-9.643 3.85-.672 7.427-1.595 7.95-2.052.522-.456 1.791-.829 2.82-.829 1.028 0 3.758-1.238 6.066-2.75 2.308-1.513 5.09-3.244 6.18-3.847 1.091-.604 3.112-2.748 4.492-4.764 1.379-2.016 3.975-4.559 5.77-5.65 1.795-1.092 3.778-3.115 4.407-4.497.975-2.139.824-2.854-1.02-4.816-1.19-1.268-2.165-2.86-2.165-3.537s-1.562-4.567-3.47-8.645c-1.91-4.077-3.765-8.584-4.125-10.015-.359-1.431-1.947-3.56-3.529-4.729-1.582-1.17-2.876-2.7-2.876-3.401 0-1.657-6.55-9.5-16.17-19.363-9.954-10.204-14.45-12.353-24.195-11.562-13.93 1.13-22.49.79-25.038-.993-1.123-.787-2.87-1.431-3.884-1.431-2.196 0-11.712-7.947-11.713-9.781 0-.705.788-1.547 1.75-1.87.963-.325 7.375-3.292 14.25-6.596 6.875-3.303 18.575-8.918 26-12.476 11.754-5.634 16.254-7.868 23-11.42.825-.435 4.44-2.119 8.033-3.742l6.533-2.951 1.217-5.892c.67-3.24 1.24-7.44 1.27-9.332.052-3.418.062-3.426 1.621-1.19 1.172 1.68 2.558 2.25 5.462 2.25 4.222 0 10.49 3.383 11.396 6.15.297.908 1.575 1.911 2.841 2.229 1.266.318 3.595 1.6 5.176 2.85 1.581 1.249 4.237 2.721 5.901 3.271 1.706.564 3.601 2.201 4.344 3.751.724 1.514 2.904 3.989 4.845 5.5 1.94 1.512 5.178 5.193 7.194 8.18 5.332 7.896 6.332 9.346 9.784 14.193 1.715 2.407 3.402 6.063 3.75 8.126.348 2.063.901 5.275 1.23 7.138.415 2.36.06 4.207-1.173 6.088-1.493 2.278-2.25 2.602-4.847 2.072a448.632 448.632 0 00-7.077-1.363c-3.29-.604-3.96-1.112-3.78-2.862.332-3.194-2.202-4.88-5.25-3.491-2.075.945-2.47 1.82-2.47 5.472 0 3.412.566 4.87 2.628 6.772 1.445 1.333 3.132 3.562 3.75 4.952 3.429 7.723 9.274 12.963 11.122 9.972.34-.55 1.716-1 3.059-1 1.993 0 2.444.505 2.456 2.75.02 3.793 2.502 10.589 4.055 11.107.704.234 2.791 1.938 4.638 3.785 3.576 3.575 7.172 4.281 11.58 2.273 5.583-2.544 7.322-11.915 2.21-11.915-2.502 0-3.498-1.687-3.498-5.927 0-1.52-.9-3.578-2-4.573-1.1-.995-2-3.046-2-4.557 0-2.175.648-2.973 3.112-3.832 2.586-.902 3.013-1.479 2.526-3.415-.322-1.286.279-4.603 1.34-7.396 1.058-2.785 1.693-5.296 1.41-5.579-.283-.282-.711-5.623-.953-11.867-.427-11.056-1.262-19.504-3.447-34.854-.587-4.125-1.492-11.55-2.012-16.5-.52-4.95-1.444-13.275-2.055-18.5-1.265-10.83-1.557-48.237-.43-55 .414-2.475 1.597-5.694 2.63-7.154 1.034-1.46 1.879-3.508 1.879-4.55 0-1.043.466-2.362 1.036-2.932 1.317-1.317 1.45-13.506.173-15.99-1.25-2.43-3.209-8.674-3.209-10.223 0-.664 1.342-2.658 2.982-4.43 11.32-12.228 11-11.196 6.962-22.49-2.338-6.537-3.953-7.791-9.092-7.064-1.632.231-2.458 1.099-2.698 2.833-.629 4.548-3.336 6.427-4.681 3.25-1.614-3.81-2.19-10.25-.916-10.25.682 0 14.179-6.532 29.992-14.516 15.814-7.984 28.92-14.349 29.125-14.144.205.205-4.7 2.922-10.9 6.037-6.242 3.135-13.22 7.501-15.633 9.78-3.822 3.611-4.293 4.518-3.83 7.373.846 5.21 5.29 11.47 8.143 11.47 1.335 0 2.706.45 3.046 1 .34.55 2.365 1 4.5 1s4.16.45 4.5 1c.34.55 1.398 1 2.35 1 .954 0 3.403 1.575 5.444 3.5 2.04 1.925 4.087 3.5 4.548 3.5 1.193 0 3.158 4.659 3.158 7.488 0 1.317.45 2.672 1 3.012 1.766 1.091 1.077 6.53-2.01 15.881-1.657 5.016-3.457 10.5-4 12.19-.545 1.689-.99 5.312-.99 8.05 0 2.738-.412 5.407-.916 5.929-3.101 3.217-3.085 46.615.018 49.9.494.523.898 2.228.898 3.79 0 1.562.9 4.604 2 6.76 1.1 2.156 2 5.712 2 7.901 0 2.19.45 4.26 1 4.599 1.324.818 1.324 24.182 0 25-.55.34-1 3.04-1 6s-.45 5.66-1 6c-.55.34-1 2.623-1 5.074 0 3.91.38 4.686 3.1 6.34 1.705 1.038 3.941 3.27 4.97 4.96 1.028 1.69 3.458 3.737 5.4 4.549 4.357 1.82 4.699 2.84.416 1.24-1.713-.64-4.195-2.513-5.516-4.163a703.03 703.03 0 00-3.413-4.238c-1.173-1.433-5.778-2.774-6.624-1.928-2.732 2.732-3.469 23.25-1.388 38.666.63 4.675 1.158 9.4 1.172 10.5.062 4.872-2.389 13.957-5.132 19.027-1.642 3.035-2.992 6.295-3 7.246-.022 2.493-2.316 8.716-3.931 10.662-.875 1.054-2.512 1.556-4.454 1.366-2.626-.257-3.454-1.096-5.73-5.801-1.68-3.474-2.475-6.476-2.16-8.15.92-4.873-2.617-4.564-13.974 1.22-5.63 2.868-11.538 6.3-13.129 7.628-1.59 1.327-5.19 3.572-8 4.989-5.532 2.79-18.467 15.209-21.057 20.216-.903 1.746-2.397 3.097-3.426 3.097-1.003 0-3.69 1.352-5.97 3.004-2.281 1.652-6.061 3.658-8.4 4.458-2.34.8-4.704 2.25-5.254 3.222-.55.972-2.475 3.298-4.277 5.169-2.965 3.077-3.69 3.354-7.623 2.911-2.532-.285-5.7.08-7.588.873-1.783.75-4.513 1.363-6.068 1.363-1.554 0-3.073.4-3.376.89-.302.488-1.79 1.197-3.309 1.573-3.303.82-7.259 4.298-7.259 6.383 0 .823.736 2.31 1.636 3.304 1.52 1.68 1.507 1.858-.178 2.504-1.26.484-2.253.034-3.258-1.479-1.855-2.794-6.442-2.858-12.7-.175-2.566 1.1-5.45 2-6.41 2-2.918 0-14.43 5.029-17.09 7.466-1.375 1.26-3.507 2.808-4.738 3.44-4.417 2.272-8.224 15.732-5.28 18.675 1.505 1.506-2.06 7.859-4.614 8.223-1.173.167-2.84 1.067-3.707 2-10.543 11.354-10.548 11.357-14.53 11.07-2.847-.206-5.645.674-10.862 3.415-7.103 3.733-10.269 7.006-10.269 10.617 0 1.087-.45 2.254-1 2.594-.55.34-1.015 1.604-1.033 2.809-.057 3.725-3.153 6.339-8.51 7.184-7.975 1.258-1.722 2.242 9.543 1.502 5.225-.343 11.975-.509 15-.368 3.888.182 6.819-.352 10-1.821 7.5-3.463 8.225-3.656 16.249-4.328 5.178-.433 9.325-1.448 12.5-3.059 2.616-1.328 6.516-2.413 8.68-2.415 3.598-.004 6.6-.706 13.634-3.188 3.28-1.157 11.19-8.723 14.711-14.072 1.5-2.277 4.62-5.89 6.934-8.03 3.006-2.78 6.228-7.892 11.28-17.9 7.372-14.599 10.723-19.609 17.602-26.314 7.307-7.123 10.349-9.448 13.156-10.058 1.515-.329 3.654-.961 4.754-1.406 1.1-.444 4.025-1.368 6.5-2.052 2.475-.684 5.85-1.806 7.5-2.495 1.65-.688 4.8-1.57 7-1.96 2.2-.39 4.45-1.055 5-1.48.55-.424 4.215-1.733 8.145-2.907 3.93-1.175 9.336-3.6 12.015-5.389 2.679-1.79 7.014-4.343 9.634-5.675 4.56-2.319 4.906-2.353 8.149-.807 4.546 2.168 5.559 5.453 2.424 7.864-1.302 1.001-3.604 1.83-5.117 1.843-3.877.031-3.722 3.468.25 5.522 1.65.853 3 1.93 3 2.393 0 1.806-8.529 6.402-12.272 6.613-2.135.12-4.562.9-5.395 1.732-1.35 1.351-1.34 1.848.103 4.638.946 1.83 2.4 3.124 3.508 3.124 3.216 0 5.056 1.13 5.056 3.107 0 1.503-.734 1.893-3.566 1.893-1.96 0-4.548.563-5.75 1.25-1.201.688-3.984 1.25-6.184 1.25-3.546 0-4.034.29-4.298 2.556-.294 2.528 1.074 3.724 6.122 5.35 1.06.342 1.684 1.322 1.49 2.341-.279 1.456-1.625 1.802-7.938 2.043-6.577.25-7.913.62-9.913 2.75-1.271 1.353-3.071 2.46-4 2.46-.928 0-3.387 1.35-5.463 3s-4.153 3-4.614 3c-1.966 0-3.822 4.594-3.043 7.532.838 3.164 3.157 4.678 11.657 7.607 5.97 2.057 6.536 4.352 1.758 7.142l-3.241 1.893-.984-2.587c-1.217-3.201-3.047-3.272-6.706-.26-2.111 1.738-3.46 2.143-5.327 1.6-4.807-1.399-7-1.063-7 1.073 0 1.55.667 2 2.965 2 1.941 0 3.334.69 4.035 2 .589 1.1 1.918 2 2.953 2 3.11 0 5.047 1.113 5.047 2.9 0 2.778-6.357 3.862-14.5 2.472-7.104-1.212-15.054-.837-17.154.81-.635.497-2.258.627-3.607.289-3.754-.943-9.239 2.783-9.239 6.274 0 2.598-.285 2.773-5 3.065-2.75.17-5.428.733-5.95 1.25-1.487 1.47-3.49 1.12-6.718-1.18-2.919-2.078-3.053-2.084-6.952-.326-4.839 2.182-5.286 2.82-3.853 5.497 1.266 2.365 1.912 11.43.929 13.02-.439.71-2.745.558-7.194-.474-6.978-1.618-10.766-1.135-15.524 1.983-2.153 1.41-3.06 1.47-6.283.405-5.466-1.804-10.721-.513-14.584 3.583-1.763 1.869-3.496 4.725-3.852 6.346-1.048 4.773-2.9 5.632-6.859 3.185-2.3-1.421-5.06-2.099-8.55-2.099-4.655 0-5.591.402-9.658 4.15-4.5 4.15-4.504 4.15-8.727 2.891-2.324-.693-7.15-2.584-10.725-4.203-8.502-3.848-13.726-4.547-18.104-2.42-4.54 2.204-6.937 5.723-7.76 11.391-.77 5.314.536 4.996-14.864 3.616-6.275-.563-7.7-.37-10.807 1.463-4.652 2.745-4.92 2.702-7.197-1.159-2.638-4.47-12.592-9.729-18.416-9.729-5.431 0-20.342 5.172-23.52 8.158-1.301 1.222-2.893 3.984-3.538 6.136-.645 2.153-1.65 4.056-2.233 4.23-.584.173-9.161.572-19.061.887-9.9.314-23.85 1.034-31 1.6-15.098 1.194-22.1.604-23.482-1.977-1.444-2.7-6.904-4.864-14.136-5.605-7.605-.78-10.615.378-15.547 5.978-1.74 1.976-3.99 3.54-5 3.475-1.01-.065-7.55-.852-14.533-1.75zm-94.915-59.074c5.26-2.684 7.113-5.903 7.113-12.356 0-7.698-3.66-11.554-15-15.801-8.339-3.124-8.756-3.444-22-16.903-7.425-7.545-14.45-15.018-15.613-16.608-3.788-5.182-10.387-16.395-10.39-17.658-.003-.677-.848-2.615-1.878-4.305-1.03-1.69-2.621-5.74-3.535-9-.914-3.26-2.06-6.827-2.55-7.927-2.406-5.418-3.1-25.644-1.41-41.102 1.397-12.776 4.253-14.546 9.622-5.963l3.4 5.435 1.177-3.256c1.42-3.928 1.53-8.861.226-10.165-.523-.523-1.086-4.321-1.25-8.44-.28-7.024-.467-7.57-3.003-8.782-2.264-1.082-3.301-1.043-6.372.24-4.584 1.915-5.819 1.914-9.874-.01-4.263-2.023-9.092-11.662-9.977-19.915-.352-3.277-.909-7.032-1.238-8.344-.63-2.507-.443-2.493-8.835-.666-2.951.642-10.916 3.822-13.13 5.243-5.81 3.726-11.444 8.132-14.22 11.12C171.566 361.56 167 367.3 167 368.67c0 .8-1.35 2.748-3 4.329-1.65 1.58-3 3.317-3 3.858 0 1.694-3.228 4.642-5.084 4.642-2.614 0-4.916 2.758-4.916 5.891 0 3.585 5.934 10.526 11.357 13.286 2.279 1.16 6.119 3.844 8.534 5.966 2.415 2.121 4.766 3.857 5.224 3.857 1.196 0 3.51 4.906 4.252 9.014.464 2.568.095 4.452-1.372 7-1.104 1.917-2.56 4.611-3.236 5.986-.675 1.375-2.023 3.088-2.994 3.807-.97.718-1.775 1.843-1.787 2.5-.012.656-.902 2.318-1.978 3.693-1.088 1.39-1.965 4.076-1.978 6.05-.012 1.952-.555 4.083-1.206 4.734-.722.722-1.154 4.207-1.11 8.95.068 7.106.384 8.276 3.719 13.766 5.997 9.873 15.504 18.468 20.479 18.515 3.523.033 9.44 2.87 13.406 6.427 2.304 2.067 7.341 5.405 11.193 7.418 3.85 2.014 8.618 4.894 10.594 6.4 1.975 1.507 4.042 2.74 4.592 2.74.55 0 1.857.946 2.904 2.102 2.812 3.108 6.488 4.732 14.547 6.428 8.079 1.699 23.77 6.89 34.36 11.37 8.31 3.513 12.255 3.776 17.387 1.158zM782.01 367.515c-2.095-2.943-4.01-3.942-4.01-2.092 0 .508 1.217 2.37 2.704 4.137 3.265 3.88 4.334 2.206 1.306-2.045zm50.823-17.956c1.742-2.168 3.167-4.553 3.167-5.3 0-.748.395-1.787.877-2.309.482-.522 1.64-3.425 2.571-6.45.932-3.025 2.093-6.4 2.579-7.5 2.962-6.703 4.004-10.35 4.588-16.051.608-5.928.456-6.667-2.04-9.94-3.134-4.108-12.788-11.509-15.013-11.509-2.033 0-2.675 3.008-2.567 12.008.05 4.12-.04 11.092-.202 15.492-.198 5.405.144 8.721 1.054 10.223 1.418 2.34 1.185 18.464-.332 23.027-1.227 3.688 1.757 2.74 5.318-1.691zm17.006-48.606c1.337-2.932 1.631-31.508.341-33.003-.97-1.123-6.983-20.669-7.522-24.45-.118-.825-.49-1.95-.826-2.5-1.07-1.75-3.832-13.556-3.832-16.38 0-3.092-1.616-5.12-4.078-5.12-4.548 0-5.725 6.046-6.906 35.5-.441 11-1.105 21.35-1.475 23-.715 3.187 1.696 10.5 3.461 10.5 1.328 0 11.813 8.086 15.435 11.904 3.558 3.75 3.927 3.788 5.402.549zM219.5 199.208c1.65-.895 2.454-1.646 1.788-1.668-2.215-.073-12.17 4.043-14.497 5.994-2.05 1.72-1.662 1.68 3.709-.389 3.3-1.27 7.35-3.042 9-3.937zm132.43-72.458c-.039-.412-.457-1.65-.93-2.75-.762-1.772-.867-1.687-.93.75-.038 1.512.38 2.75.93 2.75s.968-.338.93-.75zm310.82-9.496c1.788-1.73 3.25-3.66 3.25-4.286 0-.627 3.263-4.128 7.25-7.78 11.395-10.439 14.057-13.133 17-17.205 2.568-3.553 2.75-4.475 2.75-13.922 0-11.67-.926-13.762-7.288-16.464-3.516-1.493-4.68-1.553-8.907-.456-2.674.693-6.527 2.633-8.562 4.31-2.034 1.677-4.187 3.049-4.784 3.049-1.18 0-5.086 4.02-7.773 8a1606.81 1606.81 0 00-6.306 9.5c-2.54 3.85-5.69 8.6-7 10.554-1.309 1.954-2.38 4.098-2.38 4.763 0 .666-.395 1.992-.877 2.947-1.944 3.847-3.123 9.148-3.123 14.038 0 5.835.078 5.886 10 6.545 9.532.633 13.197-.153 16.75-3.593zm257.877 475.212c.366-1.906 1.499-5.62 2.519-8.253 1.233-3.185 1.878-7.536 1.924-13 .105-12.27 1.41-13.25 1.564-1.175.074 5.754-.173 10.462-.549 10.462-.962 0-3.079 6.16-3.117 9.071-.017 1.336-.7 3.314-1.518 4.395-1.384 1.83-1.44 1.726-.823-1.5zm6.452-36.55c.048-1.164.285-1.401.604-.603.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm1.079-5.416c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-943.08-1.583c.049-1.165.286-1.402.605-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm944-3c.049-1.165.286-1.402.605-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm1-4c.049-1.165.286-1.402.605-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-944.937-5.599c-.111-1.825-.341-9.168-.51-16.318l-.31-13 .67 12.5c.367 6.875 1.013 13.476 1.434 14.668.421 1.193.35 2.911-.158 3.819-.724 1.295-.966.936-1.126-1.669zm945.944 1.613c-.047-1.137.642-4.512 1.53-7.5 1.078-3.624 1.449-7.51 1.115-11.681-.293-3.667-.104-6.25.459-6.25 1.398 0 .363 15.473-1.472 22-.851 3.025-1.585 4.57-1.632 3.431zm-239.828-26.197c-3.854-2.484-5.788-6.234-3.214-6.234.573 0 3.208-2.025 5.854-4.5s5.37-4.5 6.052-4.5c.683 0 2.547-.929 4.14-2.064 1.863-1.326 4.063-1.951 6.155-1.75 4.817.464 4.924 3.855.272 8.604-1.998 2.04-3.882 4.916-4.186 6.39-1.443 7.004-7.83 8.722-15.073 4.054zm242.961-3.234c-.01-1.375.342-3.625.782-5 .627-1.959.797-2.067.782-.5-.01 1.1-.362 3.35-.782 5-.686 2.695-.765 2.746-.782.5zm2.252-16.5c.299-1.65.817-4.416 1.15-6.146.392-2.025-.16-5.363-1.548-9.375-1.186-3.426-1.97-6.414-1.744-6.64.627-.627 3.815 8.687 4.366 12.755.277 2.052-.212 5.485-1.14 8-1.084 2.935-1.446 3.404-1.084 1.406zm-954.146-4.762l-.1-4.238.952 3.386c.524 1.865.569 3.769.1 4.238-.47.47-.897-1.052-.952-3.386zm-.174-8.834c-.083-1.428-.877-4.054-1.765-5.835-1.263-2.53-1.37-3.71-.495-5.403l1.12-2.166-.556 2.2c-.306 1.21.168 3.602 1.054 5.316.887 1.714 1.427 4.324 1.202 5.8L-17.7 481zm951-12.25c-.083-1.565.677-4.04 1.687-5.5s2.187-3.554 2.614-4.654c1.211-3.119 1.61-15.344.523-16.016-.536-.331-.974-1.094-.974-1.696 0-.602.926-.026 2.059 1.28 1.355 1.562 1.835 3.068 1.404 4.403-.36 1.116-.759 3.379-.885 5.029-.127 1.65-.308 3.95-.404 5.11-.096 1.161-1.266 3.72-2.602 5.688-1.335 1.968-2.617 4.843-2.85 6.39L933.3 469zm-954.706-5.098c-.376-2.007-.46-3.874-.184-4.15.275-.274.808 1.143 1.184 3.15.377 2.006.46 3.873.185 4.148-.275.275-.808-1.142-1.185-3.148zm4.12-25.85c.376-.985.935-1.54 1.243-1.232.308.307 0 1.114-.683 1.793-.988.98-1.102.865-.56-.56zm1.572-4.374c-.075-1.193-.395-2.993-.712-4-.544-1.734-.514-1.737.566-.053.628.978.948 2.778.712 4-.43 2.219-.43 2.219-.566.053zm950.16-2.582c-1.129-1.238-2.614-4.725-3.3-7.75-.686-3.025-2.09-8.175-3.122-11.444-1.936-6.141-2.316-12.57-.949-16.056 1.092-2.784-.441-7.473-3.04-9.293-1.197-.838-2.898-2.412-3.78-3.497a595.076 595.076 0 00-5.355-6.402c-2.987-3.529-3.717-5.18-3.59-8.119l.16-3.689.421 3.487c.435 3.6 5.926 11.018 13.432 18.147 2.809 2.668 3.827 4.448 3.827 6.691 0 1.682-.45 3.335-1 3.675-2.022 1.25-.789 10.974 2.123 16.736.482.955.882 2.755.888 4 .017 3.517 2.819 11.918 4.65 13.941.907 1.003 1.433 1.823 1.168 1.823-.264 0-1.404-1.012-2.533-2.25zM-16.69 416c.005-3.3.192-4.53.415-2.732.222 1.797.218 4.497-.01 6-.229 1.503-.41.032-.405-3.268zm355.43-2.75c-.26-.688.087-5.975.771-11.75.685-5.775 1.267-14.55 1.294-19.5.026-4.95.527-11.925 1.114-15.5.586-3.575 1.076-10.325 1.089-15 .012-4.675.353-8.984.757-9.575 1.405-2.055 13.503-7.447 14.637-6.523 2.175 1.771 12.209 4.372 17.48 4.53 4.665.141 5.698.557 7.746 3.115 1.299 1.624 2.364 3.65 2.367 4.503.007 2.19 2.034 3.95 4.55 3.95 1.18 0 2.956.896 3.948 1.992.99 1.095 4.66 3.664 8.154 5.707 6.364 3.723 7.218 4.648 5.353 5.801-1.785 1.103-1.057 3.353 1.19 3.68 1.322.193 3.296 2.102 4.984 4.82 4.457 7.178 4.457 6.95-.02 11.084-2.284 2.11-4.154 4.333-4.154 4.94 0 2.42-9.553 8.976-13.08 8.976-1.017 0-2.331.9-2.92 2-.78 1.46-2.094 2-4.855 2-2.792 0-4.666.787-7.145 3-1.848 1.65-4.375 3-5.615 3-1.24 0-3.297.395-4.57.878-1.273.483-4.115 1.131-6.315 1.44-2.2.31-5.673 1.265-7.718 2.123-4.622 1.938-18.34 2.161-19.042.309zM-7.25 387.838c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm3.329-5.029c-.043-2.305.277-4.411.712-4.68.435-.269.627 1.167.428 3.191-.547 5.534-1.051 6.193-1.14 1.489zM2 372c1.866-1.925 3.617-3.5 3.892-3.5.275 0-1.026 1.575-2.892 3.5-1.866 1.925-3.617 3.5-3.892 3.5-.275 0 1.026-1.575 2.892-3.5zm910.079-12.653c-.054-1.81-1.749-4.314-5.329-7.876l-5.25-5.224 5.276 4.305c5.084 4.148 6.993 7.433 5.9 10.155-.285.711-.554.1-.597-1.36zm-12.608-16.879c-1.011-1.117-3.781-2.52-6.155-3.119-2.374-.597-4.316-1.444-4.316-1.882 0-.679 9.97 2.427 10.41 3.243.086.16.759 1.078 1.495 2.04 1.844 2.408.818 2.207-1.434-.282zm-510.147-10.096c-3.203-2.884-6.378-6.012-7.056-6.95-1.43-1.984-.906-2.531 4.98-5.193l3.748-1.695 2.642 4.233c1.453 2.328 3.974 5.365 5.602 6.748 4.076 3.464 3.619 7.353-.916 7.793-2.634.255-4.167-.586-9-4.936zm496.6.378L883.5 330l2.75 2.424c1.512 1.334 2.75 2.571 2.75 2.75 0 .785-.81.146-3.076-2.424zm-563.474.824c-.523-.509-3.713-2.646-7.091-4.75-3.378-2.103-12.603-8.138-20.5-13.41-25.009-16.698-37.21-24.566-42.359-27.319-5.696-3.044-10.558-6.27-15.22-10.097-2.998-2.46-3.183-2.968-2.666-7.321.306-2.572.725-5.231.933-5.91.652-2.131 20.038 8.868 28.146 15.97 2.094 1.834 9.343 6.919 16.11 11.299 6.766 4.38 15.611 10.327 19.656 13.214 4.044 2.888 7.733 5.26 8.197 5.272.464.012 1.969.937 3.344 2.055 1.375 1.118 6.272 4.51 10.883 7.54 8.001 5.259 8.289 5.574 6.329 6.947-1.13.791-2.35 2.788-2.712 4.437-.686 3.123-1.444 3.638-3.05 2.073zm-63.883-48.693c1.888-1.44 3.433-3.055 3.433-3.59 0-1.085-4.046-4.706-5.317-4.758-.449-.018-2.249-1.102-4-2.408-1.75-1.305-4.163-2.879-5.36-3.496-2.14-1.102-2.168-1.023-1.633 4.625.609 6.426 2.358 9.923 5.618 11.236 3.238 1.305 3.521 1.242 7.259-1.609zM241 276.47c0-2.376-2.649-3.72-4.225-2.144-.787.787-.734 1.52.19 2.633 1.811 2.182 4.035 1.913 4.035-.49zm127.001 26.8c-1.096-1.798-1.995-3.69-1.997-4.205-.002-.514-.863-1.864-1.913-3-1.05-1.135-3.292-4.805-4.983-8.154-2.768-5.484-5.724-9.932-16.222-24.41-3.52-4.856-5.513-12.926-3.52-14.26.623-.417 2.245-.642 3.602-.5 2.302.242 2.98 1.112 6.047 7.76.381.825 2.896 2.65 5.589 4.056 4.252 2.22 4.896 2.961 4.896 5.643 0 1.935 1.14 4.527 3.056 6.944 4.636 5.85 8.444 13.275 8.444 16.464 0 2.222.562 2.996 2.535 3.491 2.456.617 5.465 4.854 5.465 7.697 0 1.912-2.936 4.302-6.253 5.09-2.359.561-3.037.187-4.746-2.615zM75 299c1.292-1.375 2.574-2.5 2.849-2.5.275 0-.557 1.125-1.849 2.5-1.292 1.375-2.574 2.5-2.849 2.5-.275 0 .557-1.125 1.849-2.5zm31-21.227c1.375-.25 3.4-1.202 4.5-2.114 1.984-1.646 1.985-1.64.095.591-1.163 1.373-2.916 2.197-4.5 2.114l-2.595-.136 2.5-.455zm627.079-1.856c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM115 272c1.292-1.375 2.574-2.5 2.849-2.5.275 0-.557 1.125-1.849 2.5-1.292 1.375-2.574 2.5-2.849 2.5-.275 0 .557-1.125 1.849-2.5zm619.136-9.685c-.075-2.027.354-4.952.952-6.5.971-2.513 2.909-23.356 4.817-51.815.5-7.452.877-9.308 1.482-7.286.446 1.493 1.667 2.986 2.712 3.318 1.557.494 1.901 1.575 1.901 5.976 0 2.956.45 5.652 1 5.992.55.34 1 2.365 1 4.5s.45 4.16 1 4.5c.55.34 1 3.715 1 7.5s.45 7.16 1 7.5c1.5.927 1.206 4.256-.623 7.047-1.073 1.637-1.414 3.516-1.008 5.547.608 3.04-.645 6.722-2.769 8.14-2.042 1.364-4.364.778-4.89-1.234a2.663 2.663 0 00-2.578-2c-2.023 0-3.143 2.53-4.43 10-.312 1.818-.467 1.495-.566-1.185zM716.272 250.5c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm24.486-71c.283-7.425.678-13.688.878-13.917.639-.731.176 15.191-.622 21.417-.481 3.751-.577.94-.256-7.5zM208 186.122c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm534.168-24.85l-.168-3.73 14.75-7.115a10307.32 10307.32 0 0030.5-14.79c8.662-4.222 15.75-7.427 15.75-7.123 0 .483-16.177 8.488-50.181 24.833-9.234 4.437-9.7 4.815-10.082 8.153l-.4 3.5zm31.565-39.896c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm4.017-1.538c1.933-.78 1.478-5.779-.79-8.661-1.122-1.427-2.952-5.65-4.067-9.385-1.116-3.736-2.448-7.826-2.96-9.09-.513-1.262-.933-3.823-.933-5.69 0-1.867-.41-3.647-.911-3.957-.521-.322-.557-1.74-.085-3.31.455-1.51 1.343-4.545 1.973-6.745 2.261-7.898 4.081-11.037 7.198-12.417 1.688-.747 4.642-2.74 6.563-4.426 1.922-1.687 5.354-3.99 7.628-5.119 3.129-1.553 4.21-2.718 4.45-4.795.223-1.926-.136-2.743-1.203-2.743-.835 0-2.253-1.688-3.15-3.75-.897-2.063-2.131-4.65-2.742-5.75-.611-1.1-2.2-4.161-3.532-6.803-1.331-2.641-3.493-5.506-4.805-6.365-2.066-1.354-2.384-2.349-2.384-7.46 0-3.245.398-6.68.883-7.636 3.056-6.007 3.202-7.236 2.756-23.261-.485-17.45-1.306-25.798-2.71-27.533-.47-.582-.97-6.882-1.109-14-.217-11.083.006-13.331 1.552-15.651 1.825-2.74 1.582-7.815-.498-10.406-.548-.683-.312-2.235.61-4 .827-1.587 1.506-3.42 1.51-4.076.009-1.804 2.036-2.679 3.293-1.422.612.612 2.613 1.113 4.446 1.113 5.738 0 12.717 4.332 16.739 10.392 1.98 2.982 4.202 5.923 4.94 6.535 1.118.928 1.1 1.81-.11 5.323-.798 2.316-1.706 6.362-2.017 8.99-.578 4.879-2.815 7.602-10.792 13.136-3.305 2.293-6.441 8.898-6.471 13.627-.013 2.002 1.478 6.596 3.478 10.719 1.925 3.968 3.5 7.825 3.5 8.572 0 .747 1.1 2.391 2.446 3.655 1.345 1.264 3.19 4.83 4.1 7.924.91 3.095 2.031 6.527 2.492 7.627.46 1.1 1.066 3.575 1.344 5.5 1.047 7.231 2.267 12.62 3.177 14.037.518.804.941 3.263.941 5.463 0 3.324.361 4.052 2.137 4.305 1.584.226 4.542-2.172 11.414-9.25 5.101-5.255 9.78-9.555 10.396-9.555.617 0 3.566-2.475 6.553-5.5s5.977-5.5 6.643-5.5c.666 0 2.594-1.678 4.284-3.728 2.845-3.451 3.078-4.322 3.147-11.75.04-4.412.465-10.047.943-12.522.593-3.07.7-.687.335 7.5-.293 6.6-1.161 15.035-1.928 18.745-.767 3.71-1.235 9.335-1.04 12.5.196 3.165.164 4.067-.071 2.005-.236-2.063-.776-3.75-1.201-3.75-.425 0-2.295 2.137-4.155 4.75-1.86 2.612-4.658 6.044-6.218 7.626-1.56 1.582-4.225 5.632-5.922 9-1.696 3.368-3.924 7.197-4.95 8.509-1.027 1.312-1.867 3.137-1.867 4.057 0 2.1-3.293 6.224-13.75 17.22-4.914 5.166-8.25 9.515-8.25 10.756 0 1.145-.145 2.082-.322 2.082-1.132 0-10.351-3.424-11.128-4.133-1.686-1.54-8.526-.922-12.34 1.113-8.962 4.784-11.693 7.392-12.031 11.493-.177 2.14.116 4.823.65 5.96 3.053 6.495 5.178 11.7 5.23 12.806.1 2.18 5.393 12.083 6.441 12.053.55-.016 6.513-2.676 13.251-5.91 9.533-4.577 12.088-6.215 11.517-7.382-1.119-2.287-.918-19.278.232-19.658.94-.311 5.585 12.664 5.527 15.44-.015.705.986 1.69 2.223 2.187 2.068.831 2.089.91.25.982-1.1.043-3.125.739-4.5 1.546-3.838 2.252-28.937 14.5-29.767 14.525-.403.012-1.858.902-3.233 1.978s-2.95 1.93-3.5 1.899c-.55-.031-.437-.284.25-.561zm137.896-18.79c-3.492-3.236-3.305-5.281.895-9.798 4.222-4.542 8.843-5.1 12.245-1.478 1.979 2.106 2.036 2.564.79 6.25-.953 2.822-2.322 4.473-4.71 5.68-4.584 2.318-6.132 2.208-9.22-.654zm-47.403-6.574c1.38-2.788 2.06-6.27 2.14-10.947.064-3.772.315-6.661.556-6.42.703.701 9.061-7.891 9.061-9.315 0-.71.437-1.292.97-1.292.535 0 3.122-2.017 5.75-4.483 3.515-3.296 5.6-4.488 7.875-4.5 4.37-.024 6.405-2.707 6.405-8.441 0-7.208 4.269-12.576 10-12.576 2.502 0 6.984 2.37 6.992 3.7.004.659 1.583 2.4 3.508 3.868 3.02 2.303 3.5 3.245 3.5 6.864 0 3.291-.605 4.773-2.81 6.885-2.608 2.5-3.238 2.647-8.8 2.066-8.995-.94-14.988 2.492-18.84 10.79-1.205 2.596-2.822 4.119-5.52 5.199-4.016 1.606-18.51 15.413-19.519 18.593-.324 1.02-1.196 2.359-1.94 2.976-.795.66-.518-.562.672-2.967zm-44.16 2.663c1.537-1.34 10.247-5.64 10.636-5.251.475.474-9.002 5.614-10.352 5.614-.385 0-.513-.163-.284-.363zM838 90c1.375-.786 2.95-1.43 3.5-1.43.55 0-.125.644-1.5 1.43-1.375.786-2.95 1.43-3.5 1.43-.55 0 .125-.644 1.5-1.43zm5.374-2.296c.32-.519 1.918-1.497 3.55-2.173 2.384-.987 3.043-1.946 3.353-4.88l.387-3.651.168 3.73c.154 3.423-.17 3.901-3.937 5.823-2.257 1.152-3.842 1.67-3.521 1.15zm-463.048-14.6c-5.27-1.92-7.326-4.433-7.326-8.954 0-3 .677-4.747 2.626-6.782 1.444-1.507 3.143-3.782 3.774-5.054.942-1.898 2.076-2.368 6.304-2.614 4.945-.287 5.258-.15 7.64 3.355 2.65 3.9 2.608 4.334-1.46 15.197-.736 1.966-6.501 6.445-7.884 6.125-.275-.064-1.928-.636-3.674-1.272zM851.734 65.5c.296-5.225.702-9.688.902-9.917.679-.777.22 10.39-.612 14.917-.568 3.085-.659 1.513-.29-5zm115.35 7.098c-1.938-1.49-2.417-2.772-2.417-6.465 0-7.146 2.299-8.849 13.833-10.247 3.726-.452 4.16-.234 6.33 3.174l2.332 3.659-2.331 4.463c-3.586 6.867-12.372 9.548-17.748 5.416zM870.157 70.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm1.61-16.5c.28-7.15.673-13.188.871-13.417.693-.8.206 17.453-.584 21.917-.483 2.73-.596-.614-.287-8.5zm-99.69-6.083c.049-1.165.286-1.402.605-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zM853.209 42c-.033-2.2.3-6.025.741-8.5.737-4.144.804-4.223.838-1 .02 1.925-.313 5.75-.741 8.5-.759 4.871-.78 4.897-.838 1zm20.53-16c.295-5.5.7-10.188.9-10.417.694-.798.12 14.44-.657 17.417-.434 1.666-.543-1.447-.244-7zm-420.68-13.93c-1.708-2.058-.913-8.646 1.203-9.969 2.23-1.394 9.039 1.977 9.568 4.738.871 4.55-7.83 8.775-10.771 5.23zM875.52 2c.812-6.203 2.38-23.024 3.102-33.28.61-8.652.84-9.413 3.42-11.25 1.522-1.084 3.024-1.97 3.337-1.97 1.396 0 14.413-6.396 17.121-8.413 3.102-2.31 6.5-3.895 6.5-3.03 0 .27-1.125.92-2.5 1.443-2.53.962-3.44 4.3-1.5 5.5 1.499.926 1.204 12.878-.393 15.957-1.507 2.904-8.863 11.41-20.357 23.537-3.987 4.207-7.282 8.517-7.32 9.578-.039 1.06-.49 2.828-1.002 3.928-.684 1.468-.793.937-.408-2zM653.668-5.224c-2.113-.317-3.207-1.323-4.31-3.963-1.321-3.16-1.308-3.899.125-6.917 1.954-4.118 5.19-5.134 9.41-2.952 2.774 1.435 3.107 2.087 3.107 6.082 0 4.226-2.585 8.757-4.75 8.324-.412-.082-2.024-.34-3.582-.574zM859.207-38c-.082-6.719 1.229-15.52 2.433-16.337 2.578-1.751 4.36-5.964 4.36-10.308 0-4.42.193-4.762 3.25-5.748 3.064-.988 9.158-.467 16.99 1.451 1.866.457 4.215-.022 7.36-1.5 2.54-1.194 4.794-1.997 5.007-1.784.36.36-1.936 1.454-15.107 7.204-2.75 1.2-7.464 3.272-10.476 4.603-3.012 1.33-6.95 3.703-8.75 5.273-2.78 2.423-3.287 3.553-3.362 7.5-.048 2.555-.438 6.896-.866 9.646l-.779 5-.06-5zm67.664-6.336l-2.629-1.69 1.653-4.487c1.21-3.283 2.266-4.575 3.934-4.814 4.887-.7 6.547 3.762 3.598 9.673-1.767 3.543-2.779 3.746-6.556 1.318zm-8.498-16.746c4.88-2.478 9.067-4.311 9.305-4.074.474.474-16.065 8.68-17.369 8.617-.445-.021 3.184-2.066 8.064-4.543zm-476.339-.17c-1.906-.961-4.316-3.22-5.354-5.019-1.762-3.051-1.782-3.495-.299-6.62 1.61-3.393 7.72-9.522 11.516-11.554 1.65-.883 2.897-.69 6.089.938 3.984 2.032 4.014 2.091 3.999 7.777-.018 6.641-1.965 13.011-4.558 14.907-2.503 1.83-7.27 1.651-11.393-.429zM929.5-66.5c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm3.5-1.393c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm6.5-3.387c3.862-2.281 8.5-4.309 8.5-3.715 0 .565-9.624 5.496-10.717 5.491-.43-.002.567-.801 2.217-1.776zM901-73.468c2.28-1.702 36.224-18.142 36.627-17.738.307.306-34.47 17.666-37.127 18.532-.55.18-.325-.178.5-.794zm48.104-2.47c.834-.833 9.896-4.488 9.896-3.99 0 .274-2.062 1.383-4.583 2.464-4.469 1.915-6.199 2.412-5.313 1.527zm15.806-7.491c2.975-1.69 5.539-3.071 5.697-3.071 1.475 0 33.345-16.292 33.728-17.242.35-.867.532-.79.586.248.052.999-7.188 5.041-21.492 12-22.833 11.108-27.336 13.069-18.52 8.065zM939.5-92.5c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm-39.846-2.42c-3.508-1.551-9.15-8.525-10.702-13.227-.976-2.957-.82-4.54 1-10.205 1.186-3.688 3.157-8.493 4.38-10.677 2.151-3.846 2.406-3.98 8.072-4.275 6.634-.344 10.697 1.168 14.732 5.485 6.553 7.01 7.658 15.476 3.238 24.81-2.866 6.055-3.225 6.407-8.374 8.236-4.347 1.544-8.636 1.492-12.346-.148zM943-93.894c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm14.403-7.184c5.997-2.997 11.087-5.266 11.311-5.042.427.427-20.517 10.666-21.593 10.555-.341-.035 4.286-2.516 10.283-5.513zm46.235-5.923c-.316-.825-.14-1.5.393-1.5s.969.675.969 1.5-.177 1.5-.393 1.5c-.216 0-.652-.675-.969-1.5zm-33.555.105c1.333-1.261 10.013-5.596 11.11-5.547.719.033-1.361 1.383-4.622 3-5.496 2.727-7.514 3.52-6.488 2.547zm31.481-4.312c-.542-1.425-.427-1.54.56-.56.683.679.99 1.486.683 1.793-.308.308-.867-.247-1.243-1.233zm-17.83-2.417c.678-.684 1.485-.99 1.792-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm15.5-2.263c-1.432-3.142-3.05-3.258-8.274-.593-2.178 1.111-3.96 1.796-3.96 1.52 0-.765 7.736-4.54 9.305-4.54 1.827 0 5.007 3.565 4.51 5.056-.215.644-.927-.005-1.581-1.443zm33.266-47.868c-1.1-.555-2.805-2.577-3.789-4.493-1.626-3.169-1.649-3.698-.25-5.833.847-1.292 1.539-3.169 1.539-4.172 0-2.87 5.169-8.204 8.5-8.773 4.113-.703 11.839 4.992 13.467 9.927 2.414 7.312-4.21 14.704-12.967 14.472-2.475-.065-5.4-.573-6.5-1.128z",
      fill: "#dddad5",
      transform: "matrix(.92146 0 0 .82007 29.733 153.837)"
    }), /* @__PURE__ */ React46.createElement("path", {
      d: "M219 1028.474c-21.851-.797-54.18-2.808-79-4.915-72.018-6.113-137.429-19.5-157.168-32.167-10.91-7-12.445-22.67-3.073-31.373 6.889-6.398 29.495-14.036 62.374-21.074 22.675-4.854 53.1-9.072 100.367-13.913 20.988-2.15 39.5-4.72 39.5-5.482 0-1.356-7.78-8.121-14.1-12.262-3.63-2.379-8.935-7.129-11.787-10.556-3.663-4.402-5.876-6.232-7.534-6.232-2.435 0-5.579-3.652-5.579-6.48 0-.852-1.343-2.366-2.985-3.365-1.642-.998-4.023-3.354-5.292-5.235-1.946-2.886-2.807-3.37-5.515-3.095-2.846.29-3.208.042-3.208-2.189 0-1.497-1.62-4.385-4-7.136-2.2-2.542-4-5.04-4-5.552 0-.512-1.542-2.95-3.426-5.42-1.885-2.468-3.742-5.482-4.127-6.696-.386-1.215-3.232-4.808-6.324-7.985-13.931-14.312-15.904-16.573-17.619-20.192-1.002-2.115-3.25-4.781-4.995-5.925-1.746-1.144-3.882-3.315-4.748-4.823-.866-1.509-2.629-2.893-3.918-3.075-1.939-.275-2.399-1.015-2.666-4.291-.23-2.82-1.31-5.052-3.75-7.753-1.885-2.087-3.427-4.67-3.427-5.74 0-1.07-1.172-3.206-2.604-4.747-1.432-1.54-3.28-4.489-4.108-6.551-.828-2.063-1.852-3.75-2.275-3.75-.424 0-1.33-1.463-2.013-3.25-4.055-10.607-12.208-27.098-14.07-28.46-.91-.666-1.906-2.753-2.211-4.637-.306-1.884-1.718-5.965-3.138-9.069C31.161 721.98 30 719.152 30 718.8c0-.353-.671-1.383-1.492-2.29-.82-.906-2.442-4.317-3.604-7.579-1.162-3.261-3.079-8.65-4.259-11.975-1.18-3.324-3.607-8.239-5.395-10.921-1.787-2.682-3.25-5.369-3.25-5.97 0-.602-.9-2.773-2-4.825-1.236-2.307-2-5.642-2-8.735 0-4.966-1.724-8.079-5.096-9.203-.747-.249-1.477-2.196-1.64-4.375-.896-11.923-1.608-16.1-3.013-17.676-1.004-1.126-1.642-4.042-1.79-8.182-.166-4.68-.805-7.242-2.345-9.405-1.164-1.634-2.116-3.6-2.116-4.367 0-.768-.472-1.868-1.049-2.445-.721-.721-.735-2.576-.042-5.95.897-4.375.97-4.471.67-.901-.253 3.007.558 5.863 3.264 11.5 2.564 5.339 3.626 8.94 3.687 12.5.05 2.924.802 6.09 1.811 7.625.95 1.444 1.725 4.37 1.723 6.5 0 2.131.16 5.675.356 7.875l.469 5.25c.06.688.716 1.25 1.456 1.25 2.591 0 4.595 3.636 5.256 9.542.368 3.277 1.26 7.083 1.982 8.458.723 1.375 2.239 4.525 3.369 7 1.13 2.475 3.178 6.029 4.551 7.898 1.373 1.869 2.497 4.479 2.497 5.8 0 1.32.771 3.841 1.713 5.602 2.138 3.993 4.252 9.744 4.272 11.621.008.782.764 2.25 1.68 3.261 1.96 2.165 7.335 15.16 7.335 17.73 0 .978.886 2.58 1.968 3.56 1.083.979 4.048 6.111 6.59 11.404 2.54 5.293 5.03 10.405 5.53 11.36.502.956.912 2.33.912 3.055 0 .724 1.35 3.446 3 6.048s3 5.536 3 6.521c0 .985 1.164 2.882 2.587 4.216 1.423 1.333 3.219 3.93 3.99 5.772.772 1.842 2.533 4.237 3.913 5.323 1.976 1.554 2.51 2.878 2.51 6.221 0 3.831.318 4.387 3.25 5.677 1.788.787 3.694 2.443 4.237 3.681.543 1.238 1.553 2.25 2.244 2.25 1.286 0 7.269 7.574 7.269 9.203 0 .496 2.7 3.402 6 6.458 3.3 3.055 6 6.129 6 6.83 0 1.397 6.581 7.68 9.912 9.462 1.148.614 2.088 1.91 2.088 2.88 0 2.022 7.356 13.928 11.918 19.289 1.695 1.991 3.082 4.552 3.082 5.69 0 1.654.727 2.13 3.638 2.378 2.978.254 3.973.935 5.477 3.75 1.01 1.892 3.017 3.923 4.458 4.512 1.585.648 3.472 2.845 4.774 5.56 1.382 2.882 2.898 4.594 4.234 4.785 1.144.164 5.343 3.68 9.33 7.814 3.986 4.133 9.574 9.015 12.418 10.849 2.844 1.833 6.493 4.73 8.108 6.436 1.615 1.707 3.366 3.104 3.89 3.104 1.132 0 3.596 3.065 3.641 4.53.018.565-3.455 1.569-7.718 2.23-7.834 1.214-12.868 1.788-64.25 7.329-59.013 6.363-110.225 17.372-127.5 27.409-7.34 4.264-9.818 7.753-10.307 14.513-.368 5.09-.078 6.534 1.895 9.413 3.2 4.67 8.348 7.784 19.729 11.934 39.353 14.35 106.565 24.188 199.603 29.217 39.208 2.119 146.792 1.553 182.08-.957 44.977-3.2 82.73-7.073 108.226-11.1 12.525-1.979 38.73-7.177 43.274-8.584 1.925-.596 6.425-1.502 10-2.014 3.575-.512 9.2-1.328 12.5-1.815 3.3-.486 8.689-1.904 11.975-3.15 7.311-2.774 12.707-4.059 11.959-2.848-.304.491-1.218.893-2.033.893-.814 0-3.226.89-5.36 1.979-2.133 1.088-8.527 3.106-14.21 4.484-5.682 1.378-13.706 3.426-17.831 4.552-35.611 9.723-98.804 17.764-173 22.016-24.729 1.418-117.642 2.013-147 .943zM581 991.5c.825-.533 2.087-.976 2.805-.985.718-.01 3.418-.988 6-2.178s6.912-2.304 9.622-2.477c2.71-.173 5.251-.84 5.648-1.481.765-1.239 5.728-3.308 12.602-5.254 2.297-.65 5.065-1.986 6.151-2.97 1.087-.983 5.244-2.924 9.24-4.313 3.995-1.39 9.102-3.707 11.348-5.15 2.246-1.441 6.109-3.667 8.584-4.944 2.475-1.277 6.3-3.279 8.5-4.447 6.483-3.444 6.82-3.617 11-5.613 2.2-1.05 5.894-2.435 8.208-3.077 3.827-1.06 8.124-4.403 12.398-9.642 2.106-2.582 11.041-9.501 15.134-11.719 1.776-.963 4.243-1.75 5.482-1.75 1.531 0 3.041-1.249 4.713-3.897 1.748-2.769 3.793-4.406 7.06-5.654 4.887-1.867 6.505-3.8 6.505-7.773 0-1.883.99-2.96 4.25-4.618 6.585-3.35 7.99-4.329 11.774-8.2 2.464-2.522 4.79-3.82 7.733-4.317 4.17-.705 4.678-1.139 10.837-9.275 1.152-1.521 2.38-3.891 2.73-5.266.829-3.256 10.928-10 14.975-10 3.184 0 6.59-2.952 9.177-7.953.81-1.565 3.67-4.804 6.359-7.196 2.688-2.393 6.118-6.489 7.621-9.101 1.504-2.612 3.141-4.75 3.639-4.75.498 0 .905-.577.905-1.281 0-.705 2.138-3.558 4.75-6.34a517.208 517.208 0 008.864-9.718c2.874-3.257 4.882-4.661 6.666-4.661 1.621 0 3.302-1.004 4.605-2.75 1.128-1.512 2.052-2.3 2.052-1.75 0 1.985-2.699 4.481-6.726 6.223-2.259.978-5.143 3.192-6.41 4.922-1.265 1.73-3.876 5.33-5.801 8-1.925 2.67-5.252 6.655-7.393 8.855-2.142 2.2-5.004 5.673-6.362 7.718-1.358 2.045-3.236 3.962-4.174 4.26-.938.297-4.376 4.118-7.638 8.49-4.144 5.552-6.759 8.136-8.672 8.568-1.506.34-2.982 1.013-3.28 1.495-.299.483-2.666 2.035-5.262 3.45-3.269 1.78-5.795 4.26-8.219 8.07-5.708 8.969-6.58 9.898-10.63 11.317-2.129.746-5.67 3.004-7.87 5.02-5.861 5.367-10.458 8.357-13.93 9.06-2.483.504-3.135 1.19-3.408 3.588-.451 3.948-1.604 5.168-7.125 7.543-2.955 1.272-5.335 3.174-6.52 5.212-2.276 3.913-3.297 4.657-6.517 4.751-1.375.04-3.904 1.06-5.62 2.266-9.011 6.33-14.498 11.02-15.767 13.473-1.561 3.02-8.217 7.219-11.44 7.219-2.51 0-30.786 14.288-33.707 17.032-1.152 1.082-2.74 1.97-3.53 1.972-.79 0-2.91.902-4.71 2-1.801 1.098-4.137 1.996-5.191 1.996-1.054 0-2.195.45-2.535 1-.34.55-1.488 1-2.55 1-1.063 0-2.495.9-3.182 2-.72 1.154-2.332 2-3.809 2-1.407 0-2.986.39-3.509.869-.522.477-3.2 1.674-5.95 2.66-2.75.985-5.46 2.34-6.022 3.01-.562.672-3.679 1.53-6.926 1.91-3.247.38-7.606 1.558-9.688 2.62-3.938 2.01-10.787 2.82-7.864.931zM839.476 808c.437-1.1 1.325-3.454 1.974-5.231.648-1.778 1.488-3.54 1.865-3.917.377-.377.685-1.757.685-3.066 0-1.31 1.046-3.373 2.324-4.584 2.564-2.43 7.91-11.629 17.457-30.03 3.454-6.66 7.137-13.023 8.183-14.14 3.094-3.304 3.932-6.704 2.95-11.964-.813-4.351-.664-5.076 1.595-7.76 1.37-1.629 2.491-3.778 2.491-4.776 0-1.102.982-2.062 2.5-2.443 1.375-.345 2.5-.983 2.5-1.417 0-.434.682-1.663 1.516-2.73 1.395-1.786 1.42-1.7.305 1.058-.666 1.65-2.918 4.699-5.003 6.775-4.313 4.293-5.322 7.169-4.444 12.663.688 4.3-.458 7.413-5.913 16.062-3.195 5.066-5.001 8.58-9.251 18-.869 1.925-2.847 4.98-4.397 6.787-1.55 1.808-3.906 5.436-5.237 8.063-1.33 2.626-3.13 5.365-3.998 6.085-.868.72-1.578 2.18-1.578 3.244 0 1.063-1.378 4.711-3.063 8.107-3.036 6.12-4.99 9.062-3.461 5.214zm47.61-96.5c-.03-.825.38-2.175.914-3 1.181-1.828 1.181-.25 0 2.5-.567 1.319-.878 1.49-.914.5zm2.052-6.5c-.051-1.1.786-3.125 1.862-4.5s1.966-3.71 1.978-5.191c.012-1.48.512-2.994 1.11-3.364.647-.4.952-2.962.75-6.309-.322-5.366-.218-5.651 2.162-5.957 1.375-.176 3.063-1.05 3.75-1.94.688-.892 1.25-1.175 1.25-.63 0 1.703-2.304 3.391-4.628 3.391-2.095 0-2.195.318-1.674 5.363.357 3.46.154 5.61-.572 6.06-.62.382-1.126 1.837-1.126 3.232 0 1.395-.847 3.73-1.883 5.19-1.036 1.46-2.109 3.555-2.384 4.655l-.501 2-.094-2zm14.362-35.5c.853-1.65 1.776-3 2.051-3 .275 0-.198 1.35-1.051 3s-1.776 3-2.051 3c-.275 0 .198-1.35 1.051-3zm2.5-11.383c0-.211.9-.62 2-.907 1.1-.287 2-.115 2 .384 0 .498-.9.906-2 .906s-2-.173-2-.383zm4.136-7.676c-.143-2.698 1.064-4.62 4.364-6.952 1.3-.918 1.066-.375-.665 1.55-1.466 1.628-2.867 4.086-3.114 5.461l-.449 2.5zm6.022-10.941c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm1.723-6.219c.46-2.776.601-2.917.916-.916.205 1.301-.04 2.778-.544 3.282-.555.555-.701-.378-.372-2.366zm1.938-7.352c.312-2.674-.11-3.844-1.912-5.303-2.202-1.784-2.246-2.068-.932-6.049.758-2.297 1.825-4.454 2.372-4.791.621-.385.696.102.2 1.3-3.168 7.646-3.162 7.58-.797 9.157 1.58 1.054 2.25 2.49 2.25 4.82 0 1.825-.356 3.539-.791 3.808-.435.269-.61-1.055-.39-2.942zM371.5 618.307c-3.85-.478-11.95-.611-18-.295-9.219.481-11.972.261-17-1.36-7.97-2.567-12.345-3.285-22.472-3.686-10.04-.399-25.706-2.825-35.692-5.527-8.134-2.202-13.953-2.43-21.382-.836-5.63 1.208-7.619.854-22.954-4.083-4.675-1.505-10.525-3.333-13-4.063-7.59-2.238-14.86-5.713-19.282-9.217-2.32-1.837-6.243-4.635-8.718-6.215-2.475-1.581-6.624-4.883-9.22-7.337-8.408-7.95-12.835-10.22-29.78-15.27-5.272-1.57-11.953-5.322-21-11.79-3.575-2.555-8.525-5.966-11-7.58-2.475-1.613-6.3-4.574-8.5-6.58-11.185-10.197-27.465-19.749-31.486-18.473-.981.312-2.632-.531-4.081-2.083-1.338-1.434-4.008-3.424-5.933-4.423-5.59-2.901-16-16.214-16-20.462 0-2.493-.704-3.417-6-7.873-2.37-1.995-3.072-3.271-2.66-4.843.715-2.737-.684-5.296-4.937-9.03-1.872-1.644-3.403-3.584-3.403-4.312 0-.728-1.181-2.253-2.625-3.388-2.419-1.903-2.527-2.3-1.382-5.065 1.057-2.552.97-3.56-.58-6.758-1.256-2.59-1.777-5.76-1.676-10.197.08-3.542-.152-6.917-.518-7.5-.366-.584-.743-4.211-.838-8.061-.095-3.85-.621-8.125-1.17-9.5-.81-2.03-.601-2.93 1.11-4.792 1.687-1.836 1.884-2.65.987-4.087-.921-1.475-.511-2.564 2.31-6.128 1.886-2.384 3.67-5.495 3.965-6.914.915-4.405 2.02-5.578 5.283-5.613 4.345-.047 6.358-2.304 13.135-14.728 1.129-2.07 5.915-7.626 10.637-12.347l8.584-8.585 4.336.65c3.58.537 4.693.293 6.389-1.403 1.129-1.129 2.053-2.641 2.053-3.36 0-1.751 12.601-7.952 14.78-7.274.946.295 2.377.123 3.18-.38 1.25-.784 1.19-1.216-.41-2.984-2.145-2.37-1.596-3.356 1.956-3.512 1.813-.08 2.358.31 2.003 1.43-.269.846-.097 5.586.382 10.533.895 9.248 2.94 14.984 7.625 21.392 4.49 6.14 2.863 6.8-3.948 1.602-2.522-1.925-5.248-3.5-6.057-3.5-.81 0-5.418-1.985-10.242-4.411-8.67-4.362-17.753-7.589-21.358-7.589-1.023 0-2.505 1.248-3.294 2.774-.789 1.525-4.147 5.013-7.462 7.75-3.514 2.9-6.654 6.484-7.53 8.593-.826 1.99-2.112 4.24-2.856 5-.744.76-1.938 2.813-2.653 4.56-1.84 4.503-4.681 6.723-8.601 6.723-3.917 0-4.952 1.98-2.971 5.681.875 1.637.97 2.957.304 4.203-1.431 2.675 1.875 7.639 6.152 9.237 14.997 5.602 17.717 6.88 19.584 9.205 1.428 1.78 2.72 2.428 4.108 2.065 1.113-.291 2.763-.116 3.666.39 3.76 2.103.398 8.819-4.415 8.819-1.619 0-2.94.337-2.935.75.012 1.124 5.063 3.25 7.723 3.25 2.982 0 3.948 2.464 1.806 4.606-1.544 1.544-1.468 1.857 1.107 4.544 2.71 2.83 2.732 2.944 1.06 5.773-.937 1.587-1.704 4.054-1.704 5.481 0 1.93-.514 2.596-2 2.596-2.715 0-2.533 2.558.39 5.48 2.954 2.955 1.92 3.52-6.437 3.52-4.86 0-6.069.348-6.953 2-.589 1.1-1.865 2-2.835 2s-2.228.463-2.794 1.029c-.705.705-1.876.361-3.723-1.09-1.481-1.166-3.696-2.282-4.92-2.48-1.226-.2-3.11-.496-4.19-.66-3.303-.503-2.832 2.592.994 6.531 2.473 2.546 3.509 4.453 3.297 6.069-.216 1.643.974 3.749 3.931 6.956 3.037 3.295 4.24 5.458 4.24 7.623 0 1.662.464 3.022 1.031 3.022.568 0 1.322.787 1.677 1.75.834 2.262 7.3 10.25 8.297 10.25.42 0 1.074-2.477 1.452-5.504.583-4.668 1.193-5.89 4.013-8.04 5.683-4.335 9.119-4.796 16.53-2.218 4.388 1.527 7.824 3.578 10.576 6.312 2.242 2.227 6.666 5.152 9.832 6.5 3.79 1.612 6.966 3.903 9.295 6.7 2.22 2.666 4.367 4.25 5.762 4.25 2.09 0 7.306 3.154 19.035 11.51 2.75 1.959 8.04 5.091 11.754 6.96 7.673 3.862 10.549 5.778 19.846 13.226 3.63 2.908 8.355 5.937 10.5 6.732 10.949 4.056 19.166 7.94 21.483 10.156 1.833 1.753 4.158 2.645 8 3.072 2.98.33 11.492 2.592 18.917 5.027 14.51 4.757 18.817 5.736 32 7.273 12.492 1.457 33.213 4.786 43.5 6.987 5.344 1.144 17.124 2.364 29 3.002 30.44 1.637 32.737 2.06 38 6.985 2.68 2.51 4.17 2.936 14 4.005 6.05.658 12.457 1.441 14.239 1.74 2.803.47 3.677.045 6.5-3.159 5.031-5.712 8.006-6.87 15.643-6.087 7.232.74 12.692 2.906 14.136 5.605 1.382 2.581 8.384 3.17 23.482 1.977 7.15-.566 21.1-1.286 31-1.6 9.9-.315 18.477-.714 19.06-.887.584-.174 1.589-2.077 2.234-4.23.645-2.152 2.237-4.914 3.538-6.136 3.178-2.986 18.089-8.158 23.52-8.158 5.824 0 15.778 5.259 18.416 9.73 2.278 3.86 2.545 3.903 7.197 1.158 3.106-1.833 4.532-2.026 10.807-1.463 15.4 1.38 14.094 1.698 14.865-3.616.822-5.668 3.219-9.187 7.759-11.392 4.378-2.126 9.602-1.427 18.104 2.421 3.575 1.619 8.401 3.51 10.725 4.203 4.223 1.26 4.226 1.259 8.727-2.89 4.067-3.749 5.003-4.151 9.658-4.151 3.49 0 6.25.678 8.55 2.099 3.96 2.447 5.81 1.588 6.859-3.185.356-1.621 2.09-4.477 3.852-6.346 3.863-4.096 9.118-5.387 14.584-3.583 3.224 1.064 4.13 1.006 6.283-.405 4.758-3.118 8.546-3.601 15.524-1.983 4.45 1.032 6.755 1.184 7.194.474.983-1.59.337-10.655-.929-13.02-1.433-2.677-.986-3.315 3.853-5.497 3.9-1.758 4.033-1.752 6.952.327 3.228 2.298 5.231 2.65 6.718 1.179.522-.517 3.2-1.08 5.95-1.25 4.715-.292 5-.467 5-3.065 0-3.491 5.485-7.216 9.239-6.274 1.349.338 2.972.208 3.607-.29 2.1-1.646 10.05-2.021 17.154-.809 8.143 1.39 14.5.306 14.5-2.472 0-1.787-1.937-2.9-5.047-2.9-1.035 0-2.364-.9-2.953-2-.7-1.31-2.094-2-4.035-2-2.298 0-2.965-.45-2.965-2 0-2.136 2.193-2.472 7-1.073 1.867.543 3.216.138 5.327-1.6 3.659-3.012 5.49-2.941 6.706.26l.984 2.587 3.241-1.893c4.778-2.79 4.213-5.085-1.758-7.142-8.5-2.93-10.819-4.443-11.657-7.607-.779-2.938 1.077-7.532 3.043-7.532.461 0 2.538-1.35 4.614-3s4.535-3 5.463-3c.929 0 2.729-1.107 4-2.46 2-2.13 3.336-2.5 9.913-2.75 6.313-.24 7.66-.587 7.937-2.043.195-1.019-.43-2-1.49-2.34-5.047-1.627-6.415-2.823-6.12-5.351.263-2.266.751-2.556 4.297-2.556 2.2 0 4.983-.563 6.184-1.25 1.202-.688 3.79-1.25 5.75-1.25 2.832 0 3.566-.39 3.566-1.893 0-1.976-1.84-3.107-5.056-3.107-1.108 0-2.562-1.295-3.508-3.124-1.443-2.79-1.454-3.287-.103-4.638.833-.832 3.26-1.612 5.395-1.732 3.743-.211 12.272-4.807 12.272-6.613 0-.463-1.35-1.54-3-2.393-3.972-2.054-4.127-5.49-.25-5.522 1.512-.012 3.815-.842 5.117-1.843 3.135-2.41 2.122-5.696-2.424-7.864-3.243-1.546-3.588-1.512-8.15.807-2.619 1.332-6.954 3.886-9.633 5.675-2.679 1.79-8.086 4.214-12.015 5.389-3.93 1.174-7.595 2.483-8.145 2.907-.55.425-2.8 1.09-5 1.48-2.2.39-5.35 1.272-7 1.96-1.65.689-5.025 1.811-7.5 2.495-2.475.684-5.4 1.608-6.5 2.052-1.1.445-3.24 1.077-4.754 1.406-2.807.61-5.849 2.935-13.156 10.058-6.88 6.705-10.23 11.715-17.601 26.315-5.053 10.007-8.275 15.12-11.281 17.898-2.314 2.14-5.435 5.754-6.934 8.03-3.522 5.35-11.43 12.916-14.71 14.073-7.034 2.482-10.037 3.184-13.635 3.188-2.164.002-6.064 1.087-8.68 2.415-3.175 1.61-7.322 2.626-12.5 3.06-8.024.671-8.75.864-16.249 4.327-3.181 1.469-6.112 2.003-10 1.821-3.025-.14-9.775.024-15 .368-11.265.74-17.518-.244-9.543-1.502 5.357-.845 8.453-3.459 8.51-7.184.018-1.205.483-2.47 1.033-2.809.55-.34 1-1.507 1-2.594 0-3.61 3.166-6.884 10.269-10.617 5.217-2.741 8.015-3.621 10.863-3.415 3.981.287 3.986.284 14.53-11.07.865-.933 2.533-1.833 3.706-2 2.554-.364 6.119-6.717 4.613-8.223-2.943-2.943.864-16.403 5.28-18.674 1.232-.633 3.364-2.182 4.739-3.441 2.66-2.437 14.172-7.466 17.09-7.466.96 0 3.844-.9 6.41-2 6.258-2.683 10.845-2.62 12.7.175 1.005 1.513 1.997 1.963 3.258 1.48 1.685-.647 1.698-.826.178-2.505-.9-.994-1.636-2.481-1.636-3.304 0-2.085 3.956-5.563 7.26-6.383 1.517-.376 3.006-1.085 3.308-1.574.303-.489 1.822-.889 3.376-.889 1.555 0 4.285-.613 6.068-1.363 1.888-.794 5.056-1.158 7.588-.873 3.932.443 4.658.166 7.623-2.911 1.802-1.87 3.727-4.197 4.277-5.17.55-.971 2.914-2.421 5.254-3.221 2.339-.8 6.119-2.806 8.4-4.458 2.28-1.652 4.967-3.004 5.97-3.004 1.029 0 2.523-1.351 3.426-3.097 2.59-5.007 15.525-17.426 21.057-20.216 2.81-1.417 6.41-3.662 8-4.99 1.591-1.326 7.5-4.759 13.13-7.626 11.356-5.785 14.892-6.094 13.973-1.22-.315 1.673.48 4.675 2.16 8.149 2.276 4.705 3.104 5.544 5.73 5.801 1.942.19 3.58-.312 4.454-1.366 1.615-1.946 3.91-8.169 3.93-10.662.009-.95 1.36-4.211 3.001-7.246 2.743-5.07 5.194-14.155 5.132-19.027-.014-1.1-.527-5.825-1.14-10.5-1.659-12.655-2.22-26.179-1.199-28.933.632-1.706.883.532.839 7.5-.034 5.463.54 14.433 1.278 19.933s1.403 12.475 1.48 15.5c.116 4.605.427 5.477 1.911 5.356 1.032-.083 2.397 1.064 3.267 2.747.822 1.59 3.065 3.546 4.985 4.348 1.92.802 3.764 2.267 4.099 3.254.334.987 1.678 4.02 2.986 6.741 1.307 2.72 2.377 6.378 2.377 8.128s.68 3.746 1.512 4.436c1.152.956 1.242 1.582.376 2.625-.625.754-.875 2.68-.555 4.28.386 1.93.086 3.322-.89 4.132-.96.796-1.413 2.828-1.306 5.85.09 2.547-.451 6.33-1.202 8.407-1.083 2.995-1.114 4.179-.15 5.723 1.652 2.645 1.613 2.727-1.642 3.442-1.575.346-3.445 1.727-4.169 3.079-.721 1.349-1.686 2.452-2.143 2.452-.457 0-.831.498-.831 1.106 0 .608-1.125 2.442-2.5 4.076-1.375 1.634-2.5 3.586-2.5 4.338 0 2.176-4.07 8.48-5.476 8.48-.704 0-1.84.675-2.524 1.5-.685.825-2.104 1.5-3.154 1.5-1.05 0-2.152.787-2.45 1.75-.298.962-.974 2.556-1.503 3.54-1.119 2.086-.39 3.71 1.666 3.71.793 0 1.441.38 1.441.845 0 1.15-3.407 4.155-4.71 4.155-2.013 0-6.29 6.819-6.29 10.029 0 3.145-2.73 8.971-4.203 8.971-.425 0-1.839 1.69-3.142 3.755-2.432 3.852-5.078 5.639-9.905 6.686-2.78.603-3.868 3.75-1.75 5.059 1.57.97 1.175 4.063-.835 6.545-1.625 2.007-2.196 2.14-4.991 1.165-2.946-1.027-3.312-.887-5.503 2.095-1.29 1.757-3.073 4.794-3.963 6.75-1.18 2.596-3.278 4.482-7.784 7-3.392 1.894-7.82 4.876-9.84 6.625-3.683 3.19-4.35 4.227-7.748 12.044-1.01 2.324-2.111 4.236-2.447 4.25-.337.014-3.937 2.206-8 4.87-7.293 4.781-12.529 7.114-20.432 9.104-2.224.56-5.038 1.945-6.254 3.078-1.216 1.133-2.772 1.987-3.457 1.898-2.462-.318-3.854.092-3.308.976.313.505-1.413.717-3.929.482-3.651-.341-5.784.235-11.472 3.1-5.458 2.748-8.188 3.518-12.475 3.518-3.13 0-7.668.86-10.562 2-2.79 1.1-6.751 2-8.801 2s-6.19.9-9.199 2c-3.01 1.1-6.776 2-8.37 2-3.704 0-15.515 1.964-18.13 3.015-4.76 1.913-6.586 2.187-17.256 2.588-9.302.35-17.911 1.614-23.744 3.486-.55.177-2.8-.333-5-1.133-4.936-1.794-37.114-1.993-45.5-.282-12.301 2.51-16.672 3.345-20.15 3.85-2.007.29-5.355 1.687-7.441 3.102-3.783 2.567-3.816 2.57-12.937 1.319-8-1.099-9.946-1.049-15.558.402-5.667 1.465-24.937 2.965-54.914 4.274-4.675.205-11.537-.149-15.25-.785-4.99-.855-7.726-.867-10.5-.046-4.75 1.408-50.363 2.184-59.75 1.017zm77-17.807c-.34-.55-1.041-1-1.559-1s-.941.45-.941 1 .702 1 1.559 1 1.28-.45.941-1zm7.75.338c-.688-.278-1.813-.278-2.5 0-.688.277-.125.504 1.25.504s1.938-.227 1.25-.504zm262.8-48.432c.617-1.152 3.118-2.978 5.56-4.057 4.733-2.094 4.998-3.851.581-3.845-3.097.004-8.987 3.3-9.832 5.502-.705 1.838.225 4.494 1.574 4.494.548 0 1.5-.942 2.117-2.094zm-15.2-39.975c1.06-1.138 2.176-3.276 2.48-4.75.304-1.475 2.188-4.35 4.186-6.39 4.652-4.75 4.545-8.14-.272-8.605-2.092-.201-4.292.424-6.154 1.75-1.594 1.135-3.458 2.064-4.14 2.064-.684 0-3.407 2.025-6.053 4.5s-5.28 4.5-5.854 4.5c-2.574 0-.64 3.75 3.214 6.234 5.13 3.306 9.916 3.57 12.593.697zM843 485.94c0-.793-.675-1.441-1.5-1.441-1.506 0-2.056 2.111-.86 3.306.933.933 2.36-.194 2.36-1.865zM920.28 602c-.012-5.723.118-6.3.71-3.165.397 2.109.404 5.259.014 7-.515 2.3-.713 1.25-.723-3.835zm-.122-10.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm2.483-8c.364-1.375.965-6.55 1.335-11.5l.673-9 .13 8.5c.087 5.673-.357 9.498-1.335 11.5-1.195 2.446-1.343 2.538-.803.5zm-931.562-.583c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-2-14c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zM925.14 561.5c0-.825.386-2.4.859-3.5.542-1.26.86-1.445.86-.5 0 .825-.387 2.4-.86 3.5-.542 1.26-.86 1.445-.86.5zm1.938-8.583c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zM-14.842 545.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm479.337.496c-8.338-2.711-17.437-3.395-40.495-3.043l-23.5.359-5.302-3.608c-4.699-3.198-6.466-3.748-15.536-4.841-19.226-2.317-44.092-12.46-55.096-22.473-2.786-2.536-6.088-4.932-7.337-5.324-1.323-.416-3.263-2.665-4.65-5.39-1.31-2.572-3.55-5.767-4.98-7.1-1.43-1.334-2.599-2.824-2.599-3.311 0-1.23-7.923-17.96-9.284-19.603-1.126-1.361-3.358-7.12-6.717-17.331-1.025-3.119-2.57-7.034-3.432-8.7-.862-1.668-1.567-4.152-1.567-5.522s-.402-2.74-.894-3.044c-.492-.304-1.131-2.243-1.42-4.309-.289-2.066-.837-4.985-1.219-6.488-.381-1.502-.41-3.856-.066-5.231 1.078-4.293 5.434-5.641 19.949-6.176 16.427-.604 17.498-.831 18.689-3.963.532-1.4 1.443-10.275 2.025-19.722.581-9.447 1.306-20.798 1.611-25.225l.555-8.049-17.086-11.249c-9.397-6.187-17.36-11.694-17.697-12.238-.336-.544 4.263 2.242 10.22 6.193 5.959 3.95 14.136 9.254 18.172 11.787l7.34 4.605-.534 9.5c-1.441 25.638-2.8 42.834-3.633 46-.507 1.925-1.407 11.15-1.999 20.5-.592 9.35-1.512 21.725-2.044 27.5-.532 5.775-.968 13.987-.968 18.25L315 486.5l22.75 14.963c12.512 8.23 23.2 15.332 23.75 15.781 1.56 1.274 15.512 10.376 21.853 14.256a713.81 713.81 0 0110.901 6.83c5.176 3.324 5.202 3.33 19.964 3.72 8.13.215 14.782.033 14.782-.405 0-1.11-4.412-5.145-5.626-5.145-.548 0-1.88-.788-2.958-1.75-2.118-1.89-4.463-3.463-38.416-25.761-35.698-23.444-36.474-23.96-37-24.555-.275-.311-3.127-2.293-6.337-4.405-5.208-3.425-5.768-4.119-5.202-6.434.35-1.427 1.065-10.02 1.59-19.095.525-9.075 1.346-19.425 1.826-23 .48-3.575.644-9.257.365-12.627-.28-3.37.002-9.67.626-14s1.358-13.685 1.632-20.789c.274-7.103.702-13.119.951-13.368.917-.917.255 20.601-.946 30.784-.681 5.775-1.026 11.062-.765 11.75.702 1.852 14.42 1.63 19.042-.31 2.045-.857 5.518-1.812 7.718-2.121 2.2-.31 5.042-.958 6.315-1.441 1.273-.483 3.33-.878 4.57-.878 1.24 0 3.767-1.35 5.615-3 2.479-2.213 4.353-3 7.145-3 2.761 0 4.074-.54 4.855-2 .589-1.1 1.903-2 2.92-2 3.527 0 13.08-6.556 13.08-8.976 0-.607 1.87-2.83 4.154-4.94 4.477-4.134 4.477-3.906.02-11.084-1.688-2.718-3.662-4.627-4.984-4.82-2.247-.327-2.975-2.577-1.19-3.68 1.865-1.153 1.011-2.078-5.352-5.8-3.494-2.044-7.164-4.613-8.155-5.708-.992-1.096-2.768-1.992-3.948-1.992-2.516 0-4.543-1.76-4.55-3.95-.003-.853-1.068-2.879-2.367-4.503-2.048-2.558-3.081-2.974-7.745-3.114-5.272-.159-15.306-2.76-17.48-4.531-1.135-.924-13.233 4.468-14.638 6.523-.404.591-.775 5.125-.824 10.075-.049 4.95-.46 11.025-.915 13.5-.52 2.836-.635-.493-.31-9 .495-12.96 1.681-18 4.237-18 1.037 0 11.245-4.528 21.574-9.57 3.865-1.887 7.54-3.43 8.167-3.43.626 0 1.29-.338 1.473-.75.333-.75 8.482-4.893 18.833-9.575 3.025-1.369 16.145-7.705 29.156-14.082 13.011-6.376 24.284-11.593 25.05-11.593.767 0 1.821-.425 2.344-.944.522-.519 4.063-2.536 7.868-4.482l6.918-3.539 3.812 2.233c9.586 5.612 18.972 11.641 26.02 16.714 4.216 3.035 8.941 6.293 10.5 7.24 4.945 3.005 6.818 4.26 7.332 4.915.275.35 1.904 1.475 3.62 2.5 1.717 1.025 6.343 4 10.282 6.613 3.938 2.612 7.596 4.75 8.13 4.75.532 0 .968.464.968 1.032 0 .568.803 1.355 1.785 1.75.982.395 4.244 2.41 7.25 4.476 3.006 2.067 11.09 7.435 17.965 11.928 6.875 4.494 12.725 8.438 13 8.765.275.328 1.783 1.412 3.35 2.411 2.454 1.563 2.763 2.256 2.221 4.977-.346 1.738-1.057 10.361-1.58 19.161-2.485 41.839-2.955 48.44-3.886 54.5-.549 3.575-.982 9.875-.962 14 .02 4.125-.501 11.325-1.158 16-.657 4.675-1.26 12.594-1.34 17.597-.166 10.41-.779 11.586-7.589 14.574-2.506 1.1-10.406 4.842-17.556 8.317-7.15 3.475-17.95 8.63-24 11.458-6.05 2.827-12.35 5.838-14 6.691-1.65.853-4.125 2.13-5.5 2.837-1.375.708-4.975 2.428-8 3.824-14.705 6.787-19 9.006-19 9.818 0 .486-.787.903-1.75.926-.963.023-3.278.856-5.146 1.85-5.376 2.865-2.271 3.563 14.896 3.352 19.913-.246 18.295.446-2.505 1.07-11.558.347-17.115.12-20-.818zm-16.634-13.162c3.855-5.434 3.96-5.78 2.553-8.5-.806-1.558-1.974-2.834-2.595-2.834-.622 0-2.605-1.125-4.408-2.5-1.803-1.375-3.679-2.5-4.17-2.5-.49 0-3.396-1.913-6.457-4.25-3.062-2.337-7.056-5.15-8.877-6.25-1.82-1.1-4.116-2.49-5.102-3.089-.985-.599-2.617-1.836-3.627-2.75-1.01-.913-2.25-1.673-2.757-1.688-.506-.014-3.485-1.927-6.619-4.25-3.134-2.322-8.03-5.573-10.88-7.223-2.85-1.65-5.999-3.764-6.998-4.697-1-.933-3.304-2.458-5.12-3.39-1.818-.93-3.529-1.984-3.804-2.34-1.45-1.881-18.078-12.068-19.655-12.042-1.923.032-7.646 6.94-8.742 10.551-.797 2.63-.234 3.118 15.897 13.764 7.15 4.719 14.35 9.5 16 10.623 8.65 5.891 16.865 11.031 17.632 11.031.478 0 .868.44.868.98 0 .539 1.863 1.93 4.14 3.092 2.278 1.162 4.64 2.549 5.25 3.082.61.533 2.3 1.729 3.752 2.657 7.252 4.635 21.65 14.385 23.858 16.156 3.862 3.099 5.519 2.488 9.861-3.633zM566.696 477c.725-2.75 1.341-10.175 1.37-16.5.028-6.325.51-13.525 1.07-16 .561-2.475 1.213-10.125 1.45-17 .237-6.875 1.059-17.675 1.826-24 .768-6.325 1.44-16.329 1.495-22.23l.1-10.73-2.642-.663c-1.453-.365-5.167-.711-8.253-.77L557.5 369l-.624 9c-.343 4.95-1.14 17.325-1.77 27.5-.63 10.175-1.39 19.4-1.689 20.5-.299 1.1-.92 9.2-1.379 18-.46 8.8-1.372 19.993-2.028 24.873-1.412 10.511-.818 11.634 6.728 12.713 8.057 1.152 8.5.949 9.958-4.586zM401.85 334.515c.252-1.782-.486-3.195-2.61-5-1.628-1.383-4.149-4.42-5.602-6.748l-2.642-4.233-3.748 1.695c-5.886 2.662-6.41 3.21-4.98 5.192.678.939 3.853 4.067 7.056 6.95 4.833 4.351 6.366 5.192 9 4.937 2.516-.244 3.249-.825 3.526-2.793zM563 546.41c-3.025-.348-7.3-1.143-9.5-1.766-2.2-.622-7.694-1.134-12.21-1.137-4.514-.003-11.562-.505-15.66-1.114-6.72-1-8.052-.902-13.546 1-3.35 1.16-6.878 2.072-7.838 2.03-.96-.044-1.296-.225-.746-.402.55-.178 3.386-1.059 6.302-1.959 5.812-1.793 11.545-4.272 26.698-11.544 29.75-14.278 38.75-18.612 46.119-22.21l8.119-3.966 1.11-8.67c.61-4.77 1.366-12.946 1.678-18.171.313-5.225.995-14.225 1.516-20 .522-5.775 1.427-17.7 2.012-26.5.998-15.013 3.138-45.175 4.581-64.574l.638-8.574 4.114-2.076c12.068-6.09 35.456-17.276 36.123-17.276.423 0 2.935-1.333 5.584-2.963 3.216-1.979 4.618-2.451 4.224-1.424-.742 1.934 8.302 10.278 11.21 10.342 1.115.025 2.946.689 4.07 1.476 2.546 1.783 11.106 2.123 25.037.993 9.745-.79 14.24 1.358 24.195 11.562 9.62 9.863 16.17 17.706 16.17 19.363 0 .701 1.294 2.232 2.876 3.401 1.582 1.17 3.17 3.298 3.53 4.729.359 1.43 2.214 5.938 4.123 10.015 1.91 4.078 3.471 7.968 3.471 8.645 0 .678.974 2.27 2.165 3.537 1.844 1.962 1.995 2.677 1.02 4.816-.63 1.382-2.612 3.405-4.407 4.497-1.795 1.091-4.391 3.634-5.77 5.65-1.38 2.016-3.4 4.16-4.492 4.764-1.09.603-3.872 2.334-6.18 3.847-2.308 1.512-5.038 2.75-6.066 2.75-1.029 0-2.298.373-2.82.83-.523.456-4.1 1.379-7.95 2.05-14.215 2.481-20.308 4.657-27 9.644-1.65 1.23-4.8 2.802-7 3.494-6.567 2.067-7.586 2.498-17.842 7.547-5.414 2.665-11.714 6.449-14 8.408-2.287 1.96-5.325 4.155-6.752 4.88-4.154 2.11-14.13 12.06-19.7 19.647-3.779 5.147-6.307 13.547-7.176 23.841-.727 8.616-1.153 10.178-3.421 12.545-1.425 1.488-3.31 4.815-4.19 7.396-1.843 5.411-6.071 9.419-10.698 10.141-5.406.844-25.885 1.157-31.721.486zm366.079-3.492c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-943.515-3.71c.376-.986.935-1.541 1.243-1.233.308.307 0 1.114-.683 1.793-.988.98-1.102.865-.56-.56zm294.936-1.808c-10.59-4.478-26.281-9.67-34.36-11.37-8.059-1.695-11.735-3.319-14.547-6.427-1.047-1.156-2.353-2.102-2.904-2.102-.55 0-2.617-1.233-4.592-2.74-1.976-1.506-6.743-4.386-10.595-6.4-3.85-2.013-8.888-5.351-11.192-7.418-3.965-3.557-9.883-6.394-13.406-6.427-4.975-.047-14.482-8.642-20.48-18.515-3.334-5.49-3.65-6.66-3.717-13.766-.045-4.743.387-8.228 1.11-8.95.65-.651 1.193-2.782 1.205-4.734.013-1.974.89-4.66 1.978-6.05 1.076-1.375 1.966-3.037 1.978-3.693.012-.657.816-1.782 1.787-2.5.971-.719 2.319-2.432 2.994-3.807.676-1.375 2.132-4.069 3.236-5.986 1.467-2.548 1.836-4.432 1.372-7-.742-4.108-3.056-9.014-4.252-9.014-.458 0-2.81-1.736-5.224-3.857-2.415-2.122-6.255-4.807-8.534-5.966-5.423-2.76-11.357-9.701-11.357-13.286 0-3.133 2.302-5.891 4.916-5.891 1.856 0 5.084-2.948 5.084-4.642 0-.54 1.35-2.277 3-3.858 1.65-1.58 3-3.529 3-4.33 0-1.37 4.565-7.109 12.15-15.275 2.776-2.988 8.41-7.394 14.22-11.12 2.214-1.42 10.179-4.601 13.13-5.243 8.392-1.827 8.206-1.84 8.835.666.33 1.312.886 5.067 1.238 8.344.885 8.253 5.714 17.892 9.977 19.915 4.055 1.924 5.29 1.925 9.874.01 3.07-1.283 4.108-1.322 6.372-.24 2.536 1.212 2.723 1.758 3.003 8.782.164 4.119.727 7.917 1.25 8.44 1.304 1.304 1.194 6.237-.226 10.165l-1.178 3.256-3.4-5.435c-5.368-8.583-8.224-6.813-9.621 5.963-1.69 15.458-.996 35.684 1.41 41.102.49 1.1 1.636 4.667 2.55 7.927.914 3.26 2.504 7.31 3.535 9 1.03 1.69 1.875 3.628 1.877 4.305.004 1.263 6.603 12.476 10.391 17.658 1.162 1.59 8.188 9.063 15.613 16.608 13.244 13.459 13.661 13.779 22 16.903 11.34 4.247 15 8.103 15 15.8 0 6.454-1.854 9.674-7.113 12.357-5.132 2.618-9.078 2.355-17.387-1.159zm649.579 1.518c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm.936-6c.008-1.055.472-2.592 1.03-3.417.742-1.095.835-.69.345 1.5-.823 3.677-1.395 4.475-1.375 1.917zm-945.408-.999c-.736-1.917-.82-15.964-.091-15.236.491.492 1.386 16.818.921 16.818-.122 0-.496-.712-.83-1.582zM933.32 521.5c0-3.575.182-5.037.403-3.25.222 1.788.222 4.713 0 6.5-.221 1.788-.403.325-.403-3.25zm-948.4-11.25c-.297-2.149-.144-3.374.36-2.87.482.482.715 2.169.518 3.748-.33 2.644-.4 2.574-.877-.877zm948.312-.75c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm.847-5.583c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm1.015-7.417c-.035-3.025.306-6.082.757-6.793.458-.722.639 1.266.409 4.5-.561 7.9-1.089 8.937-1.166 2.293zm-952.015-4.583c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm0-6c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM937.252 484c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm-955.173-2.083c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm953.545-3.956c-.965-2.514-.68-3.163.498-1.136.584 1.004.85 2.036.593 2.293-.257.258-.749-.263-1.091-1.157zm-952.545-1.044c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-1.85-5.167c-.558-1.512-.992-3.65-.964-4.75.027-1.1-.25-4.25-.615-7l-.665-5 1.409 4.5c1.212 3.873 2.755 15 2.08 15-.127 0-.688-1.238-1.245-2.75zm952.395.211c-.343-.893-.595-2.15-.56-2.793.034-.642.494-.09 1.02 1.227.528 1.318.78 2.574.561 2.793-.219.22-.679-.333-1.021-1.227zm-1.488-6.23c-.075-1.248 1.242-4.848 2.926-8 2.217-4.15 2.911-6.559 2.516-8.731-.3-1.65-.163-3.603.304-4.341 1.064-1.681.686 8.536-.42 11.341-.433 1.1-1.569 3.13-2.524 4.513-.955 1.382-1.946 3.632-2.201 5-.437 2.341-.473 2.354-.6.218zm-951.572-25.524c.376-.986.935-1.541 1.243-1.233.308.307 0 1.114-.683 1.793-.988.98-1.102.865-.56-.56zm956.636.093c-.66-.66-1.2-2.963-1.2-5.118 0-2.888-.755-4.777-2.87-7.186-1.85-2.108-3.119-4.935-3.573-7.965-.388-2.584-1.346-6.517-2.13-8.74-.785-2.223-1.391-4.773-1.348-5.667.102-2.102 3.329 7.716 4.96 15.095.772 3.49 2.18 6.578 3.613 7.924 1.728 1.623 2.348 3.295 2.348 6.331 0 2.27.54 4.666 1.2 5.326.66.66.975 1.2.7 1.2s-1.04-.54-1.7-1.2zm-953.117-13.383c-.731-2.477-1.111-4.722-.844-4.99.267-.266 1.06 1.566 1.761 4.073.702 2.507 1.082 4.752.845 4.989-.238.237-1.03-1.595-1.762-4.072zm.075-8.417c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-.418-6.885c-.304-1.162-.176-2.346.285-2.63 1.344-.831 2.166 1.351 1.176 3.121-.791 1.413-.98 1.35-1.46-.491zM925.272 399.5c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm.805-8.5c-.052-3.318-.758-4.682-4.143-8-10.681-10.47-13.938-16.787-11.026-21.385.542-.856.685.313.375 3.063-.456 4.046-.152 4.86 3.358 9.004a603.38 603.38 0 015.463 6.528c.883 1.085 2.584 2.659 3.782 3.497 2.598 1.82 4.131 6.509 3.039 9.293-.59 1.503-.8 1.007-.848-2zM-8.41 388.644c-.29-.47.583-.643 1.941-.383 1.359.26 2.47.645 2.47.856 0 .773-3.899.356-4.41-.473zM-2.748 382c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm783.452-12.44c-2.787-3.312-3.4-5.06-1.772-5.06 1.345 0 5.294 5.822 4.85 7.152-.205.617-1.59-.324-3.078-2.092zm123.885-18.969c-2.099-2.15-3.576-4.512-3.282-5.25.42-1.05.552-1.025.614.117.043.802 1.745 3.164 3.782 5.25s3.478 3.792 3.203 3.792c-.275 0-2.218-1.759-4.317-3.909zm-77.074.659c1.517-4.563 1.75-20.688.332-23.027-.91-1.502-1.252-4.818-1.054-10.223.161-4.4.252-11.372.203-15.492-.05-4.121.164-8.509.475-9.75.682-2.715 3.712-2.987 5.657-.508 1.241 1.583 1.206 1.62-.365.388-.956-.749-2.418-1.1-3.25-.781-2.058.79-2.02 9.761.058 13.78 1.447 2.799 1.436 3.137-.14 4.29-1.392 1.018-1.677 2.706-1.53 9.075.1 4.303.438 8.237.75 8.742.312.505 1.756.594 3.208.198 1.453-.397 3.52-.68 4.595-.628 4.675.221 8.546-7.685 8.546-17.456 0-4.561.334-6.27 1.13-5.777.765.472.929 2.878.506 7.423-.555 5.974-1.578 9.637-4.61 16.496-.485 1.1-1.646 4.475-2.577 7.5-.932 3.025-2.09 5.928-2.572 6.45-.482.522-.877 1.561-.877 2.309 0 2.001-6.098 9.241-7.784 9.241-1.058 0-1.247-.608-.701-2.25zm-267.647-32.06c-46.688-30.935-46.897-31.073-48.687-32.19-5.06-3.157-24.5-15.982-29.181-19.25-3.025-2.113-7.107-4.667-9.072-5.677-4.06-2.087-3.05-2.38-20.428 5.928-4.95 2.367-14.85 7.078-22 10.47-7.15 3.391-16.6 7.896-21 10.011-4.4 2.115-12.462 5.931-17.915 8.481-5.453 2.55-11.303 5.598-13 6.775-2.905 2.015-2.983 2.022-1.335.122.963-1.11 1.75-2.567 1.75-3.238 0-2.69-3.076-6.924-5.465-7.524-1.973-.495-2.535-1.27-2.535-3.491 0-3.19-3.808-10.614-8.444-16.464-1.915-2.417-3.056-5.01-3.056-6.944 0-2.682-.644-3.424-4.896-5.643-2.693-1.406-5.208-3.231-5.589-4.056-3.067-6.648-3.745-7.518-6.047-7.76-1.357-.142-2.979.083-3.603.5-1.992 1.334 0 9.404 3.521 14.26 10.494 14.473 13.455 18.926 16.226 24.41 1.693 3.35 3.73 6.822 4.527 7.717.797.895 2.442 3.595 3.655 6 1.793 3.554 2.674 4.336 4.706 4.174l2.5-.198-2.5 1.019c-1.375.56-6.1 2.79-10.5 4.956-4.4 2.166-8.751 3.934-9.67 3.93-.917-.004-8.585-4.62-17.04-10.258-8.453-5.638-17.975-11.825-21.159-13.75-9.543-5.77-40.25-26.225-38.588-25.705.849.266 8.405 5.048 16.791 10.628 14.784 9.834 18.5 11.408 15.985 6.766-.653-1.204-1.237-6.014-1.299-10.689-.07-5.404-.69-9.775-1.698-12-.872-1.925-2.382-5.975-3.356-9-.973-3.025-2.489-6.889-3.368-8.586s-2.669-5.297-3.978-8c-1.31-2.703-2.833-5.793-3.386-6.868-.553-1.074-1.1-4-1.217-6.5l-.212-4.546-4.538.152c-2.496.084-5.732.934-7.19 1.89-2.3 1.507-2.813 1.545-3.865.29-.666-.795-2.9-2.68-4.962-4.19-2.566-1.877-3.75-3.517-3.75-5.193 0-1.347-.415-2.449-.923-2.449s-2.308-1.165-4-2.589c-2.418-2.034-3.077-3.384-3.077-6.3 0-4.505 1.425-6.106 5.45-6.126 3.08-.015 9.933-2.035 11.198-3.3.377-.377 2.17-.685 3.983-.685 3.853 0 5.369 2.089 5.369 7.4 0 2.479.873 4.525 2.932 6.87 1.612 1.836 3.238 4.559 3.612 6.05 1.124 4.48 4.908 6.68 11.485 6.68 4.975 0 6.182-.395 8.865-2.901 5.226-4.882 4.22-9.159-4.192-17.817-4.733-4.87-5.098-5.61-5.497-11.125l-.427-5.908 4.541-3.124c2.498-1.719 5.446-3.125 6.552-3.125 1.106 0 2.29-.45 2.629-1 .34-.55 1.667-1 2.95-1 1.282 0 4.293-.89 6.69-1.978 2.398-1.088 5.33-1.988 6.515-2 1.186-.012 4.04-1.597 6.345-3.522 2.304-1.925 5.047-3.5 6.095-3.5s1.905-.44 1.905-.977c0-1.217 7.73-5.023 10.201-5.023 1.005 0 2.72-.45 3.813-1l3.972-2c1.093-.55 3.028-1 4.3-1 1.273 0 2.741-.372 3.264-.826 1.389-1.208 7.96-2.93 15.95-4.182 3.85-.603 9.984-2.025 13.631-3.16 6.26-1.948 8.794-2.055 45.219-1.905 35.454.146 39.05.318 44.275 2.116 8.305 2.857 16.201 2.274 19.949-1.474.983-.983 3.335-1.569 6.302-1.569 3.44 0 5.946-.758 9.178-2.777 5.679-3.548 24.34-12.625 29.048-14.13 1.981-.632 5.07-2.46 6.863-4.062 1.794-1.601 5.512-3.72 8.263-4.71 2.751-.99 6.188-2.971 7.637-4.404 2.77-2.74 13.32-9.917 14.575-9.917.403 0 2.607-1.276 4.897-2.836 5.71-3.89 14.64-9.164 15.516-9.164.397 0 2.829-1.991 5.405-4.425 2.576-2.433 6.27-4.998 8.209-5.7 1.939-.7 3.782-2.084 4.096-3.074.315-.99 1.165-1.801 1.889-1.801.914 0 1.317 1.528 1.317 4.986 0 3.778-.699 6.088-2.884 9.535-1.587 2.502-2.885 5.175-2.885 5.941s-1.125 2.278-2.5 3.36c-2.6 2.045-3.428 6.155-1.25 6.208.794.02.684.362-.3.938-2.426 1.42-7.29 13.946-9.402 24.212-.303 1.474-1.338 3.467-2.3 4.429-1.284 1.284-1.774 3.492-1.846 8.32-.093 6.284.055 6.711 3.404 9.783 3.417 3.134 7.793 4.379 14.194 4.037 7.782-.415 9.825.193 11.427 3.405 1.747 3.503 2.153 14.37.573 15.346-.572.353-1 5.49-1 12s.428 11.647 1 12c1.734 1.072 1.092 2.515-1.57 3.526-2.335.888-2.426 1.12-1 2.547.864.863 1.57 2.3 1.57 3.194 0 1.765 4.782 7.233 6.327 7.233 1.885 0 3.61 3.577 3.641 7.55.036 4.505-1.315 6.45-4.48 6.45-1.163 0-3.407 1.35-4.988 3-1.58 1.65-3.666 3-4.634 3-2.618 0-10.738 4.578-13.723 7.736-3.152 3.335-5.178 8.603-4.014 10.438.462.73.847 3.824.856 6.876.008 3.053.548 6.083 1.2 6.735.652.652 1.227 3.72 1.277 6.817.08 4.874.458 5.922 2.815 7.802 1.498 1.194 2.723 3.06 2.723 4.148 0 1.087.936 4.445 2.08 7.462 1.143 3.017 2.536 7.061 3.095 8.986.56 1.925 1.858 4.412 2.886 5.527 1.028 1.115 2.643 4.424 3.59 7.353.945 2.928 2.344 5.565 3.108 5.858 1.759.675 8.675-1.513 13.241-4.188 6-3.514 10.994-5.89 11.442-5.441.587.586-22.062 11.891-23.825 11.891-.319 0-7.676 3.425-16.348 7.612-8.673 4.187-18.244 8.741-21.269 10.122-3.025 1.38-6.207 2.878-7.071 3.327-1.145.596-10.65-5.198-35.06-21.372zm325.705 14.404L882.645 330l3.376 3.218c1.857 1.77 3.175 3.387 2.928 3.594-.247.207-1.766-1.24-3.376-3.218zm-567.347-1.51c-3.451-2.365-6.601-4.65-7-5.077-1.161-1.245 3.9 1.534 8.454 4.641 4.915 3.353 5.036 3.377 5.63 1.102.282-1.077.503-.692.574 1 .064 1.512-.222 2.724-.634 2.692-.412-.032-3.573-1.993-7.024-4.358zm-38.132-2.602c-3.42-2.21-6.751-4.468-7.405-5.02-.654-.55-7.264-5.004-14.689-9.897-7.425-4.893-14.625-10.143-16-11.668-2.068-2.293-1.722-2.161 2 .763 2.475 1.944 13.163 9.284 23.75 16.31 10.588 7.027 19.25 12.945 19.25 13.153 0 .733-.753.336-6.906-3.64zM670 325.275a8454.25 8454.25 0 0135-16.969c23.044-11.097 24.215-11.717 25.75-13.63 1.123-1.4 1.25-1.388 1.25.113 0 1.094-2.333 2.733-6.75 4.741-3.712 1.688-8.55 4.027-10.75 5.197-5.062 2.691-4.484 2.408-20.5 10.065a4511.037 4511.037 0 00-26.062 12.581c-6.909 3.37-12.984 6.09-13.5 6.044-.516-.045 6.487-3.709 15.562-8.142zm-344 4.456c0-.615.959-1.79 2.13-2.61 2.069-1.448 1.915-1.63-5.25-6.203-4.059-2.59-8.28-5.514-9.38-6.497-1.1-.984-3.27-2.445-4.82-3.247-1.551-.803-5.826-3.575-9.5-6.16-3.674-2.585-12.443-8.47-19.486-13.077-7.043-4.607-14.918-10.262-17.5-12.565-2.582-2.304-3.119-2.987-1.194-1.517 1.925 1.47 18.708 12.845 37.297 25.278 18.588 12.434 33.663 22.666 33.5 22.737-.164.072-1.535 1.22-3.047 2.554-1.513 1.334-2.75 1.922-2.75 1.307zm548.872-2.981c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM38 326.122c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm73.079-1.205c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM285.5 310.404c-13.2-8.776-26.813-17.559-30.25-19.516-7.103-4.046-8.4-5.52-2-2.272 4.138 2.1 12.224 7.286 41.478 26.608 11.774 7.775 16.956 11.627 15.081 11.207-.17-.038-11.109-7.25-24.309-16.027zm577.563 12.428c-.208-3.85 2.714-5.467 5.937-3.286 1.114.753.793.85-1.243.378-2.258-.525-2.91-.22-3.686 1.72-.52 1.296-.973 1.83-1.008 1.188zm-750.97-3.332c-.044-1.375.814-3.85 1.907-5.5s2.057-4.35 2.143-6c.153-2.93.166-2.937.567-.316.225 1.476-.36 4.173-1.302 5.993-.941 1.82-2.054 4.438-2.474 5.817l-.762 2.506-.08-2.5zm47.304-7.024c-4.285-1.848-6.193-4.58-4.43-6.343 2.165-2.165.863-4.199-4.233-6.613-2.878-1.364-5.382-2.562-5.564-2.663-.451-.25 2.8-5.402 4.969-7.872 1.023-1.166 2.414-5.714 3.298-10.785.841-4.822 2.062-9.766 2.713-10.984 2.866-5.363 12.942-19.537 14.245-20.037.789-.303 2.055-1.817 2.813-3.365 1.1-2.242 1.978-2.77 4.326-2.593 1.62.122 3.101.684 3.29 1.25.566 1.7 3.402 1.165 5.809-1.096 2.196-2.063 7.703-3.727 13.902-4.2 4.48-.343 8.966-4.033 11.787-9.694 2.088-4.19 2.32-5.47 1.423-7.845-.904-2.395-.628-3.799 1.768-8.987 1.56-3.382 3.172-6.149 3.581-6.149.409 0 1.763-1.687 3.01-3.75 4.725-7.819 9.621-12.25 13.535-12.25.776 0 1.802 1.031 2.282 2.291.479 1.26 1.593 2.89 2.475 3.623.882.732 1.604 1.881 1.604 2.553 0 .673.9 2.038 2 3.033 3.043 2.754 2.518 4.5-1.354 4.5-3.787 0-7.515 2.912-10.08 7.874-1.29 2.492-1.57 5.582-1.348 14.817l.282 11.668 2.915.778c1.603.428 3.178 1.18 3.5 1.671.322.491 4.52 3.476 9.331 6.632 4.81 3.156 9.008 6.162 9.328 6.68.635 1.027-13.125-7.788-18.257-11.696-4.398-3.35-5.83-3.071-9.418 1.826-5.476 7.474-5.697 8.536-2.338 11.239 1.617 1.3 7.439 4.892 12.939 7.981 5.5 3.09 11.125 6.55 12.5 7.692l2.5 2.075-3-1.814c-1.65-.999-5.83-3.294-9.288-5.101-6.856-3.583-6.718-3.65-7.571 3.678-.453 3.886-.157 4.904 2.167 7.462 2.69 2.959.189 1.603-2.808-1.523-1.519-1.584-11.388-8.465-15.207-10.603-1.144-.64-2.647-.945-3.342-.679-1.844.708-8.451 10.997-8.451 13.161 0 2.031 7.21 7.34 15.75 11.598 2.888 1.44 5.25 2.825 5.25 3.08 0 .569-5.145-1.573-6.45-2.686-1.96-1.671-4.592-.69-8.55 3.19-2.244 2.2-4.888 4-5.875 4-.987 0-2.997 1.35-4.467 3-1.614 1.81-3.658 3-5.157 3-1.401 0-3.029.872-3.733 2-.687 1.1-2.26 2-3.494 2-1.235 0-4.241.534-6.68 1.186-4.403 1.178-9.758.353-14.83-2.283-3.042-1.581-3.764-.999-3.764 3.038 0 2.168-.338 4.135-.75 4.373-.412.238-2.597-.364-4.853-1.338zM665.5 306.5c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm4.934-1.894c.482-.78 7.472-4.316 32.85-16.624 5.382-2.61 9.989-4.543 10.237-4.295.248.248-3.03 2.081-7.285 4.073-4.255 1.992-14.168 6.787-22.03 10.655-7.86 3.869-14.058 6.654-13.772 6.191zm170.512-5.856L837.5 295l3.75 3.446c3.49 3.208 4.21 4.054 3.446 4.054-.167 0-1.854-1.688-3.75-3.75zm-724.774-5.684c-.136-6.281.269-8.845 1.942-12.302 1.163-2.403 2.29-4.193 2.505-3.979.214.215-.4 1.926-1.365 3.803-1.051 2.045-1.985 6.816-2.332 11.912l-.577 8.5zm116.078 3.319c-3.409-2.183-4.512-3.649-1.5-1.993 2.294 1.26 5.889 4.04 5.25 4.06-.275.007-1.962-.922-3.75-2.067zM732.174 289c-.014-1.65.335-5.025.775-7.5l.8-4.5.026 5c.014 2.75-.335 6.125-.775 7.5-.78 2.437-.801 2.424-.826-.5zm-488.432-5.414c-4.11-2.635-4.679-3.562-1.055-1.72 1.752.89 3.466 2.073 3.809 2.627.801 1.297.562 1.218-2.754-.907zM714.51 272.5c.169-5.775.782-12.3 1.364-14.5 1.01-3.816 1.03-3.747.468 1.5-.324 3.025-.937 9.55-1.363 14.5l-.775 9zm-604.009 4c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm10.5-2.731c0-.492 1.362-2.2 3.026-3.794 1.818-1.742 2.795-3.5 2.447-4.406-.318-.83-.274-1.204.098-.832s2.059-.885 3.748-2.793c1.69-1.909 4.222-4.218 5.627-5.132 2.476-1.61 2.51-1.603 1.107.263-.796 1.059-3.046 3.508-5 5.443-1.954 1.935-5.24 5.459-7.303 7.831-2.062 2.373-3.75 3.912-3.75 3.42zm13.128-14.019c1.243-1.586 1.208-1.621-.378-.378-.963.755-1.75 1.543-1.75 1.75 0 .823.821.294 2.128-1.372zm599.104 11.75c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm1.29-16c.318-1.375 1.03-9.688 1.583-18.472.554-8.785 1.206-16.173 1.45-16.417 1.449-1.448-.904 31.244-2.51 34.889l-1.101 2.5zm-17.542-10c-.286-3.025.041-11.8.726-19.5.685-7.7 1.752-20.975 2.371-29.5.62-8.525 1.455-20 1.857-25.5l.73-10 .17 7.5c.093 4.125-.273 12.225-.812 18-1.836 19.653-4.09 49.478-4.306 57-.21 7.31-.23 7.36-.736 2zM156 235.441c0-.582-.52-.738-1.155-.346-.699.433-.883.276-.467-.397.377-.61 1.347-.857 2.154-.547.915.35 1.468-.042 1.468-1.044 0-.884.672-1.607 1.493-1.607 1.143 0 .984.586-.68 2.5-2.418 2.78-2.813 2.983-2.813 1.441zm19-14.941c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm3.333-2.459c0-.788.623-1.111 1.498-.776.973.374 1.244.165.774-.595-.398-.644-.246-1.17.336-1.17 1.707 0 1.217 1.845-.774 2.91-1.357.727-1.834.631-1.834-.369zM738.735 204c.295-8.8.7-16.188.9-16.417.728-.832.195 23.537-.61 27.917-.5 2.728-.615-1.8-.29-11.5zM208 192.441c0-.582.42-.8.932-.483.512.316 1.637-.432 2.5-1.664.862-1.231 1.554-1.801 1.536-1.267-.09 2.761-4.968 6.113-4.968 3.414zm5-5.488c0-.197 1.688-1.083 3.75-1.968 2.063-.886 5.55-2.483 7.75-3.55 2.2-1.067 4.76-1.94 5.691-1.938.93.002 1.97-.447 2.309-.997.34-.55 1.916-1 3.502-1 1.847 0 3.444-.8 4.441-2.223 1.298-1.852 1.557-1.932 1.557-.478 0 1.884-1.47 2.634-10.138 5.168-3.1.907-6.476 2.283-7.5 3.059-1.024.776-2.848 1.425-4.053 1.442-1.205.018-2.436.428-2.734.911-.54.874-4.575 2.262-4.575 1.574zM740.252 179c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm.906-15.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-429.437-2.612c-.255-.255.465-2.98 1.598-6.057l2.06-5.595-3.617-3.316c-5.006-4.587-7.138-9.301-5.799-12.823.57-1.5 1.037-3.598 1.037-4.662s.889-2.824 1.975-3.91c1.086-1.086 2.263-3.223 2.615-4.75.353-1.526 1.821-5.162 3.263-8.08 2.206-4.467 2.938-5.193 4.634-4.599 1.107.389 5.54.787 9.85.886 5.522.127 8.101.599 8.734 1.599 1.21 1.913 1.16 6.958-.107 10.591-.57 1.634-1.132 7.889-1.25 13.9L336.5 145l-4 .632c-7.347 1.161-10.456 3.005-11.542 6.846-.66 2.338-2.303 4.421-4.885 6.197-2.14 1.471-4.098 2.467-4.352 2.213zm411.443-5.388c-.062-5.487 1.805-11.208 3.836-11.751 1.277-.342 1.288-.253.07.595-.786.548-1.975 4.294-2.642 8.326-1.05 6.344-1.22 6.724-1.264 2.83zm22.836-.393c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zM287 152.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm4.46-2.595c2.198-1.606 3.54-1.804 3.54-.522 0 .486-1.229 1.119-2.731 1.406-2.554.488-2.607.431-.809-.884zM729 143.073c0-.599 9.972-5.195 13-5.993 1.375-.362-.823.934-4.885 2.88-7.597 3.642-8.115 3.84-8.115 3.113zm44-.966c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zM350.07 124.75c.063-2.437.168-2.522.93-.75 1.174 2.731 1.174 3.5 0 3.5-.55 0-.968-1.238-.93-2.75zM805 126.536c2.024-.641 32.536-15.106 35.25-16.71.412-.244.75-.186.75.13 0 1.054-34.472 17.54-36.5 17.455-1.643-.068-1.554-.224.5-.875zm-22.267-9.16c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm28.54-13.876c1.398-1.1 2.87-2 3.27-2 .4 0-.417.9-1.816 2-1.398 1.1-2.87 2-3.27 2-.4 0 .417-.9 1.816-2zm39.46.876c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm7.35-3.24c.23-.201 1.542-.9 2.917-1.556 2.357-1.122 2.39-1.102.559.365-1.593 1.276-4.848 2.391-3.476 1.19zM865 98.121c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm-30.267-5.746c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm34.5-3.876c.002-1.925.347-4.85.767-6.5.695-2.733.769-2.778.824-.5.033 1.375-.312 4.3-.767 6.5l-.827 4 .003-3.5zM842 89.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm9.272-10.607c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm17.923-3.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-17.037-5.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm18.074-4c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm1.04-11c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zM853.286 50c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm.909-10c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm18.037-2.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-16.932-13c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm17.895 1.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM855.56 11.25c-.31-2.337-.158-5.825.336-7.75.77-2.994.914-2.379 1.002 4.25.113 8.546-.469 10.068-1.338 3.5zm18.726-.25c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm1.986-18.5c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zM858.286-13c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm18.938-10c-.004-2.2.328-6.7.738-10l.744-6 .09 6c.049 3.3-.284 7.8-.739 10l-.827 4-.006-4zm-17.972-7c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm.943-9c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM879-41.236c0-.974 4.035-3.562 4.629-2.969.238.239-.706 1.18-2.098 2.093-1.392.912-2.531 1.306-2.531.876zm6.083-3.622c1.691-1.453 19.66-10.036 18.772-8.968-1.103 1.33-16.9 9.326-18.423 9.326-.421 0-.578-.161-.349-.358zM863.94-54.871c1.589-1.977 12.256-7.65 14.281-7.594.704.02-1.187 1.188-4.202 2.596-3.014 1.409-6.84 3.513-8.5 4.676-2.408 1.687-2.728 1.752-1.579.322zm43.793-1.753c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM917-60.893c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-37-2.097c0-.685 6.123-3.72 6.58-3.263.217.217-1.174 1.143-3.093 2.058-1.918.914-3.487 1.456-3.487 1.204zm47-2.903c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-13.559-13.052c1.068-.855 2.38-1.555 2.917-1.555 1.27 0 .703.462-2.358 1.92-2.357 1.122-2.39 1.102-.559-.365zm44.292-1.68c.679-.683 1.486-.99 1.794-.682.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zM932-87.892c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm9.733-4.731c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zm39.267.731c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-35.267-2.731c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zM987-94.893c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-18.267-10.731c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zm4-2c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zM997-117.5c-.901-.582-1.025-.975-.309-.985.655-.008 1.47.435 1.809.985.767 1.242.421 1.242-1.5 0z",
      fill: "#cbc6ba",
      transform: "matrix(.92146 0 0 .82007 29.733 153.837)"
    }), /* @__PURE__ */ React46.createElement("path", {
      d: "M193.5 1023.956c-90.35-5.283-156.479-15.167-194.683-29.098-11.381-4.15-16.529-7.264-19.729-11.934-1.973-2.88-2.263-4.323-1.895-9.413.489-6.76 2.967-10.249 10.307-14.513 17.275-10.037 68.487-21.046 127.5-27.41 51.382-5.54 56.416-6.114 64.25-7.328 4.263-.661 7.736-1.665 7.718-2.23-.042-1.358-2.475-4.53-3.475-4.53-.432 0-2.882-1.912-5.444-4.25-2.562-2.337-5.533-4.819-6.603-5.514-1.07-.695-.596-.621 1.054.165 1.65.785 4.55 3.042 6.446 5.014 1.896 1.972 3.92 3.592 4.5 3.601 1.371.021 14.21 11.628 13.554 12.254-.275.263-5 .77-10.5 1.128-10.286.668-12.212.82-33.5 2.641-64.99 5.56-120.794 14.936-150 25.2-17.35 6.098-22 9.753-22 17.292 0 3.651.522 4.72 3.647 7.464 4.168 3.66 7.993 5.421 21.353 9.833 38.209 12.619 104.34 22.06 186.817 26.672 30.068 1.682 144.828 1.955 168.683.402 56.509-3.678 121.529-10.595 129.815-13.81 1.548-.6 5.02-1.092 7.715-1.092 2.695 0 6.828-.626 9.185-1.39 6.819-2.213 10.147-2.946 12.175-2.682 1.218.158 1.714-.23 1.395-1.091-.647-1.743 2.766-5.372 3.673-3.905.363.587 1.478 1.068 2.479 1.068 1 0 2.378.675 3.063 1.5 1.607 1.936 3.893 1.907 6.087-.079 1.59-1.438 1.962-1.436 4.2.031 1.977 1.296 3.308 1.42 6.834.637 2.409-.535 7.286-1.486 10.838-2.113 3.552-.628 7.827-1.863 9.5-2.746s4.166-1.501 5.541-1.374c1.418.13 4.657-1.142 7.486-2.94 6.432-4.091 11.7-5.916 17.072-5.916 3.333 0 4.442-.424 4.902-1.875.38-1.197 1.531-1.875 3.181-1.875 1.423 0 2.925-.548 3.34-1.218.414-.67 3.4-1.531 6.637-1.913 6.568-.774 8.382-1.567 8.382-3.665 0-2.023 6.443-4.462 11.289-4.272 2.687.106 4.253-.309 4.552-1.204.964-2.892 5.128-5.978 8.066-5.978 5.16 0 8.657-2.205 8.232-5.19-.107-.75 1.894-1.48 5.992-2.183 1.447-.248 4.551-1.728 6.9-3.29 5.807-3.86 5.927-3.921 10.469-5.36 3.97-1.256 7.65-4.318 8.803-7.325.331-.862 2.378-2.688 4.549-4.059 2.171-1.37 4.105-2.852 4.298-3.292.55-1.258 7.982-6.056 11.913-7.69 1.959-.815 5.447-3.31 7.75-5.546 2.304-2.236 4.878-4.065 5.72-4.065.842 0 1.938-1.013 2.436-2.25.693-1.724.919-1.841.968-.5.142 3.935 4.063.692 4.063-3.361 0-2.195.808-3.108 4.25-4.797 2.337-1.148 7.029-4.45 10.426-7.34 3.396-2.888 7.896-6.126 10-7.193 5.44-2.761 12.324-9.55 12.324-12.152 0-1.227 1.107-2.902 2.536-3.839 1.394-.913 3.777-2.96 5.295-4.549 1.977-2.068 3.537-2.803 5.497-2.587 3.29.36 4.832 1.568 2.002 1.568-3.239 0-13.288 7.176-14.002 10-.348 1.375-1.576 3.73-2.73 5.233a7023.393 7023.393 0 01-4.352 5.663c-1.592 2.07-3.493 3.139-6.476 3.643-2.957.5-5.278 1.793-7.746 4.318-3.784 3.872-5.19 4.85-11.774 8.2-3.26 1.659-4.25 2.736-4.25 4.619 0 3.973-1.618 5.906-6.505 7.773-3.267 1.247-5.312 2.885-7.06 5.654-1.672 2.648-3.182 3.897-4.713 3.897-1.24 0-3.706.787-5.482 1.75-4.093 2.218-13.028 9.137-15.134 11.719-4.274 5.239-8.571 8.581-12.398 9.642-2.314.642-6.008 2.026-8.208 3.077-4.18 1.996-4.517 2.168-11 5.612-2.2 1.17-6.025 3.17-8.5 4.448-2.475 1.277-6.338 3.502-8.584 4.945-2.246 1.442-7.353 3.759-11.348 5.148-3.996 1.39-8.153 3.331-9.24 4.314-1.086.983-3.854 2.32-6.151 2.97-6.874 1.946-11.837 4.015-12.602 5.254-.397.641-2.938 1.302-5.648 1.469-2.71.166-6.502 1.036-8.427 1.932-4.245 1.977-11.415 4.579-15.525 5.632-1.664.427-5.714 1.796-9 3.042-3.286 1.247-8.675 2.665-11.975 3.151-3.3.487-8.925 1.303-12.5 1.815-3.575.511-8.075 1.418-10 2.014-4.544 1.407-30.75 6.605-43.274 8.584-25.443 4.019-63.009 7.874-108.226 11.107-31.339 2.241-153.596 2.784-187 .83zm270.25-22.118c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm13.519-.031c.973-.254 2.323-.237 3 .037.677.274-.119.481-1.769.46-1.65-.02-2.204-.244-1.231-.497zm-23.457-1.99c.722-.29 1.585-.254 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm-70.227-4.067c-.412-.413-2.4-1.266-4.417-1.895l-3.668-1.146 3.191-.104c1.755-.058 3.47.345 3.809.895.34.55 2.391 1 4.559 1s3.941.45 3.941 1c0 1.156-6.299 1.368-7.415.25zm-13.335-2.47c-2.668-1.287-2.864-2.33-.599-3.2 1.457-.559 5.349 2.263 5.349 3.878 0 .842-2.27.517-4.75-.679zm-13.04-2.318c-.709-.804-2.6-1.462-4.202-1.462-3.26 0-8.008-1.874-8.008-3.16 0-1.34 5.365-.97 7.527.518 1.085.747 3.773 1.926 5.973 2.62 5.325 1.682 6.66 3.032 2.95 2.984-1.623-.021-3.53-.696-4.24-1.5zM327 984.5c0-.55 1.548-1 3.441-1 1.893 0 3.72.45 4.059 1 .373.604-.99 1-3.441 1-2.232 0-4.059-.45-4.059-1zm-14-2c-.825-.533-2.737-.976-4.25-.985-3.924-.022-3.403-1.802.754-2.582 3.544-.664 8.496 1.428 8.496 3.59 0 1.251-3.05 1.237-5-.023zm-104.89-46.367c-.863-1.04-.773-1.668.378-2.623 1.284-1.066 1.512-.86 1.512 1.368 0 2.985-.293 3.18-1.89 1.255zm-48.205-38.052c-4.591-4.675-9.26-8.63-10.376-8.79-1.276-.183-2.828-1.957-4.182-4.78-1.302-2.714-3.189-4.911-4.774-5.56-1.441-.589-3.447-2.619-4.458-4.51-1.504-2.816-2.499-3.497-5.477-3.751-2.911-.249-3.638-.724-3.638-2.379 0-1.137-1.387-3.698-3.082-5.69-4.562-5.36-11.918-17.266-11.918-19.289 0-.969-.94-2.265-2.088-2.88-3.33-1.782-9.912-8.064-9.912-9.46 0-.702-2.751-3.824-6.114-6.937-3.363-3.113-5.838-5.937-5.5-6.274.338-.338.614-.09.614.552s.847 1.167 1.881 1.167c1.035 0 3 1.462 4.366 3.25 1.367 1.787 5.923 6.625 10.124 10.75 4.201 4.125 7.914 8.4 8.25 9.5.336 1.1 1.643 3.379 2.904 5.063 1.26 1.685 2.947 4.631 3.747 6.546.8 1.915 2.63 4.251 4.064 5.192 1.435.94 2.988 3.169 3.45 4.953.524 2.02 1.57 3.377 2.777 3.598 2.528.463 5.29 2.963 7.065 6.396.783 1.513 2.017 2.752 2.743 2.752 1.53 0 4.46 3.022 6.065 6.257.613 1.234 2.118 2.387 3.344 2.563 1.227.176 4.14 2.624 6.475 5.439s6.258 7.033 8.717 9.374c2.46 2.34 4.204 4.524 3.876 4.852-.327.328-4.352-3.229-8.943-7.904zm629.828-35.705c.679-.683 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.427-.56-.56zM793 857.87c0-.53 1.913-2.743 4.25-4.917L801.5 849l-4 4.485c-2.2 2.466-4.112 4.679-4.25 4.916-.138.238-.25 0-.25-.531zm11.467-12.318c1.652-2.617 2.402-4.89 2.015-6.11-.43-1.355-.146-1.942.94-1.942.857 0 3.2-2.475 5.21-5.5 2.008-3.025 4.15-5.524 4.76-5.554.61-.03 3.016-2.73 5.348-6 3.907-5.479 4.54-5.946 8.05-5.946 2.096 0 4.44-.563 5.212-1.25 1.192-1.063 1.204-.989.077.5-.728.963-2.455 1.75-3.838 1.75-1.737 0-3.785 1.44-6.627 4.66a517.208 517.208 0 01-8.864 9.72c-2.612 2.781-4.75 5.634-4.75 6.339 0 .704-.417 1.281-.927 1.281s-2.337 2.466-4.06 5.479c-1.725 3.013-3.595 5.762-4.156 6.11-.561.346.164-1.245 1.61-3.537zM84.15 811.488c-1.215-1.644-2.764-2.988-3.442-2.988-.678 0-1.677-1.012-2.22-2.25-.543-1.238-2.45-2.894-4.237-3.68-2.932-1.29-3.25-1.847-3.25-5.678 0-3.32-.537-4.669-2.458-6.18-1.352-1.064-3.014-3.234-3.693-4.823-.68-1.589-1.936-3.775-2.792-4.857-.857-1.082 1.519 1.107 5.278 4.866 4.911 4.91 6.529 7.138 5.75 7.917-2.13 2.13-1.041 4.685 3.165 7.42 2.338 1.521 4.4 3.102 4.583 3.515.184.412.971.75 1.75.75.788 0 1.417.965 1.417 2.171 0 1.194.747 2.997 1.66 4.006.914 1.01 1.444 2.052 1.18 2.317-.265.265-1.476-.863-2.691-2.506zm753.415-1.281c.376-.986.935-1.541 1.243-1.233.308.307 0 1.114-.683 1.793-.988.98-1.102.865-.56-.56zm1.436-3.648c0-.517.445-1.216.989-1.552.566-.35.734.051.393.941-.665 1.733-1.382 2.05-1.382.611zm2.079-4.425c-.099-2.337 3.153-11.634 4.069-11.634.624 0-.314 3.585-2.224 8.5-.428 1.1-1 2.675-1.272 3.5-.362 1.098-.515 1-.573-.366zM849 786.56c0-.517.445-1.216.989-1.552.566-.35.734.051.393.941-.665 1.733-1.382 2.05-1.382.611zm2.017-3.233c-.01-.37 4.06-8.748 9.041-18.616 7.063-13.99 9.651-18.211 11.75-19.164l2.692-1.222-2.239 2.39c-1.23 1.315-4.852 7.542-8.048 13.838-3.195 6.297-6.506 12.573-7.357 13.948-.852 1.375-2.51 4.075-3.685 6-1.176 1.925-2.145 3.197-2.154 2.826zm-792.35-5.493c-.367-.366-.667-1.476-.667-2.465 0-.99-1.35-3.927-3-6.53-1.65-2.6-3-5.323-3-6.047 0-.725-.41-2.1-.911-3.055-.501-.955-2.99-6.067-5.532-11.36-2.541-5.293-5.506-10.425-6.589-11.405-1.082-.98-1.968-2.626-1.968-3.658 0-1.033-.652-3.438-1.449-5.345-2.302-5.51-.776-4.02 1.92 1.874 1.343 2.938 3.173 5.948 4.065 6.688.893.74 3.085 4.3 4.872 7.908 1.787 3.61 3.728 7.462 4.313 8.562 2.327 4.374 3.605 8.088 3.375 9.81-.303 2.266 1.65 4.724 3.263 4.106.667-.256 1.233.333 1.257 1.31.025.975.333 3.686.685 6.024.649 4.306.564 4.782-.634 3.583zm815.957-38.872c-.343-.893-.572-2.825-.509-4.293.086-1.998.31-1.664.895 1.332.828 4.25.645 5.65-.386 2.961zm-1.97-8.918c-.325-.849-.078-1.543.549-1.543s2.075-.784 3.218-1.743c1.53-1.282 1.418-.952-.421 1.25-1.375 1.646-2.557 3.125-2.626 3.286-.07.161-.393-.401-.72-1.25zm4.748-7.575c-1.561-3.508-.806-4.68 2.684-4.169 2.456.36 3.143.04 3.592-1.676.305-1.168.953-2.123 1.439-2.123.485 0 .919-1.012.962-2.25.044-1.244.317-1.653.612-.915.821 2.058-2.926 8.185-5.384 8.802-1.238.311-2.326 1.476-2.5 2.675-.293 2.03-.355 2.015-1.405-.344zm-844.73-1.614c-.432-1.73-1.66-3.938-2.729-4.905-1.069-.968-1.95-2.477-1.958-3.354-.02-2.03-2.06-7.663-4.272-11.795-.942-1.76-1.693-4.01-1.67-5 .025-.99.626-.173 1.337 1.815.71 1.988 2.265 4.983 3.456 6.654 1.19 1.672 2.164 4.395 2.164 6.052 0 2.085.794 3.59 2.579 4.89 2.079 1.515 2.51 2.549 2.23 5.334l-.35 3.455zM19.265 689.21c-1.23-1.766-3.166-5.236-4.302-7.711-1.136-2.475-2.656-5.625-3.379-7-.723-1.375-1.614-5.181-1.982-8.458-.367-3.277-1.397-6.764-2.29-7.75-.891-.986-1.127-1.792-.523-1.792 2.058 0 4.212 4.434 4.212 8.67 0 2.585.97 6.048 2.5 8.926 1.375 2.586 2.5 5.468 2.5 6.405 0 .936 1.35 3.115 3 4.842 1.65 1.726 3 4.043 3 5.148 0 2.578-.075 2.543-2.736-1.28zm874.072-6.278c-.33-.862-.204-1.965.281-2.45.51-.51.883.15.883 1.567 0 2.839-.32 3.082-1.164.883zm7.664-8.874c0-1.343.369-2.669.82-2.947.45-.279.623.82.386 2.44-.525 3.575-1.206 3.86-1.206.507zm3.975-11.355l.483-4.704.34 3.882c.186 2.135-.031 4.251-.483 4.703-.452.452-.605-1.295-.34-3.881zm1.025-5.587c0-.211.9-.62 2.001-.907 1.101-.288 1.75-.115 1.441.383-.538.871-3.442 1.313-3.442.524zm-903.756-6.66c-.08-2.451-.152-6.2-.161-8.332-.009-2.13-.793-5.056-1.742-6.5-1.01-1.535-1.761-4.701-1.811-7.625-.06-3.494-1.143-7.26-3.596-12.5l-3.51-7.5.6-12c.539-10.754.644-11.273 1.015-5 .228 3.85.466 9.25.53 12 .112 4.878.622 6.57 4.58 15.18 1.057 2.299 1.963 6.349 2.015 9 .061 3.14.77 5.682 2.034 7.293 1.402 1.787 1.776 3.354 1.346 5.646-.328 1.746-.1 4.263.508 5.595.838 1.841.771 3.233-.28 5.811l-1.384 3.39zM910 646.265c0-.89 1.462-2.345 3.25-3.234 3.142-1.563 3.184-1.557 1.25.177-1.1.986-2.563 2.442-3.25 3.234-1.079 1.244-1.25 1.22-1.25-.177zm6-9.705c0-.518.445-1.216.989-1.552.566-.35.734.051.393.941-.665 1.732-1.382 2.05-1.382.611zm-536.5-16.17c-3.3-.472-6.635-.978-7.411-1.124-.777-.146 11.814-.405 27.978-.577 16.165-.171 29.11-.032 28.77.309-.342.341-9.557.743-20.48.891-10.921.15-20.532.517-21.357.816-.825.3-4.2.159-7.5-.314zm536.628.211c-.754-.478-1.203-1.375-.997-1.994.21-.63.928-.24 1.63.884 1.402 2.243 1.336 2.358-.633 1.11zm-568.378-1.762c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zM336 617.5c-1.333-.862-1.333-.963 0-.914.825.03 2.4.441 3.5.914l2 .86-2 .054c-1.1.03-2.675-.38-3.5-.914zm19.75.268c2.337-.21 6.162-.21 8.5 0 2.337.21.425.383-4.25.383s-6.588-.173-4.25-.383zm75.597-.503c1.427-.91 7.303-.816 10.653.17 1.583.466-.124.705-4.653.65-3.933-.047-6.633-.416-6-.82zm36.153.277c3.019-.81 13.193-1.362 12.417-.672-.23.203-3.792.62-7.917.924-4.577.338-6.33.24-4.5-.252zm-138-2.042l-2-.86 2-.054c1.1-.03 2.675.38 3.5.914 1.333.862 1.333.963 0 .914-.825-.03-2.4-.441-3.5-.914zm164 .496c2.14-.74 17.873-1.148 15.994-.415-1.097.428-5.369.775-9.494.77-4.125-.005-7.05-.165-6.5-.355zm41.313-1.18c.721-.288 1.584-.252 1.916.08.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.605-.604zM304 613.538c-1.925-.419-6.875-1.306-11-1.972-4.125-.666-10.994-2.142-15.265-3.281-6.356-1.695-8.987-1.92-14.5-1.24-10.724 1.32-16.163.888-25.079-1.993-4.589-1.484-8.11-2.93-7.825-3.216.286-.285 3.14.372 6.344 1.46 11.735 3.985 14.797 4.484 20.279 3.308 7.43-1.593 13.248-1.366 21.382.836 10.344 2.8 25.667 5.11 37.052 5.588 5.438.228 10.125.653 10.416.944.805.805-17.815.435-21.804-.434zm209.716-.192c2.376-.938 8.844-.914 13.784.053 2.99.585 1.528.766-5.784.717-5.38-.036-8.98-.382-8-.77zm24.848.05c1.137-1.838 8.72-4.85 12.272-4.873 1.835-.012 6.11-.68 9.5-1.482 14.739-3.492 17.607-3.775 33.754-3.337 11.993.325 17.397.874 20.078 2.036 2.018.875 3.886 1.374 4.15 1.109 1.198-1.198 12.71-3.267 17.682-3.18 5.302.095 5.23.128-2 .925-4.125.454-9.525 1.427-12 2.162-3.535 1.05-5.25 1.085-8 .166-4.83-1.613-36.873-2.8-41.691-1.544-5.717 1.49-18.197 3.948-23.489 4.626-2.573.329-5.794 1.476-7.157 2.548-2.746 2.16-4.147 2.542-3.099.845zm105.186-10.6c1.238-.24 3.263-.24 4.5 0 1.238.238.225.433-2.25.433s-3.487-.195-2.25-.434zM654 602.5c.825-.533 2.175-.945 3-.914.99.036.819.347-.5.914-2.75 1.181-4.328 1.181-2.5 0zm-429.5-2l-2-.86 2-.054c1.1-.03 2.675.38 3.5.914 1.333.862 1.333.963 0 .914-.825-.03-2.4-.441-3.5-.914zm221.5 0c0-.55.423-1 .941-1s1.22.45 1.559 1c.34.55-.084 1-.941 1s-1.559-.45-1.559-1zm7.75.338c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm205.725-.298c.354-.572 1.816-1.04 3.25-1.04 3.135 0 2.773.479-1.059 1.4-1.858.446-2.612.322-2.19-.36zM218 598.5c-1.333-.862-1.333-.97 0-.97.825 0 2.175.437 3 .97 1.333.862 1.333.97 0 .97-.825 0-2.175-.437-3-.97zm451.5 0c1.65-.42 4.8-.763 7-.763 3.793 0 3.845.039 1 .763-1.65.42-4.8.763-7 .763-3.793 0-3.845-.039-1-.763zm-461.471-4.052c-3.01-1.658-6.385-3.833-7.5-4.832-1.116-.999-4.279-3.307-7.029-5.13-2.75-1.822-7.25-5.407-10-7.965-6.26-5.822-12.992-9.795-21.436-12.646-3.61-1.219-5.887-2.252-5.06-2.296 2.498-.131 14.644 4.61 18.471 7.21 1.972 1.34 5.708 4.444 8.305 6.899 2.596 2.454 6.745 5.756 9.22 7.337 2.475 1.58 6.4 4.38 8.723 6.219 2.322 1.84 6.597 4.424 9.5 5.743 2.902 1.319 4.602 2.416 3.777 2.437-.825.022-3.962-1.317-6.971-2.976zM683 596.5c.825-.533 2.175-.945 3-.914.99.036.819.347-.5.914-2.75 1.181-4.328 1.181-2.5 0zm6-1.991c1.354-.883 9.91-1.506 8.917-.65-.23.198-2.667.645-5.417.993-3.413.433-4.524.324-3.5-.343zm230.079-.592c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM704 591.5c2.559-1.074 6.99-1.912 10.275-1.944 4.544-.044 7.264-.806 12.762-3.575 5.688-2.864 7.82-3.44 11.472-3.1 2.516.236 4.242.024 3.93-.48-.547-.885.845-1.295 3.307-.977.685.09 2.24-.765 3.457-1.898 1.216-1.133 4.03-2.53 6.254-3.103 2.224-.573 4.83-1.27 5.793-1.55.962-.28 1.75-.284 1.75-.011 0 .273-2.57 1.243-5.712 2.157-3.142.913-7.08 2.813-8.75 4.222-1.671 1.41-4.543 3.193-6.383 3.964-2.876 1.205-3.648 1.202-5.512-.019-1.92-1.258-2.691-1.179-6.76.697-2.527 1.164-5.221 2.625-5.988 3.246-.767.62-5.124 1.334-9.682 1.586-4.557.252-8.81.982-9.45 1.622-.64.64-2.086 1.138-3.213 1.107-1.277-.035-.352-.768 2.45-1.944zm216.14-3c0-.825.387-2.4.86-3.5.542-1.26.86-1.445.86-.5 0 .825-.387 2.4-.86 3.5-.542 1.26-.86 1.445-.86.5zm2.578-11.165c.605-7.328 1.112-8.323 1.188-2.335.035 2.75-.317 5.6-.783 6.335-.495.78-.663-.879-.405-4zm-931.64 2.582c.049-1.165.286-1.402.605-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm776.15-7.359c2.05-1.024 6.488-3.706 9.863-5.96 3.375-2.254 6.423-4.11 6.773-4.124.35-.014 1.462-1.926 2.472-4.25 3.398-7.817 4.065-8.854 7.749-12.044 2.02-1.75 6.447-4.73 9.84-6.626 4.505-2.517 6.602-4.403 7.783-7 .89-1.955 2.673-4.992 3.963-6.749 2.19-2.982 2.557-3.122 5.503-2.095 2.795.975 3.366.842 4.991-1.165 2.01-2.482 2.404-5.575.835-6.545-2.118-1.309-1.03-4.456 1.75-5.059 4.827-1.047 7.473-2.834 9.905-6.686 1.303-2.065 2.717-3.755 3.142-3.755 1.473 0 4.203-5.826 4.203-8.971 0-3.344 4.308-10.029 6.464-10.029 1.259 0 4.536-3.127 4.536-4.329 0-.369-.648-.671-1.441-.671-2.055 0-2.785-1.624-1.666-3.71.529-.984 1.205-2.578 1.503-3.54.298-.963 1.4-1.75 2.45-1.75 1.05 0 2.47-.675 3.154-1.5.685-.825 1.82-1.5 2.524-1.5 1.405 0 5.476-6.304 5.476-8.48 0-.752 1.125-2.704 2.5-4.338s2.5-3.468 2.5-4.076c0-.608.374-1.106.831-1.106.457 0 1.422-1.103 2.143-2.452.724-1.352 2.594-2.733 4.17-3.08 3.254-.714 3.293-.796 1.64-3.441-.963-1.544-.932-2.728.15-5.723.752-2.077 1.293-5.86 1.203-8.407-.107-3.022.347-5.054 1.307-5.85.975-.81 1.275-2.202.89-4.132-.321-1.6-.071-3.526.554-4.28.866-1.043.776-1.669-.376-2.625-.831-.69-1.512-2.686-1.512-4.436s-1.07-5.407-2.377-8.128c-1.308-2.72-2.652-5.754-2.986-6.741-.335-.987-2.18-2.452-4.099-3.254-1.92-.802-4.163-2.759-4.985-4.348-.87-1.683-2.235-2.83-3.267-2.747-1.482.12-1.799-.757-1.932-5.356-.088-3.025-.404-8.425-.704-12l-.545-6.5 1.347 7.564c1.507 8.465 6.93 20.605 9.578 21.446 2.447.776 5.97 3.994 5.97 5.453 0 .676.831 2.423 1.847 3.883 2.263 3.251 4.153 8.638 4.153 11.835 0 1.31.675 2.64 1.5 2.957 1.947.748 1.933 3.259-.024 4.01-1.116.428-1.363 1.44-.923 3.782.428 2.28.136 3.583-1.015 4.538-1.24 1.03-1.465 2.334-.972 5.624.45 3.007.165 5.241-.96 7.496-1.163 2.332-1.308 3.566-.527 4.507 1.905 2.296.684 5.874-2.117 6.201-2.894.337-6.086 4.204-3.47 4.204.83 0 1.508.498 1.508 1.107s-.668.85-1.484.537c-1.62-.621-7.504 4.976-7.511 7.146-.006 1.748-4.012 9.543-5.342 10.394-.587.376-1.404.476-1.815.222-.411-.254-1.244.465-1.85 1.598-.606 1.133-1.641 1.992-2.3 1.91-2.933-.369-3.698.27-3.698 3.086 0 2 .5 3 1.5 3 .825 0 1.5.575 1.5 1.277 0 2.24-3.046 5.723-5.006 5.723-2.965 0-7.221 6.247-6.423 9.429.484 1.924-.042 3.684-1.97 6.598-1.446 2.185-2.976 3.973-3.4 3.973-.423 0-1.548 1.317-2.499 2.927-1.901 3.22-7.764 7.29-9.866 6.852-1.432-.3-1.62 2.51-.366 5.466.535 1.26-.264 2.75-2.877 5.362-2.974 2.974-3.88 3.4-5.093 2.393-2.344-1.945-4.185-.517-7.157 5.553-2.133 4.355-3.951 6.414-7.887 8.932-2.813 1.8-6.057 3.57-7.208 3.936-2.288.726-9.248 7.96-9.248 9.613 0 .566.675 1.288 1.5 1.604 2.484.954 1.69 3.207-1.25 3.546-1.927.221-2.842.96-3.057 2.468-.19 1.331-1.525 2.646-3.5 3.445-1.756.711-6.331 3.23-10.167 5.598-3.836 2.368-7.66 4.287-8.5 4.265-.84-.022.151-.878 2.201-1.902zM-10.205 570c-.38-2.2-.945-5.125-1.254-6.5-.4-1.778-.112-1.526 1.001.875.861 1.857 1.425 4.782 1.255 6.5-.3 3.017-.335 2.987-1.002-.875zM151 560.5c-1.333-.862-1.333-.97 0-.97.825 0 2.175.437 3 .97 1.333.862 1.333.97 0 .97-.825 0-2.175-.437-3-.97zm-9.125-4.82c-13.692-8.957-24.786-16.803-29.875-21.13-12.855-10.93-23.521-17.05-29.714-17.05C78.791 517.5 59 500.631 59 497.652c0-.742 2.288 1.356 5.084 4.663 2.797 3.307 6.344 6.534 7.883 7.171 1.539.638 4.063 2.48 5.608 4.093 1.696 1.77 3.46 2.727 4.45 2.413 3.963-1.258 20.793 8.58 30.975 18.108 1.925 1.8 6.425 5.246 10 7.655 17.687 11.92 22.804 15.342 24.573 16.436 1.06.655 1.477 1.186.927 1.18-.55-.006-3.531-1.668-6.625-3.691zm-155.162-1.18c-1.32-3.476-1.362-13.448-.066-15.93.737-1.414 1.343-1.978 1.347-1.254.003.723-.464 2.194-1.04 3.269-.788 1.473-.632 2.651.633 4.793 1.35 2.284 1.484 3.603.687 6.731-.616 2.42-1.206 3.324-1.56 2.391zm728.649-1.5c-.896-2.333.28-4.31 3.854-6.49 3.456-2.107 8.263-2.662 9.249-1.067.32.518-1.415 1.826-3.856 2.906-2.44 1.08-4.942 2.905-5.559 4.057-1.314 2.457-2.877 2.708-3.688.594zm4.638-3c1.863-1.983 2.017-2.5.746-2.5-2.018 0-4.954 2.855-4.196 4.08.776 1.256.793 1.248 3.45-1.58zm-249.855-4.825c-.856-1.032-.32-1.698 2.411-3 1.932-.921 4.172-1.675 4.978-1.675s1.466-.398 1.466-.884c0-.812 4.295-3.031 19-9.818 3.025-1.396 6.625-3.116 8-3.824 1.375-.707 3.85-1.984 5.5-2.837 1.65-.853 7.95-3.864 14-6.691s16.85-7.983 24-11.458c7.15-3.475 15.05-7.218 17.556-8.317 6.837-3 7.412-4.129 7.673-15.074.126-5.278.89-14.547 1.698-20.597l1.47-11-.43 9c-1.541 32.369-1.599 32.91-3.749 35.25-1.136 1.237-2.422 2.25-2.856 2.25-.761 0-13.457 5.923-34.362 16.031-5.5 2.66-17.425 8.413-26.5 12.786-14.833 7.148-22.54 10.929-33.59 16.48-2.949 1.482-3.365 2.052-2.37 3.25.985 1.188.84 1.453-.795 1.453-1.1 0-2.495-.596-3.1-1.325zm21.355-.625c15.879-.796 17.912-1.368 36.5-10.272a49178.45 49178.45 0 0126-12.444c30.507-14.588 34.554-16.642 35.75-18.145 1.118-1.405 1.25-1.408 1.25-.024 0 1.732 1.117 1.161-54.5 27.852-27.033 12.973-28.163 13.314-45 13.543l-14 .19 14-.7zm-92.435-3.23c-1.023-.374-2.186-1.206-2.583-1.85-.536-.866-.137-.856 1.533.038 1.326.71 7.565 1.332 15.121 1.508 10.534.245 12.864.044 12.864-1.108 0-.775-.522-1.408-1.16-1.408-.637 0-3.45-1.727-6.25-3.837-2.8-2.11-6.215-4.429-7.59-5.152-1.375-.724-3.625-2.175-5-3.226-3.077-2.35-25.184-16.785-25.707-16.785-.207 0-.92-.469-1.585-1.041-.664-.573-10.433-7.136-21.708-14.584-11.275-7.448-21.4-14.466-22.5-15.596-1.1-1.13-1.325-1.674-.5-1.208 2.29 1.291 10.435 6.753 11 7.377.527.582 1.41 1.167 37 24.54 33.953 22.3 36.298 23.871 38.416 25.762 1.079.963 2.473 1.75 3.098 1.75 1.176 0 5.486 4.138 5.486 5.268 0 .842-27.532.43-29.935-.448zM438 536.467c-2.208-1.771-16.606-11.521-23.858-16.156-1.453-.929-3.141-2.125-3.751-2.657-.61-.533-2.973-1.92-5.25-3.082-2.278-1.162-4.141-2.553-4.141-3.092 0-.54-.39-.98-.868-.98-.767 0-8.983-5.14-17.632-11.03-1.65-1.125-8.85-5.905-16-10.624-16.131-10.646-16.694-11.134-15.897-13.764 1.096-3.611 6.819-10.519 8.742-10.551 1.577-.026 18.205 10.161 19.655 12.042.275.356 1.986 1.41 3.803 2.34 1.817.932 4.121 2.457 5.12 3.39 1 .933 4.15 3.047 7 4.697 2.85 1.65 7.745 4.9 10.88 7.223 3.133 2.323 6.19 4.236 6.792 4.25.602.015 1.91.927 2.905 2.027.995 1.1 2.36 2 3.033 2 .672 0 1.81.708 2.528 1.573s2.91 2.407 4.872 3.425c1.962 1.019 5.142 3.286 7.067 5.038 1.925 1.752 2.825 2.751 2 2.22-3.095-1.992-63.62-41.908-66.4-43.791-6.256-4.237-8.926-5.554-10.238-5.05-.752.288-2.716 2.651-4.365 5.25L351 475.891l2.687 2.804c1.478 1.543 3.014 2.805 3.413 2.805.694 0 9.018 5.421 35.4 23.056 24.617 16.456 45.802 30.483 47.867 31.697 1.916 1.125 2.465.87 5.394-2.5 3.447-3.966 4.864-7.433 3.765-9.21-.364-.59-2.319-1.95-4.344-3.023-4.83-2.56-9.553-6.347-6.682-5.357 1.1.38 3.392 1.735 5.094 3.013 1.702 1.278 3.603 2.324 4.225 2.324.621 0 1.79 1.276 2.595 2.834 1.406 2.72 1.302 3.066-2.553 8.5-4.342 6.121-6 6.732-9.861 3.633zm-50.586-2.328c-2.248-1.285-5.398-3.226-7-4.311-1.603-1.086-6.289-4.187-10.414-6.892s-7.95-5.275-8.5-5.713c-.55-.437-11.238-7.53-23.75-15.76L315 486.5l-.011-6.75c-.02-11.498 3.682-57.573 5.964-74.249l.753-5.5.147 4.583c.08 2.521-.28 7.021-.8 10-1.396 7.986-5.503 68.302-4.78 70.188.342.89 16.83 12.33 36.64 25.423a53981.946 53981.946 0 0137.804 24.997c3.09 2.064.958 1.385-3.303-1.052zm-400.776-3.889c-.278-2.888-.451-6.15-.385-7.25.066-1.1-.181-3.8-.55-6-.55-3.279-.485-3.557.358-1.542.953 2.278 2.225 20.042 1.436 20.042-.194 0-.58-2.362-.859-5.25zm945.594-4.75c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-.074-11c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-947.491-7.667c-.367-.366-.667-1.131-.667-1.7 0-.626.466-.567 1.183.15.651.651.951 1.416.667 1.7-.284.284-.817.217-1.183-.15zm606.332-10.916c-.001-2.154.433-8.642.965-14.417s1.433-17.25 2.003-25.5c4.45-64.41 6.979-96.578 7.685-97.735.38-.625 9.192-5.033 42.848-21.438 2.75-1.34 9.275-4.633 14.5-7.316 5.225-2.684 9.95-4.898 10.5-4.922.55-.023-3.95 2.574-10 5.771-6.05 3.198-12.35 6.546-14 7.44-1.65.895-10.2 5.063-19 9.264-8.8 4.2-17.854 8.572-20.12 9.715l-4.12 2.08-.588 8.07c-2.346 32.186-3.766 52.138-4.632 65.071-.553 8.25-1.461 20.4-2.018 27a3449.18 3449.18 0 00-2.06 25.96c-1.022 13.605-1.96 18.842-1.963 10.957zM56.75 494.108c-1.002-.761-1.75-2.648-1.75-4.418 0-2.439-.95-3.884-4.5-6.852-3.77-3.152-4.501-4.335-4.509-7.3-.007-3.007-1.047-4.624-6.928-10.778l-6.92-7.24 1.52-3.046c1.368-2.743 1.36-3.289-.072-5.475-.875-1.336-1.591-3.254-1.591-4.264 0-1.01-.515-2.35-1.144-2.98-.86-.859-.83-1.905.121-4.2 1.01-2.438 1.016-3.658.029-6.041-.68-1.642-1.026-4.423-.768-6.18.518-3.53-.653-10.119-2.407-13.551-.965-1.888-.777-2.516 1.268-4.23 1.944-1.63 2.135-2.187 1.007-2.931-1.152-.759-.984-1.583.963-4.734 1.297-2.098 3.138-4.595 4.092-5.549.953-.953 2.212-3.511 2.797-5.683.585-2.173 1.77-4.222 2.635-4.553 2.696-1.035 2.94-.665.63.954-1.223.856-2.223 2.46-2.223 3.565 0 2.504-1.505 5.398-5.077 9.763-2.275 2.78-2.567 3.712-1.633 5.208.92 1.472.733 2.263-.969 4.115-1.711 1.862-1.92 2.761-1.11 4.792.549 1.375 1.075 5.65 1.17 9.5.095 3.85.472 7.477.838 8.06.366.584.599 3.959.518 7.5-.101 4.439.42 7.608 1.676 10.198 1.55 3.198 1.637 4.206.58 6.758-1.145 2.765-1.037 3.162 1.382 5.065 1.444 1.135 2.625 2.66 2.625 3.388 0 .728 1.531 2.668 3.403 4.312 4.253 3.734 5.652 6.293 4.936 9.03-.41 1.572.29 2.848 2.662 4.843 5.343 4.496 5.999 5.38 5.999 8.089 0 1.43.745 3.422 1.655 4.428 1.934 2.138 1.568 2.314-.905.437zm878.94-8.223c.66-6.773 1.14-7.717 1.216-2.385.035 2.475-.331 5.123-.814 5.885-.54.853-.694-.491-.402-3.5zm-95.05 1.921c-1.196-1.195-.646-3.306.86-3.306.825 0 1.5.648 1.5 1.441 0 1.67-1.427 2.798-2.36 1.865zM-16.769 481.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm573.506.086c-7.546-1.079-8.14-2.202-6.728-12.713.656-4.88 1.622-16.073 2.148-24.873.525-8.8 1.335-19.375 1.801-23.5l.848-7.5-.36 9.5c-.635 16.785-2.379 42.322-3.311 48.5-.553 3.666-.544 6.45.025 7.157 1.502 1.87 12.89 2.849 14.014 1.205.7-1.022.854-.863.618.638-.356 2.269-2.12 2.578-9.055 1.586zM566.493 471c.27-3.85.496-9.213.5-11.917.004-2.704.3-4.623.658-4.265.985.984.467 16.758-.662 20.182-.775 2.349-.882 1.48-.496-4zm-584.207-3c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm351.448-7.5c.297-6.875.704-12.688.903-12.917.709-.814.113 19.467-.658 22.417-.432 1.65-.542-2.625-.245-9.5zm-353.44-1.994c-.736-2.746-.846-4.854-.282-5.418 1.332-1.332 2.178 1.507 1.805 6.057L-18.5 463zm951.71 3.41c.005-1.23 3.81-7.416 4.563-7.416.328 0-.419 1.688-1.66 3.75-2.8 4.656-2.908 4.793-2.903 3.667zm5.154-11.416c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-359.963-6c-.024-2.475.538-8.325 1.25-13 1.121-7.376 1.3-7.839 1.349-3.5.03 2.75-.532 8.6-1.25 13-1.062 6.514-1.313 7.164-1.349 3.5zm-9.005-1c-.008-2.475.604-8.325 1.36-13l1.375-8.5-.52 9.5c-.287 5.225-.9 11.075-1.36 13l-.84 3.5-.015-4.5zm367.842 1.184c-.018-1.273-.501-3.192-1.074-4.263-.707-1.321-.717-2.506-.03-3.684.91-1.564 1.014-1.525 1.042.39.016 1.17.705 2.688 1.53 3.373 1.867 1.55 1.87 2.128.032 4.559-1.428 1.887-1.47 1.877-1.5-.375zm-600.494-10.903c.277-4.52.928-9.246 1.447-10.5 1.145-2.766.246 9.845-1.084 15.219-.608 2.454-.716 1.044-.363-4.72zm-350.319-3.503c-.343-8.75-.371-17.477-.062-19.278.215-1.255-.15-1.897-.982-1.725-2.486.516.655-5.945 5.968-12.275 2.458-2.929 2.821-7.037.607-6.861-1.864.148-2.367-1.14-.82-2.096.513-.317 1.214-.118 1.56.44.345.56 1.501 1.017 2.569 1.017 2.416 0 2.497 2.01.184 4.561-.967 1.067-2.334 3.064-3.04 4.439a137.219 137.219 0 01-2.728 5c-.795 1.375-1.452 4.15-1.46 6.167-.008 2.016-.526 3.837-1.151 4.045-.814.271-.757.987.202 2.522 1.121 1.795 1.114 2.561-.044 4.724-1.061 1.984-1.108 2.856-.202 3.762 1.349 1.349 1.542 5.662.339 7.558-.519.816-.858.094-.94-2zm947.543-1.252c-1.732-1.524-3.143-4.178-3.839-7.218-.605-2.644-1.737-6.833-2.516-9.308-.78-2.475-1.384-5.625-1.344-7 .08-2.78 1.99 3.336 4.322 13.837.948 4.268 2.318 7.288 4.198 9.25 3.373 3.52 2.941 3.751-.821.44zM570.15 415.5c-.06-3.025.31-8.425.823-12 .513-3.575 1.18-12.229 1.482-19.23.543-12.604.526-12.735-1.703-13.187-5.602-1.136-10.35-1.459-11.445-.777-.657.408-1.37 3.431-1.587 6.718-.368 5.596-.388 5.531-.307-1.024l.087-7 5.612.107c3.086.059 6.83.413 8.318.786l2.706.68-.597 15.213c-.677 17.225-3.195 39.309-3.389 29.714zm9.908-6.083c.031-4.63.45-10.217.929-12.417.575-2.638.681.085.313 8-.306 6.6-.724 12.188-.929 12.417-.204.229-.345-3.371-.313-8zM555.26 404c-.035-4.4.279-10.475.697-13.5l.76-5.5.01 6c.006 3.3-.308 9.375-.697 13.5l-.708 7.5zm-218.048 0c-.02-2.2.313-6.25.741-9l.779-5 .06 4.5c.032 2.475-.302 6.525-.742 9l-.8 4.5-.038-4zm587.019-4.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zM322.246 388c-.027-2.75.294-7.475.712-10.5l.76-5.5.033 4.5c.017 2.475-.303 7.2-.712 10.5l-.745 6-.048-5zm601.917.113c-.763-2.133-2.363-4.203-3.73-4.826-1.317-.6-2.668-1.952-3.002-3.004-.334-1.053-1.975-3.572-3.646-5.599-2.412-2.924-2.298-2.859.55.316 1.975 2.2 5.45 5.829 7.722 8.064 2.985 2.937 4.035 4.72 3.787 6.425-.3 2.063-.512 1.89-1.68-1.376zm-342.007-7.696c-.086-5.821.37-13.203 1.013-16.404 1.13-5.63 1.09-5.881-1.25-7.667a292.84 292.84 0 01-3.419-2.642c-.55-.438-6.625-4.484-13.5-8.992-6.875-4.508-14.96-9.887-17.965-11.954-3.006-2.067-6.268-4.081-7.25-4.476-.982-.395-1.785-1.182-1.785-1.75 0-.567-.436-1.032-.969-1.032-.533 0-4.191-2.138-8.13-4.75-3.938-2.612-8.564-5.588-10.28-6.613-1.717-1.025-3.346-2.15-3.621-2.5-.275-.35-1.224-1.087-2.11-1.637-1.702-1.058-4.27-2.75-12.39-8.17-2.75-1.835-6.35-4.5-8-5.921l-3-2.585 3.162 1.838c1.74 1.01 19.943 13.088 40.452 26.838 20.51 13.75 37.762 25.186 38.338 25.412 1.473.58 11.886 8.365 12.817 9.582.423.553.467 3.256.098 6.006-.368 2.75-.981 10.175-1.362 16.5l-.693 11.5-.156-10.583zM339.158 387.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-341.183-5.796l.483-4.704.34 3.882c.186 2.135-.031 4.251-.483 4.703-.452.452-.605-1.295-.34-3.881zm48.165 2.282c1.452-.79 4.022-3.884 5.712-6.878 1.69-2.994 3.652-5.798 4.36-6.233.71-.435.512.312-.442 1.668-.951 1.351-2.471 3.932-3.377 5.734-1.72 3.425-5.865 7.252-7.778 7.183-.613-.022.073-.686 1.525-1.474zm293.1-8.486c-.023-2.475.3-6.975.718-10l.76-5.5.042 4.5c.023 2.475-.3 6.975-.718 10l-.76 5.5zm-282.21-6.96c-.016-.804 3.233-4.73 7.22-8.724 3.988-3.995 8.09-8.227 9.116-9.406 1.527-1.753 2.607-2.043 5.945-1.595 4.928.66 7.249-.424 8.092-3.783.755-3.009 11.438-8.864 15.944-8.74 2.658.074 2.741-.037 1.25-1.685-3.091-3.416-.61-8.022 2.799-5.194 1.092.907 1.48.576 1.918-1.638.302-1.526 1.007-4.35 1.566-6.275.87-2.99.935-2.627.444 2.5-.687 7.182-.992 7.82-3.436 7.181-2.71-.709-3.385 1.112-1.276 3.443 1.552 1.714 1.601 2.128.348 2.914-.803.504-2.234.676-3.18.381-2.179-.678-14.78 5.523-14.78 7.273 0 .72-.924 2.232-2.053 3.361-1.696 1.696-2.808 1.94-6.39 1.403l-4.335-.65-8.516 8.517c-4.684 4.684-8.996 9.34-9.58 10.347-.775 1.33-1.073 1.431-1.096.37zm267.27-6.04c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm584.779 2.417c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm2-6c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-569.904-7.444c-.204-9.947.774-11.989 7.133-14.886 16.63-7.576 30.035-14.001 73.192-35.081 12.1-5.91 23.8-11.348 26-12.083 2.2-.735 4.71-1.919 5.579-2.63.868-.711 1.993-1.283 2.5-1.27 1.433.034-3.908 3.93-5.423 3.955-.739.012-11.989 5.24-25 11.615-13.01 6.377-26.131 12.713-29.156 14.082-10.35 4.682-18.5 8.825-18.833 9.575-.184.412-.847.75-1.473.75-.627 0-4.302 1.543-8.167 3.43-9.962 4.862-20.525 9.57-21.474 9.57-2.272 0-3.596 3.978-4.128 12.398l-.574 9.102zM297.75 339.99C284.137 330.95 273 323.315 273 323.02c0-.294 3.712 1.912 8.25 4.9 33.884 22.322 43.123 28.562 42.25 28.534-.55-.017-12.137-7.426-25.75-16.465zm605.174 9.76L900.5 347l2.75 2.424c1.512 1.334 2.75 2.571 2.75 2.75 0 .785-.81.146-3.076-2.424zm-40.325-4.064c-.442-2.923-.562-5.556-.266-5.852.784-.784 1.907 5.993 1.455 8.785-.246 1.523-.675.466-1.19-2.933zm-271.099-4.38c-2.043-1.157-51.459-33.777-93.29-61.58-12.809-8.515-23.067-15.702-22.797-15.973.27-.27 3.101 1.382 6.29 3.673 5.058 3.633 24.853 16.752 29.535 19.574.912.55 3.37 2.182 5.46 3.627 14.468 10 75.994 50.193 76.802 50.173 1.154-.028 7.737-3.055 29.769-13.689 8.672-4.186 16.03-7.611 16.348-7.611.32 0 2.127-.734 4.018-1.63 1.89-.898 3.65-1.418 3.912-1.156s-2.566 1.76-6.285 3.33c-3.72 1.57-12.612 5.74-19.762 9.267-12.279 6.057-27.435 13.225-27.823 13.159-.097-.017-1.077-.54-2.177-1.164zM893 340.5c-1.828-1.181-.25-1.181 2.5 0 1.319.567 1.49.878.5.914-.825.03-2.175-.38-3-.914zm-574-6.83c-14.04-9.494-63.847-42.045-66.512-43.468-1.643-.878-4.338-2.795-5.988-4.26l-3-2.663 3.5 2.416c1.925 1.328 5.744 3.71 8.486 5.29 2.743 1.582 19.527 12.47 37.3 24.196 17.771 11.725 32.515 21.319 32.763 21.319.248 0 .451-1.31.451-2.911 0-2 .929-3.693 2.969-5.41l2.969-2.498-11.469-7.638c-6.308-4.2-11.469-7.868-11.469-8.15 0-.649.421-.388 12.73 7.869 5.626 3.774 10.468 7.25 10.761 7.724.293.473-.795 1.806-2.418 2.962-1.995 1.42-3.05 3.12-3.261 5.25-.172 1.731-.762 3.27-1.312 3.42-.55.15-3.475-1.402-6.5-3.448zM862.69 330c.323-3.3.75-6.188.949-6.417.768-.886.173 8.525-.659 10.417-.558 1.27-.664-.189-.29-4zm-825.126-1.793c.376-.986.935-1.541 1.243-1.233.308.307 0 1.114-.683 1.793-.988.98-1.102.865-.56-.56zm791.087-.463c-.312-.505-.65-4.44-.75-8.742-.147-6.37.138-8.057 1.53-9.075 1.576-1.153 1.587-1.491.14-4.29-1.601-3.096-2.182-12.64-.821-13.485.412-.256.596 1.96.408 4.925-.265 4.182.14 6.17 1.805 8.864l2.147 3.473-2.055 1.284C829.29 311.8 829 313 829 319.193v7.213l4.263-.248c5.651-.328 6.552-1.01 9.293-7.037 2.765-6.08 3.272-4.718.58 1.56-2.144 5.003-3.918 6.764-6.682 6.633-1.075-.051-3.142.231-4.595.628-1.452.396-2.896.307-3.208-.198zM671.5 323.5c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm3.5-1.317c0-.644 25.205-12.811 25.64-12.377.185.186-5.123 3.005-11.797 6.266-13.835 6.76-13.843 6.763-13.843 6.11zm189.257-.683c.225-.825 1.271-1.605 2.326-1.732 1.347-.164 1.471-.045.417.4-.825.347-1.872 1.127-2.326 1.732-.531.707-.68.565-.417-.4zm5.743 0c-.901-.582-1.025-.975-.309-.985.655-.008 1.47.435 1.809.985.767 1.242.421 1.242-1.5 0zM256 312c-6.875-4.669-13.85-9.666-15.5-11.105-3.868-3.371-1.19-1.968 4 2.096 2.2 1.723 8.613 6.192 14.25 9.931 8.87 5.884 11.127 7.593 10 7.574-.138-.002-5.875-3.825-12.75-8.495zm-143.993 3.917c-.004-.596.33-1.416.743-1.822.412-.406 1.278-2.169 1.924-3.917.827-2.24 1.194-2.588 1.243-1.178.039 1.1-.824 3.35-1.917 5s-1.99 2.513-1.993 1.917zm218.23-12.19c-28.875-19.077-52.515-34.325-58.975-38.04-3.17-1.822-6.437-3.996-7.262-4.832-2.07-2.097 6.427 3.024 26.674 16.075 9.446 6.088 19.778 12.645 22.96 14.57 3.183 1.925 12.703 8.113 21.157 13.75 8.454 5.638 16.193 10.25 17.198 10.25 1.005 0 4.685-1.543 8.177-3.43 3.493-1.886 8.597-4.19 11.342-5.118 2.746-.929 6.155-2.513 7.577-3.521 1.422-1.008 7.047-3.919 12.5-6.468 5.453-2.55 13.515-6.366 17.915-8.48 4.4-2.116 13.85-6.619 21-10.007s16.995-8.144 21.878-10.568c4.883-2.425 9.383-4.392 10-4.373 1.175.037-26.495 13.997-39.395 19.875-4.116 1.876-16.483 7.771-27.483 13.1-34.505 16.719-41.695 19.99-43.879 19.967-1.166-.012-10.79-5.75-21.385-12.75zM649 316.01c0-.802 45.226-22.618 45.767-22.077.247.248-1.062 1.103-2.909 1.902-3.453 1.493-37.912 18.089-41.085 19.787-.975.521-1.773.696-1.773.388zm-345.268-9.046c-3.78-2.568-5.199-4.378-1.982-2.528 2.358 1.357 6.879 5.014 6.232 5.042-.285.012-2.197-1.12-4.25-2.514zM702.5 308.5c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm3.5-1.41c0-.677 10.318-5.605 10.776-5.147.233.232-1.857 1.578-4.643 2.99-5.043 2.555-6.133 2.938-6.133 2.156zM116.195 303c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM839 298.556c-3.025-2.994-4.15-4.497-2.5-3.341 3.39 2.375 9.077 8.128 8.427 8.525-.235.143-2.902-2.19-5.927-5.184zm-557.5-6.43c-9.35-6.206-17.667-12.148-18.483-13.205-1.414-1.832-1.39-1.846.5-.303 1.09.89 9.52 6.647 18.733 12.793 14.13 9.427 18.111 12.333 16.5 12.044-.138-.024-7.9-5.122-17.25-11.329zm436.5 8.981c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-642-1.985c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm646.083 0c.917-.828 8.917-4.634 8.917-4.241 0 .681-7.011 4.619-8.224 4.619-.61 0-.922-.17-.693-.377zm-607.395-5.728c-.6-3.606-.31-5.828 1.337-10.231 1.157-3.094 2.525-5.885 3.04-6.203.514-.318.953-1.339.976-2.269.023-.93 1.887-3.716 4.143-6.191 2.257-2.475 3.63-3.6 3.051-2.5-.578 1.1-2.218 3.09-3.643 4.424-1.426 1.334-2.592 3.08-2.592 3.882s-.996 3.07-2.214 5.04c-1.556 2.517-2.38 5.823-2.773 11.118-.555 7.489-.563 7.507-1.325 2.93zm366.787-4.372c-3.836-2.463-8.55-5.368-10.475-6.456-1.925-1.088-3.03-1.997-2.457-2.022.574-.024 4.714 2.319 9.201 5.206 11.39 7.33 11.82 7.625 11.23 7.691-.288.032-3.663-1.956-7.5-4.42zM696 293.086c0-.228 3.938-2.314 8.75-4.636 4.813-2.322 9.08-4.723 9.485-5.336.517-.784.739-.747.75.126.008.682-4.026 3.27-8.965 5.75-8.831 4.435-10.02 4.921-10.02 4.096zm35.272-3.586c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zM222 289.5c-.901-.582-1.025-.975-.309-.985.655-.008 1.47.435 1.809.985.767 1.242.421 1.242-1.5 0zm-8.138-4.63c-5.392-3.65-8.81-6.466-5.862-4.831 1.669.926 11.263 7.407 11.917 8.05 1.466 1.444-1.484-.125-6.055-3.219zm244.665-.665c2.568-1.687 7.473-3.791 7.473-3.207 0 .474-7.973 4.502-8.91 4.502-.294 0 .353-.583 1.437-1.295zM96 284.122c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM732.252 281c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm-17.178-5.583c.04-3.53.457-8.442.924-10.917.58-3.07.675-1.162.3 6-.617 11.798-1.337 14.69-1.224 4.917zm-609.324 3.42c.688-.277 1.813-.277 2.5 0 .688.278.125.505-1.25.505s-1.938-.227-1.25-.504zm7.75-4.337c2.148-2.2 4.13-4 4.406-4 .275 0-1.258 1.8-3.406 4s-4.13 4-4.406 4c-.275 0 1.258-1.8 3.406-4zm93.5 2.701c0-.96 5.113-8.701 5.748-8.701.447 0-1.144 2.702-4.401 7.473-.741 1.084-1.347 1.637-1.347 1.228zm51-1.79c-2.154-1.762-2.196-1.897-.306-.973 1.207.59 2.471 1.52 2.81 2.067.902 1.46.296 1.196-2.504-1.094zm-33.267-4.599c-3.721-2.537-6.537-4.842-6.256-5.123.281-.28 1.301.196 2.267 1.06.966.862 4.22 3.184 7.233 5.16 3.013 1.975 5.038 3.574 4.5 3.553-.537-.02-4.022-2.113-7.744-4.65zM733.286 264c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm-499.964-3.489c-2.848-1.633-5.446-3.402-5.772-3.93-.534-.865 9.949 5.084 11.246 6.382 1.136 1.136-.486.41-5.474-2.452zm231.411 1.865c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM132 261.122c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm336.813-.305c.721-.289 1.584-.253 1.916.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zM717.285 255c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm15.793 1.917c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-508.734-2.96c-.326-.849-.369-1.767-.096-2.04.274-.273.737.422 1.03 1.543.624 2.383-.069 2.751-.934.497zm510.426-9.457c.278-5.775.669-10.688.868-10.917.677-.78.127 15.405-.625 18.417-.413 1.65-.522-1.725-.243-7.5zm-16.41-8c0-5.225.168-7.362.374-4.75s.206 6.888 0 9.5-.374.475-.374-4.75zm-487.861 6c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm-74.994-8.006c.998-1.104 2.021-1.8 2.274-1.548.541.542-2.31 3.554-3.364 3.554-.4 0 .091-.903 1.09-2.006zM736.709 220c.29-6.05.7-11.188.91-11.417.633-.692.218 10.012-.637 16.417-.569 4.26-.648 2.811-.273-5zm-17.012-3c.298-5.5.713-10.188.922-10.417.68-.743.23 10.276-.629 15.417-.59 3.537-.676 2.074-.293-5zM166 225.115c0-.733 14.067-8.882 14.53-8.417.257.256-.77 1.103-2.282 1.882-1.511.78-2.973 1.698-3.248 2.043-1.5 1.877-9 5.62-9 4.492zM738.343 200c.004-4.4.18-6.076.39-3.724.212 2.352.209 5.952-.007 8-.214 2.048-.387.124-.384-4.276zm-17.103-4.5c-.023-2.475.3-6.975.718-10l.76-5.5.042 4.5c.023 2.475-.3 6.975-.718 10l-.76 5.5zm-512.822-4.354c-.334-.87-.375-2.157-.091-2.863.305-.761.547-.521.594.59.065 1.549.338 1.657 1.579.627.825-.685 1.5-1.834 1.5-2.555 0-.72.96-1.615 2.132-1.987 1.704-.54 1.855-.869.75-1.633-.966-.668-.667-.753.993-.283 1.486.42 2.143.297 1.756-.33-.81-1.311 1.904-2.328 4.033-1.51 1.216.466 1.441.277.836-.702-.598-.968-.385-1.17.771-.726.88.337 1.76.133 1.956-.455.196-.588 1.567-1.069 3.046-1.069 1.48 0 2.45-.389 2.157-.864-.294-.475.238-.567 1.182-.205 1.19.457 1.487.288.968-.551-.544-.881-.046-1.034 1.834-.562 1.42.356 3.357.35 4.306-.014 1.476-.567 1.513-.795.252-1.592-1.235-.782-1.19-.934.278-.947.962-.008 1.75.345 1.75.785 0 1.649-2.492 3.2-5.141 3.2-1.508 0-3.02.45-3.359 1-.34.55-1.379.999-2.309.997-.93-.002-3.491.87-5.691 1.938-2.2 1.067-5.66 2.651-7.688 3.52-2.029.87-3.959 2.432-4.289 3.472-.33 1.041-1.253 2.434-2.05 3.095-1.154.958-1.573.881-2.056-.376zM739.251 184c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm-529.026.921c.95-.99 1.942-1.587 2.205-1.324.263.263-.514 1.074-1.726 1.803-2.107 1.265-2.128 1.243-.479-.479zm512.848-16.504c.04-4.08.442-9.442.891-11.917.524-2.883.627-.368.288 7-.603 13.11-1.29 15.972-1.179 4.917zM740.31 170c.006-3.3.192-4.53.415-2.732.222 1.797.218 4.497-.01 6-.229 1.503-.41.032-.405-3.268zm.848-10.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm2.575-4.124c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm5.35-2.24c.23-.201 1.542-.9 2.917-1.556 2.357-1.122 2.39-1.102.559.365-1.593 1.276-4.848 2.391-3.476 1.19zm5.917-3.029c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-29.985-2.134c.029-1.821 1.52-3.346 4.313-4.407 1.763-.671 2.56-.694 2.17-.063-.339.548-1.239.997-2 .997-.762 0-2.085 1-2.941 2.222-.856 1.223-1.55 1.785-1.542 1.25zM762 146.5c1.925-1.054 3.95-1.916 4.5-1.916.55 0-.575.862-2.5 1.916-1.925 1.054-3.95 1.916-4.5 1.916-.55 0 .575-.862 2.5-1.916zm6.733-3.124c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm-34.474-1.961c2.782-1.62 8.741-3.99 8.741-3.475 0 .51-8.87 4.579-9.877 4.53-.343-.017.169-.492 1.136-1.055zm40.474-1.04c.679-.683 1.486-.99 1.793-.682.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM747 135.5c1.925-1.054 3.95-1.916 4.5-1.916.55 0-.575.862-2.5 1.916-1.925 1.054-3.95 1.916-4.5 1.916-.55 0 .575-.862 2.5-1.916zm35 1.607c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm9-4.607c3.025-1.598 5.95-2.906 6.5-2.906.55 0-1.475 1.308-4.5 2.906s-5.95 2.906-6.5 2.906c-.55 0 1.475-1.308 4.5-2.906zm-37.267-.124c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm4-2c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm6-3c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM806 125.235a766.01 766.01 0 008.42-3.93c3.256-1.539 6.078-2.64 6.271-2.447.51.51-14.576 7.655-15.994 7.574-.658-.037-.072-.576 1.303-1.197zm-36.267-.86c.679-.683 1.486-.99 1.793-.682.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm3.267-1.268c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm7-3.103c0-.668 14.122-7.716 14.567-7.27.2.2-2.997 2.024-7.102 4.056-4.106 2.031-7.465 3.478-7.465 3.214zm42.733-2.628c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm3.267-1.269c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm4.083-1.992c1.018-.94 20.917-10.58 20.917-10.133 0 .554-19.56 10.518-20.649 10.518-.376 0-.497-.173-.268-.385zm-33.35-2.74c.679-.683 1.486-.99 1.793-.682.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm3.267-1.268c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm4-2c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm7.59-3.753c.697-1.127 7.401-4.196 7.956-3.642.181.182-1.682 1.313-4.14 2.515-2.458 1.202-4.175 1.709-3.816 1.127zM855 101.5c1.925-1.054 3.95-1.916 4.5-1.916.55 0-.575.862-2.5 1.916-1.925 1.054-3.95 1.916-4.5 1.916-.55 0 .575-.862 2.5-1.916zm-31.267-3.124c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm41.553-2.177c1.218-1.265 2.399-2.168 2.625-2.006.583.419-3.055 4.307-4.03 4.307-.445 0 .187-1.035 1.405-2.3zM827 97.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zM839 91c1.375-.786 2.95-1.43 3.5-1.43.55 0-.125.644-1.5 1.43-1.375.786-2.95 1.43-3.5 1.43-.55 0 .125-.644 1.5-1.43zm29.252-3c-.008-2.75.328-6.35.748-8l.763-3 .031 3c.017 1.65-.32 5.25-.748 8l-.779 5-.015-5zM844 89.01c0-.685 6.123-3.72 6.58-3.263.217.217-1.174 1.143-3.093 2.058-1.918.914-3.487 1.456-3.487 1.204zm8.272-13.51c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm16.96-6c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-15.912-9c0-3.575.182-5.037.403-3.25.222 1.788.222 4.713 0 6.5-.221 1.788-.403.325-.403-3.25zm16.966-2.5c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm-16-11c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm17.014-1.5c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm-16-11c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm16.986-4.5c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zM856.3 20.5c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm16.986-1.5c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zM857.343 5c.004-4.4.18-6.076.39-3.724.212 2.352.209 5.952-.007 8-.214 2.048-.387.124-.384-4.276zm16.731-2.083c.04-2.155.459-5.942.929-8.417.643-3.383.718-2.514.304 3.5-.58 8.445-1.358 11.545-1.233 4.917zM858.158-6.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm17.94-12.583c.055-4.355.448-10.392.875-13.417.48-3.41.58-.562.262 7.5-.569 14.457-1.29 18.21-1.136 5.917zM859.3-21.5c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm.986-10.5c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm17.85-8.215c-.084-1.362.73-2.683 2.114-3.432C886.805-47.194 904-55.374 904-54.945c0 .274-5.602 3.251-12.45 6.616-9.206 4.525-12.557 6.667-12.863 8.224-.401 2.038-.419 2.034-.55-.11zM861.286-47c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zM867-56.027c0-.29 3.938-2.368 8.75-4.616 12.714-5.941 17.25-7.853 17.25-7.27 0 .283-1.652 1.205-3.672 2.05-2.02.843-7.693 3.52-12.609 5.948-9.278 4.584-9.719 4.76-9.719 3.888zm38 .134c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm7-3.607c1.925-1.054 3.95-1.916 4.5-1.916.55 0-.575.862-2.5 1.916-1.925 1.054-3.95 1.916-4.5 1.916-.55 0 .575-.862 2.5-1.916zm6.733-3.124c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm6-3c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM897-70.5c1.925-1.054 3.95-1.916 4.5-1.916.55 0-.575.862-2.5 1.916-1.925 1.054-3.95 1.916-4.5 1.916-.55 0 .575-.862 2.5-1.916zm40-1c3.025-1.598 5.95-2.906 6.5-2.906.55 0-1.475 1.308-4.5 2.906s-5.95 2.906-6.5 2.906c-.55 0 1.475-1.308 4.5-2.906zm-33.267-2.124c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm4-2c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm38 0c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zm4-2c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zm3.35-1.24c.23-.201 1.542-.9 2.917-1.556 2.357-1.122 2.39-1.102.559.365-1.593 1.276-4.848 2.391-3.476 1.19zM964-84.5c3.025-1.598 5.95-2.906 6.5-2.906.55 0-1.475 1.308-4.5 2.906s-5.95 2.906-6.5 2.906c-.55 0 1.475-1.308 4.5-2.906zm-41 1.607c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zM929-86c1.375-.786 2.95-1.43 3.5-1.43.55 0-.125.644-1.5 1.43-1.375.786-2.95 1.43-3.5 1.43-.55 0 .125-.644 1.5-1.43zm6.441-2.945c1.068-.855 2.38-1.555 2.917-1.555 1.27 0 .703.462-2.358 1.92-2.357 1.122-2.39 1.102-.559-.365zM972-87.99c0-.684 6.123-3.72 6.58-3.262.217.217-1.174 1.143-3.093 2.058-1.918.914-3.487 1.456-3.487 1.204zm-22-7.902c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm9-4.607c3.025-1.598 5.95-2.906 6.5-2.906.55 0-1.475 1.308-4.5 2.906s-5.95 2.906-6.5 2.906c-.55 0 1.475-1.308 4.5-2.906zm33 2.607c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm6.943-3.525c1.894-1.008 3.775-2.677 4.18-3.708.668-1.699.743-1.709.807-.11.067 1.672-5.287 5.772-7.43 5.69-.55-.02.55-.863 2.443-1.872zm1.516-9.149c-.363-.586-.445-1.28-.183-1.543.263-.262.743.218 1.07 1.067.675 1.762.1 2.072-.887.476zm-19.376-.316c1.018-.935 14.917-7.59 14.917-7.142 0 .558-13.555 7.525-14.642 7.525-.38 0-.504-.172-.275-.383zM998-115.5c-.589-1.1-.845-2-.57-2s.981.9 1.57 2c.589 1.1.845 2 .57 2s-.981-.9-1.57-2z",
      fill: "#a8a39b",
      transform: "matrix(.92146 0 0 .82007 29.733 153.837)"
    }), /* @__PURE__ */ React46.createElement("path", {
      d: "M189.5 1018.909c-79.953-4.662-146.177-14.255-183.5-26.58-13.36-4.413-17.185-6.174-21.353-9.834-3.125-2.744-3.647-3.813-3.647-7.464 0-7.54 4.65-11.194 22-17.292 29.206-10.264 85.01-19.64 150-25.2 21.288-1.821 23.214-1.973 33.5-2.642 5.5-.357 10.225-.864 10.5-1.127.655-.626-12.183-12.232-13.554-12.254-.58-.01-2.604-1.63-4.5-3.601-1.895-1.972-4.585-4.183-5.977-4.913-2.969-1.557-10.701-9.09-16.714-16.283-2.335-2.793-5.248-5.223-6.475-5.399-1.226-.176-2.731-1.33-3.344-2.563-1.606-3.235-4.536-6.257-6.065-6.257-.726 0-1.96-1.239-2.743-2.752-1.775-3.433-4.537-5.933-7.065-6.396-1.206-.221-2.253-1.578-2.777-3.598-.462-1.784-2.015-4.013-3.45-4.953-1.435-.94-3.264-3.277-4.064-5.192-.8-1.915-2.486-4.86-3.747-6.546-1.261-1.684-2.568-3.963-2.904-5.063-.336-1.1-4.049-5.375-8.25-9.5s-8.757-8.963-10.124-10.75c-1.366-1.788-3.282-3.25-4.257-3.25-1.128 0-2.342-1.423-3.34-3.915-.86-2.153-2.035-4.205-2.608-4.559-.573-.354-1.042-1.742-1.042-3.085 0-1.44-.581-2.441-1.417-2.441-.779 0-1.566-.338-1.75-.75-.183-.412-2.245-1.994-4.583-3.514-4.219-2.744-5.296-5.29-3.146-7.44.804-.804-.83-3.032-6.033-8.226-7.14-7.125-8.255-9.412-8.455-17.345-.024-.976-.59-1.565-1.257-1.31-1.612.62-3.566-1.84-3.263-4.105.23-1.72-1.045-5.426-3.374-9.81-.584-1.1-2.388-4.7-4.008-8s-3.832-6.97-4.916-8.156c-3.145-3.442-7.79-13.56-7.794-16.979-.003-2.238-.72-3.604-2.504-4.773-1.729-1.133-2.5-2.545-2.5-4.58 0-1.619-1.345-5.064-2.99-7.656-1.728-2.727-3.268-6.817-3.65-9.702-.469-3.532-1.494-5.859-3.511-7.97-1.567-1.64-2.849-3.747-2.849-4.683 0-.937-1.125-3.819-2.5-6.405-1.53-2.878-2.5-6.34-2.5-8.926 0-4.91-2.073-8.399-5.259-8.852-1.726-.245-2.182-.893-1.984-2.818.82-7.983-.11-17.624-1.897-19.645-1.005-1.137-1.668-3.721-1.715-6.675-.041-2.651-.94-6.701-1.996-9-3.907-8.5-4.343-10.4-4.748-20.68-.228-5.775-.86-12.945-1.407-15.934-.547-2.988-.994-7.359-.994-9.713 0-2.353-.901-6.566-2.003-9.36-1.736-4.405-1.85-5.693-.852-9.653.98-3.89.899-4.996-.543-7.436-1.277-2.162-1.436-3.345-.649-4.817 1.447-2.702-.138-33.394-1.83-35.445-.517-.628-.97-6.767-1.007-13.642-.066-12.55-1.775-35.197-2.868-38-1.77-4.542-.926-10.412 2.375-16.525 3.524-6.524 4.194-10.258 2.197-12.255-.906-.906-.86-1.778.202-3.762 1.158-2.163 1.165-2.929.044-4.724-.959-1.535-1.016-2.25-.202-2.522.625-.208 1.143-2.029 1.15-4.045.009-2.017.666-4.792 1.461-6.167a137.219 137.219 0 002.728-5c.706-1.375 2.073-3.372 3.04-4.439.966-1.066 1.757-2.667 1.757-3.558 0-.892.66-2.494 1.468-3.562.808-1.067 1.483-3.779 1.5-6.024.026-3.26.752-4.873 3.604-8L6.145 369l-2.573 3.594C1.79 375.087 1 377.476 1 380.386c0 2.815-.659 4.905-2 6.344-1.1 1.181-2 3.357-2 4.836 0 1.48-.646 3.225-1.435 3.88-2.87 2.382-5.186 8.608-5.414 14.554-.223 5.816-.115 6.098 3.527 9.182l3.757 3.183-1.612 3.38c-1.192 2.5-1.34 3.866-.57 5.242.573 1.024 1.005 3.133.961 4.687-.044 1.554.34 2.826.853 2.826.513 0 .933.606.933 1.346 0 .74-1.8-.315-4-2.346s-4-4.312-4-5.069c0-.916-.74-.636-2.211.836-1.731 1.73-1.948 2.474-1 3.422 1.876 1.876 1.465 3.403-1.792 6.66-2.565 2.565-2.862 3.375-2.036 5.549.532 1.4 1.245 10.995 1.584 21.323.339 10.329 1.19 23.504 1.89 29.279.7 5.775 1.333 11.625 1.406 13 .381 7.159 2.017 21.754 2.634 23.5 1.265 3.58 2.918 6.947 4.739 9.654 2.256 3.354 2.272 6.71.046 9.873-1.403 1.993-1.724 4.51-1.653 12.973.048 5.775.594 12.975 1.214 16 .619 3.025 1.412 7.192 1.763 9.26.35 2.067 1.037 4.006 1.526 4.308.49.303.89 2.095.89 3.983 0 2.349.631 3.826 2 4.681 1.1.687 2 1.72 2 2.297 0 .577.915 2.83 2.034 5.01 1.14 2.222 1.797 4.926 1.494 6.158-.321 1.309.02 2.522.845 3 .762.442 3.244 6.536 5.516 13.542 2.273 7.007 5.062 15.1 6.2 17.986 1.504 3.818 1.896 6.388 1.438 9.442-.654 4.36.85 8.333 3.155 8.333 1.591 0 2.6 1.734 1.781 3.06-.418.676-1.1.45-1.886-.624-1.094-1.496-1.433-1.26-3.032 2.11-1.734 3.654-1.734 3.843.001 5.111.99.725 3.298 1.598 5.126 1.941 1.98.372 3.831 1.54 4.577 2.887.688 1.245 2.066 3.7 3.062 5.457 1.357 2.393 1.584 3.866.906 5.876L33.313 701l-.779-2.5c-1.239-3.977-2.568-5.217-4.167-3.89-2.239 1.859-1.564 5.327 1.633 8.39 1.955 1.873 3.04 3.94 3.116 5.937.064 1.685.322 2.276.573 1.313.534-2.041.795-2.096 3.377-.715 2.355 1.26 2.522 5.138.363 8.433-1.886 2.878-.612 6.132 2.926 7.477 3.253 1.237 10.051 12.709 9.936 16.767-.061 2.169.375 3.288 1.282 3.288 2.023 0 4.696 5.793 3.983 8.633-.548 2.183-.36 2.356 1.93 1.781 2.346-.589 2.77-.124 5.604 6.123 1.686 3.719 3.705 7.4 4.487 8.183.783.783 1.423 1.855 1.423 2.383 0 1.538-3.028 2.269-4.267 1.03-1.782-1.782-2.233-1.368-2.233 2.05 0 3.182 2.7 5.915 15.46 15.651 4.285 3.27 9.04 10.507 9.04 13.76 0 1.504.762 4.46 1.692 6.57 1.455 3.296 2.143 3.836 4.893 3.836 3.217 0 4.415 1.329 4.415 4.898 0 .954 1.462 3.116 3.25 4.805 1.788 1.688 4.375 4.498 5.75 6.242 1.375 1.745 4.188 4.984 6.25 7.197 2.063 2.214 3.75 4.654 3.75 5.423 0 .768 1.128 1.68 2.506 2.026 1.978.496 2.637 1.451 3.13 4.533.529 3.308.85 3.717 2.107 2.675 1.222-1.014 1.99-.663 4.37 2 1.588 1.778 2.887 4.125 2.887 5.217 0 1.091.644 1.984 1.43 1.984.787 0 1.575.994 1.75 2.209.201 1.39 1.247 2.432 2.82 2.81 2.113.51 2.451 1.096 2.186 3.792-.256 2.603.045 3.189 1.637 3.189 1.074 0 3.015 1.346 4.314 2.99 1.3 1.646 3.072 2.996 3.939 3 1.831.012 4.849 3.135 7.495 7.76 1.023 1.787 2.213 3.25 2.645 3.25.431 0 .784.606.784 1.348 0 .741 2.813 3.877 6.25 6.969 3.438 3.091 7.717 7.031 9.51 8.755 1.804 1.736 3.892 2.892 4.676 2.59.85-.325 2.469.835 4.042 2.897 1.92 2.518 3.397 3.441 5.506 3.441 1.994 0 3.075.61 3.51 1.982.346 1.09 2.587 3.388 4.979 5.106s4.572 3.976 4.844 5.018c.653 2.496 3.378 2.43 4.182-.102.772-2.432-1.357-8.812-3.749-11.233-.962-.974-1.75-2.261-1.75-2.86 0-.6-1.012-1.911-2.25-2.915-1.237-1.003-1.967-2.108-1.621-2.455.345-.348 2.525 1.301 4.844 3.664 2.87 2.923 5.064 4.295 6.871 4.295 2.154 0 2.716.52 2.972 2.75.174 1.512.892 2.75 1.595 2.75.704 0 2.02.818 2.925 1.819 1.552 1.714 1.446 1.915-1.845 3.484-1.92.915-3.491 2.304-3.491 3.087 0 1.543 8.507 7.61 10.671 7.61 1.958 0 1.617-3.663-.421-4.53-1.502-.64-1.397-.838.737-1.4 2.011-.529 2.777-.141 4 2.023 2.528 4.474 7.072 9.246 8.936 9.383.968.07 3.017 1.118 4.553 2.327 1.537 1.208 3.633 2.197 4.659 2.197 1.026 0 1.865.44 1.865.977 0 .537 1.064 1.674 2.365 2.526 1.795 1.176 2.998 1.31 4.991.552 3.581-1.362 5.05-.587 6.502 3.43 1.215 3.359 5.588 6.51 9.046 6.519.878 0 3.07.902 4.87 2 1.801 1.098 4.373 1.996 5.715 1.996 4.129 0 11.887 3.054 14.356 5.65 1.82 1.915 2.974 2.329 5.155 1.85 1.58-.347 3.096-.154 3.464.441 1.371 2.22 4.34 1.06 5.451-2.128 1.194-3.425.716-4.415-2.404-4.977-2.22-.4-2.974-2.612-1.613-4.728.74-1.15 1.412-1.024 3.861.72 1.632 1.162 3.278 1.802 3.658 1.421.976-.976 2.55 1.813 2.568 4.55.042 6.4 6.841 12.148 11.731 9.92 1.869-.85 3.096-.631 6.193 1.11 6.814 3.83 13.236 2.197 14.408-3.663.68-3.404 3.972-4.734 6.2-2.506 1.783 1.783 1.79 1.875.325 4.221-.637 1.02-.868 2.609-.514 3.532.846 2.204 6.678 4.587 11.227 4.587 3.104 0 3.78-.427 4.754-3.007l1.134-3.006 1.53 3.24c1.597 3.381 1.453 3.323 14.527 5.826 2.75.527 8.05 1.147 11.778 1.379 3.727.232 8.115.715 9.75 1.074 2.794.614 2.972.468 2.972-2.427 0-3.423 2.611-4.368 3.676-1.329 1.546 4.41 4.198 5.204 17.438 5.228 6.937.012 15.037.5 18 1.082 2.962.583 10.786 1.207 17.386 1.386 9.427.255 12.518 0 14.416-1.192 2.28-1.433 2.528-1.365 4.407 1.215l1.991 2.733 12.05-.724c10.494-.63 12.54-1.048 15.843-3.234 3.905-2.584 4.248-3.392 3.851-9.072-.19-2.725.1-3.28 1.605-3.065 1.01.144 3.318-.086 5.128-.511 2.013-.473 3.789-.36 4.574.292.705.585 1.7.69 2.209.233 1.703-1.53 11.26-4.122 12.89-3.496 1.712.657 4.546 5.406 4.52 7.575-.007.715-.43 1.957-.938 2.76-.8 1.265-1.167 1.24-2.737-.18-.997-.903-3.044-2.109-4.55-2.681-2.32-.883-3.053-.703-4.825 1.18L536.845 991l-2.254-2.805c-2.09-2.6-2.468-2.714-5.173-1.548-1.605.692-3.052 1.339-3.217 1.437-.164.1.001 1.374.368 2.834.943 3.757 6.392 6.003 10.011 4.125 2.211-1.147 2.994-1.125 5.259.15 2.143 1.207 3.242 1.272 5.645.338 1.642-.638 5.942-1.289 9.557-1.446 4.283-.186 7.546-.924 9.365-2.116 2.503-1.64 2.727-2.234 2.166-5.741-.736-4.607 1.091-4.797 3.263-.34 1.9 3.897 3.29 4.067 8.005.98 3.818-2.5 4.16-3.078 4.16-7.046 0-3.843-.255-4.322-2.3-4.322-1.265 0-2.82.52-3.458 1.158-.876.876-1.531.847-2.7-.123-1.773-1.472-2.014-3.625-.509-4.556 1.118-.69 6.941-1.68 10.967-1.865 2.68-.122 2.89 1.03 1.453 8.011l-.643 3.125h6.667c6.098 0 6.745-.203 7.57-2.375.567-1.49 1.71-2.375 3.068-2.375 1.19 0 2.741-.787 3.446-1.75.987-1.347 2.738-1.75 7.61-1.75h6.329l.297-5.667c.347-6.613 1.925-8.633 5.186-6.64 1.856 1.134 2.329 1.05 3.578-.634.791-1.068 1.439-2.665 1.439-3.55 0-.929 1.474-2.14 3.494-2.87 4.025-1.456 6.242-.73 4.432 1.45-1.372 1.653-.596 1.75 3.83.48 2.566-.735 3.244-.634 3.244.482 0 1.616 4.314 2.991 6.039 1.925.759-.47.928-2.211.494-5.102-.536-3.58-.348-4.508 1.022-5.033 2.18-.837 7.019.957 6.695 2.481-.718 3.383 9.039-1.951 11.643-6.365 1.925-3.262 2.491-3.58 5.869-3.284 3.178.278 3.784.01 4.042-1.805.167-1.173 1.067-2.866 2-3.764 3.156-3.038 11.665-8.552 17.767-11.514 3.339-1.621 8.596-5.004 11.682-7.519 3.087-2.514 6.082-4.571 6.657-4.571.574 0 1.781-1.125 2.682-2.5.9-1.375 2.08-2.5 2.622-2.5.54 0 2.219-1.237 3.728-2.75 1.51-1.512 4.859-4.034 7.442-5.604 5.143-3.126 7.71-5.263 16.7-13.896 3.293-3.162 6.614-5.75 7.38-5.75 2.34 0 4.308-2.74 3.816-5.313-.483-2.528 2.973-6.393 20.298-22.703 3.807-3.584 8.947-8.951 11.422-11.926 9.286-11.161 17.194-21.665 18.698-24.834 1.68-3.538 7.36-9.65 10.563-11.363 1.835-.983 1.95-.79 1.553 2.607-.333 2.85-.007 3.893 1.457 4.677 2.533 1.356 4.729.374 4.729-2.114 0-1.117.45-2.031 1-2.031s1-.862 1-1.917c0-1.054.518-2.089 1.15-2.3.633-.21.945-.999.694-1.751-.273-.82-1.134.06-2.145 2.19-2.61 5.499-5.73 5.973-5.667.861.037-3 1.394-4.923 5.183-7.347 3.484-2.228 3.762-2.191 3.901.514.105 2.039.162 2.062.608.25.27-1.1.924-2.534 1.453-3.186.62-.766.583-1.895-.108-3.184-.588-1.1-1.069-2.253-1.069-2.564 0-.983 3.854-.612 4.5.434 1.079 1.746 2.517 1.085 3.55-1.63.55-1.447 1.889-3.88 2.975-5.405 2.355-3.308 2.531-6.258.475-7.965-1.771-1.47-1.86-3.165-.433-8.302 1.067-3.841 6.165-8.178 8.557-7.28.618.232 1.698-.651 2.4-1.964 1.03-1.922 1.032-2.681.015-3.907-1.804-2.173-.535-4.547 2.43-4.547 1.392 0 2.531-.406 2.531-.902s1.35-1.373 3-1.948c2.588-.902 3-1.543 3-4.664 0-3.917-1.493-7.514-3.646-8.786-.745-.44-1.354-1.677-1.354-2.75 0-1.9 1.757-2.497 6.25-2.12.963.08 1.75-.523 1.75-1.342 0-.818-.45-1.488-1-1.488-1.59 0-1.159-5.167.594-7.104.877-.969 2.25-1.51 3.05-1.202 2.296.88 6.136-3.505 7.956-9.088.915-2.808 2.026-5.567 2.468-6.13 1.937-2.473 4.002-10.916 3.73-15.25-.283-4.493-.163-4.742 2.441-5.041 1.507-.174 3.42-1.286 4.25-2.473 1.075-1.535 1.511-1.718 1.511-.635 0 2.217-2.058 3.923-4.731 3.923-2.652 0-4.099 2.57-2.402 4.267 1.4 1.4 1.492 6.393.133 7.233-.55.34-1 1.76-1 3.155 0 1.395-.803 3.73-1.785 5.19-.982 1.46-2.653 5.355-3.712 8.655-1.06 3.3-2.201 6.225-2.538 6.5-.336.275-.92 1.338-1.3 2.362-.517 1.399-1.425 1.753-3.652 1.427-3.36-.493-4.167.69-2.703 3.957.786 1.752.608 2.687-.806 4.25-.998 1.102-2.435 2.004-3.194 2.004-.99 0-1.126.494-.481 1.75 1.423 2.769 2.1 10.304 1.151 12.801-.476 1.253-1.76 2.562-2.854 2.909-1.367.434-5.36 7.381-12.783 22.238-5.96 11.931-11.493 21.79-12.355 22.015-1.546.405-4.912 8.321-5.07 11.921-.044 1.026-1.282 4.116-2.75 6.866-2.501 4.688-2.937 5.02-6.972 5.31-3.984.287-4.616.748-8.5 6.196-2.308 3.238-4.695 5.91-5.304 5.94-.61.03-2.752 2.529-4.76 5.554-2.01 3.025-4.353 5.5-5.21 5.5-1.078 0-1.37.588-.95 1.911.833 2.627-2.02 6.978-8.247 12.577-2.874 2.584-5.225 5.249-5.225 5.923 0 2.208-6.68 8.904-8.043 8.062-3.04-1.878-6.397-1.31-9.126 1.546-1.518 1.589-3.9 3.636-5.295 4.55-1.43.936-2.536 2.611-2.536 3.838 0 2.603-6.884 9.39-12.324 12.152-2.104 1.068-6.604 4.305-10 7.194-3.397 2.889-8.088 6.191-10.426 7.339-3.442 1.69-4.25 2.602-4.25 4.797 0 4.053-3.92 7.296-4.063 3.361-.049-1.34-.275-1.224-.968.5-.498 1.238-1.594 2.25-2.436 2.25-.842 0-3.416 1.83-5.72 4.065-2.303 2.236-5.791 4.731-7.75 5.546-3.93 1.635-11.363 6.432-11.913 7.69-.193.44-2.127 1.922-4.298 3.292-2.171 1.371-4.218 3.197-4.549 4.059-1.154 3.007-4.833 6.069-8.803 7.326-4.542 1.438-4.662 1.5-10.47 5.36-2.348 1.56-5.452 3.04-6.9 3.29-4.097.702-6.098 1.432-5.991 2.183.425 2.985-3.072 5.189-8.232 5.189-2.938 0-7.102 3.086-8.066 5.978-.299.895-1.865 1.31-4.552 1.204-4.846-.19-11.289 2.249-11.289 4.272 0 2.098-1.814 2.891-8.382 3.666-3.237.381-6.223 1.242-6.638 1.912-.414.67-1.916 1.218-3.339 1.218-1.65 0-2.8.678-3.18 1.875-.461 1.451-1.57 1.875-4.903 1.875-5.373 0-10.64 1.825-17.072 5.915-2.829 1.8-6.068 3.071-7.486 2.94-1.375-.126-3.868.493-5.541 1.375-1.673.883-5.948 2.119-9.5 2.746-3.552.627-8.43 1.578-10.838 2.113-3.526.783-4.857.659-6.834-.637-2.238-1.466-2.61-1.469-4.2-.03-2.194 1.985-4.48 2.014-6.087.078-.685-.825-2.063-1.5-3.063-1.5s-2.116-.48-2.48-1.068c-.906-1.467-4.32 2.162-3.672 3.905.32.861-.177 1.25-1.395 1.09-2.028-.263-5.356.47-12.175 2.683-2.357.765-6.49 1.39-9.185 1.39-2.695 0-6.167.492-7.715 1.092-8.285 3.214-73.24 10.125-129.815 13.811-21.32 1.39-145.839 1.032-172-.494zm156-4.41c21.224-1.492 35.055-2.801 52-4.92 27.568-3.447 42.898-5.079 47.7-5.079 2.55 0 5.386-.288 6.302-.64 4.108-1.575-2.069-2.33-19.193-2.345-11.032-.01-18.434-.409-18.809-1.015-.344-.557-4.986-1-10.486-1-5.818 0-14.03-.82-20.013-2-5.58-1.1-12.7-2.262-15.823-2.583-3.123-.32-7.703-1.196-10.178-1.944-11.426-3.455-16.126-4.5-24.5-5.448-11.525-1.305-16.989-2.32-31.626-5.877-1.995-.485-5.82-2.392-8.5-4.238-3.037-2.091-6.758-3.639-9.874-4.106-10.586-1.589-12.394-2.055-14.169-3.654-2.26-2.036-16.729-9.15-18.61-9.15-.755 0-2.463-1.167-3.797-2.592-2.29-2.45-16.285-9.696-23.924-12.389-1.925-.678-5.572-2.303-8.104-3.61-13.483-6.957-56.33-6.075-122.896 2.53-47.267 6.11-94.161 17.842-103.25 25.832-2.267 1.993-2.243 6.473.046 8.544 7.356 6.657 41.502 16.149 81.204 22.571 37.222 6.022 57.715 8.04 132 12.993 17.24 1.15 128.548 1.242 144.5.12zm120.75-12.661c-.688-.278-1.813-.278-2.5 0-.688.277-.125.504 1.25.504s1.938-.227 1.25-.504zm14.019.01c-.677-.274-2.027-.29-3-.037-.973.253-.419.477 1.231.498 1.65.02 2.446-.187 1.769-.461zm-24.54-1.949c-.332-.332-1.195-.367-1.916-.079-.798.32-.561.557.604.605 1.054.043 1.644-.193 1.312-.526zM391 995.5c0-.55-1.773-1-3.941-1s-4.22-.45-4.559-1c-.34-.55-2.054-.953-3.809-.895l-3.191.105 3.668 1.145c2.018.63 4.005 1.483 4.417 1.895 1.116 1.119 7.415.906 7.415-.25zm-16-1.542c0-1.615-3.892-4.436-5.35-3.878-2.264.87-2.068 1.913.6 3.2 2.48 1.196 4.75 1.52 4.75.678zm-11.55-2.337c-.522-.484-2.75-1.448-4.95-2.142-2.2-.695-4.888-1.874-5.973-2.621-2.162-1.489-7.527-1.858-7.527-.518 0 1.286 4.747 3.16 8.008 3.16 1.602 0 3.493.658 4.203 1.462.709.804 2.617 1.479 4.239 1.5 1.749.023 2.563-.32 2-.841zM334.5 984.5c-.34-.55-2.166-1-4.059-1-1.893 0-3.441.45-3.441 1s1.827 1 4.059 1c2.451 0 3.814-.396 3.441-1zm-16.5-1.977c0-2.162-4.952-4.255-8.496-3.59-4.157.78-4.678 2.56-.754 2.582 1.512.01 3.425.452 4.25.985 1.95 1.26 5 1.274 5 .023zm322-19.582c0-.793-.675-1.441-1.5-1.441-1.682 0-1.75.184-.895 2.413.702 1.83 2.395 1.144 2.395-.972zm-430-28.063c0-2.228-.228-2.434-1.512-1.368-1.15.955-1.241 1.583-.378 2.623 1.597 1.924 1.89 1.73 1.89-1.255zM792 856.4c0-2.282-2.26-3.976-3.927-2.945-2.105 1.3-4.19 8.2-2.935 9.712.806.97 1.708.53 3.953-1.928 1.6-1.752 2.909-3.93 2.909-4.84zm30.683-42.087c-.32-.798-.556-.561-.604.604-.043 1.054.193 1.645.525 1.312.332-.332.368-1.195.08-1.916zM835 811.5c0-.55-.198-1-.441-1s-.72.45-1.059 1c-.34.55-.141 1 .441 1s1.059-.45 1.059-1zm22.298-47.033c.283-1.082.197-1.967-.192-1.967-1.366 0-3.106 2.421-3.106 4.322 0 1.53.285 1.687 1.392.768.765-.636 1.623-2.04 1.906-3.123zM9.418 653.893c.87-.334 1.582-1.265 1.582-2.07 0-2.1-4.397-1.254-4.813.927-.35 1.832.579 2.16 3.231 1.143zM489.25 991.725c-2.782-.45-2.867-2.275-.25-5.364 1.961-2.317 2.027-2.325 3.5-.42 3.017 3.903 1.526 6.557-3.25 5.784zM461 988.941c0-.858.45-1.28 1-.941.55.34 1 1.042 1 1.559 0 .518-.45.941-1 .941s-1-.702-1-1.559zm-160.188-29.124c.722-.289 1.585-.253 1.917.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm-47.733-15.9c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zM901 671.024c0-.262.898-1.949 1.996-3.75 2.35-3.852 2.677-2.977.478 1.276-1.372 2.653-2.474 3.755-2.474 2.474zm4.015-13.368c-.008-.739.885-1.579 1.985-1.866 1.728-.452 2-1.364 2-6.707 0-3.4-.506-6.69-1.125-7.308-1.238-1.238-.352-8.275 1.042-8.275.455 0 1.115 1.8 1.467 4 .623 3.897 3.2 5.65 4.041 2.75.2-.688 1.36-4.568 2.578-8.624 2.267-7.546 1.977-9.065-1.74-9.11-.68-.009-1.902-1.61-2.716-3.557-1.62-3.878-1.042-9.095 1.933-17.446 3.577-10.041 6.883-23.92 7.267-30.513.225-3.85.864-7.45 1.421-8 1.492-1.473-.106 16.09-1.91 21-.948 2.58-1.435 7.402-1.37 13.576.078 7.557-.308 10.418-1.83 13.568-3.401 7.04-3.51 8.829-.62 10.146 3.297 1.502 3.174 4.662-.535 13.71-.45 1.1-.951 3.12-1.111 4.49-.183 1.563-1.316 2.98-3.042 3.805-2.505 1.197-2.75 1.801-2.75 6.791 0 4.303-.375 5.615-1.75 6.122-.963.356-2.08 1.129-2.485 1.72-.481.702-.74.609-.75-.272zm3.76-27.33c-.667-2.002 1.43-7.928 2.65-7.49 1.402.502.944 4.3-.822 6.82-.994 1.42-1.514 1.61-1.828.67zM374.5 620.924c-5.717-1.06-11.304-1.31-19.58-.876-10.433.547-12.514.353-21-1.955-7.228-1.966-11.534-2.528-18.505-2.417-4.997.08-9.523-.125-10.057-.454-.533-.33-6.691-1.542-13.683-2.693s-13.9-2.544-15.35-3.095c-1.45-.552-8.979-.879-16.73-.727-13.573.265-14.428.16-23.095-2.864-4.95-1.727-12.964-4.359-17.809-5.848-4.844-1.49-10.92-4.156-13.5-5.925-14.906-10.218-21.133-14.837-24.822-18.412-5.022-4.867-11.202-8.084-22.166-11.54-4.563-1.438-9.738-3.354-11.5-4.258-6.542-3.356-30.363-20.013-39.595-27.686-10.126-8.417-14.091-10.545-23.436-12.582-4.742-1.034-7.071-2.342-12.5-7.022C63.24 505.732 57 498.982 57 497.238c0-.691-.9-1.819-2-2.506-1.368-.855-2-2.332-2-4.678 0-2.92-.67-3.91-4.5-6.661-4.266-3.064-4.5-3.483-4.5-8.063 0-2.656-.338-4.832-.75-4.835-.412-.003-2.501-1.613-4.641-3.578-2.14-1.966-5.014-4-6.385-4.522-2.351-.894-2.457-1.253-1.863-6.305.498-4.241.188-6.372-1.49-10.224-1.164-2.676-2.698-5.541-3.409-6.366-.858-.998-1.437-5.927-1.729-14.72-.438-13.212-1.26-16.28-4.364-16.28-1.136 0-1.16-.361-.137-2 .687-1.1 2.093-2 3.124-2 2.044 0 8.644-6.612 8.644-8.66 0-.698.84-1.72 1.868-2.27 1.027-.55 2.147-2.252 2.488-3.784 1.003-4.509 3.286-6.604 7.866-7.218 3.949-.53 4.408-.927 6.766-5.86 1.392-2.911 3.024-5.611 3.626-6 .602-.39 1.723-1.902 2.49-3.361.768-1.46 5.093-6.522 9.612-11.25 6.746-7.058 8.754-8.597 11.215-8.597 2.086 0 3.365-.685 4.203-2.25.662-1.238 1.1-2.42.972-2.626-.26-.421 1.265-1.36 8.817-5.422 3.142-1.69 6.016-4.18 7.26-6.287 1.132-1.918 3.466-4.2 5.187-5.072 4.506-2.28 6.63-4.38 6.63-6.553 0-1.045.982-4.013 2.183-6.595 2.196-4.723 2.212-4.956 1.534-22.24-.172-4.393.361-6.658 2.57-10.913 3.404-6.558 2.299-8.273-2.285-3.544-1.867 1.926-3.73 3.502-4.138 3.502-.41 0 1.635-2.25 4.542-5 2.908-2.75 5.581-5 5.94-5 .36 0 1.591-.938 2.737-2.083 1.146-1.146 2.353-1.814 2.682-1.485.33.329-.833 2.075-2.583 3.88-1.75 1.806-3.182 3.667-3.182 4.136 0 .469-1.238 3.373-2.75 6.452-2.242 4.566-2.678 6.615-2.358 11.1.857 12.023.563 17.528-1.122 21-1.596 3.287-3.24 8.904-4.469 15.275-.427 2.214-.812 2.545-1.905 1.638-3.408-2.828-5.89 1.778-2.8 5.194 1.492 1.648 1.41 1.76-1.25 1.686-4.505-.125-15.188 5.73-15.943 8.739-.843 3.359-3.164 4.444-8.092 3.783-3.36-.45-4.408-.163-5.945 1.634-1.026 1.2-4.743 5-8.26 8.445-3.517 3.445-7.117 7.625-8 9.29-6.88 12.963-10.48 17.154-13.684 15.924-2.563-.983-4.383.532-5.464 4.548-.585 2.172-1.844 4.73-2.797 5.683-.954.954-2.795 3.45-4.092 5.55-1.947 3.15-2.115 3.974-.963 4.733 1.128.744.937 1.302-1.007 2.931-2.045 1.714-2.233 2.342-1.268 4.23 1.754 3.432 2.925 10.02 2.407 13.55-.258 1.758.088 4.539.768 6.18.987 2.384.98 3.604-.029 6.043-.95 2.294-.98 3.34-.121 4.2.629.629 1.144 1.97 1.144 2.98 0 1.009.716 2.927 1.591 4.263 1.433 2.186 1.44 2.732.072 5.475l-1.52 3.047 6.92 7.24c5.881 6.153 6.92 7.77 6.928 10.777.007 2.965.738 4.148 4.509 7.3 3.617 3.024 4.5 4.391 4.5 6.971 0 2.127.675 3.631 2 4.459 1.1.687 2 2.033 2 2.991 0 3.293 19.498 20.241 23.286 20.241 6.193 0 16.86 6.12 29.714 17.05 5.369 4.565 18.34 13.688 30.115 21.182 3.225 2.052 9.581 4.875 14.125 6.272 11.679 3.592 20.15 8.044 26.648 14.006 5.597 5.136 13.72 11.128 23.296 17.188 2.78 1.76 8.939 4.401 13.685 5.871a918.559 918.559 0 0117.631 5.702c9.475 3.19 14.29 3.613 26 2.285 5.468-.62 8.204-.424 12.5.893 3.025.927 7.975 2.075 11 2.552 3.025.476 9.325 1.563 14 2.414 4.675.852 12.363 1.556 17.085 1.567 6.032.012 10.492.65 15 2.143 5.416 1.793 8.615 2.106 20.546 2.01 7.771-.062 18.18.49 23.13 1.225 6.085.905 10.9 1.06 14.87.48 3.228-.472 12.626-.762 20.885-.645 8.258.117 15.616-.158 16.349-.612.734-.453 11.526-.959 23.984-1.123 27.209-.36 54.861-1.864 61.457-3.343 3.172-.711 7.74-.78 13.441-.202 9.198.932 10.438.753 14.073-2.035 1.277-.978 4.427-2.048 7-2.377 5.277-.676 17.76-3.132 23.463-4.618 4.694-1.222 36.961-.055 41.792 1.512 2.712.88 4.786.767 9.968-.545 3.599-.911 11.699-1.968 18-2.348 6.344-.382 14.293-1.541 17.812-2.597 3.496-1.049 8.059-1.907 10.14-1.907 2.083 0 7.998-1.08 13.146-2.401 5.147-1.32 11.834-2.721 14.859-3.112 3.025-.391 6.088-1.186 6.806-1.768.718-.58 4.993-1.26 9.5-1.509 4.507-.249 8.822-.96 9.589-1.581.767-.621 3.461-2.082 5.988-3.246 4.069-1.876 4.84-1.955 6.76-.697 1.864 1.22 2.636 1.224 5.512.018 1.84-.77 4.695-2.532 6.345-3.915 1.65-1.383 6.768-3.696 11.373-5.14 4.605-1.443 11.13-4.346 14.5-6.45 3.37-2.103 7.564-4.403 9.32-5.11 1.978-.796 3.31-2.104 3.5-3.437.215-1.508 1.13-2.247 3.057-2.468 2.94-.339 3.734-2.592 1.25-3.546-.825-.316-1.5-1.038-1.5-1.604 0-1.652 6.96-8.887 9.248-9.613 1.151-.365 4.395-2.137 7.208-3.936 3.936-2.518 5.754-4.577 7.887-8.932 2.972-6.07 4.813-7.498 7.157-5.553 1.213 1.007 2.119.581 5.093-2.393 2.613-2.613 3.412-4.102 2.877-5.362-1.254-2.956-1.066-5.765.366-5.466 2.102.438 7.965-3.633 9.866-6.852.951-1.61 2.076-2.927 2.5-2.927.423 0 1.953-1.788 3.399-3.973 1.928-2.914 2.454-4.674 1.97-6.598-.798-3.182 3.458-9.429 6.423-9.429 1.96 0 5.006-3.483 5.006-5.723 0-.702-.675-1.277-1.5-1.277-1 0-1.5-1-1.5-3 0-2.816.765-3.455 3.698-3.087.659.083 1.694-.776 2.3-1.91.606-1.132 1.439-1.851 1.85-1.597.411.254 1.228.154 1.815-.222 1.33-.851 5.335-8.646 5.342-10.394.008-2.17 5.89-7.767 7.51-7.146.817.314 1.485.072 1.485-.537s-.679-1.107-1.508-1.107c-2.616 0 .576-3.867 3.47-4.204 2.801-.327 4.023-3.905 2.117-6.201-.78-.94-.636-2.175.527-4.507 1.125-2.255 1.41-4.49.96-7.496-.493-3.29-.268-4.595.972-5.624 1.151-.955 1.443-2.258 1.015-4.538-.44-2.343-.193-3.354.923-3.783 1.957-.75 1.971-3.261.024-4.009-.825-.316-1.5-1.647-1.5-2.957 0-3.197-1.89-8.584-4.153-11.835-1.016-1.46-1.847-3.207-1.847-3.883 0-1.459-3.523-4.677-5.97-5.453-.952-.303-3.209-3.579-5.015-7.28-2.522-5.17-3.614-9.278-4.714-17.73-.787-6.05-1.872-13.055-2.411-15.566-.661-3.08-.64-5.46.065-7.315.575-1.512 1.045-4.483 1.045-6.602 0-5.3.845-7.037 3.357-6.901 1.64.089 1.74.222.426.567-3.032.796-3.88 12.43-2.03 27.817.804 6.674 1.567 8.887 4.605 13.35 2.003 2.943 3.642 5.98 3.642 6.75 0 1.7 1.194 1.806 2.755.246 1.665-1.666 5.968 3.288 10.098 11.626 1.968 3.974 4.136 6.974 5.25 7.265 2.243.587 2.465 2.972.48 5.184-1.911 2.132-.213 11.73 2.614 14.768l2.037 2.19-2.617 2.425c-2.14 1.984-2.614 3.315-2.602 7.31.008 2.688.428 5.537.931 6.333.651 1.029.083 2.395-1.966 4.729-1.585 1.804-3.19 4.978-3.565 7.053-.913 5.03-5 11.93-7.446 12.569-1.28.334-1.969 1.369-1.969 2.953 0 1.342-.9 3.254-2 4.249-1.1.995-2.007 2.528-2.015 3.405-.037 3.881-2.968 9.384-7.619 14.301-2.766 2.926-5.343 6.567-5.726 8.092-.413 1.646-1.7 3.155-3.168 3.713-1.36.517-2.472 1.569-2.472 2.338 0 .77-1.192 3.533-2.65 6.14-1.457 2.608-2.938 6.15-3.29 7.873-.509 2.486-1.251 3.237-3.6 3.64-2.478.424-3.01 1.034-3.273 3.75-.22 2.275-1.292 3.99-3.595 5.745-1.804 1.377-3.72 2.503-4.256 2.503-1.87 0-9.406 7.23-11.217 10.76-1.744 3.399-5.823 6.493-12.869 9.76-1.787.829-3.25 2.118-3.25 2.865 0 .746-1.49 2.379-3.313 3.627-1.822 1.248-4.059 3.444-4.97 4.879L796.1 555.5c-.526.825-1.2 2.287-1.497 3.25-.32 1.034-1.529 1.75-2.956 1.75-1.549 0-2.597.696-2.922 1.94-.316 1.21-3.008 3.075-7.138 4.947-3.646 1.654-7.874 3.893-9.395 4.976-1.521 1.083-6.618 3.288-11.326 4.9-4.708 1.611-9.505 3.875-10.66 5.03-3.4 3.4-7.27 4.89-14.568 5.61-3.852.379-7.5 1.316-8.321 2.136-1.019 1.019-3.708 1.461-8.885 1.461-4.714 0-9.526.71-13.179 1.944-3.165 1.07-8.004 2.237-10.754 2.595-2.75.358-7.25 1.308-10 2.111-2.75.803-8.6 1.857-13 2.341-4.4.485-10.819 1.793-14.265 2.908-3.445 1.115-6.897 1.784-7.67 1.487-1.874-.719-19.604 1.357-26.77 3.135-4.964 1.23-6.16 1.224-9.218-.053-2.634-1.1-7.888-1.468-20.994-1.468-14.7 0-19.438.398-29.78 2.5-6.765 1.375-13.425 2.502-14.801 2.504-1.376.002-4.077.994-6.002 2.204-3.11 1.956-5.006 2.222-17 2.389-7.425.103-20.925.703-30 1.332-17.517 1.215-56.937 2.884-81 3.43-7.975.182-18.325.604-23 .94-5.704.409-11.132.121-16.5-.875zm-202.25-8.132c-1.73-.635-1.576-3.292.191-3.292 1.819 0 3.064 1.92 1.922 2.962-.475.433-1.426.582-2.113.33zM809 584.665c0-.459 1.35-2.037 3-3.507 3.456-3.08 3.961-2.15.927 1.707-2.032 2.584-3.927 3.453-3.927 1.8zm7.079-7.748c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm15.287-10.498c.73-3.65 4.634-9.158 4.634-6.538 0 3.335-2.527 9.619-3.868 9.619-1.01 0-1.216-.83-.766-3.081zm93.024-7.919c.356-1.925.921-5.647 1.257-8.27.336-2.625 1.003-5.014 1.482-5.31.48-.296.871-2.057.871-3.914 0-1.857.514-4.643 1.143-6.19.629-1.55 1.29-8.117 1.47-14.596.179-6.478.807-13.566 1.395-15.75.763-2.835.757-5.127-.021-8.018-.946-3.512-.819-4.488.957-7.362 1.738-2.811 1.913-4.033 1.157-8.077-.49-2.62-1.322-5.045-1.85-5.389-.529-.343-1.47-2.199-2.093-4.124-1.63-5.039-.129-13.057 3.179-16.988 3.102-3.688 3.24-4.742 1.036-7.89-1.235-1.763-2.268-2.193-4.297-1.787-2.925.585-4.366-.04-5.393-2.335-.368-.825-1.22-2.267-1.893-3.205-1.012-1.41-.84-2.112.993-4.065 1.22-1.297 2.217-3.252 2.217-4.344 0-1.093.528-2.514 1.173-3.159.897-.897.897-1.778 0-3.747-.645-1.416-1.173-3.246-1.173-4.068 0-.82-.976-2.813-2.169-4.426-1.996-2.7-2.066-3.274-.878-7.21.71-2.352 1.425-4.726 1.59-5.276.164-.55.332.35.373 2 .04 1.65.712 5.025 1.49 7.5.78 2.475 1.907 6.644 2.506 9.264.744 3.258 2.115 5.682 4.338 7.668 3.069 2.742 3.182 3.083 2.036 6.12-.796 2.11-.89 3.82-.27 4.977.518.968 1.24 4.29 1.603 7.383.52 4.426.32 5.998-.941 7.392-.881.973-2.276 3.384-3.101 5.358-1.398 3.346-1.332 4.118.98 11.463 2.197 6.982 2.41 9.009 1.881 17.875-.328 5.5-1.017 11.375-1.53 13.056-.514 1.68-1.136 7.755-1.381 13.5-.246 5.744-.878 12.919-1.405 15.944-1.546 8.868-6.087 28.302-6.759 28.926-.34.316-.328-1.001.028-2.926zm9.61-126c0-1.111-.667-2-1.5-2s-1.5.889-1.5 2 .667 2 1.5 2 1.5-.889 1.5-2zM69.75 549.553c-3.854-3.777-4.535-5.053-2.697-5.053 1.606 0 7.947 5.339 7.947 6.691 0 2.436-1.603 1.935-5.25-1.638zm646.8 2.028c-.758-1.226 2.178-4.081 4.196-4.081 1.271 0 1.117.517-.746 2.5-2.657 2.828-2.674 2.836-3.45 1.58zm-243.019-7.03c-.323-.523.296-1.423 1.375-2 2.476-1.326 4.1-1.353 2.094-.036-1.333.876-1.333 1.094 0 1.97 1.224.803 1.098.987-.691 1-1.205.008-2.455-.412-2.778-.935zm7.969-.552c.55-.19 6.625-.528 13.5-.754 6.875-.225 11.375-.08 10 .323-2.409.706-25.535 1.13-23.5.43zm28.5-2.754c1.375-.616 10.825-5.115 21-9.998 10.175-4.883 22.1-10.523 26.5-12.535 4.4-2.012 13.4-6.37 20-9.685l12-6.027.637-11c.35-6.05 1.118-17.525 1.705-25.5.99-13.438 2.845-39.233 5.178-72 .528-7.425 1.255-18 1.615-23.5.36-5.5 1.012-10.969 1.448-12.153.535-1.452 4.478-3.945 12.105-7.654 6.222-3.026 23.012-11.226 37.312-18.222 43.087-21.08 56.76-27.545 57.239-27.066.25.251-1.5 1.35-3.892 2.441-8.675 3.961-50.386 24.182-51.847 25.136-.825.538-3.75 2.06-6.5 3.38-22.166 10.648-42.477 20.793-42.848 21.403-.706 1.157-3.235 33.324-7.685 97.735-.57 8.25-1.471 19.725-2.003 25.5-.532 5.775-.966 12.776-.965 15.559 0 2.782-.562 5.766-1.249 6.63-1.196 1.503-5.298 3.585-35.75 18.144-7.425 3.55-18.675 8.93-25 11.958-6.325 3.028-13.242 6.226-15.372 7.107-4.332 1.792-7.54 2.099-3.628.347zm-116.585-4.585c-18.146-11.096-76.566-50.39-77.14-51.885-.73-1.903 3.439-62.686 4.751-69.275 1.182-5.93.811.825-3.014 55-.863 12.223-.79 13.656.768 15.15 1.596 1.53 41.31 28.131 68.106 45.618 6.388 4.169 13.189 8.156 15.114 8.862 2.404.88 2.847 1.296 1.415 1.326-1.147.024-5.647-2.134-10-4.796zm27.085 3.943l4-.614-3-1.987c-1.65-1.092-3.45-2.34-4-2.77-.55-.432-13.6-9.06-29-19.176-15.4-10.116-28.544-18.88-29.208-19.474-.664-.595-1.5-1.082-1.856-1.082-.356 0-2.353-1.35-4.436-3-2.083-1.65-4.173-3.023-4.644-3.052-1.981-.12-15.886-10.838-16.214-12.499-.276-1.396.183-1.209 2 .816 1.297 1.445 11.583 8.708 22.858 16.14s21.044 13.98 21.708 14.554c.664.572 1.378 1.041 1.585 1.041.523 0 22.63 14.435 25.707 16.785 1.375 1.05 3.625 2.502 5 3.226 1.375.723 4.79 3.042 7.59 5.152 2.8 2.11 5.613 3.837 6.25 3.837.638 0 1.16.675 1.16 1.5 0 1.143-1.131 1.466-4.75 1.358l-4.75-.142zm58.808.207c.34-.55 3.672-2.471 7.405-4.27L510 525.317c9.075-4.373 21-10.126 26.5-12.786 19.795-9.571 33.585-16.031 34.222-16.031.357 0 1.752-1.013 3.1-2.25 1.561-1.432 2.282-1.706 1.982-.752-.468 1.495-9.276 6.14-34.804 18.354l-27.5 13.153c-18.768 8.974-32.8 15.728-33.905 16.32-.497.266-.626.034-.287-.515zm-71.558-1.016c1.238-.238 3.263-.238 4.5 0 1.238.239.225.434-2.25.434s-3.487-.195-2.25-.434zm32.617-3.54c-2.065-1.215-23.25-15.242-47.867-31.698-26.382-17.635-34.706-23.056-35.4-23.056-.4 0-1.935-1.262-3.413-2.805L351 475.891l2.997-4.726c1.649-2.599 3.59-4.953 4.316-5.232 1.395-.535 4.566.881 8.691 3.883 1.373.999 19.821 13.23 40.996 27.179 21.175 13.95 39.358 25.985 40.406 26.746 2.504 1.816 1.643 5.078-2.645 10.012-2.929 3.37-3.478 3.625-5.394 2.5zm5.549-4.648c1.696-2.142 3.084-4.386 3.084-4.987 0-1-5.59-5.193-10.14-7.606-1.023-.543-1.86-1.33-1.86-1.75 0-.42-.498-.763-1.106-.763-.608 0-2.81-1.35-4.894-3-2.083-1.65-4.067-3-4.408-3-.341 0-5.472-3.263-11.402-7.25-5.93-3.987-11.535-7.7-12.457-8.25-.922-.55-4.052-2.637-6.955-4.638-12.175-8.392-35.916-23.862-36.619-23.862-.812 0-6.058 7.895-6.243 9.396-.061.493 4.545 3.983 10.237 7.756 5.69 3.774 11.188 7.42 12.215 8.104 1.028.684 3.611 2.482 5.741 3.994 2.13 1.512 4.155 2.75 4.498 2.75.344 0 2.71 1.529 5.259 3.397 2.549 1.869 10.259 7.098 17.134 11.62 6.875 4.523 14.876 9.857 17.78 11.853 2.903 1.997 6.728 4.456 8.5 5.466 1.77 1.01 3.879 2.473 4.684 3.25 2.28 2.2 3.625 1.72 6.952-2.48zM38 514c0-1.833.533-2.5 2-2.5 2.091 0 2.407.775 1.393 3.418-.97 2.53-3.393 1.874-3.393-.918zm-14.39-16.076c-.846-2.203.082-3.132 1.607-1.607.838.838.872 1.494.116 2.25-.757.757-1.259.57-1.724-.643zm872.461-2.838c-.823-.992-.917-2.038-.287-3.165.6-1.072.57-2.674-.084-4.405-1.527-4.047-.466-5.782 3.207-5.243 2.566.377 3.09.904 3.078 3.09-.02 3.327-2.464 10.463-3.73 10.885-.525.175-1.508-.348-2.184-1.162zM576.561 480.5c.381-11.931 1.913-36.174 3.379-53.5l.846-10-.327 11.5c-.332 11.694-1.84 35.404-3.403 53.5l-.864 10zm348.062 8.46c-.9-2.348-.835-2.46 1.45-2.46 1.398 0 1.968.543 1.75 1.667-.442 2.283-2.438 2.778-3.2.793zM885 485.622c0-.482.675-1.437 1.5-2.122 1.628-1.351 1.832-1.028.893 1.418-.643 1.675-2.393 2.19-2.393.704zm44.079-4.705c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-373.755-1.135c-4.824-.604-5.191-1.76-3.746-11.782l1.298-9-.188 9.49-.188 9.492 5.477.677c3.013.373 5.825.463 6.25.2.425-.262.799-3.263.83-6.668.032-3.405.464-7.991.96-10.191.66-2.922.764-1.44.388 5.5-.768 14.165-.289 13.634-11.08 12.282zM921 476.5c0-1.65.174-3 .387-3 .212 0 .584 1.35.826 3s.069 3-.386 3-.827-1.35-.827-3zM332.235 467c-.033-3.85.29-9.25.719-12l.779-5 .025 6c.014 3.3-.31 8.7-.72 12l-.744 6-.06-7zm574.965-2.7c-.66-.66-1.2-2.197-1.2-3.417 0-1.219-.517-2.389-1.15-2.6-.632-.21-.933-1.034-.668-1.83.32-.958 1.382-.02 3.15 2.781 2.717 4.304 3.302 6.266 1.868 6.266-.44 0-1.34-.54-2-1.2zm-353.657-18.8c.204-6.875.81-18.35 1.345-25.5.536-7.15 1.513-21.1 2.172-31 .727-10.936 1.637-18.282 2.319-18.718 1.03-.66 5.826-.323 11.364.798 2.226.451 2.238.553 1.673 14.158-.314 7.536-.78 14.04-1.034 14.453-.255.413-.955 8.976-1.555 19.03-.6 10.053-1.426 22.104-1.837 26.779-.692 7.869-.72 7.646-.389-3 .376-12.057 1.59-32.04 3.36-55.335.579-7.61.797-14.247.486-14.75-.88-1.425-11.432-1.13-11.962.335-.25.688-.909 8.675-1.465 17.75-1.104 18.007-2.69 40.557-4.006 57l-.841 10.5zM334.587 437c.425-12.231 1.752-35.227 3.347-58l1.855-26.517c.443-6.334 1.163-12.096 1.6-12.803.437-.708 3.671-2.605 7.186-4.214 15.261-6.99 85.001-41.329 90.08-44.354 2.284-1.36 6.11-3.054 8.5-3.762 2.39-.708 7.495-2.827 11.345-4.71 3.85-1.882 8.125-3.41 9.5-3.398 1.375.013 6.215 2.5 10.756 5.527 4.54 3.026 10.657 6.677 13.591 8.113 2.935 1.435 6.195 3.561 7.244 4.723 1.707 1.89 9.936 7.75 14.596 10.395 5.296 3.005 57.885 38.762 57.53 39.117-.232.231-17.418-10.95-38.192-24.848-20.773-13.898-41.576-27.613-46.228-30.478-4.652-2.865-10.524-6.578-13.049-8.25-2.525-1.673-5.442-3.041-6.482-3.041-1.885 0-11.913 4.409-14.766 6.491-.825.602-3.3 1.697-5.5 2.432-2.2.735-13.9 6.173-26 12.083-43.193 21.097-56.558 27.503-73.24 35.103-6.134 2.795-6.936 4.708-7.708 18.391-.372 6.6-1.092 18.075-1.6 25.5a4737.346 4737.346 0 00-1.978 31c-.58 9.625-1.441 21.775-1.913 27l-.857 9.5zm246.69-26c-.008-3.3.303-9.375.692-13.5l.708-7.5.053 7.5c.029 4.125-.282 10.2-.691 13.5l-.745 6-.016-6zM1 413.745c0-.55.675-1.56 1.5-2.245.837-.694 1.5-.803 1.5-.245 0 .55-.675 1.56-1.5 2.245-.837.694-1.5.803-1.5.245zM322.688 397.5c.264-6.875.858-16.55 1.32-21.5.746-7.991.78-7.599.306 3.5-.294 6.875-.888 16.55-1.32 21.5-.684 7.85-.724 7.404-.306-3.5zm-339.618 5.75c-.057-3.881.25-4.751 1.68-4.757 2.159-.008 6.707-6.444 5.703-8.07-.461-.745-.218-1.008.658-.71 1.798.612 1.23 4.684-1.016 7.287-1.967 2.28-5.266 7.275-6.275 9.5-.374.825-.711-.637-.75-3.25zM22 397.535c0-2.368.44-3.035 2-3.035 1.321 0 2 .667 2 1.965 0 1.08-.9 2.446-2 3.035-1.796.961-2 .76-2-1.965zm902.063-2.299c-.091-2.549-4.261-8.553-6.313-9.09-1.21-.317-1.75-1.453-1.75-3.681 0-2.25-1.01-4.34-3.345-6.925-3.71-4.106-5.28-10.268-3.684-14.464 1.291-3.396.705-4.551-4.003-7.89-2.182-1.549-3.968-3.278-3.968-3.844 0-.566 2.25.856 5 3.158 5.06 4.237 5.918 6.416 3.963 10.07-1.444 2.697.379 8.963 3.445 11.844 1.337 1.256 2.966 3.574 3.62 5.152.653 1.577 2.084 3.152 3.18 3.5 2.855.906 6.068 8.568 4.86 11.587-.704 1.756-.957 1.903-1.005.583zM583.121 380c-.033-3.3.377-9.359.91-13.464 1.143-8.81.859-10.064-2.78-12.276-1.513-.92-4.101-2.81-5.751-4.202l-3-2.53 3.264 1.566c1.795.861 4.783 3 6.64 4.751l3.378 3.185-.488 11.485c-.568 13.378-2.075 21.347-2.173 11.485zm-258-18.5c-.083-1.925-.482-3.994-.886-4.597-.404-.604-17.61-12.26-38.235-25.904s-39.28-26.2-41.455-27.903c-3.82-2.99-22.321-14.596-23.269-14.596-1.62 0-14.281-9.544-13.918-10.492 1.09-2.84 7.798-12.508 8.678-12.508.989 0 12.324 7.657 25.964 17.537 4.125 2.989 8.784 6.151 10.354 7.028 2.63 1.469 11.136 7.015 56.433 36.798 8.958 5.89 16.72 10.441 17.25 10.114.53-.327.963-1.888.963-3.468 0-2.053.86-3.485 3.012-5.017 1.656-1.18 2.775-2.528 2.485-2.997-.29-.468-15.813-11.121-34.497-23.673-18.684-12.552-37.465-25.218-41.735-28.146-4.27-2.929-8.665-5.73-9.765-6.224-6.138-2.762-21.033-12.992-21.267-14.607-.311-2.146 6.746-11.845 8.618-11.845.697 0 4.053 1.945 7.458 4.322 20.617 14.391 27.627 19.12 31.191 21.04 3.888 2.094 18.798 11.738 58.101 37.58 10.506 6.907 20.01 12.558 21.122 12.558 2.13 0 10.395-3.788 45.054-20.649 11.702-5.693 21.501-10.351 21.776-10.351.275 0 11.52-5.4 24.988-12 13.469-6.6 25.152-12 25.963-12 .811 0 11.492 6.7 23.735 14.888 35.196 23.538 96.046 63.69 98.442 64.956 2.412 1.275 4.712.347 29.819-12.027 7.15-3.524 15.25-7.37 18-8.546 2.75-1.176 13.55-6.27 24-11.321s26.284-12.687 35.186-16.969c17.965-8.64 16.745-7.33 17.66-18.981.194-2.475.309-1.14.254 2.966l-.1 7.466-4 2.585c-2.2 1.422-10.975 5.906-19.5 9.964a9879.922 9879.922 0 00-34.841 16.699c-10.638 5.126-19.464 9.32-19.614 9.32-.15 0-10.039 4.725-21.974 10.5-11.936 5.775-22.286 10.5-23.002 10.5-.716 0-8.224-4.57-16.685-10.155-49.198-32.477-62.182-40.95-69.384-45.277-4.4-2.644-8.9-5.601-10-6.572-1.1-.97-7.764-5.68-14.808-10.467l-12.809-8.701-3.691 1.734c-12.047 5.659-25.912 12.782-27.27 14.01-.869.786-2.305 1.428-3.192 1.428-.886 0-1.89.45-2.23 1-.34.55-1.26 1-2.046 1-.785 0-7.171 2.756-14.19 6.124-7.02 3.369-17.714 8.492-23.764 11.385-6.05 2.893-17.736 8.49-25.97 12.435-8.233 3.946-15.658 6.993-16.5 6.772-.841-.221-10.755-6.46-22.03-13.862-38.408-25.218-57.496-37.459-60.236-38.63-1.505-.642-5.555-3.369-9-6.058-3.445-2.69-10.147-7.381-14.893-10.427-4.746-3.046-8.948-6.055-9.339-6.687-.528-.855-1.092-.832-2.205.092-2.714 2.252-7.596 10.07-6.694 10.72 4.419 3.18 19.932 12.985 25.682 16.23 3.952 2.231 8.31 5.09 9.685 6.354 1.375 1.264 17.8 12.528 36.5 25.03 18.7 12.504 34.352 23.061 34.783 23.46 1.203 1.118-.243 3.914-2.373 4.59-1.048.333-2.173 1.813-2.5 3.289-1.186 5.342-1.566 6.183-2.792 6.183-.687 0-8.194-4.624-16.683-10.275-27.173-18.09-55.379-36.386-58.897-38.205-1.878-.971-6.817-4.346-10.976-7.5-11.717-8.884-21.818-15.289-22.98-14.57-1.34.828-7.085 9.138-7.073 10.23.013 1.14 14.622 10.68 23.839 15.564 4.208 2.23 9.227 5.49 11.152 7.243 1.925 1.753 20.94 14.779 42.255 28.946 39.843 26.482 40.538 27.059 39.464 32.715-.325 1.71-.488 1.396-.598-1.148zm-282.53-4.074c-1.425-1.694-2.591-3.578-2.591-4.188 0-.61-.955-2.125-2.122-3.368-1.726-1.837-1.99-2.955-1.42-5.995l.7-3.737 1.87 4.178c1.03 2.297 3.244 6.172 4.922 8.61 1.677 2.44 3.05 4.89 3.05 5.445 0 2.351-1.995 1.924-4.409-.945zm856.587-12.593c-.541-1.012-3.058-2.451-5.592-3.2-2.535-.748-4.836-1.728-5.114-2.178-.278-.45 1.787-.01 4.588.976 5.14 1.81 8.835 4.508 7.711 5.63-.335.336-1.052-.217-1.593-1.228zM28 339.09c0-.19.675-.906 1.5-1.591.865-.718 1.5-.815 1.5-.23 0 .56-.675 1.275-1.5 1.592-.825.316-1.5.42-1.5.23zm856-5.41c0-.45-1.462-1.546-3.25-2.436-1.788-.89-2.575-1.644-1.75-1.676.825-.032 2.85 1.048 4.5 2.4 1.65 1.352 2.438 2.475 1.75 2.495-.688.02-1.25-.332-1.25-.783zM36.307 329.8c.994-.258 2.187-1.468 2.65-2.69.465-1.22 4.152-4.568 8.194-7.439 4.042-2.87 5.569-3.745 3.393-1.945-2.175 1.8-6.027 5.412-8.56 8.024-2.533 2.612-5.253 4.698-6.044 4.634-.887-.071-.745-.296.367-.584zm836.797-3.835c-1.707-1.944-3.104-3.834-3.104-4.2 0-.366.341-.237.758.285s2.076 2.413 3.687 4.2c1.611 1.788 2.667 3.25 2.346 3.25-.321 0-1.98-1.59-3.687-3.535zM829 319.193c0-6.193.29-7.393 2.055-8.495l2.055-1.284-2.055-3.325c-1.986-3.213-2.925-12.386-1.422-13.889.852-.852 8.895 5.002 12.481 9.085 3.693 4.203 3.856 9.965.498 17.558-2.791 6.311-3.651 6.984-9.349 7.315l-4.263.248zm13.496-3.685c1.946-3.764 1.461-9.992-1.016-13.058-1.09-1.348-3.893-3.694-6.23-5.214l-4.25-2.764v3.879c0 2.422.786 4.878 2.092 6.539 1.15 1.463 2.179 3.211 2.284 3.885.446 2.85 4.144 10.521 4.86 10.08.428-.265 1.445-1.771 2.26-3.347zM56 313.122c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm4-2.986c0-.275 1.35-1.461 3-2.636s3-1.911 3-1.636c0 .275-1.35 1.461-3 2.636s-3 1.911-3 1.636zm648.5-5.636c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm-639-1c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm642.5-.398c0-.218 3.487-2.065 7.75-4.104 4.263-2.038 8.537-4.404 9.5-5.257 1.122-.994 1.75-1.13 1.75-.38 0 .645-4.114 3.19-9.143 5.656-9.286 4.553-9.857 4.79-9.857 4.085zm-634.983-4.015c1.915-1.878 8.757-7.24 15.203-11.915 9.117-6.613 12.224-8.369 13.992-7.906 2.209.577 2.196.615-.455 1.324-3.53.944-9.458 4.499-13.257 7.949-1.65 1.498-4.8 3.849-7 5.223-2.2 1.374-5.35 3.89-7 5.59-1.65 1.701-3.443 3.105-3.983 3.12-.541.016.584-1.508 2.5-3.385zM731.233 280.5c-.02-3.025.307-7.975.725-11l.76-5.5.054 6c.029 3.3-.298 8.25-.726 11l-.779 5-.034-5.5zM717.286 264c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm1.042-12c.004-3.85.185-5.302.402-3.228.216 2.075.213 5.225-.008 7-.221 1.776-.398.078-.394-3.772zm14.871-.5c-.028-2.475.31-6.525.75-9l.8-4.5.052 4.5c.028 2.475-.31 6.525-.75 9l-.8 4.5zm-14.111-16.083c.048-4.08.463-9.667.923-12.417.56-3.346.657-1.031.294 7-.607 13.457-1.351 16.769-1.217 5.417zm16-9c.048-4.08.463-9.667.923-12.417.56-3.346.657-1.031.294 7-.607 13.457-1.351 16.769-1.217 5.417zM721.748 204c.295-7.15.873-16.375 1.284-20.5.555-5.573.616-4.546.24 4-.278 6.325-.856 15.55-1.284 20.5-.621 7.18-.67 6.37-.24-4zm15.9-8c.278-7.15.875-16.6 1.325-21 .699-6.817.743-6.3.3 3.5-.286 6.325-.882 15.775-1.326 21-.714 8.42-.748 8.022-.3-3.5zM209 188.645c0-2.238 2.91-4.546 7-5.55 1.97-.484 1.81-.256-.75 1.077-1.788.93-3.25 2.23-3.25 2.887 0 .658-.675 1.756-1.5 2.441-1.252 1.04-1.5.898-1.5-.854zm11-7.145c.825-.533 1.95-.97 2.5-.97s.325.437-.5.97c-.825.533-1.95.97-2.5.97s-.325-.437.5-.97zm10-4c.825-.533 1.95-.97 2.5-.97s.325.437-.5.97c-.825.533-1.95.97-2.5.97s-.325-.437.5-.97zm5.5-2c2.778-1.194 4.738-1.194 4 0-.34.55-1.829.968-3.309.93-2.403-.063-2.477-.163-.691-.93zM724.68 161c.294-6.6.95-12.782 1.456-13.738.507-.956 3.046-2.697 5.643-3.869a531.132 531.132 0 008.645-4.004c2.158-1.032 4.089-1.71 4.291-1.507.203.202-3.588 2.272-8.423 4.6-4.836 2.328-9.123 4.747-9.527 5.375-.404.629-.786 4.068-.849 7.643-.062 3.575-.486 8.975-.942 12-.568 3.773-.66 1.732-.293-6.5zm15.48.321c-.096-2.196.473-4.311 1.411-5.25 2.147-2.146 3.122-1.996 1.162.179-.867.963-1.765 3.325-1.995 5.25l-.418 3.5zM754 149.5c5.225-2.694 9.95-4.898 10.5-4.898.55 0-3.275 2.204-8.5 4.898-5.225 2.694-9.95 4.898-10.5 4.898-.55 0 3.275-2.204 8.5-4.898zm13.527-6.295c2.568-1.687 7.473-3.791 7.473-3.207 0 .474-7.973 4.502-8.91 4.502-.294 0 .353-.583 1.437-1.295zM781 136.5c3.025-1.598 5.95-2.906 6.5-2.906.55 0-1.475 1.308-4.5 2.906s-5.95 2.906-6.5 2.906c-.55 0 1.475-1.308 4.5-2.906zm-35 .607c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm4.083-1.972c.23-.2 1.542-.9 2.917-1.555 2.357-1.122 2.39-1.102.559.365-1.593 1.276-4.848 2.391-3.476 1.19zm39.65-2.76c.679-.683 1.486-.99 1.793-.682.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm-23.33-5.452c5.997-2.997 11.063-5.29 11.256-5.097.408.408-20.427 10.706-21.466 10.61-.381-.035 4.214-2.516 10.21-5.513zm26.597 4.16c0-.293 5.063-2.973 11.25-5.954 6.188-2.981 19.758-9.521 30.157-14.534 10.4-5.012 19.056-8.966 19.237-8.785.31.312-27.296 13.933-49.144 24.248-5.5 2.596-10.338 4.91-10.75 5.14-.412.231-.75.18-.75-.114zm-14-9.976c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm4.083-1.972c.23-.2 1.542-.9 2.917-1.555 2.357-1.122 2.39-1.102.559.365-1.593 1.276-4.848 2.391-3.476 1.19zm13.33-6.701c4.353-2.167 8.075-3.78 8.271-3.583.411.41-14.431 7.681-15.487 7.586-.383-.034 2.864-1.836 7.216-4.003zm10.32-5.058c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm3.379-1.321c.818-.818 16.856-8.556 17.628-8.505.972.064-15.931 8.833-17.157 8.9-.504.027-.716-.15-.471-.395zm45.621-5.68c.679-.683 1.486-.99 1.793-.682.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM859.5 98.5c.34-.55 1.18-1 1.868-1 .687 0 2.123-.638 3.19-1.418 1.643-1.2 2.126-3.546 3.136-15.25L868.888 67l-.502 12.924c-.276 7.109-.94 13.741-1.474 14.74-.534.998-2.286 2.495-3.892 3.326-3.405 1.76-4.38 1.902-3.52.51zM829 96.924c0-.255 4.82-2.72 10.712-5.477 5.892-2.758 11.06-5.562 11.485-6.231.425-.669.815-2.341.867-3.716.052-1.375.327-1.918.613-1.207 1.153 2.874-.786 6.222-4.783 8.261-7.135 3.64-18.894 8.849-18.894 8.37zM853.32 72.5c0-3.575.182-5.037.403-3.25.222 1.788.222 4.713 0 6.5-.221 1.788-.403.325-.403-3.25zM869.31 61c.006-3.3.192-4.53.415-2.732.222 1.797.218 4.497-.01 6-.229 1.503-.41.032-.405-3.268zm-15-4c.006-3.3.192-4.53.415-2.732.222 1.797.218 4.497-.01 6-.229 1.503-.41.032-.405-3.268zm16-9c.006-3.3.192-4.53.415-2.732.222 1.797.218 4.497-.01 6-.229 1.503-.41.032-.405-3.268zm-15-3c.006-3.3.192-4.53.415-2.732.222 1.797.218 4.497-.01 6-.229 1.503-.41.032-.405-3.268zm16.018-11c.004-3.85.185-5.302.402-3.228.216 2.075.213 5.225-.008 7-.221 1.776-.398.078-.394-3.772zm-15.008-2.5c0-3.575.182-5.037.403-3.25.222 1.788.222 4.713 0 6.5-.221 1.788-.403.325-.403-3.25zM872.261 21c-.024-2.75.291-7.7.7-11 .673-5.423.748-5.567.775-1.5.017 2.475-.299 7.425-.7 11-.693 6.164-.733 6.242-.775 1.5zM857.3 17.5c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm.958-15c-.005-3.025.314-8.65.709-12.5l.718-7 .07 7.5c.038 4.125-.28 9.75-.709 12.5l-.779 5-.009-5.5zM874.224-7c-.014-2.75.316-7.475.734-10.5l.76-5.5.067 6c.037 3.3-.294 8.025-.734 10.5l-.8 4.5-.027-5zm-13.972-17c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm15.875-10.027c-.085-4.049.392-6.769 1.453-8.284 1.383-1.974 32.218-17.724 33.057-16.885.172.172-6.93 3.878-15.783 8.237-8.852 4.358-16.285 8.419-16.517 9.023-.232.604-.795 3.986-1.252 7.517L876.254-28zM861.328-36c.004-3.85.185-5.302.402-3.228.216 2.075.213 5.225-.008 7-.221 1.776-.398.078-.394-3.772zm.81-14.96c.261-1.37 4.13-3.832 12.868-8.192 11.347-5.662 15.306-7.327 13.772-5.793-.305.306-5.668 3.002-11.917 5.991-6.248 2.99-12.202 6.453-13.23 7.695-1.696 2.053-1.833 2.08-1.493.3zm50.595-9.664c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM916-61.893c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm5.559-3.075c1.067-.808 2.391-1.468 2.941-1.468.55 0 .126.66-.941 1.468-1.068.807-2.391 1.468-2.941 1.468-.55 0-.127-.66.94-1.468zm-30-2c1.067-.808 2.365-1.483 2.882-1.5.518-.018.068.629-1 1.436-1.067.808-2.365 1.483-2.882 1.5-.518.018-.068-.629 1-1.436zM931-69.5c3.025-1.598 5.95-2.906 6.5-2.906.55 0-1.475 1.308-4.5 2.906s-5.95 2.906-6.5 2.906c-.55 0 1.475-1.308 4.5-2.906zm-20-6.84c16.957-8.438 21-10.313 21-9.737 0 .492-35.026 17.597-35.864 17.514-.35-.034 6.339-3.534 14.864-7.776zm28.733 2.716c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM943-74.893c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm4.07-1.958c.972-1.062 17.152-8.76 17.559-8.354.21.211-3.314 2.144-7.833 4.294-9.308 4.43-10.53 4.94-9.725 4.06zm19.663-9.773c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zM941-91c4.675-2.42 8.95-4.4 9.5-4.4.55 0-2.825 1.98-7.5 4.4-4.675 2.42-8.95 4.4-9.5 4.4-.55 0 2.825-1.98 7.5-4.4zm29 3.026c0-.585 5.598-3.527 6.7-3.522.44.002-.673.902-2.474 2-3.348 2.041-4.226 2.357-4.226 1.522zm19.5-9.692c6.6-3.334 12.205-6.253 12.455-6.486.25-.234-.074-1.87-.72-3.636-1.064-2.909-1.036-3.029.295-1.27 3.089 4.078 1.996 5.279-10.515 11.55-6.591 3.305-12.329 5.985-12.75 5.956-.42-.028 4.635-2.78 11.235-6.114zm-36.767 1.042c.679-.684 1.486-.99 1.794-.683.307.308-.248.867-1.234 1.243-1.425.542-1.54.428-.56-.56zM956-97.893c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zM970-105c5.775-2.969 10.95-5.397 11.5-5.397.55 0-3.725 2.428-9.5 5.397-5.775 2.969-10.95 5.397-11.5 5.397-.55 0 3.725-2.428 9.5-5.397zm13-5.893c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm15.564-2.314c-.542-1.425-.427-1.54.56-.56.683.679.99 1.486.683 1.793-.308.308-.867-.247-1.243-1.233zm-7.194-1.92c3.768-1.96 5.125-2.26 6-1.328.855.911.765 1.087-.37.719-.825-.268-3.17.351-5.21 1.375-2.04 1.023-4.066 1.84-4.5 1.814-.435-.025 1.402-1.186 4.08-2.58z",
      fill: "#a78a6f",
      transform: "matrix(.92146 0 0 .82007 29.733 153.837)"
    }), /* @__PURE__ */ React46.createElement("path", {
      d: "M487.265 996.89c-1.81-2.485-2.247-2.65-3.739-1.412-1.178.978-4.767 1.442-11.858 1.534-7.47.096-9.037-.074-5.903-.641 2.346-.425 4.657-1.014 5.135-1.31.479-.295 2.24-.06 3.914.524 3.704 1.291 7.186-.204 7.186-3.085 0-1.061 1.012-2.463 2.25-3.115 2.937-1.546 3.716-2.81 3.735-6.053.024-4.2 1.038-5.832 3.626-5.832 2.09 0 2.364.417 2.143 3.25-.22 2.804.057 3.239 2.01 3.17 2.05-.074 2.207.257 1.672 3.5-.957 5.793-1.113 5.952-6.133 6.273L486.5 994l2.364 2.364c2.109 2.109 2.975 2.3 8 1.765 3.1-.33 8.336-.853 11.636-1.162 5.389-.505 6.398-.978 9.907-4.644 2.148-2.245 3.61-3.311 3.25-2.37-.362.94-.657 2.064-.657 2.496 0 .432-1.707 1.915-3.793 3.295-3.303 2.186-5.349 2.604-15.843 3.234l-12.05.724zm6.735-7.306c0-.936-.675-2.575-1.5-3.643-1.473-1.905-1.539-1.897-3.5.42-2.617 3.09-2.532 4.914.25 5.364 3.204.518 4.75-.178 4.75-2.14zm-43.5 5.859c-2.2-.455-5.8-.884-8-.953-3.641-.114-3.797-.223-1.735-1.217 1.873-.903 2.163-1.639 1.674-4.247-.415-2.212-.121-3.545.985-4.463.867-.72 1.576-2.153 1.576-3.185 0-1.49.745-1.878 3.608-1.878 3.434 0 3.576.133 2.933 2.75-.372 1.512-1.321 4.057-2.109 5.654-2.408 4.881-1.912 6.672 1.818 6.569 1.788-.05 4.825.34 6.75.866l3.5.956-3.5-.013c-1.925-.01-5.3-.385-7.5-.84zm91.02-.305c-1.024-.749-2.755-1.128-3.847-.842-1.397.365-1.76.154-1.225-.712 1.023-1.656-3.222-6.076-5.872-6.114-1.976-.03-1.986-.083-.207-1.117 1.55-.9 2.265-.594 4.173 1.78l2.303 2.867 2.117-2.25c2.686-2.856 3.614-2.91 1.642-.095-2.047 2.922-.45 5.845 3.191 5.845 2.998 0 8.205-4.182 8.205-6.59 0-2.15-2.724-7.135-4.229-7.74-.793-.32-.622-.541.456-.59 2.894-.133 5.114 4.389 4.386 8.936-.626 3.92-.587 3.984 2.44 3.984 3.823 0 12.947-3.828 12.947-5.432 0-.652-.66-2.059-1.468-3.126-2.489-3.29-1.923-5.442 1.43-5.442 2.608 0 3.09.477 4.038 4 .778 2.888 1.606 4 2.98 4 1.046 0 2.197-.477 2.558-1.061.361-.584 1.705-1.46 2.988-1.948 1.483-.564 2.485-1.906 2.753-3.689.366-2.434.441-2.333.571.77.133 3.156-.335 3.89-4.01 6.297-4.715 3.087-6.106 2.916-8.005-.98-2.172-4.458-4-4.267-3.263.34.561 3.506.337 4.101-2.166 5.74-1.819 1.193-5.082 1.93-9.365 2.116-3.615.158-7.832.766-9.372 1.351-3.572 1.358-3.907 1.342-6.149-.297zm-123.125-2.41c-1.158-.95-2.381-2.515-2.719-3.478-1.05-2.996-3.676-2.103-3.676 1.25 0 2.22-.455 2.98-1.75 2.921-1.045-.047-1.247-.282-.5-.583 1.881-.76 1.505-3.738-.809-6.406-1.943-2.24-1.96-2.445-.308-3.653 2.444-1.787 4.127-1.596 5.304.603 1.413 2.64 2.983 3.032 9.115 2.278 4.646-.572 5.437-.993 5.945-3.16.37-1.58 1.398-2.618 2.794-2.82 1.868-.27 2.209.154 2.209 2.75 0 2.744.318 3.07 3 3.07 3.482 0 3.6.276 1.278 2.989-2.045 2.388-4.512 2.559-7.613.527-2.027-1.328-2.522-1.304-4.705.225-1.342.94-3.457 1.575-4.7 1.412-2.481-.325-2.925.782-1.06 2.647 1.782 1.782.611 1.41-1.805-.572zm108.547-.88c-.554-1.458-.861-3.09-.682-3.628.18-.537.827.656 1.44 2.652 1.286 4.192.735 4.903-.758.977zm-136.823-.94c-2.713-.878-3.03-1.228-1.605-1.775 1.072-.411 2.5-.026 3.605.975 1.562 1.413 2.273 1.472 4.856.402 2.103-.87 3.408-.938 4.276-.22.687.568 2.599 1.22 4.249 1.45 1.65.229-.375.381-4.5.338-4.125-.043-9.021-.57-10.88-1.17zM455 989.114c0-3.32 2.261-5.619 3.521-3.58.351.568 1.958.374 4.01-.484 2.032-.849 3.662-1.048 4.006-.49.802 1.296 7.817 1.185 9.148-.146.596-.596 2.149-.934 3.45-.75 1.86.264 2.365.948 2.365 3.206 0 2.726-.252 2.89-5 3.261-2.75.215-7.195.843-9.877 1.396-3.612.745-5.255.692-6.332-.201-1.13-.939-1.88-.94-3.372-.01-1.75 1.093-1.919.9-1.919-2.203zm8 .444c0-.517-.45-1.22-1-1.559-.55-.34-1 .083-1 .941 0 .857.45 1.559 1 1.559s1-.423 1-.941zm-80.322.285c-.36-.36-2.348-.93-4.415-1.266-3.038-.494-4.074-1.276-5.394-4.073-1.386-2.934-1.71-3.16-2.136-1.483-.394 1.557-.526 1.419-.617-.65-.229-5.185 4.854-6.246 10.437-2.179 3.162 2.303 2.644 4.535-.585 2.52-2.636-1.647-4.911-1.525-5.611.3-.961 2.503 1.605 4.654 4.733 3.967 2.154-.473 3.017-.149 3.876 1.456 1.096 2.049.97 2.666-.288 1.408zM402 987.81c0-.55.9-1.815 2-2.81 1.1-.996 2-1.36 2-.81s-.9 1.815-2 2.81c-1.1.996-2 1.36-2 .81zm-43.63-1.75c-1.721-.75-3.458-1.894-3.86-2.544-.433-.7.515-.537 2.33.401 1.684.87 4.096 1.59 5.36 1.598 1.265.01 2.975.452 3.8.985 2.386 1.542-3.91 1.178-7.63-.44zm28.577-1.123c-.956-1.153-.981-1.803-.105-2.68.637-.636 1.158-2.192 1.158-3.457 0-1.265.423-2.3.941-2.3 1.232 0 1.683.842 2.506 4.68.548 2.56.299 3.386-1.278 4.23-1.491.798-2.26.685-3.222-.473zm117.738.184c-.67-1.743.779-3.07 2.315-2.121 1.978 1.222.948-1.461-1.5-3.91-1.375-1.374-2.5-3.335-2.5-4.357 0-2.442-4.852-6.973-7.922-7.398-3.202-.443-3.735-2.413-1.041-3.855 3.092-1.654 10.963 2.505 10.963 5.793 0 1.741.722 2.421 3.068 2.89 1.687.338 3.747 1.652 4.578 2.92 1 1.526 2.684 2.409 4.981 2.611 2.635.232 3.951 1.069 5.468 3.475l1.998 3.168-2.046-.535c-1.126-.294-2.047-.111-2.047.406 0 .518-1.462 1-3.25 1.073-1.788.072-5.324.416-7.859.764-3.652.502-4.732.31-5.206-.923zm56.315.438c0-.517.45-1.22 1-1.559.55-.34 1 .083 1 .941 0 .857-.45 1.559-1 1.559s-1-.423-1-.941zm-28.532-2.111c-.4-.647-1.884-.915-3.392-.613-2.457.491-2.665.288-2.476-2.43.318-4.596 1.994-5.902 7.259-5.655 2.553.12 6.942-.147 9.755-.592 4.324-.683 5.213-.551 5.753.857 1.003 2.612-.29 3.66-3.612 2.931-2.53-.556-2.95-.398-2.447.914.463 1.207-.396 1.854-3.6 2.71-2.314.62-4.73 1.553-5.369 2.076-.75.615-1.412.545-1.871-.198zm4.324-3.585c-.9-.9-2.347-1.364-3.214-1.031-2.719 1.043-1.722 2.668 1.636 2.668 2.977 0 3.093-.121 1.578-1.637zm-198.03 2.93c1.244-.24 3.044-.23 4 .02s-.062.446-2.262.435c-2.2-.011-2.982-.216-1.738-.456zm23.43-3.543c.252-3.48.67-4.25 2.308-4.25 2.597 0 3.255 4.602.983 6.874-2.653 2.653-3.617 1.885-3.29-2.624zm-39.935.716c-3.336-1.403-6.247-5.89-6.272-9.666-.019-2.738-1.592-5.527-2.568-4.55-.38.38-2.026-.26-3.658-1.421-3.624-2.581-4.83-1.336-4.338 4.476.519 6.117 3.829 7.985 3.829 2.162 0-1.525.37-2.246.888-1.729 1.461 1.461-1.077 7.262-3.177 7.262-1.014 0-2.137-.476-2.497-1.059-.368-.595-1.883-.788-3.464-.44-2.18.478-3.336.064-5.155-1.85-2.47-2.597-10.227-5.651-14.356-5.651-1.342 0-3.914-.898-5.715-1.996-1.8-1.098-3.992-1.998-4.87-2-3.458-.01-7.831-3.16-9.046-6.52-1.452-4.016-2.92-4.79-6.502-3.43-1.993.758-3.196.625-4.991-.55-1.3-.853-2.365-1.99-2.365-2.527 0-.537-.84-.977-1.865-.977-1.026 0-3.122-.989-4.659-2.197-1.536-1.209-3.585-2.256-4.553-2.327-1.864-.137-6.408-4.909-8.936-9.382-1.223-2.165-1.989-2.553-4-2.024-2.134.562-2.239.76-.737 1.4 2.038.867 2.38 4.53.421 4.53-2.164 0-10.671-6.067-10.671-7.61 0-.783 1.571-2.172 3.491-3.087 3.29-1.57 3.397-1.77 1.845-3.484-.905-1-2.221-1.819-2.925-1.819-.703 0-1.42-1.238-1.595-2.75-.256-2.23-.818-2.75-2.972-2.75-1.807 0-4.001-1.372-6.87-4.295-2.32-2.363-4.5-4.012-4.845-3.664-.346.347.384 1.452 1.621 2.455 1.238 1.004 2.25 2.315 2.25 2.914 0 .6.788 1.893 1.75 2.874 1.824 1.858 4.682 8.601 3.28 7.734-.442-.273-1.4.223-2.129 1.101-1.122 1.352-1.033 1.811.578 2.99 1.766 1.29 1.775 1.391.119 1.391-.982 0-2.008-.853-2.28-1.894-.273-1.042-2.453-3.3-4.845-5.018s-4.633-4.016-4.979-5.106c-.435-1.372-1.516-1.982-3.51-1.982-2.11 0-3.586-.923-5.506-3.44-1.573-2.063-3.192-3.223-4.042-2.897-.784.3-2.872-.855-4.676-2.59-1.793-1.725-6.072-5.665-9.51-8.756-3.438-3.092-6.25-6.228-6.25-6.97 0-.74-.353-1.347-.784-1.347-.432 0-1.622-1.462-2.645-3.25-2.646-4.625-5.664-7.748-7.495-7.76-.867-.01-2.64-1.354-3.939-3-1.299-1.644-3.24-2.99-4.314-2.99-1.592 0-1.893-.586-1.637-3.19.265-2.694-.073-3.282-2.186-3.79-1.573-.379-2.619-1.421-2.82-2.811-.175-1.215-.963-2.209-1.75-2.209-.786 0-1.43-.893-1.43-1.984s-1.3-3.439-2.887-5.216c-2.457-2.749-3.122-3.037-4.455-1.931-1.398 1.16-1.457.94-.55-2.034l2.54-8.335c2.288-7.51 2.397-14.15.262-16.082-2.353-2.129-5.334-1.43-5.73 1.342-.175 1.232.15 2.24.725 2.24.574 0 1.67 1.237 2.434 2.75 1.172 2.32 1.182 3.746.061 9.13-1.305 6.273-2.4 8.961-2.4 5.895 0-.857-1.125-1.84-2.5-2.186-1.375-.345-2.5-1.262-2.5-2.037 0-.775-1.575-3.08-3.5-5.12-3.502-3.714-4.38-5.093-2.5-3.932.55.34 1 .093 1-.548s-.615-.93-1.367-.641c-.767.294-2.416-.808-3.75-2.507-1.31-1.667-3.845-4.413-5.633-6.101-1.787-1.69-3.25-3.663-3.25-4.387 0-.811.863-.453 2.25.934l2.25 2.25.338-2.387c.363-2.574-1.34-4.242-3.489-3.417-.733.281-1.609-.21-1.948-1.092-.387-1.01-1.801-1.604-3.816-1.604-2.75 0-3.438-.54-4.893-3.836-.93-2.11-1.694-5.147-1.697-6.75-.006-3.385-5.968-11.805-10.544-14.89-1.65-1.113-4.564-3.315-6.476-4.893l-3.475-2.868 5 2.838c2.75 1.562 6.663 3.675 8.696 4.697 2.213 1.112 4.975 3.852 6.887 6.83 2.86 4.46 3.064 5.253 1.965 7.667-1.134 2.487-.978 2.9 2.042 5.422 2.442 2.038 3.599 2.456 4.569 1.651.918-.761 1.012-1.615.32-2.907-.538-1.006-.979-2.914-.979-4.24s-.9-3.226-2-4.221c-1.1-.996-2-2.904-2-4.242 0-1.789-.8-2.734-3.029-3.575-1.757-.663-2.911-1.755-2.748-2.6.396-2.057 6.549-3.518 8.387-1.991 2.684 2.227 2.605.057-.128-3.526-1.495-1.961-3.453-3.58-4.35-3.598-2.598-.05-5.132-2.492-5.132-4.943 0-2.157-.105-2.186-2.426-.665-2.355 1.543-2.445 1.505-3.061-1.302-.35-1.59-1.283-3.14-2.074-3.443-.791-.304-1.439-1.064-1.439-1.69 0-1.932-6.058-8.904-9.108-10.48-1.59-.823-2.892-1.308-2.892-1.079 0 .23 2.08 4.118 4.624 8.64 4.818 8.568 4.8 9.985-.124 9.948-1.837-.014-1.858-.098-.25-1.034 2.122-1.236 2.207-2.32.328-4.2-.783-.782-2.78-4.414-4.438-8.071s-3.628-6.649-4.379-6.649c-.75 0-2.315-2.25-3.476-5-1.188-2.811-2.764-5-3.6-5-1.033 0-1.459-1.003-1.394-3.288.115-4.058-6.683-15.53-9.936-16.767-1.228-.467-2.71-1.741-3.294-2.831-1.593-2.977-1.287-3.34.939-1.114 1.1 1.1 2.69 2 3.535 2 .845 0 2.668.742 4.052 1.649 3.202 2.098 4.329 1.01 4.808-4.639.234-2.764 1.046-4.86 2.214-5.713 4.003-2.927 6.12 5.557 3.903 15.647-.487 2.217-.249 3.704.78 4.873.943 1.071 1.3 2.865.981 4.933-.568 3.693-1.827 4.232-2.79 1.195-.745-2.346-2.823-2.102-3.306.388-.194 1 .32 1.667 1.285 1.667.959 0 2.403 1.852 3.574 4.583 2.05 4.782 4.213 5.471 4.792 1.528.18-1.229.967-2.479 1.75-2.78 2.14-.82 1.784-8.226-.582-12.105-2.472-4.055-2.47-4.24.098-9.702 1.588-3.379 1.929-5.429 1.412-8.49-.375-2.218-.282-4.034.206-4.034 1.5 0 3.288 2.301 3.288 4.231 0 2.543 2.822 3.376 4.785 1.413 1.207-1.207 1.338-1.921.504-2.755-.623-.623-.89-2.577-.597-4.38.595-3.664-.975-5.349-3.236-3.473-1.173.974-1.456.894-1.456-.414 0-2.394-1.724-1.972-3.592.878-1.915 2.923-4.843 3.447-3.975.712.312-.984-.333-3.554-1.433-5.712-1.1-2.157-2-4.502-2-5.21 0-.708-1.747-3.088-3.883-5.289-2.894-2.982-4.677-4.001-7-4.001-2.335 0-3.117.452-3.117 1.8 0 .99.412 2.228.916 2.75.504.523 1.054 4.114 1.223 7.982.263 6.003-.024 7.497-1.96 10.217-2.172 3.05-2.196 3.295-.575 5.77 1.366 2.084 1.447 2.815.42 3.782-.993.934-1.38.91-1.75-.107-.263-.718-1.017-1.81-1.677-2.426-.66-.616-1.002-2.464-.76-4.107.308-2.101-.104-3.383-1.39-4.324-2.425-1.773-3.209-1.687-3.758.413-.251.963-.51.372-.573-1.313-.076-1.996-1.16-4.064-3.116-5.937-3.175-3.042-3.875-6.53-1.676-8.354 1.421-1.18 3.705.264 3.646 2.304-.017.578-.495.253-1.062-.721-1.076-1.849-2.92-1.479-2.893.58.009.655.424 1.837.924 2.627.753 1.19 1.178 1.211 2.485.127 1.304-1.082 1.59-1.071 1.655.065.043.754.52.165 1.06-1.31.76-2.076.573-3.404-.828-5.876a727.908 727.908 0 01-3.062-5.457c-.746-1.348-2.596-2.515-4.577-2.887-1.828-.343-4.135-1.216-5.126-1.94-1.735-1.27-1.735-1.458 0-5.112 1.598-3.37 1.937-3.606 3.03-2.11.787 1.075 1.469 1.3 1.887.624.82-1.326-.19-3.06-1.781-3.06-2.305 0-3.809-3.973-3.155-8.333.458-3.054.066-5.624-1.438-9.442-1.138-2.886-3.927-10.98-6.2-17.986-2.272-7.006-4.754-13.1-5.516-13.542-.87-.504-1.165-1.679-.794-3.156.336-1.337-.049-3.365-.89-4.697-.814-1.29-1.818-3.467-2.23-4.84-.413-1.373-1.425-2.99-2.25-3.594-.826-.603-1.664-2.588-1.864-4.412-.2-1.823-.752-3.806-1.228-4.406-.476-.6-1.168-2.667-1.536-4.592a1230.51 1230.51 0 00-1.779-9c-.609-3.025-1.147-10.225-1.195-16-.07-8.463.25-10.98 1.653-12.973 2.226-3.162 2.21-6.52-.046-9.873-1.821-2.707-3.474-6.074-4.74-9.654-.616-1.746-2.252-16.341-2.633-23.5-.073-1.375-.706-7.225-1.406-13s-1.551-18.95-1.89-29.279c-.339-10.328-1.052-19.924-1.584-21.323-.826-2.174-.53-2.984 2.036-5.549 3.08-3.08 3.768-5.258 2.003-6.349-1.576-.974-1.166-2.5.5-1.862 1.062.408 1.523-.113 1.579-1.781.05-1.519.28-1.824.646-.857.868 2.3 8.275 8.875 8.275 7.346 0-.74-.45-1.346-1-1.346s-.986-.787-.97-1.75c.027-1.533.179-1.502 1.224.25C-.736 440.37 2 448.773 2 451.58c0 2.717 5.735 14.864 8.417 17.828.82.905 2.698 4.285 4.174 7.51l2.685 5.865-2.282 1.721c-1.268.957-1.97 2.227-1.579 2.859 1.003 1.623 3.545 1.405 4.223-.362.46-1.2.953-1.019 2.469.908 1.041 1.323 1.893 2.82 1.893 3.324 0 .505 1.166 2.01 2.59 3.343 2.33 2.179 2.527 2.918 1.95 7.3-.542 4.113-.404 4.786.877 4.294 1.754-.673 3.12.88 1.6 1.82-.56.345-1.017 1.285-1.017 2.088 0 1.06.688 1.287 2.513.83 2.12-.533 2.669-.185 3.512 2.23.744 2.135 1.692 2.903 3.733 3.022 1.505.087 3.068-.363 3.474-1 .51-.803.742-.711.753.298.008.802 1.556 3.052 3.44 5 3.463 3.582 6.725 11.58 8.05 19.734 1.27 7.82 5.38 7.775 6.264-.068.573-5.086 2.794-6.335 3.841-2.16.34 1.356 1.385 2.707 2.32 3.005.937.297 3.48 2.393 5.651 4.658 2.296 2.393 3.077 3.67 1.867 3.05-1.145-.587-2.663-1.767-3.373-2.622-1.327-1.6-4.046-2.14-4.043-.805 0 .413 1.784 2.427 3.963 4.477 3.545 3.336 4.067 3.546 4.968 2 .95-1.63 1.008-1.629 1.037.023.032 1.84-2.81 5.196-5.022 5.934-.746.249-.977.96-.54 1.666.418.677 1.594.967 2.614.643 1.019-.323 2.745-.031 3.834.65 2.553 1.594 5.485-.494 4.601-3.278-.428-1.348-.188-1.699.88-1.29 2.553.98 3.736 9.952 1.594 12.094-1.05 1.05-.803 12.09.621 27.632.808 8.817-.39 12.086-1.936 5.28-1.4-6.173-3.208-6.957-4.084-1.771-.632 3.74.875 7.362 5.292 12.724.468.569 1.162 2.978 1.542 5.355.38 2.377 1.353 5.601 2.163 7.166 1.73 3.346 1.936 8.54.377 9.503-.602.372-.892 1.735-.645 3.029.76 3.97-1.341 1.517-4.256-4.973-1.51-3.363-3.048-8.19-3.417-10.729-.368-2.538-1.312-5.463-2.097-6.5-.785-1.037-1.448-2.785-1.474-3.885-.026-1.1-.682-3.8-1.458-6-1.237-3.503-1.222-4.294.115-6.367 1.376-2.136 1.358-2.9-.183-7.801-1.616-5.137-1.615-5.538.019-7.343 1.292-1.427 1.559-2.809 1.059-5.474-.51-2.721-.195-4.23 1.33-6.374 1.271-1.784 1.785-3.634 1.409-5.071-.498-1.904-1.065-2.169-3.575-1.667-1.64.329-3.798.597-4.794.597-1.632 0-1.773.813-1.427 8.25.953 20.54 1.794 28.635 3.506 33.75 1.012 3.025 2.812 8.875 3.999 13 2.775 9.64 6.743 18.826 9.503 22 1.366 1.571 2.194 3.894 2.228 6.25.052 3.609-.074 3.75-3.347 3.75-3.671 0-4.539 1.811-1.912 3.99.819.68 1.222 1.669.895 2.197-.326.529.295 1.94 1.38 3.137s2.266 3.414 2.624 4.926c.659 2.787 3.812 3.854 5.122 1.734 1.013-1.64 2.49-.075 2.49 2.637 0 1.377.746 4.785 1.658 7.573 1.294 3.955 1.404 5.477.5 6.924-1.71 2.74-1.435 3.799 1.312 5.05 4.99 2.274 7.455-4.545 4.034-11.16-.944-1.826-1.129-3.122-.5-3.51 1.526-.944 1.204-5.498-.389-5.498-.762 0-2.122-1.125-3.023-2.5-.901-1.375-2.233-2.5-2.96-2.5-.727 0-2.137-.9-3.132-2-1.712-1.892-1.717-2.102-.093-3.898 1.514-1.672 1.584-2.639.588-8.132-.802-4.42-.82-6.545-.063-7.302 1.475-1.475 1.34-3.294-.542-7.26-1.075-2.264-1.405-4.642-.991-7.15 1.554-9.431 1.771-14.607.778-18.525-2.389-9.415-2.452-11.848-.322-12.405 1.505-.394 2.386-2.224 3.693-7.672.945-3.936 2.446-7.992 3.335-9.014 1.514-1.74 1.41-2.03-1.633-4.572-1.84-1.538-3.25-3.66-3.25-4.893 0-2.407-.997-2.78-2.749-1.028-.753.753-.948 3.287-.568 7.36.612 6.556-.628 9.042-3.174 6.36-.967-1.02-1.164-3.984-.77-11.619.462-8.97.751-10.25 2.311-10.25.981 0 1.933.356 2.117.791.183.436 2.02 2.064 4.083 3.62 2.062 1.554 3.75 3.448 3.75 4.208 0 1.601 1.595 1.845 2.5.381 1.375-2.226 4.618-.734 8.694 4 4.66 5.41 4.85 6.162 5.132 20.163.096 4.765.473 8.964.838 9.331 1.331 1.338 4.836-1.572 4.836-4.015 0-7.414 4.112-14.552 5.604-9.729.298.963.95 2.517 1.448 3.454.56 1.051.532 1.935-.073 2.309-.538.333-.979 1.614-.979 2.846 0 1.233-.457 2.698-1.016 3.257-.559.559-1.527 7.447-2.152 15.308-1.02 12.838-.967 14.578.532 17.115 1.058 1.792 1.297 3.053.652 3.451-1.818 1.124-1.073 3.538 1.38 4.47 1.316.501 2.593 1.502 2.836 2.225.362 1.075.747 1.064 2.105-.057 1.085-.895 1.663-2.884 1.663-5.715 0-3.32.471-4.595 2-5.413 1.1-.589 2-1.552 2-2.14 0-.588 1.35-3.07 3-5.515s3.018-4.76 3.04-5.145c.023-.385 1.317-2.191 2.877-4.014l2.836-3.315 2.116 2.69c1.668 2.12 1.984 3.508 1.495 6.564-.727 4.547.745 5.164 3.24 1.358 1.3-1.984 1.942-2.274 3.034-1.368 1.118.928 1.335.711 1.124-1.123-.404-3.507 1.65-3.39 2.994.172 1.46 3.87.92 4.619-5.67 7.855-5.207 2.556-5.872 4.007-5.14 11.224.098.959-.501 2.711-1.33 3.895-.93 1.329-1.29 3.246-.937 5.007.48 2.403.244 2.855-1.495 2.855-2.84 0-3.35-1.224-2.058-4.93.918-2.634.81-3.483-.644-5.09-1.624-1.794-1.632-2.103-.114-4.42 2.079-3.171 2.269-12.56.254-12.56-1.99 0-3.519 2.197-4.24 6.095-.346 1.873-1.186 3.859-1.866 4.413-1.888 1.54-6.405 11.985-8.154 18.854-2.407 9.46-4.808 24.078-6.264 38.138-.986 9.523-1.75 12.5-3.205 12.5-.491 0-.893 2.275-.893 5.056 0 4.278-.443 5.472-2.875 7.75-1.58 1.482-3.397 3.707-4.035 4.944-.638 1.238-1.82 2.25-2.625 2.25-1.616 0-1.989 3.053-.555 4.55.5.523 1.233 4.944 1.628 9.826.576 7.104.458 8.79-.588 8.44-.72-.239-1.961-2.433-2.76-4.876-3.306-10.108-4.5-11.355-5.69-5.94-.806 3.67.362 15.762 1.785 18.486 1.536 2.939.862 12.224-1.124 15.489-1.37 2.254-2.088 2.645-3.454 1.881-3.375-1.889-5.154 1.699-2.099 4.234 1.354 1.124 1.79 1.086 2.76-.24.789-1.079 2.17-1.425 4.391-1.099 3.236.475 4.134 1.58 2.238 2.75-2.036 1.26.965 4.645 3.822 4.312 2.434-.284 2.71.026 2.987 3.361.168 2.02.956 4.213 1.75 4.872.794.66 1.444 2.074 1.444 3.144 0 1.51-.462 1.798-2.062 1.29-1.894-.6-2.036-.302-1.75 3.683.35 4.858 2.603 5.952 4.3 2.087.542-1.237 1.39-2.25 1.884-2.25s2.02-1.21 3.39-2.688c2.277-2.457 2.596-2.543 3.724-1 .68.929 1.675 1.688 2.214 1.688 1.109 0 3.3 4.346 3.3 6.547 0 .893-.989 1.453-2.567 1.453-2.204 0-2.468.319-1.866 2.25.387 1.238 1.061 2.483 1.5 2.767.437.284.99 3.247 1.226 6.584.35 4.93 1.12 7.085 4.102 11.484l3.67 5.415-2.532.943c-2.532.943-3.423 3.89-1.53 5.06.553.34.735 1.693.406 3.004-.697 2.778 1.376 6.206 4.771 7.889 1.572.779 2.421 2.19 2.633 4.377.29 2.98.087 3.227-2.643 3.227-3.148 0-5.027 2.543-3.216 4.354.693.693 1.769.316 3.357-1.176 1.286-1.208 2.633-1.9 2.995-1.539.635.635.56 1.35-.814 7.861-.499 2.362-.373 2.744.593 1.795.958-.943 1.683-.796 3.32.67a690.682 690.682 0 005.336 4.706c1.783 1.556 4.258 4.639 5.5 6.85 4.982 8.87 6.427 10.962 10.451 15.133 2.306 2.39 4.819 4.346 5.585 4.346s2.595 1.35 4.065 3c1.573 1.765 3.666 3 5.084 3 1.677 0 3.07 1.066 4.574 3.5 2.38 3.851 4.52 4.716 3.469 1.401-.584-1.838-.375-2.007 1.682-1.365 2.634.823 3.811 2.213 3.834 4.527.008.86 1.365 2.856 3.015 4.437l3 2.874v-4.614c0-3.579-.505-5.024-2.25-6.437-1.238-1.003-3.143-3.516-4.234-5.584-1.65-3.132-1.774-4.096-.737-5.757 1.496-2.395.087-9.523-2.933-14.842-1.358-2.39-1.609-3.72-.87-4.61.73-.88.586-2.333-.482-4.89-1.477-3.535-3.719-4.704-5.01-2.613-.35.564-1.388.902-2.31.75-1.914-.317-1.911 1.102.012 6.223.723 1.925 1.989 3.5 2.814 3.5.856 0 1.625 1.074 1.792 2.5.16 1.375.808 3.531 1.44 4.791.924 1.841.818 2.855-.54 5.155-.931 1.574-1.692 3.875-1.692 5.111v2.25l-1.95-2.249c-1.588-1.831-1.731-2.595-.774-4.128.905-1.45.893-2.16-.051-3.105-.674-.674-1.225-2.415-1.225-3.87s-.9-3.46-2-4.455c-1.1-.995-2-2.55-2-3.455 0-.905-.559-2.204-1.242-2.887-.682-.682-1.704-2.91-2.27-4.95-.62-2.231-1.918-4.101-3.26-4.695-1.65-.73-2.228-1.837-2.228-4.26 0-2.035-.756-3.92-2-4.985-1.54-1.318-2-2.95-2-7.085 0-4.109-.718-6.682-3.051-10.933-4.935-8.992-2.59-15.433 2.473-6.793 3.018 5.15 4.264 5.643 5.167 2.043 1.39-5.537-2.773-11.252-6.153-8.447-1.02.847-1.436.867-1.436.07 0-1.842.442-2.622 1.5-2.65 2.223-.059 3.364-1.675 3.347-4.74-.028-4.729-1.788-9.733-3.425-9.733-1.63 0-1.927-2.57-.406-3.51.56-.346.763-1.038.454-1.539-.31-.5-.13-1.718.398-2.705.608-1.135.62-4.839.033-10.083-.75-6.712-.654-8.678.51-10.34.791-1.13 1.199-2.789.906-3.688-1.482-4.56-3.867-8.869-6.031-10.897-1.664-1.559-2.217-2.88-1.78-4.258.349-1.098.733-4.72.853-8.049.139-3.82.721-6.363 1.579-6.893 1.13-.699 1.082-1.531-.29-4.96-2.17-5.424-2.098-6.244.85-9.673 2.912-3.385 2.785-2.523 2.633-17.796-.068-6.784-.578-12.443-1.188-13.178-.768-.925-.678-2.081.321-4.11.987-2.003 1.328-6.154 1.177-14.321-.117-6.325-.264-11.838-.327-12.25-.257-1.69-2.227-.583-3.114 1.75-.523 1.375-1.61 2.5-2.416 2.5-2.795 0-2.788-2.177.016-5.105 1.55-1.618 3.363-4.169 4.028-5.669.793-1.786 1.238-2.14 1.29-1.026.045.935.847 2.128 1.781 2.651 1.43.8 1.981.152 3.477-4.095.978-2.776 2.484-5.828 3.347-6.781 1.184-1.309 1.507-3.545 1.318-9.105-.25-7.363.164-8.937 4.97-18.87 2.903-6.001 4.689-4.597 4.689 3.688 0 4.36.485 7.678 1.233 8.433 1.832 1.85 2.598.441 2.853-5.241.255-5.669 1.23-7.272 3.821-6.277 1.23.472 1.572 1.344 1.164 2.971-.985 3.925 1.324 3.766 5.465-.375 5.748-5.747 5.2-8.005-1.444-5.966-4.37 1.341-5.552.298-5.577-4.924-.02-4.093 1.796-5.211 3.91-2.407 1.415 1.874 2.255 2.093 5.846 1.518 3.808-.608 4.458-.386 7.079 2.42 3.145 3.366 4.282 7.126 3.45 11.41-.385 1.989-.129 2.75.928 2.75.804 0 2.294.92 3.312 2.044 1.017 1.124 2.774 1.911 3.905 1.75 1.691-.242 2.109-1.135 2.36-5.044.236-3.687.684-4.747 2-4.735 3.637.033 4.575 1.646 4.308 7.409l-.258 5.576h3.146c2.427 0 3.07.39 2.817 1.706-.18.939-1.414 1.963-2.74 2.276-2.043.482-2.623 1.561-3.785 7.044-1.361 6.42-1.026 17.17.618 19.83 1.47 2.378 3.904-1.523 4.643-7.444.515-4.121 1.582-6.748 4.062-9.995 2.37-3.105 3.497-5.783 3.819-9.069.543-5.549 2.319-7.133 4.517-4.032 1.004 1.417 1.672 5.09 1.901 10.454.294 6.877.673 8.441 2.25 9.285 1.302.697 1.897 2.102 1.897 4.48 0 4.157 2.132 4.667 3.84.918 1.577-3.462 1.457-5.402-.377-6.106-2.72-1.043-4.61-7.157-3.477-11.238 1.336-4.807 1.272-6.109-.3-6.109-1.807 0-4.957-6.715-3.556-7.58.941-.582 2.623-.037 7.87 2.552 2.185 1.078 2.986 8.748 1.273 12.183-1.587 3.182-1.016 4.845 1.664 4.845 1 0 2.39.69 3.09 1.532 2.239 2.698-2.334 14.636-7.43 19.392L251 684.85l-2.389-2.245c-3.044-2.86-4.25-8.167-2.126-9.355 2.292-1.283 1.816-3.457-.906-4.14-3.852-.966-5.579.233-5.579 3.876 0 1.798-.675 3.83-1.5 4.515-2.104 1.746-1.874 3.3.87 5.877 3.129 2.94 4.313 15.098 1.875 19.262-.85 1.45-1.26 3.379-.913 4.284.58 1.509.834 1.514 3.046.065 1.327-.87 2.643-2.462 2.925-3.539.64-2.445 3.697-1.552 3.697 1.08 0 2.649-6.242 10.42-8.652 10.772-2.443.356-4.905-4.471-3.898-7.643.92-2.898-1.059-3.571-5-1.701-3.879 1.84-4.2 3.028-1.759 6.512 1.327 1.895 1.674 4.54 1.61 12.283-.07 8.645.155 10.016 1.81 11.05 1.292.806 1.889 2.333 1.889 4.832 0 2.37.542 3.86 1.543 4.244 1.288.494 1.338.967.307 2.857-.68 1.246-1.263 4.74-1.294 7.765l-.056 5.5-3.39.324c-3.298.315-3.373.24-2.775-2.75.42-2.096.225-3.071-.61-3.065-.674 0-2.394-1.414-3.824-3.152-1.508-1.835-3.082-2.863-3.75-2.45-1.975 1.22-1.264 4.29 1.399 6.034 1.793 1.175 2.371 2.232 1.948 3.565-.71 2.236 1.78 7.503 3.939 8.331.83.32 1.889-.097 2.352-.924.648-1.159 1.427-1.281 3.39-.535 3.574 1.359 4.488 4.265 1.886 5.994-2.347 1.56-2.765 4.128-.672 4.128 1.992 0 2.684 2.513 1.236 4.493-.678.927-3.235 2.694-5.681 3.926-5.315 2.675-5.997 4.865-2.625 8.43 1.379 1.458 3.108 4.093 3.842 5.856s2.875 4.238 4.758 5.5c1.883 1.262 3.608 2.858 3.833 3.545.566 1.724-2.937 1.58-5.315-.218-1.067-.808-2.928-1.483-4.134-1.5-1.363-.02-2.874-1.183-3.987-3.068-1.48-2.504-1.98-2.782-2.854-1.586-.584.798-2.355 1.601-3.936 1.786-3.348.391-4.53 2.566-1.863 3.426 4.66 1.503 6.015 2.766 7.025 6.549 1.02 3.82.95 4.047-1.542 4.994-3.988 1.516-4.195 2.78-1.31 8.015 2.868 5.201 4.491 5.97 6.131 2.905.808-1.509.678-2.15-.578-2.853-1.455-.814-1.378-1.332.743-5.046 1.3-2.276 2.904-4.142 3.564-4.146.66 0 1.617-.752 2.127-1.662.557-.996 1.572-1.407 2.55-1.032 2.197.843 2.053 2.76-.253 3.364-1.032.27-2.459 1.58-3.171 2.91-1.138 2.126-1.035 2.696.847 4.7 1.699 1.807 1.98 2.891 1.354 5.23-.677 2.529-1.422 3.056-5.222 3.695-2.718.456-5.144 1.612-6.273 2.989-1.81 2.207-1.796 2.283.865 4.573 1.489 1.28 2.542 2.417 2.341 2.526-6.591 3.585-6.648 3.597-8.393 1.668-.922-1.019-1.626-3.116-1.564-4.66.35-8.74.172-9.616-2.522-12.428-1.506-1.572-3.67-3.154-4.808-3.515-3.995-1.268-4.558-3.25-3.939-13.866.321-5.5.977-10.746 1.458-11.658.911-1.727.508-10.305-.665-14.133-1.766-5.764-5.423-5.665-5.447.148-.008 2.004-.413 4.271-.9 5.039-1.32 2.085-4.085.525-4.085-2.306 0-3.726-1.72-4.034-3.483-.623-1.304 2.523-2.172 3.033-5.158 3.033-3.487 0-3.548.064-2.132 2.25.801 1.238 1.789 3.598 2.195 5.244 1.32 5.35 4.183 7.31 4.758 3.256.433-3.045 4.82-3.82 4.82-.85 0 1.334.482 1.852 1.399 1.5 2.068-.793 3.18 1.697 1.241 2.781-2.211 1.238-2.066 3.473.36 5.551 2.4 2.054 2.531 3.582.458 5.303-1.312 1.09-2.356.426-7-4.446L190 806.364v3.868c0 3.886 1.368 6.268 3.6 6.268.66 0 2.79 1.59 4.732 3.532 3.06 3.06 3.457 3.995 2.97 7-.37 2.276-1.12 3.48-2.183 3.501-.89.018-2.654.896-3.919 1.95l-2.3 1.918 2.05 2.05c2.517 2.516 2.639 2.518 5.744.075 3.323-2.614 8.515-3.52 11.38-1.986 2.203 1.179 2.218 1.273.415 2.592-1.03.752-2.84 1.368-4.025 1.368-1.185 0-2.936.864-3.892 1.92-1.653 1.827-1.639 2.206.278 7.75 1.108 3.207 2.29 7.115 2.628 8.686.358 1.67 1.43 3.069 2.578 3.37 1.081.282 2.235 1.584 2.563 2.894.329 1.309 1.238 2.38 2.02 2.38.783 0 1.704.73 2.046 1.622.53 1.383.891 1.273 2.447-.75 2.082-2.708 2.354-4.985.783-6.557-.596-.596-.933-2.149-.749-3.45.265-1.866.897-2.328 2.995-2.189 2.078.137 2.797-.374 3.29-2.338.61-2.43.714-2.46 3.118-.884 3.324 2.177 4.118 1.46 4.932-4.46.747-5.43.412-5.195 9.787-6.886l4.787-.864 1.502 3.594c1.428 3.417 1.394 3.675-.682 5.241-2.862 2.16-1.612 4.237 2.064 3.43 2.607-.573 2.808-.367 3.427 3.502.81 5.062.285 5.99-3.386 5.99-2.501 0-3.306-.795-6.08-6-1.76-3.3-3.525-6-3.923-6-.399 0-1.961 1.783-3.472 3.962-2.438 3.52-2.622 4.32-1.636 7.148.791 2.27.802 3.556.037 4.478-1.735 2.091-3.378.689-5.451-4.654-1.726-4.448-2.088-4.817-3.21-3.282-.697.953-1.265 4.506-1.265 7.916 0 4.266-.463 6.57-1.493 7.425-1.838 1.526-3.856 8.655-3.046 10.764.516 1.346.767 1.312 1.915-.257.726-.994 1.839-1.486 2.472-1.095 1.639 1.013 1.426 2.594-.348 2.594-.934 0-1.5.945-1.5 2.502 0 1.856 1.29 3.428 5 6.094 2.75 1.975 5 3.78 5 4.011 0 .231-.517 1.248-1.149 2.26-1.33 2.13.763 8.133 2.837 8.133.66 0 2.448 1.074 3.974 2.386 2.387 2.053 2.587 2.61 1.435 3.997-1.211 1.46-1.724 1.329-5.405-1.378-2.237-1.645-4.652-4.383-5.368-6.085-1.665-3.96-3.736-3.296-4.13 1.322-.243 2.866.099 3.716 1.7 4.224 1.227.39 1.788 1.2 1.446 2.09-.392 1.02 1.087 2.208 4.954 3.978 4.5 2.06 5.794 3.23 7.049 6.365 1.805 4.51 4.259 5.93 5.188 3.002.349-1.098.158-2.571-.425-3.273-1.329-1.601.494-3.719 2.529-2.938 1.858.713 4.365-1.477 4.365-3.812 0-1.211.71-1.878 2-1.878 1.1 0 2-.464 2-1.031 0-1.614-3.114-2.403-3.976-1.008-.469.759-1.613.987-2.9.579-2.504-.795-2.686-1.828-.624-3.54 2.032-1.686 1.886-3.225-.5-5.268-1.9-1.627-2-1.617-2 .219 0 2.347-1.278 3.263-3.41 2.445-1.964-.753-2.097-4.264-.189-4.997.771-.295 1.63-1.406 1.907-2.468.725-2.774 1.618-2.463 7.37 2.57 4.05 3.54 5.909 4.5 8.733 4.5 4.263 0 4.823 2.129 1.339 5.093l-2.25 1.914 2.75 2.283c2.912 2.419 3.512 4.288 1.582 4.932-1.855.618 1.178 9.833 3.135 9.521 1.767-.281 2.74 3.95 1.25 5.44-.806.805-4.613-.387-9.395-2.94-.373-.2-.823.867-1 2.37-.43 3.65-2.514 4.157-3.968.965-1.37-3.006-3.854-3.442-3.854-.677 0 1.195 1.066 2.274 2.867 2.902 3.87 1.35 5.036 5.706 2.226 8.324-2.96 2.759-5.049 2.344-5.746-1.14-.405-2.026-1.349-3.201-2.88-3.586-2.512-.63-6.699-4.618-6.315-6.015.508-1.848-1.35-5.387-2.828-5.387-1.144 0-1.38.643-.913 2.5.345 1.375.194 2.5-.335 2.5-1.42 0-4.09-4.168-3.393-5.296.33-.534.69-2.455.8-4.269.167-2.748-.209-3.4-2.26-3.915-3.197-.803-3.373-.529-2.226 3.468.658 2.296.617 3.772-.13 4.671-1.216 1.467-.428 5.825 1.411 7.794.973 1.04 1.593 1.022 3.303-.098 1.97-1.29 2.305-1.058 5.22 3.633 2.015 3.24 3.806 5.012 5.069 5.012 1.074 0 3.13 1.4 4.569 3.11 2.509 2.982 2.75 3.054 5.839 1.765 1.772-.74 3.885-1.196 4.696-1.015 2.317.52 6.026 5.03 6.026 7.331 0 1.962 2.487 4.706 4.33 4.777.456.017.532-1.318.17-2.968-.5-2.273-.302-3 .812-3 .81 0 1.729 1.026 2.044 2.28.43 1.714 2.01 2.758 6.358 4.201 3.182 1.056 6.84 2.584 8.13 3.396 2.102 1.324 2.696 1.287 5.75-.358 1.873-1.009 3.392-2.1 3.375-2.427-.018-.326-1.173-1.424-2.568-2.44-2.416-1.76-2.598-1.764-3.824-.088-2.063 2.82-4.886 1.12-4.098-2.467.584-2.66.33-3.006-3.013-4.109-2.67-.881-3.947-.907-4.758-.097-1.74 1.74-5.461 1.298-6.95-.826-.954-1.362-1.783-1.662-2.806-1.015-.799.505-1.97.925-2.604.934-1.55.02-3.773-6.343-2.38-6.808.568-.189 1.032-1.656 1.032-3.26 0-1.604.251-2.917.559-2.917 1.264 0 8.441 6.428 8.441 7.56 0 1.025 1.37 2.031 4 2.94.275.095 1.175.433 2 .75s2.91.82 4.635 1.116c2.837.487 3.19.259 3.722-2.403.701-3.505.038-5.597-2.025-6.389-2.046-.785-3.592.306-2.92 2.06.347.903-.389 1.787-1.996 2.398-3.385 1.287-3.416 1.277-3.416-1.053 0-1.168 1.022-2.487 2.42-3.125 3.419-1.557 2.236-4.235-1.536-3.48-2.347.469-3.249.014-5.296-2.67-1.54-2.02-2.433-4.459-2.375-6.492.059-2.056-.701-4.103-2.06-5.55-2.316-2.464-2.872-6.255-1.01-6.876.858-.286.858-.915 0-2.518-1.507-2.817-1.445-4.268.183-4.268 2.053 0 5.8 4.507 5.152 6.197-.357.931.383 2.137 1.937 3.155 4.249 2.784 7.695 1.644 4.085-1.352-.825-.685-1.5-2.768-1.5-4.63 0-3.11.16-3.287 1.955-2.166 1.075.671 2.245.93 2.6.575 1.235-1.236-.535-2.52-4.302-3.122-4.312-.69-7.856-5.09-6.204-7.702 1.418-2.242 1.119-3.34-.536-1.965-1.785 1.48-4.513.648-4.513-1.377 0-.798.777-2.805 1.727-4.46 1.47-2.562 1.545-3.512.5-6.402-.675-1.866-1.227-4.675-1.227-6.243 0-1.568-.757-3.687-1.682-4.709-1.297-1.433-1.748-4.197-1.969-12.079-.157-5.62-.536-12.02-.84-14.22-1.496-10.78-1.647-16.629-.467-18.05.93-1.12 1.552-1.202 2.59-.34.753.624 1.368 1.685 1.368 2.358 0 .672.902 2.038 2.004 3.036 2.08 1.882 3.522 1.578 8.305-1.747 1.52-1.056 2.038-.948 3.25.684 2.11 2.842 1.92 3.174-3.558 6.251-5.315 2.986-5.567 3.383-3.998 6.313.67 1.253.67 2.08 0 2.493-1.562.966-1.21 5.502.426 5.502 1.978 0 4.571-2.782 4.571-4.905 0-.969.269-2.03.598-2.36 1-1 3.402.384 3.402 1.962 0 1.893 3.96 5.226 6.262 5.27 1.498.028 1.666-.565 1.122-3.967-.404-2.525-.254-4 .406-4 2.2 0 4.21 1.272 4.21 2.665 0 .798 1.116 3.45 2.48 5.893 1.364 2.443 2.04 4.442 1.5 4.442-.539 0-.98-.487-.98-1.083s-.562-.887-1.25-.646c-2.725.952.396 6.115 3.75 6.203 1.325.035 1.936 4.526.617 4.526-1.976 0-6.63-2.488-7.924-4.234-1.433-1.936-3.731-2.322-4.68-.787-.992 1.605 1.405 5.021 3.522 5.021 1.08 0 1.965.45 1.965 1s.69 1 1.531 1c.843 0 1.81.788 2.15 1.75.34.963 1.562 2.8 2.718 4.082 1.54 1.709 2.083 3.595 2.032 7.057-.106 7.238-.74 8.248-4.386 6.977-3.449-1.202-3.517-1.417-1.545-4.866 2.131-3.728 1.808-6.206-1.293-9.92-2.137-2.56-3.286-3.19-4.892-2.68-1.154.367-2.343 1.599-2.64 2.739-1.01 3.856-3.164 1.398-3.477-3.967-.337-5.768-1.423-6.534-3.433-2.422-1.047 2.143-1.942 2.687-4.054 2.462-2.998-.318-3.516.875-1.211 2.788 1.787 1.483 1.99 7.11.317 8.783-1.75 1.75-.317 2.555 2.176 1.221 2.537-1.358 5.007-.677 5.007 1.381 0 .796 1.352 2.046 3.004 2.777 3.206 1.42 5.681 6.61 4.553 9.55-.343.895-.047 1.995.66 2.443 2.089 1.326 5.525.96 6.145-.655.966-2.518 3.746-1.674 4.944 1.5.623 1.65 1.484 3 1.913 3 1.137 0 .957 2.773-.227 3.505-.554.342-1.711-.081-2.571-.941-1.92-1.92-3.421-2.016-3.421-.219 0 1.988 3.34 4.655 5.829 4.655 1.504 0 2.171-.614 2.171-2 0-1.1.464-2 1.031-2 1.595 0 2.37 3 1.102 4.267-.623.623-1.133 1.937-1.133 2.92 0 1.882-6.466 5.261-8.115 4.242-1.575-.974-4.884.64-4.9 2.389-.03 3.32-1.5 4.502-3.805 3.062-1.15-.717-2.399-.995-2.777-.616-1.18 1.18 1.394 3.35 5.632 4.748 4.956 1.635 6.265 3.6 4.348 6.527-1.25 1.907-1.19 2.437.527 4.62 1.066 1.355 3.776 3.737 6.02 5.293 3.22 2.231 3.844 3.116 2.954 4.188-.621.748-1.786 1.36-2.59 1.36-.803 0-1.273.563-1.044 1.25.23.688 1.28 1.25 2.333 1.25 1.055 0 2.707 1.253 3.673 2.784 2 3.172 4.431 4.43 5.84 3.02.615-.615.176-1.96-1.22-3.735-1.776-2.257-2.206-4.199-2.31-10.421-.14-8.37-2.106-14.219-5.492-16.334-2.733-1.707-2.631-4.942.24-7.64 3.276-3.076 3.955-2.723 3.212 1.67-.564 3.342-.332 4.053 1.775 5.434 1.83 1.2 2.59 2.836 3.101 6.695.409 3.083 1.482 5.912 2.709 7.138 1.482 1.482 1.956 3.083 1.751 5.918-.387 5.356.668 5.883 3.196 1.597 2.293-3.886 2.662-4.089 4.885-2.682 1.135.718 1.21 1.426.35 3.313-.786 1.725-.791 3.722-.02 7.097.78 3.403.77 5.003-.031 5.805-1.53 1.529-4.242.296-4.242-1.927 0-1.813-1.763-4.232-3.083-4.232-.376 0-.92 1.238-1.21 2.75-.602 3.15 1.19 8.092 3.685 10.162 1.348 1.118 1.432 1.59.405 2.27-.991.657-.715 1.346 1.173 2.927l2.469 2.067 1.75-2.161c2.3-2.841 6.189-2.377 6.638.792.295 2.078.128 2.182-1.676 1.055-1.491-.93-2.611-.973-4.384-.165-1.779.81-3.173.752-5.51-.23zm-22.669-10.21c-1.092-1.093-1.841.644-1.057 2.45.744 1.714.798 1.713 1.212-.034.239-1.006.169-2.093-.155-2.417zm4.227-5.006c-.2-1.056-1.42-1.876-3.074-2.066-3.15-.364-3.508.513-.991 2.424 2.473 1.877 4.456 1.703 4.065-.358zm-1.086-4.854c-.332-.332-1.195-.368-1.917-.08-.797.32-.56.557.605.605 1.054.043 1.644-.193 1.312-.525zM295.15 956c0-.522-.484-1.111-1.075-1.308-.591-.197-1.075.391-1.075 1.308s.484 1.505 1.075 1.308c.591-.197 1.075-.785 1.075-1.308zm-41.467-12.688c-.32-.797-.556-.56-.604.605-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.917zm35.201-8.029c-1.004-1.875-1.195-1.9-2.732-.363-1.394 1.394-1.432 1.788-.243 2.524 2.406 1.487 4.221.168 2.975-2.16zm-70.888-2.287c-2.67-2.842-3.996-3.173-3.996-.996 0 .825.482 1.5 1.071 1.5.59 0 1.768.696 2.62 1.548 2.555 2.555 2.84.645.305-2.052zm64.355.82c.893-.894-5.41-7.398-6.51-6.718-1.302.805-1.018 1.908 1.232 4.767 2.04 2.595 3.934 3.294 5.278 1.95zm-24.062-4.317c-.287-1.1-1.145-1.999-1.906-1.999-1.723 0-1.838 3.67-.133 4.282 1.921.689 2.614-.086 2.04-2.283zm-32.072-4.067c-.967-3.328-3.088-5.984-6.93-8.682-3.992-2.801-4.287-2.797-4.287.07 0 2.753 10.11 12.453 11.717 11.243.12-.09-.106-1.274-.5-2.63zm36.081 1.437c.347-.348.156-1.521-.426-2.608-1.247-2.331-3.502-.845-2.536 1.672.625 1.629 1.874 2.023 2.962.936zm25.466-5.261c.955-.491 2.973-1.382 4.486-1.979 3.29-1.3 3.458-3.247.668-7.761-1.452-2.35-2.826-3.368-4.545-3.368-2.248 0-2.41.29-1.842 3.314.446 2.378.177 3.684-.955 4.623-1.615 1.34-2.099 4.207-.91 5.396.856.855 1.018.844 3.098-.225zm-83.222-15.026c-1.46-2.824-5.852-5.105-7.211-3.746-.317.317 1.391 2.605 3.796 5.085 4.652 4.798 6.262 4.166 3.415-1.34zm79.458.159c0-1.813-3.754-4.82-4.76-3.814-.31.31-.051 1.691.576 3.069 1.306 2.865 4.184 3.377 4.184.745zm-64.392-.663c.726-1.892-1.43-5.804-2.926-5.306-1.396.465-2.08 3.249-1.298 5.286.712 1.855 3.515 1.868 4.224.02zm-1.682-10.167c-.644-.776-1.566-1.411-2.048-1.411-1.354 0-1.039 2.776.372 3.282 2.003.718 2.949-.338 1.676-1.871zM227 895.5c0-1.333-.667-2-2-2-2.267 0-2.563 1.037-.8 2.8 1.763 1.763 2.8 1.467 2.8-.8zm-23.464-4.058c.706-1.143-11.872-27.136-17.249-35.644-1.808-2.861-3.287-5.647-3.287-6.19 0-1.725-2.188-2.42-3.096-.986-1.565 2.47-.99 7.49 1.07 9.355 1.086.983 2.252 2.659 2.59 3.724.338 1.065 1.982 2.768 3.652 3.784 2.216 1.348 3.563 3.404 4.98 7.603 1.07 3.165 3.262 7.671 4.874 10.014 1.611 2.342 2.93 5.115 2.93 6.162 0 3.02 2.184 4.366 3.536 2.178zm10.235-2.13c-.618-1.854-2.771-2.161-2.771-.395 0 .87.713 1.583 1.583 1.583.871 0 1.406-.534 1.188-1.188zm.229-8.871c0-.518-.675-.941-1.5-.941-1.546 0-1.987 1.18-.86 2.306.798.8 2.36-.104 2.36-1.365zm-3-10.941c0-2.333-.444-3-2-3-2.162 0-2.285.335-1.37 3.75.904 3.373 3.37 2.824 3.37-.75zm10 2c0-.55-.477-1-1.059-1s-.78.45-.441 1c.34.55.816 1 1.059 1s.441-.45.441-1zm54-1.583c0-.871-.534-1.406-1.188-1.188-1.854.618-2.161 2.771-.395 2.771.87 0 1.583-.713 1.583-1.583zm3.444-3.327c.927-1.5-.448-3.858-2.574-4.414-2.44-.638-3.595 1.745-1.86 3.837 1.385 1.668 3.583 1.954 4.434.577zM183 864.838c0-.863-1.244-1.338-3.5-1.338-2.412 0-3.5.457-3.5 1.47 0 1.037 1.028 1.43 3.5 1.338 2.19-.082 3.5-.633 3.5-1.47zm21.222-3.57c-.6-.724-1.85-3.556-2.775-6.293-.925-2.736-1.977-5.2-2.338-5.475-.36-.275-1.443-1.738-2.405-3.25-.963-1.513-2.384-2.75-3.16-2.75-1.919 0-2.795 3.21-1.677 6.15 1.069 2.811 7.753 11.807 10.055 13.533 1.983 1.486 3.84-.06 2.3-1.915zm79.853.957c-.124-1.196-1.495-.964-1.925.325-.22.66.14 1.02.8.8.66-.22 1.166-.726 1.125-1.125zM135 857.941c0-.858-.45-1.28-1-.941-.55.34-1 1.042-1 1.559 0 .518.45.941 1 .941s1-.702 1-1.559zm38.239-8.599c-.476-1.838-1.288-3.2-1.803-3.026-1.038.35-.818 2.115.756 6.06 1.38 3.462 2.151 1.228 1.047-3.034zm5.761-4.39c0-1.879-1.973-2.879-3.22-1.632-1.493 1.493-.18 4.27 1.682 3.556.846-.324 1.538-1.19 1.538-1.924zm90 .348c0-1.615-.296-1.904-1.113-1.087-.612.612-.81 1.602-.44 2.2 1.034 1.673 1.553 1.302 1.553-1.113zm-80-2.8c0-.55-.675-1-1.5-1s-1.5.45-1.5 1 .675 1 1.5 1 1.5-.45 1.5-1zm-9.19-2.862c1.322-.838 1.963-8.699.805-9.857-.343-.342-1.746.433-3.119 1.723-3.584 3.367-3.298 8.418.504 8.902.275.035 1.09-.31 1.81-.768zM177 825.5c0-1.1-.45-2-1-2s-1 .9-1 2 .45 2 1 2 1-.9 1-2zm-50.014-7.809c-.02-4.186-1.09-7.191-2.557-7.191-1.316 0-1.231 4.816.162 9.264.79 2.52 2.412 1.115 2.395-2.073zM114 813c0-1.833-.533-2.5-2-2.5-1.951 0-2.825 2.841-1.333 4.333 1.518 1.518 3.333.52 3.333-1.833zm5.968-.25c-.075-1.762-2.798-4.334-3.458-3.266-.375.607-.138 1.759.526 2.56 1.284 1.547 2.985 1.957 2.932.706zM183 811.434c0-1.136-.503-3.006-1.119-4.156-.94-1.757-.74-2.387 1.25-3.947 2.123-1.663 2.203-1.985.773-3.093-2.663-2.065-4.904-7.406-4.904-11.688 0-2.228-.36-4.05-.8-4.05-3.945 0-4.425 9.755-.698 14.184 2.297 2.73 2.379 3.148 1 5.117-1.914 2.732-1.891 4.175.113 7.234 1.966 3 4.385 3.22 4.385.4zm32 1.625c0-.242-.45-.72-1-1.059-.55-.34-1-.141-1 .441s.45 1.059 1 1.059 1-.198 1-.441zm-109.48-10.464c-.35-1.597-.23-3.156.268-3.464.498-.308.947-2.028.998-3.824.123-4.301-2.382-5.98-5.746-3.853-1.252.792-1.2 1.212.368 2.945 1.253 1.384 1.63 2.817 1.194 4.549-.625 2.49 1.06 6.552 2.718 6.552.461 0 .552-1.307.2-2.905zm68.123.392c.32-.832.001-2.21-.706-3.063-1.126-1.357-1.39-1.366-2.113-.073-.934 1.668-.09 4.65 1.314 4.65.509 0 1.186-.682 1.505-1.514zm48.867-7.237c-.397-1.512-.71-4.178-.693-5.922.018-1.845-.566-3.401-1.394-3.719-1.869-.717-1.82-4.512.085-6.617 1.025-1.134 1.305-2.678.875-4.83-.789-3.941-2.942-4.117-3.705-.302-.315 1.574-1.724 4.23-3.131 5.902-3.005 3.571-2.547 5.694 1.533 7.116 2.47.861 2.92 1.553 2.92 4.488 0 4.536.861 6.634 2.724 6.634 1.155 0 1.34-.645.786-2.75zm6.418-12.82c1.233-1.172 1.207-1.44-.192-1.978-2.793-1.072-5.223-.024-5.568 2.402-.288 2.025-.025 2.24 2 1.632 1.283-.385 2.974-1.31 3.76-2.057zM181 779.058c0-.792-.396-1.686-.88-1.985-1.592-.984-1.966-5.696-.496-6.26 2.096-.804 1.758-4.535-.374-4.119-1.08.211-1.75 1.252-1.75 2.718 0 1.422-.754 2.642-1.88 3.04-1.753.62-1.703.854.75 3.502 1.447 1.56 2.63 3.221 2.63 3.691 0 .47.45.854 1 .854s1-.648 1-1.441zm13 0c0-.792-.403-1.69-.896-1.995-1.258-.777-4.647-7.508-5.481-10.885-.764-3.092-3.332-3.158-2.792-.071.455 2.6.99 6.627 1.088 8.19.106 1.7 4.99 6.202 6.727 6.202.745 0 1.354-.648 1.354-1.44zm-20.776-13.77c.635-7.924-.05-12.789-1.802-12.789-2.294 0-3.66 3.924-2.97 8.526.392 2.615.234 4.55-.404 4.944-1.402.867-1.335 4.843.105 6.283 2.47 2.47 4.543-.375 5.071-6.963zm-75.728 1.673c-1.373-1.12-2.496-2.358-2.496-2.75 0-1.098 3.801-.842 4.51.304.908 1.469 2.49.187 2.49-2.016 0-2.576-1.059-3.027-5.44-2.316-3.564.578-3.72.761-3.14 3.664.789 3.945 4.61 8.2 5.76 6.413.52-.809-.084-1.992-1.684-3.299zm113.453 2.406c2.895-1.01 3.185-1.449 2.665-4.046-.32-1.603-1.801-4.512-3.29-6.465-2.554-3.347-2.753-3.43-3.484-1.453-.511 1.382-1.65 2.096-3.342 2.096-2.485 0-2.547-.152-1.935-4.767.418-3.145.153-5.943-.777-8.223l-1.41-3.455-1.904 3.223c-2.534 4.29-3.472 4.062-3.472-.844 0-4.268-1.402-7.934-3.035-7.934-.53 0-.965.93-.965 2.066 0 1.136-.446 2.9-.992 3.918-.741 1.386-.371 3.192 1.464 7.154 1.363 2.94 2.22 6.24 1.926 7.412-.357 1.421.283 2.895 1.953 4.503 1.956 1.882 2.27 2.785 1.485 4.254-1.465 2.738-.171 3.322 3.09 1.396 2.729-1.612 2.977-1.6 5.22.269 2.808 2.34 2.702 2.326 6.803.896zM88.5 766c0-2.49-.425-3.027-2.5-3.162-4.585-.297-7-1.514-7-3.53 0-1.664.64-1.934 4.25-1.79 8.11.32 9.75.05 9.75-1.612 0-.876-.884-1.824-1.965-2.107-1.08-.282-2.867-2.044-3.97-3.915-1.104-1.87-3.258-3.938-4.786-4.595-1.529-.657-2.938-1.3-3.133-1.43-.195-.128.367-1.682 1.25-3.45 1.998-4.006 2.008-4.49.062-2.874-1.95 1.618-2.975.564-4.328-4.443-.869-3.215-.753-4.421.651-6.799.94-1.59 2.835-3.444 4.213-4.121 2.699-1.326 6.006-1.105 6.006.401 0 1.247 3.722 1.186 4.5-.073.34-.55 1.436-1 2.437-1 1 0 2.356-.648 3.013-1.44.657-.792 2.175-1.58 3.373-1.75 1.545-.22 2.084-.891 1.856-2.31-.177-1.1-.454-4.7-.615-8-.162-3.3-.355-7.19-.429-8.643-.14-2.735-2.8-4.591-4.354-3.038-.513.513-.383 3.611.31 7.374 1.048 5.687.976 7.064-.583 11.148-1.866 4.886-2.873 5.457-5.758 3.267-2.16-1.64-2.3-6.906-.23-8.624 1.591-1.321 1.222-6.541-.731-10.317-.694-1.342-.468-2.364.842-3.811 1.538-1.7 1.584-2.11.33-2.916-2.502-1.606-4.445-.566-4.8 2.569-.712 6.297-4.707 7.508-5.746 1.741-.372-2.062-1.148-4.344-1.725-5.07-.785-.986-.336-1.887 1.782-3.576 2.302-1.835 2.706-2.758 2.16-4.93-.376-1.503-1.37-2.674-2.268-2.674-1.2 0-1.42-.56-.887-2.25 1.738-5.508 1.739-8.194.004-11.416-.988-1.834-2.126-3.334-2.53-3.334-1.367 0-2.006 5.028-.902 7.091.763 1.426.788 2.936.084 4.958-.558 1.599-.649 3.132-.202 3.408 1.19.736 2.178 6.56 1.34 7.896-1.38 2.198-1.247 8.952.265 13.405.837 2.466 1.24 5.373.894 6.461-.518 1.635-.278 1.867 1.387 1.339 2.98-.945 3.602 1.094 1.248 4.087-1.136 1.443-2.065 3.679-2.065 4.967 0 1.458-1.037 3.01-2.75 4.115-4.449 2.868-8.165 6.43-8.801 8.435-.332 1.044.267 3.295 1.358 5.103 3.403 5.644 4.595 10.616 3.178 13.262-1.052 1.966-.899 3.02 1.012 6.967 1.257 2.597 3.733 5.612 5.606 6.828 1.845 1.198 3.802 3.448 4.349 5.001.76 2.154 1.534 2.747 3.271 2.5 1.791-.254 2.277-.963 2.277-3.323zm95.54-9.879c-.792-2.4-1.616-3.337-2.6-2.96-2.045.785-1.783 2.996.643 5.422 2.724 2.724 3.392 1.885 1.957-2.462zM215.301 751c-.109-1.1-.484-4.025-.834-6.5-.487-3.447.086-6.984 2.448-15.112 1.697-5.836 3.085-12.842 3.085-15.568 0-6.203 2.684-15.588 4.308-15.061.656.212 1.887 1.834 2.736 3.603 1.728 3.6 2.956 3.202 2.956-.957 0-3.051-2.28-5.905-4.716-5.905-1.329 0-1.48-.992-.977-6.388.743-7.955-.9-10.154-6.768-9.053-3.19.598-3.733.413-4.217-1.436-.634-2.426-2.322-2.878-2.322-.623 0 .825.45 1.5 1 1.5s1 .916 1 2.035c0 1.12.64 3.032 1.422 4.25 2.113 3.292 3.076 11.41 1.568 13.227-.758.913-.994 2.72-.607 4.653.418 2.09.151 3.698-.788 4.748-1.511 1.69-3.595 11.339-3.595 16.648 0 3.822-2.623 6.647-4.06 4.375-.5-.79-.916-2.482-.925-3.76-.01-1.67-.506-2.227-1.765-1.983-1.483.288-1.73 1.406-1.619 7.323.259 13.795.273 13.866 3.369 17.484 1.647 1.925 2.996 3.866 2.998 4.313 0 .448 1.465.673 3.252.5 2.562-.247 3.208-.736 3.051-2.313zM181 748.941c0-.857-.457-1.276-1.016-.93-.56.345-.758 1.046-.441 1.558.857 1.387 1.457 1.129 1.457-.628zm-6.512-2.403c.343-1.08.148-2.85-.433-3.934-.58-1.085-1.055-3.54-1.055-5.456 0-4.419-.852-6.648-2.54-6.648-2.219 0-2.687 3.744-1.382 11.047.986 5.521 1.607 6.953 3.015 6.953.975 0 2.052-.883 2.395-1.962zm-84.862-4.571c-.31-.807-1.027-1.467-1.595-1.467-1.472 0-1.28 3.747.219 4.267 1.505.521 2.148-.788 1.376-2.8zm137.88.524c.969-1.569-.474-4.991-2.105-4.991-1.75 0-2.842 2.41-2.04 4.5.655 1.704 3.208 2.007 4.145.491zM101 741.83c0-1.256-3.305-4.329-4.655-4.329-1.669 0-1.753 2.192-.145 3.8 1.273 1.273 4.8 1.661 4.8.529zm-8.44-9.425c.372-.603-.052-1.824-.942-2.714-1.49-1.491-1.745-1.491-3.236 0-1.89 1.89-1.075 3.81 1.618 3.81 1.035 0 2.187-.493 2.56-1.096zm6.44-2.463c0-.793-.675-1.441-1.5-1.441-1.506 0-2.056 2.111-.86 3.306.933.933 2.36-.194 2.36-1.865zM84 728.5c0-1.333-.667-2-2-2-1.927 0-2.71 1.957-1.333 3.333 1.376 1.377 3.333.594 3.333-1.333zm96.24-5.25c2.425-8.417 2.14-35.75-.374-35.75-1.58 0-2.63 4.333-1.774 7.32.607 2.118.214 4.192-1.553 8.189-1.708 3.86-2.22 6.446-1.84 9.277.289 2.16.013 4.884-.614 6.056-.92 1.72-.746 2.903.908 6.144 1.126 2.208 2.427 4.014 2.89 4.014.464 0 1.524-2.362 2.356-5.25zM103 726c0-.825-.73-1.5-1.622-1.5-1.33 0-1.398.271-.378 1.5.685.825 1.415 1.5 1.622 1.5.208 0 .378-.675.378-1.5zm126.273-6.293c-.566-3.634-2.583-3.844-3.1-.324-.362 2.465 1.72 5.656 2.877 4.41.405-.436.505-2.275.223-4.086zM112 720.917c0-3.133-2.348-2.79-2.82.411-.212 1.443.208 2.172 1.25 2.172 1.021 0 1.57-.903 1.57-2.583zm-3.5-9.417c0-2.383-.452-4.484-1.005-4.668-1.58-.527-3.57 6.873-2.27 8.439 1.892 2.28 3.275.688 3.275-3.771zm90.5 4.559c0-.243-.45-.72-1-1.059-.55-.34-1-.141-1 .441s.45 1.059 1 1.059 1-.198 1-.441zm-81.934-4.809c.63-2.337 1.864-5.6 2.745-7.25.933-1.748 1.66-5.712 1.741-9.5.177-8.135 2.151-22.628 3.568-26.187.589-1.478 1.225-3.953 1.413-5.5a56.571 56.571 0 011.02-5.55c.508-2.061.26-2.898-1.006-3.383-2.534-.973-4.047 1.241-4.047 5.922 0 3.374-.341 4.171-1.74 4.06-1.829-.143-1.559.854 1.057 3.898 1.368 1.593 1.282 2.006-.903 4.33-1.914 2.037-2.573 4.159-3.18 10.24-1.773 17.73-3.604 28.971-4.844 29.738-1.655 1.023-.903 3.432 1.071 3.432 1.462 0 2.253-1.083 3.105-4.25zm74.934-.274c0-.773-.9-1.887-2-2.476-1.747-.935-2-.76-2 1.381 0 2.341 1.652 3.828 3.25 2.925.412-.233.75-1.057.75-1.83zm-153.393-4.058c-.334-.87-.607-1.995-.607-2.5 0-.505-.675-.918-1.5-.918-1.8 0-1.969 2.131-.3 3.8 1.709 1.709 3.123 1.484 2.407-.382zm159.77-7.212a372.52 372.52 0 011.244-8.553c.546-3.386.396-3.803-1.25-3.49-1.104.211-2.01 1.379-2.212 2.847-.188 1.37-1.059 3.292-1.935 4.273-1.53 1.712-1.914 9.791-.569 11.968 1.156 1.87 4.129-2.564 4.722-7.045zm7.057 4.544c.962-1.788 1.595-4.6 1.408-6.25-.192-1.682.241-3.458.986-4.043 1.075-.845.92-1.51-.817-3.5L204.866 688l.483 3c.283 1.753-.079 3.627-.87 4.509-.744.83-1.601 2.63-1.905 4-.304 1.37-.835 3.728-1.18 5.241-.902 3.957 1.823 3.62 4.04-.5zM72 704.122c0-1.888-2.664-3.948-4.021-3.109-.76.47-.567 1.285.61 2.586 2.027 2.239 3.411 2.451 3.411.523zm163.673-5.872c-.309-1.238-.924-3.735-1.367-5.55-.443-1.814-1.256-3.164-1.806-3-1.243.373-1.056 4.4.373 8.05 1.305 3.33 3.607 3.742 2.8.5zM71 695.047c0-.8-.537-2.631-1.193-4.072-.88-1.932-.898-2.8-.065-3.315.622-.385 1.27-4.029 1.443-8.125.297-7.001.176-7.499-2.104-8.658-1.33-.677-2.837-1.976-3.347-2.888-.642-1.147-1.672-1.47-3.347-1.05-1.968.494-2.606.115-3.424-2.038-.701-1.842-.67-3.05.104-3.982.64-.772.83-2.612.447-4.354-1.225-5.577 2.437-6.514 4.322-1.105.758 2.175.623 3.153-.607 4.383-1.445 1.445-1.437 1.64.094 2.227.922.354 1.677 1.496 1.677 2.537 0 1.21.703 1.893 1.95 1.893 3.253 0 3.884-2.666 2.34-9.868-.783-3.648-1.63-8.997-1.883-11.886-.253-2.89-.905-6.427-1.45-7.86-.82-2.157-1.244-2.393-2.474-1.372-.815.677-1.483 1.85-1.483 2.608 0 2.607-2.563 1.374-3.765-1.81-1.011-2.68-.947-3.472.4-4.962 2.593-2.864.45-15.8-2.987-18.034-1.775-1.154-2.793.237-2.218 3.03.3 1.46.608 7.379.684 13.154.076 5.775.775 13.114 1.554 16.309 1.158 4.745 1.202 7.217.24 13.5-.781 5.106-.867 9.203-.254 12.191 1.054 5.141-.314 10.67-3.014 12.182-2.142 1.199-1.584 2.04 3.743 5.635 3.164 2.135 4.776 2.673 5.982 1.999 2.238-1.253 3.635-.199 3.635 2.743 0 1.937.516 2.441 2.5 2.441 1.52 0 2.5-.57 2.5-1.453zm-14.925-9.957c-.928-1.118-.701-1.739 1.1-3 2.837-1.987 6.825-2.083 6.825-.163 0 .784-1.42 2.134-3.154 3-3.794 1.893-3.348 1.877-4.771.163zm56.958 8.848c1.084-2.025 1.12-2.965.169-4.486-.661-1.059-1.202-3.03-1.202-4.38 0-3.067-1.386-4.017-3.01-2.061-.98 1.183-.977 1.8.018 2.999.77.927 1.05 3.023.726 5.437-.758 5.65.927 6.923 3.3 2.491zm78.41-4.66c.856-1.223 1.557-3.07 1.557-4.106s1.125-3.22 2.5-4.854c2.75-3.268 3.079-4.84 1.371-6.547-.838-.838-.587-1.816.974-3.801 1.156-1.47 2.386-4.184 2.732-6.03.536-2.858.207-3.721-2.213-5.803l-2.842-2.445-1.11 2.654c-.611 1.46-.895 4.332-.632 6.383.317 2.474-.082 4.583-1.186 6.268-.96 1.466-1.85 5.354-2.103 9.195-.242 3.661-.9 7.118-1.465 7.682-1.287 1.287-1.34 3.626-.083 3.626.52 0 1.644-1 2.5-2.223zM91 680.822c0-1.902-1.848-5.323-2.875-5.323-1.89 0-3.055 4.903-1.93 8.129l1.117 3.204 1.844-2.277c1.014-1.253 1.844-2.932 1.844-3.733zm92.457 3.746c.317-.512.118-1.213-.44-1.559-.56-.345-1.017.073-1.017.931 0 1.757.6 2.015 1.457.628zm-151.982-4.028c.65-1.053-1.498-5.041-2.716-5.041-.935 0-1.012 4.414-.092 5.333.947.948 2.117.826 2.808-.292zm11.079-4.128c1.03-1.668-1.287-3.58-2.667-2.2-1.154 1.154-.432 3.287 1.113 3.287.485 0 1.184-.49 1.554-1.087zm7.76-.163c3.841-1.77 3.01-4.18-1.572-4.56-3.852-.32-4.53.594-3.135 4.228.732 1.908 1.213 1.942 4.707.332zm161.765-3.345c1.461-1.76.441-4.542-1.406-3.833-1.146.44-3.673 4.486-3.673 5.881 0 .84 4.031-.786 5.08-2.048zm10.51-5.718c-.28-9.699-.837-11.173-3.58-9.46-1.61 1.006-2.295.756-4.525-1.65-1.68-1.813-2.973-2.488-3.588-1.873-1.397 1.397.018 4.296 2.097 4.296 1.771 0 2.269 1.356 3.669 10 .61 3.769 2.875 7 4.907 7 .93 0 1.196-2.171 1.02-8.313zM88.32 671.211c-.306-.495-.987-.445-1.547.115-.55.55-.668 1.537-.262 2.194.56.907.932.88 1.547-.115.445-.72.563-1.708.262-2.194zm-54.426-1.515c1.225-2.288-.192-4.68-2.294-3.873-2.42.928-1.976 5.677.53 5.677.44 0 1.233-.812 1.764-1.804zm83.71-.925c-1.017-1.017-1.856.514-1.022 1.863.63 1.02.866 1.02 1.204.004.232-.695.15-1.535-.183-1.867zm72.866-5.362c-.474-1.493-1.195-1.775-3.289-1.282-4.323 1.017-4.749 2.119-1.856 4.8 1.47 1.362 2.71 3.061 2.756 3.775.044.714.737-.205 1.539-2.04.801-1.837 1.184-4.2.85-5.253zm-12.08 2.196c.358-2.692 1.316-5.447 2.13-6.122.813-.675 1.479-1.931 1.479-2.791 0-.86.957-2.582 2.127-3.827 2.476-2.635 1.931-6.488-.618-4.372-1.823 1.512-4.5 6.772-4.536 8.91-.015.879-1.314 3.15-2.887 5.047-2.4 2.894-2.692 3.82-1.813 5.75 1.713 3.76 3.418 2.685 4.119-2.595zm-65.37 1.857c.599-1.12.82-2.887.49-3.926-.338-1.065-.028-2.247.712-2.712 1.289-.81 3.928-8.929 4.16-12.793.142-2.379-2.842-3.224-5.016-1.42-1.157.96-1.377 2.336-.89 5.582.521 3.477.351 4.307-.88 4.307-2.02 0-3.186-2.43-4.064-8.476l-.723-4.976-1.405 3.34c-2.277 5.415-1.646 12.112 1.14 12.112.826 0 1.594 1.806 2.021 4.75 1.003 6.918 2.333 8.176 4.454 4.212zM24.5 664c0-1.008-.563-2.02-1.25-2.25-.792-.264-1.25.561-1.25 2.25s.458 2.514 1.25 2.25c.688-.23 1.25-1.242 1.25-2.25zm18.5-4.413c0-1.013.675-2.402 1.5-3.087s1.5-2.035 1.5-3c0-.965.713-2.347 1.585-3.07 1.122-.932 1.4-2.209.953-4.373-.348-1.681-.736-4.632-.864-6.557-.333-5.035-1.535-6.644-3.193-4.276-1.015 1.448-1.067 2.787-.23 5.92.594 2.228.756 4.896.36 5.93-.634 1.65-.984 1.457-2.878-1.598-1.186-1.912-2.623-3.813-3.195-4.226-.71-.513-.69-.987.062-1.5.604-.412 1.354-3.281 1.665-6.375.448-4.464.172-6.27-1.335-8.75-1.046-1.719-2.305-3.125-2.8-3.125-1.784 0 .323 22.892 2.504 27.2 1.576 3.116 1.803 6.8.418 6.8-1.688 0-6.254 4.865-5.584 5.949 1.05 1.697 2.249 1.215 2.983-1.199.671-2.21.702-2.2 1.697.492.853 2.308 1.317 2.58 2.933 1.715 1.055-.565 1.919-1.856 1.919-2.87zm-13-3.146c0-1.618.45-2.941 1-2.941 2.54 0 .343-14.64-2.56-17.05-2.576-2.138-3.755.165-2.49 4.865.603 2.238 1.28 7.133 1.507 10.877.226 3.745.44 7.172.477 7.617.183 2.235 2.066-.834 2.066-3.368zm172.83-3.47c.634-1.39 1.79-2.772 2.57-3.071 1.507-.578.959-3.992-1.325-8.26-2.711-5.066-6.51-.495-5.551 6.678 1.074 8.042 2.206 9.265 4.307 4.654zm22.17.946c0-1.766-2.153-1.459-2.77.395-.219.654.316 1.188 1.187 1.188.87 0 1.583-.713 1.583-1.583zM101 650.5c0-2.951-1.282-3.97-2.506-1.991-.804 1.302.358 4.991 1.573 4.991.513 0 .933-1.35.933-3zm118.913.087c1.885-1.885 1.875-1.923-.644-2.556-2.95-.74-4.805.629-3.933 2.902.8 2.086 2.254 1.977 4.577-.346zm-96.23-3.274c-.32-.798-.556-.561-.604.604-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.916zm-102.249-1.707c.902-1.46-2.335-8.106-3.947-8.106-1.77 0-1.875 1.588-.39 5.85 1.055 3.025 3.18 4.13 4.337 2.256zm96.364-7.94c-.403-6.094-2.468-6.55-3.34-.738-.872 5.816-.065 8.32 2.102 6.522 1.064-.883 1.445-2.66 1.238-5.784zm-6.352.114c.762-1.987.069-2.692-1.903-1.935-.849.326-1.543 1.492-1.543 2.592 0 2.315 2.488 1.84 3.446-.657zm-38.481-2.214c1.226-2.291 1.372-6.066.235-6.066-1.66 0-3.2 2.501-3.2 5.2 0 3.239 1.466 3.667 2.965.866zM105 636c0-.825-.418-1.5-.929-1.5-.51 0-1.657-.729-2.547-1.619-2.609-2.608-3.096-.619-.52 2.123 2.67 2.842 3.996 3.173 3.996.996zm-38.124-6.132l-2.191-2.332 2.657-2.09c3.164-2.49 3.333-4.025.705-6.403-1.886-1.707-1.971-1.678-2.5.845-.3 1.436-.807 3.85-1.125 5.362-.318 1.512-1.297 3.548-2.176 4.524-.97 1.075-1.234 2.12-.672 2.653 1.477 1.401 4.812 1.801 6.21.744 1.007-.762.812-1.472-.908-3.303zM19 630.8c0-2.011-.29-2.41-1.133-1.567-.623.623-.862 1.838-.531 2.7.915 2.385 1.664 1.876 1.664-1.133zm13.422-1.634c-.866-2.848-3.391-5.666-5.077-5.666-2.054 0-1.62 1.763 1.354 5.49 2.893 3.625 4.8 3.715 3.723.176zm14.786-1.89c-.077-1.802-.268-6.644-.424-10.76-.217-5.703-.64-7.55-1.784-7.765-1.024-.192-2.056 1.418-3.25 5.07-2.102 6.427-2.186 8.298-.405 8.981.739.284 1.93 2.607 2.645 5.162 1.468 5.245 3.453 4.82 3.218-.688zm66.363-2.065c.038-2.064.601-4.283 1.25-4.932 1.838-1.838 1.342-3.994-1.752-7.61-3.73-4.359-4.78-2.563-2.075 3.55 2.243 5.07 2.311 4.866-2.657 7.904-1.775 1.085-1.771 1.196.101 3.287 2.884 3.219 5.048 2.292 5.133-2.199zm6.429-1.474c0-1.12-.282-1.098-1.5.12-.825.825-1.486 2.32-1.468 3.322.03 1.71.122 1.702 1.5-.12.807-1.068 1.468-2.562 1.468-3.322zm-15.064 1.824c1.19-.753 1.211-1.178.127-2.485-1.898-2.287-3.063-1.936-3.063.924 0 2.669.644 3.011 2.936 1.56zm-80.518-2.668c.87-.334 1.582-1.39 1.582-2.345 0-.956.9-2.553 2-3.548 1.1-.995 2-2.356 2-3.024 0-1.637-7.02-2.704-8.687-1.321-1.734 1.439-1.67 2.845.128 2.845 2.343 0 3.006 2.2 1.086 3.604-1.015.742-1.523 1.964-1.184 2.848.667 1.738.852 1.794 3.075.941zM9.5 620.5c.34-.55.141-1-.441-1S8 619.95 8 620.5s.198 1 .441 1 .72-.45 1.059-1zm30.304-11.748c.22-2.976.94-4.51 2.636-5.621 3.148-2.062 6.337-7.461 6.576-11.131.352-5.4.032-6.5-1.894-6.5-2.994 0-4.248 2.358-3.556 6.686.468 2.925.223 4.244-.97 5.235-.878.728-1.596 1.874-1.596 2.546 0 .673-.853 1.995-1.895 2.938-2.997 2.713-3.603 11.252-.732 10.31.62-.204 1.264-2.212 1.43-4.463zm57.64-2.475c1.358-1.94 2.271-9.777 1.138-9.777-1.983 0-3.582 1.64-3.582 3.673 0 1.352-.47 3.338-1.046 4.413-2.054 3.839.962 5.3 3.49 1.691zm-69.8-.29c.668-1.743-1.436-4.733-2.757-3.917-.488.301-.887 1.646-.887 2.989 0 2.73 2.689 3.416 3.643.928zM60 606.56c0-.518-.45-1.22-1-1.559-.55-.34-1 .084-1 .941s.45 1.559 1 1.559 1-.423 1-.941zm7.978-7.75c.03-1.583-1.315-2.343-2.641-1.493-1.497.96-2.606 4.94-1.758 6.311.77 1.247 4.359-2.683 4.399-4.818zM16 600.582c0-.505-.278-1.642-.617-2.526-.463-1.207-.946-1.334-1.94-.508-.728.604-1.078 1.74-.777 2.525.601 1.565 3.334 1.982 3.334.509zm92-.082c0-.55.675-1 1.5-1 .835 0 1.5-.89 1.5-2.008 0-1.603-.354-1.82-1.75-1.073-.963.514-2.588 1.198-3.613 1.52-1.523.478-1.638.855-.627 2.073 1.414 1.704 2.99 1.961 2.99.488zm-81.72-6.037c-.614-2.35-1.599-2.489-3.28-.463-.994 1.197-.992 1.805.01 3.012 1.652 1.99 3.982.174 3.27-2.549zm8.22 1.037c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm74.5-8.83c0-1.672-.476-4.291-1.057-5.821-.847-2.227-1.243-2.489-1.985-1.315-.51.806-.934 2.4-.943 3.542-.008 1.141-1.14 3.132-2.515 4.424-3.056 2.871-3.149 4.432-.377 6.374 1.964 1.375 2.301 1.275 4.5-1.338 1.362-1.619 2.377-4.123 2.377-5.865zm-81 2.94c0-2.588-3.399-6.6-4.838-5.71-1.532.947-1.483 4.32.088 6.104 1.839 2.088 4.75 1.847 4.75-.393zm37.447-4.195a1.117 1.117 0 00-1.532-.362 1.117 1.117 0 00-.362 1.532 1.117 1.117 0 001.532.362 1.117 1.117 0 00.362-1.532zm-23.11-6.089c1.22-1.932.207-4.826-1.689-4.826-1.599 0-2.796 3.45-1.956 5.639.658 1.715 2.28 1.353 3.646-.813zM22 571.56c0-.518-.45-1.22-1-1.559-.55-.34-1 .084-1 .941s.45 1.559 1 1.559 1-.423 1-.941zm19.096-.675c2.663-3.208 3.56-8.106 3.112-16.979-.511-10.113-1.54-13.204-3.778-11.347-.786.653-1.43 2.01-1.43 3.017 0 1.007-.51 2.95-1.133 4.317-.92 2.019-.826 2.792.5 4.118 2.522 2.521 1.956 4.228-1.813 5.472-3.653 1.206-4.007 4.018-.506 4.018 2.577 0 3.134 1.38 1.452 3.603-3.204 4.232.227 7.84 3.596 3.78zM61 563.378c0-2.233-2.814-2.526-3.638-.378-.317.825-.298 2.226.043 3.113.501 1.306.902 1.377 2.107.377.818-.68 1.488-2.08 1.488-3.112zm-32.63-.976c.693-3.467-.126-7.902-1.46-7.902-.48 0-1.105 1.125-1.39 2.5-.286 1.375-.737 3.558-1.002 4.852-.265 1.293-.19 2.643.167 3 1.505 1.505 3.107.44 3.685-2.45zm-29.87.098c0-.81-.787-1.624-1.75-1.81-1.228-.236-1.75.304-1.75 1.81s.522 2.046 1.75 1.81c.963-.186 1.75-1 1.75-1.81zm21.974-4.95c1.865-3.605 1.887-4.05.2-4.05-1.908 0-6.006 4.653-5.22 5.926 1.211 1.96 3.474 1.114 5.02-1.876zm44.138-.481c.845-2.203-1.177-9.054-2.763-9.36-2.167-.417-4.638 8.136-2.94 10.181 1.282 1.545 5 1.01 5.703-.821zm-49.56-7.819c-.028-.412-.054-2.212-.056-4l-.003-3.25-2.019 3.31c-1.11 1.82-1.74 3.758-1.403 4.305.687 1.111 3.565.809 3.482-.365zm18.436-.712c.681-2.146-.966-6.038-2.555-6.038-1.674 0-2.258 2.99-1.086 5.564 1.34 2.943 2.797 3.132 3.641.474zm-4.873-10.477c.304-.792.097-2.254-.46-3.25-.745-1.33-.612-2.254.5-3.483.833-.92 1.76-3.5 2.059-5.732.432-3.222.194-4.194-1.152-4.71-2.614-1.004-3.896 1.085-3.887 6.33.006 3.513-.482 5.131-1.834 6.09-2.32 1.647-2.358 3.793-.091 5.114 2.477 1.442 4.223 1.313 4.865-.36zM17.8 537.3c1.882-1.882 1.448-2.541-2.05-3.11-1.788-.29-4.133-.676-5.212-.859-1.238-.209-2.095.314-2.323 1.419-.268 1.299.287 1.75 2.153 1.75 1.383 0 2.792.45 3.132 1 .837 1.354 2.84 1.26 4.3-.2zm23.61-2.427c.704-1.832-1.162-4.644-2.523-3.803-.488.301-.887 1.646-.887 2.989 0 2.765 2.438 3.347 3.41.814zm-32.875-5.988c3.319-2.174 3.165-3.777-.28-2.913-3.036.762-5.255 2.303-5.255 3.65 0 1.4 2.855 1.02 5.535-.737zM-3 526.059c0-.243-.45-.72-1-1.059-.55-.34-1-.141-1 .441s.45 1.059 1 1.059 1-.198 1-.441zm23-3.676c0-1.197-.707-1.883-1.941-1.883-2.27 0-3.457 1.521-2.709 3.47.772 2.01 4.65.687 4.65-1.587zm7.82-7.643c.35-2.462-.758-2.902-2.62-1.04-1.791 1.791-1.456 3.995.55 3.613.963-.183 1.894-1.341 2.07-2.573zm-36.812-3.235c-1.939-1.198-3.474.337-2.604 2.605.632 1.648.765 1.65 2.383.031 1.495-1.495 1.523-1.83.221-2.635zM12 498.5c0-.55-.702-1-1.559-1s-1.28.45-.941 1c.34.55 1.041 1 1.559 1s.941-.45.941-1zm13.217-2.183c-1.525-1.525-2.453-.596-1.608 1.607.465 1.212.967 1.4 1.724.643.756-.756.722-1.412-.116-2.25zM5 484.667c0-1.302-1.189-2.168-2.156-1.57-1.034.638-.142 2.403 1.215 2.403.518 0 .941-.375.941-.833zm-15.032-1.417c-.017-.688-.638-2.049-1.378-3.025-1.253-1.651-1.38-1.6-1.825.726-.263 1.376-.243 2.738.045 3.025 1.011 1.012 3.19.51 3.158-.726zM354 980.682c0-.585.45-1.342 1-1.682 1.402-.867 1.246-2.111-.482-3.84-2.22-2.22-5.388-.886-6.43 2.707L347.18 981l-.09-3.55c-.05-1.953-.595-4.055-1.213-4.673-1.368-1.368 2.442-7.277 4.691-7.277 1.74 0 1.891 3.14.232 4.8-1.954 1.954 2.208 1.503 4.395-.476 1.398-1.266 2.135-1.394 3.005-.524.87.87.73 1.62-.572 3.059-1.133 1.252-1.515 2.744-1.112 4.348.402 1.6.074 2.888-.952 3.74-.958.795-1.564.886-1.564.234zm233.015-1.557c.008-1.169.486-2.8 1.061-3.625.773-1.109.872-.622.38 1.869-.367 1.852-.282 3.19.189 2.973.47-.217 2.655-1.214 4.855-2.216 2.2-1.003 5.274-2.453 6.831-3.224 1.557-.771 3.664-1.402 4.683-1.402 1.018 0 2.124-.86 2.458-1.91.333-1.051 1.757-2.665 3.163-3.586 2.426-1.59 2.626-1.576 3.93.286 1.627 2.322 5.16 3.463 6.086 1.965.36-.582-.54-1.927-1.999-2.99-1.458-1.062-2.652-2.583-2.652-3.38 0-.796-.694-1.714-1.542-2.04-.874-.335-1.416-1.512-1.25-2.718.253-1.843-.275-2.168-3.958-2.434-4.666-.338-5.892-2.598-2-3.688 2.416-.677 6.18-2.194 8.986-3.622.955-.486 2.68-.883 3.834-.883 3.725 0 1.458-2.454-3.391-3.671-3.3-.828-5.768-.874-8.423-.157-4.826 1.303-5.426 1.937-6.172 6.527-.719 4.42-2.441 5.044-2.9 1.051-.651-5.658-6.184-1.533-6.184 4.61 0 2.369-.54 3.91-1.5 4.278-.825.317-1.5 1.428-1.5 2.469 0 1.353.714 1.893 2.5 1.893 3.074 0 3.148 1.204.312 5.04-2.6 3.516-3.391 3.677-4.134.837-.49-1.876-.998-2.035-4.366-1.37-2.097.413-4.799.875-6.005 1.028-4.41.556-5.698 3.065-2.807 5.465 1.169.97 1.82.98 2.945.046.795-.66 2.482-1.001 3.75-.759 2.134.408 2.11.451-.323.577-1.445.075-3.149.765-3.786 1.533-2.226 2.682-4.956.745-5.284-3.75-.26-3.58-.74-4.34-3.507-5.558-4.462-1.965-4.782-3.755-1.294-7.244 1.65-1.65 2.999-3.864 2.999-4.922 0-2.307 2.537-2.572 3.388-.354.409 1.065 1.27 1.357 2.679.91 1.348-.428 2.787-.016 4.104 1.176 1.982 1.794 2.082 1.768 4.484-1.16 1.914-2.334 2.356-3.813 2-6.706-.505-4.127 1.004-6.248 3.379-4.747 2.115 1.338 3.966 1.167 3.966-.367 0-1.548 4.14-5.675 5.692-5.675.585 0 1.62.67 2.299 1.49 1.695 2.042 3.24.853 1.829-1.407-.918-1.469-.71-2.429 1.064-4.92 1.89-2.653 2.643-3.007 5.274-2.481 2.932.586 3.016.512 1.867-1.636-1.045-1.952-.862-2.606 1.385-4.952 3.282-3.425 3.254-4.466-.16-6.042l-2.75-1.27 2.25-1.512c2.959-1.99 2.85-4.653-.291-7.124l-2.542-1.999 1.398-8.097c.77-4.453 1.677-8.375 2.018-8.716.34-.34 1.324-.034 2.185.681 3.021 2.508 3.89-.355 3.89-12.82 0-11.484-.972-16.477-3.931-20.195-2.945-3.7-3.568-8.205-1.86-13.444.906-2.78 2.088-5.612 2.626-6.292.539-.68.77-2.93.514-5-.563-4.561 1.714-14.022 3.977-16.522 1.479-1.634 1.734-1.657 2.536-.224.7 1.25 1.197 1.34 2.31.415 2.062-1.71 1.74-4.616-.58-5.222-2.364-.618-2.612-2.958-.5-4.71.825-.685 1.5-2.076 1.5-3.09 0-1.494.43-1.687 2.248-1.015 1.903.704 2.44.375 3.502-2.152 1.05-2.496 1.5-2.781 2.752-1.742 2.57 2.134 1.83 5.435-1.502 6.692-3.63 1.37-4.132 3.807-.602 2.921 1.32-.33 3.553 0 4.965.73l2.566 1.331-2.816 2.083c-2.262 1.672-2.943 3.131-3.46 7.412-.354 2.931-.923 6.567-1.265 8.08-.52 2.3-.29 2.75 1.406 2.75 1.875 0 4.47-4.057 6.554-10.25.324-.963 1.278-1.75 2.12-1.75 1.938 0 1.971-3.837.055-6.367-1.222-1.613-1.207-2.427.107-6 .836-2.274 1.96-4.952 2.496-5.952 1.143-2.13.12-10.412-1.403-11.353-.976-.603-3.727 2.068-5.628 5.465-.63 1.128-1.88 1.316-5.32.8l-4.495-.674-.632-6.792c-.347-3.735-.916-8.217-1.264-9.96-.508-2.537-.304-3.168 1.023-3.168.912 0 2.02.98 2.462 2.177l.806 2.176.569-2.176c.813-3.11 2.251-2.697 4.623 1.323 1.6 2.712 2.714 3.5 4.944 3.5 3.064 0 5.08 1.804 6.965 6.23.78 1.83 1.668 2.537 2.694 2.144 2.075-.797 1.917-3.226-.461-7.127-1.091-1.79-1.877-4.265-1.747-5.5.21-1.985-.229-2.254-3.762-2.313-8.55-.143-9.77-1.209-4.5-3.934 1.65-.853 3-2.145 3-2.87 0-1.73-2.978-4.327-5.489-4.788-2.219-.407-2.974-2.618-1.615-4.73.705-1.096 1.662-.62 4.532 2.25 2.785 2.785 4.452 3.638 7.105 3.638 3.907 0 4.875-2.418 1.409-3.518-3.152-1-2.19-4.896 1.308-5.298 2.311-.266 2.75-.79 2.75-3.284 0-2.316.748-3.409 3.41-4.98 4.19-2.471 4.88-4.062 2.952-6.812-1.584-2.263-1.254-2.61 3.138-3.309 1.657-.263 2.052-1.215 2.302-5.558.293-5.076.396-5.24 3.272-5.24 4.27 0 5.956 3.86 3.318 7.599-1.04 1.474-2.16 3.18-2.487 3.79-2.377 4.437-2.643 5.413-1.829 6.7 1.431 2.26 1.065 8.548-.576 9.91-2.511 2.085-1.276 9.216 1.32 7.612 1.87-1.156 2.302 1.273.669 3.765-.877 1.338-1.458 3.714-1.292 5.278.213 1.997-.144 2.845-1.197 2.845-1.852 0-4.154 9.591-3.377 14.07.451 2.605-.238 3.991-4.546 9.147-2.792 3.342-5.077 6.425-5.077 6.85 0 1.55-6.196 13.445-7.384 14.18-1.239.764-3.33 6.072-5.613 14.253-1.908 6.834-4.314 12.741-6.209 15.246-1.43 1.89-2.015 2.064-3.621 1.076-1.471-.904-2.209-.904-3.174 0-.998.935-1.124.61-.61-1.572.45-1.902.258-2.74-.62-2.718-1.374.034-6.769 4.449-6.769 5.538 0 .367 1.35 2.204 3 4.083 1.65 1.88 3 4.232 3 5.227 0 .996.9 2.625 2 3.62 2.687 2.432 2.734 4.964.066 3.536-3.615-1.935-4.015-1.297-3.389 5.41.449 4.808.2 7.294-.981 9.783-1.15 2.424-1.359 4.332-.763 6.977.452 2.002.5 4.012.105 4.467-.394.455-1.304 3.388-2.023 6.519-1.433 6.24-.348 11.083 2.75 12.271 1.338.514 1.247.84-.592 2.129-2.438 1.707-3 6.408-.766 6.408 2.038 0 16.09-13.574 14.847-14.343-.573-.354-2.65.03-4.616.85-6.094 2.546-6.952 1.584-4.211-4.723.785-1.806 1.717-4.184 2.071-5.284.632-1.961.672-1.963 2.052-.088.844 1.148 1.156 2.913.779 4.415-.523 2.083-.339 2.391 1.103 1.838.952-.365 1.92-.664 2.15-.664 1.132 0 .092-4.996-1.873-9-1.544-3.146-2.74-4.411-3.972-4.203-2.96.498-3.132-2.591-.348-6.24 2.977-3.904 3.305-6.077 1.048-6.943-.86-.33-1.293-1.038-.963-1.573.366-.592 1.962-.324 4.074.683 4.665 2.224 6.438.727 4.674-3.947-1.59-4.213-.265-5.368 3.765-3.284 3.11 1.609 3.305 1.587 5.865-.655 5.373-4.704 7.005-8.367 3.398-7.625-.963.198-2.276-.332-2.92-1.177-1.03-1.354-1.453-1.27-3.564.714-1.317 1.237-3.352 2.25-4.522 2.25-1.17 0-2.404.45-2.744 1-.34.55-1.267 1-2.06 1-2.633 0-1.49-2.625 2.56-5.88 2.2-1.768 4-3.756 4-4.417 0-1.581 6.454-6.703 8.446-6.703.855 0 1.554-.45 1.554-1s-.675-1-1.5-1c-.918 0-1.5-.935-1.5-2.41 0-2.206.387-2.404 4.593-2.34 4.925.074 6.55 1.666 4.376 4.287-1.632 1.967-.363 3.21 1.829 1.79 2.42-1.568 1.962-7.411-.722-9.193-2.444-1.622-2.694-4.376-.56-6.148.835-.692 1.397-2.388 1.25-3.768-.368-3.471 1.756-3.877 3.819-.73 1.29 1.969 1.428 2.898.564 3.763-1.678 1.677-1.404 5.35.544 7.298 1.59 1.59 1.797 1.564 3.425-.446 1.367-1.69 1.537-2.819.807-5.365-1.255-4.375-1.237-4.443 1.335-5.089 1.243-.312 3.108-2.048 4.144-3.858 1.037-1.81 2.732-4.234 3.768-5.386 1.989-2.21 1.644-4.878-.747-5.796-.824-.316-2.1.492-3.038 1.923-1.199 1.83-2.504 2.468-5.046 2.468-2.448 0-3.345-.41-3.135-1.435.162-.789-.106-1.425-.594-1.414-1.34.03-2.57-2.413-1.815-3.604.366-.576.674-2.847.684-5.047.025-5.405 2.732-5.554 3.603-.2.945 5.814 2.364 6.602 5.859 3.255 2.162-2.072 3.036-3.936 3.256-6.944.209-2.854.76-4.111 1.8-4.111 1.091 0 1.672 1.592 2.127 5.826.745 6.936 2.138 8.917 3.924 5.58.68-1.27 3.422-4.53 6.093-7.244 2.671-2.713 4.857-5.292 4.857-5.73 0-1.77-4.19-2.07-6-.432-2.111 1.91-5.48 1.3-6.425-1.165-.775-2.02.83-3.97 3.9-4.74 3.812-.956 4.64-6.595.969-6.595-.791 0-3.236 1.624-5.434 3.61-2.434 2.198-4.594 3.38-5.525 3.022-1.28-.491-1.322-.923-.258-2.64.938-1.514.974-2.243.135-2.773-.938-.593-4.362-7.534-4.362-8.841 0-.208.685-.378 1.521-.378.837 0 2.034 1.125 2.66 2.5.627 1.375 1.686 2.5 2.352 2.5 1.79 0 10.286-3.898 10.995-5.045 1.228-1.987 2.291.181 2.974 6.061.503 4.332 1.213 6.296 2.533 7.002 2.912 1.559 4.038 1.156 3.547-1.268-.25-1.238-.715-4.163-1.03-6.5-.512-3.782-.354-4.25 1.436-4.25 1.107 0 2.012-.479 2.012-1.063 0-.585-1.013-.922-2.25-.75-2.035.283-2.28-.154-2.56-4.564-.17-2.682-.995-5.923-1.833-7.201-.838-1.278-1.25-3.183-.917-4.233.92-2.9-.282-5.043-2.505-4.462-1.064.278-1.935.012-1.935-.592 0-.603 1.237-1.353 2.75-1.666 5.943-1.228 10.159-2.808 9.658-3.619-.29-.468-1.57-.851-2.845-.851-4.157 0-6.99-6.177-5.618-12.256.828-3.673-.924-17.427-2.815-22.09-.635-1.566-2.049-3.081-3.142-3.367-2.911-.762-2.581-4.696.512-6.105 1.375-.627 2.5-1.833 2.5-2.682s-1.125-2.055-2.5-2.682c-2.926-1.333-2.953-1.49-1.037-6.075 2.166-5.184 5.537-5.962 5.537-1.276 0 1.173.521 2.654 1.158 3.291 1.12 1.12 1.684 3.91 2.271 11.242.42 5.25.462 5.335 1.968 4.086.768-.638 1.173-2.013.9-3.057-.272-1.043.04-3.522.696-5.508.99-2.997.92-4.183-.404-6.975-.878-1.85-1.321-4.08-.986-4.955 1.15-2.998-.27-4.668-3.067-3.605-2.272.864-2.536.718-2.536-1.404 0-1.302-.667-2.624-1.483-2.937-1.062-.407-1.328-1.502-.94-3.857 1.019-6.178 2.77-12.286 4.136-14.422.75-1.173 1.235-2.748 1.076-3.5-.189-.89.853-1.476 2.994-1.682 1.869-.18 3.789-1.126 4.458-2.199.904-1.446 1.491-1.622 2.533-.757 1.026.851 2.075.702 4.3-.612 2.644-1.562 3.003-1.579 3.547-.162.332.867.35 2.548.04 3.737-.312 1.192.177 3.419 1.09 4.964 1.588 2.688 1.557 2.937-.735 6.037-2.15 2.91-2.375 4.164-2.236 12.494.167 10.032-.855 13.336-9.22 29.814-3.662 7.213-4.294 9.928-2.56 11 .55.34 1 1.491 1 2.559s.45 1.941 1 1.941 1-1.784 1-3.965c0-2.96.514-4.24 2.028-5.05 1.982-1.06 2.012-.905 1.352 7.014-.773 9.27.828 18.249 3.86 21.649 1.824 2.044 1.836 2.305.235 5.4-1.126 2.178-1.49 4.46-1.1 6.899.464 2.897.162 4.005-1.472 5.404-3.156 2.702-.81 4.827 4.909 4.447 3.574-.237 4.914-.873 6.587-3.126 1.984-2.67 2.003-2.9.35-4.11-2.522-1.849-2.221-2.34 2.25-3.68 3.869-1.159 5.296-3.284 2.771-4.125-.676-.226-2.504.07-4.062.66-2.498.942-3.06.774-4.748-1.424-2.739-3.565-2.441-4.993 1.04-4.993 1.65 0 3-.229 3-.509s-1.35-2.372-3-4.65c-1.65-2.277-3-5.01-3-6.073 0-1.79.59-1.895 8.058-1.436 7.773.478 8.048.42 7.75-1.627-.19-1.307-1.269-2.349-2.808-2.71-2.12-.498-2.45-1.073-2.175-3.791.43-4.237-2.333-4.414-3.175-.204-.477 2.383-1.12 3-3.125 3-3.55 0-3.542-4.216.013-5.835 2.175-.991 2.38-1.451 1.432-3.221-1.423-2.659-4.47-2.11-4.47.805 0 1.217-.338 2.221-.75 2.232-.413.01-1.2.019-1.75.019s-1-1.52-1-3.377c0-3.03.724-3.905 7.021-8.5 4.338-3.165 8.064-5.129 9.75-5.138 4.423-.025 5.542-1.204 4.116-4.334-.975-2.14-.946-3.171.147-5.214 1.262-2.36 1.155-2.711-1.47-4.804l-2.832-2.258 3.283-3.739c2.516-2.866 3.008-4.013 2.106-4.915-1.663-1.663-4.118.083-6.817 4.847-1.737 3.066-2.331 3.525-2.841 2.195-.887-2.311 1.44-8.978 3.69-10.57 2.23-1.578 2.406-3.193.347-3.193-1.821 0-1.914-1.964-.27-5.703 1.843-4.193 3.047-4.561 5.415-1.658 1.695 2.078 2.692 2.493 4.75 1.977 3.273-.822 3.268-1.88-.033-6.208-2.47-3.239-2.778-3.365-4.861-2-2.072 1.357-2.38 1.248-4.487-1.603-2.287-3.093-2.37-6.166-.407-14.972.501-2.249.226-2.72-1.756-3-3.16-.447-4.01-5.717-1.048-6.492 2.904-.759 4.56-4.595 3.78-8.755-.804-4.283.922-6.55 6.861-9.012 3.884-1.61 3.98-1.596 6.25.852 1.269 1.368 2.306 2.956 2.306 3.53 0 1.635-2.8 1.222-3.798-.559-.493-.881-1.753-1.438-2.8-1.236-1.532.295-1.902 1.238-1.902 4.853 0 4.125.216 4.511 2.687 4.796 2.042.236 3.118-.364 4.476-2.5.984-1.545 2.362-3.17 3.063-3.61 1.785-1.12 1.597-2.438-.835-5.853-1.16-1.63-1.869-3.203-1.574-3.497 1.504-1.505 8.279-3.091 9.366-2.193.826.682 1.68.217 2.832-1.54 1.555-2.373 8.018-5.417 9.133-4.302.283.282.028 1.423-.567 2.534-.594 1.11-1.081 4.045-1.081 6.52 0 2.476-.442 5.663-.982 7.084-.798 2.1-.6 2.965 1.062 4.627 2.902 2.902 4.478 1.92 4.111-2.56-.17-2.074-.045-4.458.278-5.299.5-1.304.786-1.255 1.949.336 1.166 1.595 1.74 1.692 3.972.675 1.523-.694 2.61-2.007 2.61-3.152 0-1.079.397-2.208.883-2.508.486-.3 1.2-3.087 1.589-6.193.744-5.96 3.79-10.379 7.154-10.379.944 0 2.427-.639 3.295-1.42.869-.781 4.607-2.557 8.309-3.948 6.004-2.255 6.825-2.356 7.618-.94.505.904 1.405 1.27 2.085.85.888-.55.768-1.215-.466-2.578-1.818-2.01-1.206-4.185.945-3.36 1.385.532 5.6-3.997 5.573-5.989-.01-.716-.278-.757-.75-.115-.404.55-1.816 1.9-3.136 3-1.64 1.365-1.206.413 1.365-3 4.114-5.461 6.51-7.39 6.58-5.3.416 12.343.478 12.634 3.602 16.952 1.73 2.391 3.89 4.498 4.8 4.68 1.47.297 1.577-.531.968-7.5-.377-4.307-1.339-9.124-2.138-10.703-2.199-4.346-.863-8.647 4.639-14.934 4.406-5.035 5.052-5.439 6.73-4.207 1.778 1.307 1.783 1.487.105 4.342-2.65 4.51-2.305 10.75.75 13.582 1.375 1.275 2.5 2.828 2.5 3.453 0 1.532 1.506 1.435 2.85-.183.807-.974.681-1.907-.482-3.567-1.526-2.179-1.49-5.653.098-9.365.535-1.251.29-1.75-.859-1.75-3.785 0-.4-8.412 5.155-12.811 2.21-1.75 4.725-4.948 5.588-7.106.965-2.412 2.452-4.194 3.86-4.628 4.744-1.462 26.035-21.055 28.827-26.528 2.469-4.838 4.47-5.51 7.169-2.405 1.185 1.363 2.749 2.478 3.474 2.478 1.601 0 1.65 1.162.243 5.884-1.273 4.275.159 9.405 2.387 8.55 1.936-.742 3.644-8.752 2.366-11.093-.553-1.013-1.314-2.066-1.69-2.341-.378-.275-1.203-1.481-1.834-2.68-.912-1.733-.84-2.489.35-3.68 1.903-1.902 1.891-4.363-.038-8.062-1.137-2.18-1.226-3.107-.35-3.648 1.525-.943 3.852-7.661 3.87-11.18.013-2.31-.425-2.769-2.734-2.866-2.088-.088-2.269-.233-.75-.603 2.816-.686 5.113-2.932 6.551-6.405.742-1.79 1.764-2.777 2.56-2.472 2.15.825 2.478-.946.882-4.767-1.327-3.176-1.326-3.51.007-2.999 1.84.706 2.014-1.72.25-3.497-1.002-1.01-.896-1.125.538-.579 1.117.425 2.567-.021 3.866-1.19 3.089-2.78 7.846-9.992 7.846-11.894 0-.915.9-2.807 2-4.205 1.352-1.718 2-2.047 2-1.015 0 1.928 1.897 2.676 5.192 2.046 1.893-.362 2.989.116 4.186 1.825 2.2 3.14 2.06 4.197-1.041 7.883-3.308 3.93-4.808 11.95-3.179 16.988.623 1.925 1.564 3.78 2.093 4.124.528.344 1.361 2.769 1.85 5.39.756 4.043.581 5.265-1.157 8.076-1.775 2.873-1.902 3.85-.957 7.362.779 2.89.785 5.183.021 8.018-.588 2.184-1.216 9.272-1.395 15.75-.18 6.48-.841 13.047-1.47 14.595-.628 1.548-1.143 4.334-1.143 6.191 0 1.857-.45 3.654-1 3.994-.55.34-1 1.935-1 3.545 0 3.108-1.716 11.122-3.095 14.455-.455 1.1-.995 4.925-1.201 8.5-.355 6.168-3.74 20.236-7.224 30.013-2.939 8.25-3.55 13.576-1.986 17.319 1.482 3.544 1.185 4.866-.912 4.061-1.775-.681-3.597 5.828-2.287 8.17.723 1.29.692 1.941-.103 2.207-1.852.617-2.603 7.017-1.055 8.991 1.25 1.593 1.209 1.617-.481.288-1.658-1.304-2.035-1.202-3.728 1-1.036 1.348-1.893 3.018-1.905 3.71-.013.694-.883 1.997-1.935 2.898-1.052.9-1.686 2.227-1.409 2.949.277.721-.03 2.926-.68 4.898-.974 2.95-1.438 3.376-2.615 2.4-2.023-1.68-3.053-.205-1.545 2.21 1.036 1.658.969 3.036-.374 7.655-1.507 5.183-1.508 5.726-.021 6.813 1.472 1.076 1.474 1.236.023 1.792-1.267.487-1.458 1.498-.938 4.968.617 4.116-1.26 12.326-3.461 15.133-.442.564-1.552 3.323-2.468 6.131-1.82 5.582-5.66 9.969-7.955 9.088-1.687-.648-4.645 2.235-4.645 4.528 0 .86-.726 1.843-1.613 2.183-1.023.393-1.423 1.346-1.094 2.607.385 1.47.024 1.988-1.386 1.988-1.258 0-1.907.7-1.907 2.059 0 1.132-.45 1.78-1 1.441-.55-.34-1 .052-1 .871 0 .82-1.012 1.634-2.25 1.81-1.81.257-2.25.96-2.25 3.593 0 2.456-.603 3.58-2.413 4.5-1.722.875-3.083 3.216-4.75 8.17-2.792 8.3-2.891 9.81-.615 9.371 1.067-.205 2.895-3.145 4.807-7.73 2.034-4.877 3.807-7.665 5.201-8.18 1.186-.44 3.129-2.992 4.423-5.815 2.215-4.828 2.358-4.941 3.543-2.81.678 1.22 1.25 3.93 1.269 6.022.031 3.339-.33 3.93-2.965 4.848-1.65.575-3 1.452-3 1.948s-1.139.902-2.531.902c-2.752 0-4.365 2.503-2.692 4.177 1.368 1.368-.48 6.87-2.103 6.26-2.435-.915-7.53 3.384-8.607 7.261-1.426 5.137-1.338 6.832.433 8.302.825.685 1.455 2.427 1.4 3.872-.086 2.298-.19 2.376-.828.628-1.733-4.756-3.556-8.5-4.139-8.5-.346 0-1.424 1.763-2.395 3.917-1.634 3.622-1.645 4.091-.152 6.223 2.085 2.977 2.035 3.517-.386 4.15-1.1.287-2 1.24-2 2.116 0 .877-.675 1.594-1.5 1.594-1.776 0-1.847.482-.455 3.083.774 1.446.672 2.483-.393 4.005-.85 1.212-1.595 1.58-1.822.9-.263-.789-1.386-.576-3.57.678-3.034 1.74-4.204 3.328-5.776 7.834-.654 1.872-.742 1.884-1.376.187-.636-1.7-.863-1.67-3.643.465-4.048 3.11-7.19 6.766-8.895 10.348-.784 1.65-4.271 6.633-7.748 11.074-13.053 16.672-16.816 20.74-33.703 36.426-4.44 4.125-8.333 8.267-8.65 9.204-.474 1.406-.993 1.514-2.958.619-2.824-1.287-5.51-.494-5.51 1.627 0 1.797 4.009 3 6.92 2.075 1.607-.51 1.932-.306 1.463.918-.332.866-1.721 1.855-3.086 2.197-1.365.343-5.119 3.151-8.341 6.241-8.883 8.517-11.456 10.654-16.573 13.764-2.583 1.57-5.932 4.092-7.441 5.605-1.51 1.512-3.188 2.75-3.729 2.75-.54 0-1.72 1.125-2.622 2.5-.9 1.375-2.108 2.5-2.682 2.5-.575 0-3.57 2.057-6.656 4.571-3.087 2.514-8.344 5.898-11.683 7.519-6.102 2.962-14.61 8.476-17.767 11.514-.932.897-1.832 2.591-2 3.764-.258 1.813-.864 2.083-4.042 1.805-3.378-.295-3.944.022-5.869 3.284-1.248 2.116-3.815 4.425-6.2 5.577-4.459 2.155-6.128 2.48-5.224 1.016.735-1.188-2.62-3.05-5.497-3.05-1.318 0-2.363.779-2.682 2-.633 2.42-2.29 2.661-2.29.333 0-3.12-1.261-.42-1.479 3.166-.254 4.186 1.218 5.579 3.131 2.963 1.16-1.587 1.348-1.617 1.348-.212 0 .897-.475 1.926-1.056 2.285-1.65 1.02-5.944-.414-5.944-1.984 0-1.116-.678-1.217-3.243-.481-4.427 1.27-5.202 1.172-3.83-.481 1.809-2.18-.408-2.906-4.432-1.45-2.399.867-3.495 1.887-3.495 3.253 0 1.964-.018 1.965-1.439.049-1.339-1.807-1.555-1.827-3.118-.287-2.07 2.038-.94 4.21 1.814 3.489 1.55-.405 1.754-.254.862.638s-1.655.865-3.222-.114c-3.166-1.977-4.755.1-5.1 6.666L621.5 973h-6.328c-4.873 0-6.624.403-7.61 1.75-.706.963-2.257 1.75-3.447 1.75-1.358 0-2.5.885-3.067 2.375-.825 2.167-1.478 2.375-7.476 2.375-6.039 0-6.57-.172-6.557-2.125zM586 965.5c0-1.111-.667-2-1.5-2s-1.5.889-1.5 2 .667 2 1.5 2 1.5-.889 1.5-2zm-12.5-1c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm46.126-8.551c1.221-1.865 1.373-2.85.565-3.658-1.576-1.576-4.191.815-4.191 3.831 0 3.099 1.53 3.025 3.626-.173zm25.656-2.864c1.51-1.146 1.6-1.748.593-3.96-.924-2.029-1.488-2.361-2.532-1.495-1.402 1.164-1.899 6.894-.593 6.838.412-.017 1.552-.64 2.532-1.383zM630 950c0-.825-.675-1.5-1.5-1.5s-1.5.675-1.5 1.5.675 1.5 1.5 1.5 1.5-.675 1.5-1.5zm37.561-5.588c2.4-1.624 4.804-4.395 5.876-6.771 2.187-4.851 4.563-6.21 4.563-2.61 0 2.634 1.826 3.243 3.8 1.269 1.688-1.688 1.491-3.866-.478-5.307-1.533-1.12-1.446-1.46 1-3.905 2.71-2.71 3.55-5.588 1.633-5.588-.575 0-2.038 1.038-3.25 2.307-3.278 3.43-11.803 13.155-15.053 17.172-1.567 1.937-3.453 3.521-4.191 3.521-1.975 0-2.928 2.093-1.387 3.046 1.461.903 1.618.837 7.487-3.134zm-33.714-1.502c1.03-.323 1.19-1.778.68-6.183l-.67-5.76 5.045-4.777c2.774-2.626 6.41-5.251 8.079-5.833 2.666-.93 3.274-.772 4.994 1.292 1.077 1.293 1.973 2.801 1.992 3.351.054 1.634-7.305 6.995-9.169 6.679-3.72-.63-5.798 1.649-5.798 6.356 0 3.888.275 4.465 2.128 4.465 1.913 0 2.065-.394 1.505-3.895-.499-3.118-.283-4.025 1.08-4.549 1.086-.416 2.265.062 3.246 1.317 1.417 1.812 3.608 2.535 6.791 2.242.688-.063 1.25-1.099 1.25-2.3 0-2.74 3.73-6.815 6.236-6.815 1.038 0 5.27-1.65 9.406-3.666l7.518-3.666-.71-3.584c-.39-1.971-.632-4.259-.536-5.084.096-.825.16-2.885.144-4.578-.038-3.957 2.11-6.867 5.094-6.898 1.665-.017 2.441-.68 2.668-2.276.176-1.239 1.233-2.741 2.35-3.339 1.747-.935 1.938-1.703 1.369-5.498l-.662-4.411h5.062c4.803 0 5.061-.135 5.061-2.64 0-1.452-.782-3.211-1.737-3.91-1.643-1.201-1.638-1.378.099-3.297 1.386-1.532 1.692-2.96 1.25-5.84-.442-2.891.098-5.385 2.235-10.313 2.39-5.513 3.337-6.67 6.235-7.625 2.877-.946 3.469-1.658 3.74-4.5.176-1.856.738-3.803 1.25-4.325 1.741-1.782 1.024-5.292-1.202-5.874-1.594-.417-1.941-1.012-1.38-2.366.411-.996.679-2.485.594-3.31-.085-.825-.114-3.675-.064-6.334.078-4.127-.17-4.784-1.694-4.49-.981.189-2.175 1.69-2.651 3.334-.476 1.644-1.805 4.938-2.952 7.32-1.767 3.669-1.867 4.466-.654 5.234.787.498 1.881.931 2.431.963.55.032 2.052 1.704 3.337 3.715 2.24 3.507 2.261 3.713.511 4.992-1.543 1.13-2 1.096-2.96-.217-1.342-1.836-3.497-1.25-8.202 2.23-3.07 2.272-3.198 2.583-1.726 4.208 2.164 2.392.973 4.876-2.808 5.855-2.566.665-3.46 1.69-4.93 5.65-.988 2.66-2.68 6.076-3.76 7.592-1.079 1.516-1.962 3.224-1.962 3.794 0 .57-2.09 1.628-4.643 2.35-2.554.72-5.141 2.191-5.75 3.267-1.463 2.586-5.496 5.906-7.974 6.565-2.585.687-3.255 2.796-1.146 3.605 1.102.423 2.896-.577 5.376-2.999 4.34-4.238 5.587-4.563 4.753-1.238-.4 1.59-.12 2.58.829 2.944 2.302.884 3.772 7.674 2.19 10.12-2.431 3.76-2.729 7.214-.896 10.407 1.721 3 1.71 3.054-1.188 6.08-1.609 1.68-3.526 3.053-4.26 3.053-.733 0-1.846 1.125-2.473 2.5-.626 1.375-1.462 2.5-1.856 2.5-1.936 0-7.96-3.175-8.77-4.622-1.47-2.626.769-7.231 3.686-7.581 2.338-.28 5.488-4.676 7.47-10.422.356-1.031 1.782-3.418 3.17-5.304 1.76-2.392 2.207-3.746 1.475-4.478-1.478-1.478-3.907.257-6.112 4.369-2.586 4.821-3.536 5.57-5.257 4.14-1.203-.997-2.494-.217-7.293 4.407-3.207 3.09-7.047 6.265-8.534 7.056-2.926 1.557-8.797 9.393-8.797 11.743 0 2.174-2.648 3.939-4.857 3.237-2.628-.834-6.714 4.612-5.324 7.096.85 1.52 1.093 1.484 2.705-.398 1.81-2.114 4.476-2 4.476.19 0 .67-1.125 2.275-2.5 3.567-1.375 1.292-2.5 3.404-2.5 4.693 0 2.365 1.194 2.49 6.847.718zM683 883.01c0-.82.9-2.054 2-2.741 1.1-.687 2-1.568 2-1.958 0-1.684 6.272-9.81 7.57-9.81 1.628 0 1.942 2.565.43 3.5-.55.34-1 1.627-1 2.859 0 2.704-1.753 4.641-4.2 4.641-.99 0-1.8.66-1.8 1.465s-.87 1.93-1.934 2.5c-2.581 1.381-3.066 1.309-3.066-.457zM622 938.5c0-1.1-.395-2-.878-2-1.31 0-3.204 2.585-2.447 3.342 1.37 1.37 3.325.58 3.325-1.342zm66.846-11.448c.22-1.14-.14-1.62-1-1.334-.74.246-1.501 1.25-1.691 2.23-.221 1.14.139 1.62 1 1.334.74-.246 1.5-1.25 1.69-2.23zm2.132-7.302c-.032-2.506-3.488-6.671-4.84-5.835-1.637 1.012-1.402 3.254.584 5.574 2.121 2.476 4.286 2.61 4.256.261zm16.99-2.122c-.039-1.985-2.31-5.128-3.706-5.128-.56 0-1.551.644-2.204 1.43-.95 1.145-.77 1.654.905 2.55 1.151.616 1.829 1.548 1.506 2.07-.323.523-.295 1.422.061 1.999.883 1.43 3.48-.777 3.438-2.921zm-37.348-3.58c.306-.799.278-1.904-.063-2.456-.967-1.564-3.557-.096-3.557 2.015 0 2.218 2.807 2.56 3.62.44zm12.063-3.735c-.32-.798-.556-.561-.604.604-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.917zm10.163-2.261c.22-1.14-.14-1.62-1-1.334-.74.246-1.501 1.25-1.691 2.23-.221 1.14.139 1.62 1 1.334.74-.246 1.5-1.25 1.69-2.23zm20.916 1.198c2.025-2.514 2.376-7.484.795-11.268-1.961-4.693-1.992-9.344-.077-11.46 1.307-1.444 1.3-1.89-.057-3.828-1.793-2.56-3.674-2.801-5.423-.694-.962 1.16-.976 1.824-.06 2.928.925 1.114.841 2.094-.377 4.45-2.133 4.126-1.97 5.626.814 7.45 3.529 2.312 4.225 6.402 1.57 9.228-2.176 2.317-1.942 4.444.49 4.444.725 0 1.771-.563 2.325-1.25zm-12.122-2.245c-.272-.71.597-2.318 1.932-3.573 2.51-2.358 3.175-5.352 1.428-6.432-.55-.34-1-1.716-1-3.059 0-3.237-2.697-3.2-4.182.059-.626 1.375-1.658 2.5-2.291 2.5-1.493 0-6.527 5.249-6.527 6.805 0 2.44 2.87 1.082 4.867-2.305 1.136-1.925 2.53-3.5 3.1-3.5 1.325 0 1.352 3.685.033 4.5-1.434.886-1.236 6.249.25 6.782 1.772.635 2.974-.257 2.39-1.777zM682 907.5c0-.55-.477-1-1.059-1s-.78.45-.441 1c.34.55.816 1 1.059 1s.441-.45.441-1zm-33.073-4.635c1.14-1.449 2.073-3.62 2.073-4.826 0-1.205 1.119-3.241 2.486-4.526 2.073-1.947 2.388-2.95 1.894-6.037-.485-3.032-.175-4.09 1.716-5.85 2.126-1.981 2.18-2.278.69-3.768-1.072-1.073-2.465-1.404-4.135-.985-2.452.615-2.825 1.24-4.058 6.8-.326 1.47-1.83 4.144-3.343 5.941-2.357 2.802-2.753 4.17-2.77 9.577-.016 5.275.259 6.309 1.678 6.309.933 0 2.63-1.186 3.77-2.635zm73.932-1.078c.528-.942 2.035-1.76 3.35-1.818 2.942-.128 4.79-1.2 4.792-2.778 0-.719-1.42-1.15-3.58-1.09-3.886.112-9.213 4.31-7.985 6.295.986 1.596 2.323 1.358 3.423-.609zm14.224-12.144c.565-4.36.333-5.726-1.239-7.299C733.62 880.12 731 879.932 731 882c0 .841.892 1.5 2.031 1.5 2.544 0 3.654 2.673 2.127 5.119-.637 1.02-1.158 2.07-1.158 2.336 0 .712 2.986-.558 3.083-1.312zm-96.333-.892c.547-1.643-2.586-2.815-3.93-1.47-.575.574-.728 1.559-.34 2.187.884 1.43 3.714.954 4.27-.718zm83.68-2.138c.301-.487-.122-1.443-.941-2.122-2.214-1.837-1.943-2.468 3.511-8.186 2.75-2.883 5-6.077 5-7.097 0-2.763-3.05-1.73-4.934 1.672-.878 1.584-1.814 2.907-2.081 2.94-1.222.15-3.613-2.061-4.87-4.503-1.779-3.455-.813-6.041 2.104-5.631 3.024.425 3.815-3.103.868-3.873-1.345-.352-2.087-1.356-2.087-2.823 0-1.252-.74-2.56-1.643-2.906-.904-.347-1.691-.508-1.75-.357-.059.15-.895 1.772-1.857 3.604-2.397 4.563-2.218 9.618.471 13.254 1.494 2.021 2.126 4.112 1.93 6.39-.204 2.358.329 4.005 1.756 5.432 1.137 1.137 1.788 2.724 1.463 3.57-.63 1.643 2.089 2.208 3.06.636zm20.999-4.684c.864-.865 1.571-2.215 1.571-3 0-.786.605-1.429 1.345-1.429 2.084 0 4.972-3.732 4.28-5.533-1.086-2.833-5.01-1.36-6.082 2.283-.699 2.375-1.541 3.25-3.127 3.25-2.65 0-4.849 2.43-4.06 4.487.757 1.97 4.076 1.938 6.073-.059zm-99.617-2.69c.203-1.057-.283-1.739-1.239-1.739-.865 0-1.573.188-1.573.418 0 .23-.29 1.176-.646 2.102-.486 1.266-.18 1.593 1.239 1.32 1.036-.2 2.035-1.145 2.219-2.102zm56.67-1.077c.735-.736 2.774-3.673 4.53-6.526 2.594-4.216 2.962-5.463 1.967-6.661-1.506-1.815-2.105-1.834-4.421-.14-1.004.733-2.176 3.32-2.605 5.75-.429 2.428-1.096 5.427-1.483 6.665-.792 2.535.02 2.903 2.011.912zM660 871.969c0-2.763 2.506-4.363 4.192-2.677 1.291 1.291 7.808-1.521 7.808-3.37 0-1.915-2.632-2.416-4.653-.885-3.04 2.303-4.656 1.831-3.91-1.143.663-2.64-1.533-7.394-3.415-7.394-1.434 0-2.444 6.978-1.19 8.232.776.776.399 1.893-1.333 3.952-2.643 3.14-2.363 5.816.608 5.816 1.359 0 1.893-.714 1.893-2.531zm16.457-1.4c.317-.512.118-1.213-.44-1.559-.56-.345-1.017.073-1.017.931 0 1.756.6 2.015 1.457.628zm60.186-7.582c.32-.832.02-2.187-.664-3.012-1.535-1.85-3.979-.223-3.979 2.647 0 2.3 3.787 2.597 4.643.365zm8.283.102c.8-.965.84-1.616.123-2.059-1.397-.863-3.049.237-3.049 2.029 0 1.836 1.415 1.85 2.926.03zm14.845-1.401c.218-.654-.317-1.188-1.188-1.188-.87 0-1.583.713-1.583 1.583 0 1.766 2.153 1.459 2.77-.395zm9.229-.328c0-1.964-2.455-4.752-4.25-4.828-1.082-.046-.922 2.778.285 5.034 1.395 2.606 3.965 2.473 3.965-.206zm-93.036-1.293c1.557-2.909.633-6.564-1.197-4.734-1.596 1.596-2.767 1.465-2.767-.31 0-.812 1.143-2.226 2.539-3.14 1.397-.915 2.432-2.388 2.302-3.274-.406-2.75 2.244-9.438 5.268-13.3 2.865-3.658 3.766-6.809 1.948-6.809-.52 0-1.532.795-2.25 1.767-.719.972-2.532 2.55-4.03 3.506-1.523.972-3.095 3.167-3.568 4.982-.586 2.248-1.44 3.245-2.777 3.245-1.063 0-3.394 1.097-5.182 2.438-2.63 1.973-3.25 3.136-3.25 6.095 0 2.456.695 4.283 2.115 5.562 1.163 1.048 2.502 2.918 2.975 4.155 1.23 3.215 6.116 3.101 7.874-.182zm7.036-3.674c0-1.041-.395-1.893-.878-1.893-1.417 0-3.349 2.824-2.676 3.913.964 1.56 3.554.089 3.554-2.02zm27.435.132c1.41-.537 2.565-1.431 2.565-1.988 0-.839-2.304-.886-7.25-.149-.412.061-.75.787-.75 1.612 0 1.735 1.796 1.908 5.435.525zm34.038.019c.325-.526 1.206-.72 1.958-.432 1.859.713 3.078-1.506 1.62-2.949-.895-.885-1.411-.745-2.163.587-.543.963-1.64 1.75-2.438 1.75-.797 0-1.45.45-1.45 1 0 1.273 1.695 1.303 2.473.044zm-4.724-2.774c.222-.676-1.214-2.001-3.192-2.944-3.312-1.58-3.724-1.588-5.213-.098-2.769 2.768-.964 4.932 3.82 4.58 2.299-.17 4.362-.861 4.585-1.538zM658 851.941c0-.793-.627-1.441-1.393-1.441-1.793 0-2.87 2.735-1.3 3.3 1.638.59 2.693-.138 2.693-1.859zm99.443-.54c1.956-1.154 3.557-2.885 3.557-3.846 0-2.71-3.063-8.2-4.338-7.775-1.516.505-4.979 10.452-4.276 12.283.709 1.847.832 1.83 5.057-.662zM687 851.5c0-.55-.477-1-1.059-1s-.78.45-.441 1c.34.55.816 1 1.059 1s.441-.45.441-1zm3.554-7.406c1.29.337 2.717-.236 3.936-1.583 1.867-2.063 1.869-2.19.054-5.56-1.742-3.235-1.753-3.562-.175-5.306 1.5-1.659 1.518-1.994.156-3.124-2.201-1.827-1.902-5.11.523-5.744 2.86-.747 2.03-3.708-1.142-4.078-4.144-.483-5.33 1.863-3.919 7.749 1.186 4.942 1.164 5.031-2.273 9.271-1.908 2.355-3.805 5.406-4.214 6.781-.41 1.375-1.178 3.043-1.709 3.706-.53.664-.649 1.715-.264 2.337.46.744 1.777.085 3.85-1.924 2.142-2.076 3.8-2.885 5.177-2.525zm49.65.331c-.168-1.44.604-3.683 1.787-5.186 1.786-2.271 1.9-2.945.796-4.73-.708-1.146-2.3-2.34-3.537-2.654-2.376-.604-3.067-2.916-1.07-3.582 1.801-.6.384-3.133-2.666-4.765-2.58-1.381-2.858-1.31-5.114 1.313-2.648 3.078-3.916 6.892-3.046 9.16.81 2.108 3.352.826 4.075-2.053.902-3.596 4.612-3.334 4.574.322-.016 1.513-.02 3.65-.01 4.75.012 1.1.005 3.485-.015 5.3-.044 4.077.72 5.406 2.865 4.987 1.125-.22 1.562-1.14 1.36-2.862zm-15.204.516c0-.858-.457-1.276-1.016-.93-.56.345-.758 1.046-.441 1.558.857 1.387 1.457 1.129 1.457-.628zm25.833-4.975c.955-2.095.883-2.638-.417-3.136-2.037-.782-4.867 2.053-4.084 4.093.913 2.38 3.203 1.894 4.501-.957zm-117.767.499c2.532-1.356 2.574-4.965.056-4.965-2.399 0-4.518 2.525-3.765 4.487.687 1.79 1.146 1.85 3.709.478zm138.645.235c1.612-1.025 4.148-7.372 3.576-8.95-1.4-3.86-6.287 1.17-6.287 6.473 0 3.338.556 3.846 2.711 2.477zm-52.555-7.026c-.274-4.888.081-6.821 1.75-9.522 1.152-1.863 2.094-4.292 2.094-5.398 0-1.105.697-2.587 1.548-3.294 2.165-1.796 1.461-5.46-1.048-5.46-1.39 0-2.09.764-2.293 2.506-.285 2.44-5.393 6.475-6.63 5.237-1.158-1.157-.53-4.034 1.423-6.516 1.14-1.449 2-4.057 2-6.063 0-1.937.675-4.196 1.5-5.021 1.654-1.654 1.98-4.229.64-5.057-1.282-.792-4.215-11.954-4.004-15.236.1-1.567-.83-4.532-2.067-6.587-1.907-3.166-2.542-3.58-4.16-2.714-2.303 1.232-2.41 2.291-.397 3.961 1.15.955 1.241 1.583.378 2.623-.773.93-.812 1.766-.124 2.617.556.688.928 4.119.827 7.625-.147 5.089-.6 6.712-2.242 8.042-2.726 2.207-4.351 5.375-4.351 8.482 0 1.456-.8 2.96-1.885 3.54-2.777 1.486-3.588 5.881-1.509 8.179 2.69 2.972 3.394 2.264 3.394-3.411v-5.294l4-1.067c3.582-.956 4-.88 4 .734 0 .991-.438 2.073-.973 2.403-1.403.868-3.156 8.016-2.43 9.91.341.888 1.745 1.607 3.138 1.607 2.405 0 2.49.194 1.841 4.249-.52 3.251-.142 5.6 1.607 10.005 1.258 3.166 2.743 5.598 3.302 5.405.59-.205.871-2.917.67-6.485zM713 800.5c0-.55.675-1 1.5-1s1.5.45 1.5 1-.675 1-1.5 1-1.5-.45-1.5-1zm-89 36.441c0-.858-.457-1.276-1.016-.93-.56.345-.758 1.046-.441 1.558.857 1.387 1.457 1.129 1.457-.628zm4-4.024c0-1.766-2.153-1.459-2.77.395-.219.654.316 1.188 1.187 1.188.87 0 1.583-.713 1.583-1.583zm152-5.507c0-1.976-2.537-3.707-3.711-2.532-.886.886 1.833 5.664 2.862 5.029.467-.289.849-1.413.849-2.497zm-154.2.89c1.285-1.285 1.638-6.029.531-7.136-1.106-1.106-4.331 2.486-4.331 4.824 0 3.462 1.647 4.465 3.8 2.312zm137.2-1.8c0-1.333.667-2 2-2 1.653 0 2-.667 2-3.845 0-2.573.66-4.443 1.996-5.652 1.356-1.227 1.686-2.18 1.029-2.973-.644-.776-.446-1.912.59-3.391 1.26-1.798 1.319-2.514.31-3.73-.688-.828-2.19-1.371-3.337-1.207-1.722.246-2.088 1.004-2.088 4.32 0 2.655-.764 4.994-2.25 6.884-1.438 1.83-2.25 4.238-2.25 6.67 0 2.093-.457 4.089-1.016 4.434-1.328.82-.271 2.49 1.575 2.49.793 0 1.441-.9 1.441-2zm-16.345-1.543c.731-1.906.519-2.124-2.907-2.984-2.117-.531-2.748-.332-2.748.869 0 1.449 2.49 3.558 4.281 3.628.43.017 1.048-.664 1.374-1.513zm-65.729-.868c.887-1.07.89-1.585.01-2.128-1.075-.665-2.886 1.064-2.92 2.789-.026 1.232 1.656.85 2.91-.661zM731 820.3c0-1.615-.296-1.904-1.113-1.087-.612.612-.81 1.602-.44 2.2 1.034 1.673 1.553 1.302 1.553-1.113zm26-6.3c0-1.935-1.963-2.937-3.245-1.655-.76.76-.702 1.513.2 2.602 1.41 1.698 3.045 1.19 3.045-.947zm-62.736-4.722c.618-4.058.603-4.074-2.074-2.198-1.42.994-2.19 2.581-2.19 4.512 0 2.607.235 2.853 1.882 1.97 1.036-.553 2.107-2.481 2.382-4.284zM740 811.667c0-1.302-1.189-2.168-2.156-1.57-1.034.639-.142 2.403 1.215 2.403.518 0 .941-.375.941-.833zm17.657-3.917c.937-1.512 3.046-4.198 4.688-5.968 2.628-2.833 2.778-3.297 1.253-3.883-.953-.365-2.221-.176-2.818.421-.741.742-1.68.769-2.954.087-2.422-1.296-2.846-.962-5.826 4.581-2.455 4.568-2.465 4.677-.559 6.082 2.83 2.085 4.301 1.772 6.216-1.32zm-30.377.137c.722-.722-3.268-6.387-4.5-6.387-1.785 0-1.94 3.165-.246 5.037 1.784 1.972 3.606 2.49 4.746 1.35zm15.568-3.272c1.72-1.09 1.105-4.5-.879-4.882-.83-.16-2.36.332-3.4 1.093-3.66 2.676.385 6.257 4.28 3.789zm43.214-3.778c1.368-3.599-.55-5.712-2.63-2.896-.787 1.068-1.432 2.755-1.432 3.75 0 2.765 2.92 2.152 4.062-.854zm-52.104-8.137c.023-1.815.71-4.592 1.527-6.171 1.95-3.77-.064-4.63-2.96-1.264l-2.065 2.401-1.885-2.083c-1.82-2.012-1.823-2.152-.075-4.083.995-1.1 2.753-2.011 3.905-2.025 1.405-.016 2.703-1.245 3.942-3.73 1.826-3.662 1.823-3.72-.25-5.097-1.153-.765-2.097-1.964-2.097-2.663 0-1.603 2.736-2.721 3.527-1.441.863 1.396 4.443 1.17 4.647-.294.095-.687.208-3.487.25-6.221.067-4.396.394-5.126 2.82-6.302 3.312-1.606 3.574-2.567 4.055-14.893.248-6.383 1.058-7.286 4.03-4.495 3.207 3.014 3.726 1.908 1.852-3.952-1.978-6.184-.983-8.26 4.17-8.697 3.067-.261 3.649-.683 3.649-2.643 0-1.283-.675-2.592-1.5-2.909-2.248-.862-1.817-2.173 1.162-3.53 2.475-1.128 2.546-1.329 1.01-2.865-1.537-1.536-1.745-1.526-2.965.143-1.1 1.504-1.498 1.57-2.457.415-.862-1.038-.849-1.96.053-3.728.658-1.292 1.534-2.287 1.947-2.21.412.075 2.07.137 3.684.137 2.456 0 2.985.447 3.25 2.75.327 2.842 1.266 3.06 7.456 1.728 3.894-.838 4.166-5.478.32-5.478-1.284 0-2.122-.913-2.524-2.75a77.699 77.699 0 00-1.503-5.605c-.9-2.846-.895-2.85 1.547-1.25 3.328 2.18 4.865 2.033 4.227-.406-.289-1.105-.026-3.333.584-4.95.915-2.422.81-3.27-.59-4.818-1.77-1.954-2.287-5.74-.903-6.596 1.465-.905 3.018.85 3.362 3.801.476 4.086 2.32 4.257 3.896.362.732-1.809 1.788-3.598 2.347-3.977.645-.436.421-1.353-.61-2.5-.894-.996-1.776-3.161-1.96-4.811-.48-4.314-2.936-3.769-5.32 1.18-1.107 2.3-3.25 5.144-4.763 6.323-2.578 2.008-2.71 2.484-2.113 7.57.545 4.633.397 5.427-1.01 5.427-1.002 0-2.69 2.124-4.302 5.41-2.498 5.093-2.836 5.381-5.759 4.907-2.866-.465-3.408-.054-7.05 5.34-2.169 3.213-4.973 7.115-6.23 8.67-1.257 1.554-2.286 3.631-2.286 4.615 0 .984-.885 2.913-1.967 4.288-2.46 3.13-3.515 9.427-2.167 12.943.791 2.062.695 2.946-.42 3.872-.795.66-1.446 1.57-1.446 2.024 0 .453-1.598 3.55-3.551 6.883-2.012 3.433-4.16 8.982-4.955 12.803-2.94 14.12-2.76 13.715-6.28 14.058-3.783.37-3.913.814-1.11 3.799 2.174 2.313 1.86 4.388-.663 4.388-3.142 0-.583 7.159 3.17 8.868 1.739.793 2.389 1.898 2.389 4.06 0 1.79.697 3.364 1.75 3.957 1.423.8 2.069.389 3.458-2.2.94-1.752 1.727-4.67 1.75-6.485zm-1.879-19.783c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm8.932-22.904c-.68-.818-.976-2.16-.66-2.983.866-2.26 3.649-.675 3.649 2.077 0 2.725-1.183 3.083-2.99.906zm.989-11.406c0-1.014 3.046-2.395 3.743-1.697.252.251.16.937-.202 1.523-.798 1.291-3.541 1.426-3.541.174zm82 62.01c0-.486-.9-1.12-2-1.407-1.3-.34-2-.03-2 .884 0 .773.9 1.406 2 1.406s2-.398 2-.883zm-19-5.728c0-2.306-3.602-1.559-4.762.988-1.627 3.57.637 5.496 3.012 2.562.963-1.188 1.75-2.786 1.75-3.55zm-20.515-2.007c2.129-5.095.87-9.51-3.01-10.547-1.618-.433-3.336-.374-3.842.132-1.245 1.245 2.483 14.033 4.091 14.033.687 0 1.93-1.628 2.76-3.618zm31.38-.984c1.519-3.335 1.457-6.672-.115-6.149-.688.23-1.415 1.268-1.617 2.309-.201 1.04-1.062 2.4-1.912 3.022-1.857 1.358-.918 4.625 1.106 3.848.771-.296 1.913-1.66 2.538-3.03zm-63.3-2.894c-.295-1.102-.544-3.017-.551-4.254-.008-1.238-.953-3.189-2.1-4.336-1.816-1.816-1.933-2.455-.903-4.94 1.433-3.461.664-4.974-2.531-4.974-2.994 0-6.656 3.786-6.268 6.48.219 1.523.966 1.974 3.039 1.832l2.749-.188v7.271c0 4 .288 7.56.64 7.912.352.352 1.951-.134 3.552-1.08 2.132-1.259 2.768-2.257 2.374-3.723zm9.974 4.433c.361-.585-.093-1.892-1.01-2.904-1.398-1.546-1.46-2.17-.385-3.892 1.494-2.393.847-3.459-1.543-2.541-.927.355-1.565 1.378-1.418 2.273.147.895-.088 2.193-.523 2.886-1.219 1.944.258 5.241 2.348 5.241 1.03 0 2.17-.478 2.53-1.063zM636 786.065c0-.24-.45-1.616-.998-3.06-1.174-3.087-3.002-2.445-3.002 1.054 0 1.774.546 2.441 2 2.441 1.1 0 2-.196 2-.435zm166-3.672c0-2.014-2.445-2.6-3.53-.845-.356.576-.4 1.694-.096 2.483.762 1.986 3.626.693 3.626-1.638zm25.796-7.89c-.222-2.627-.756-3.503-2.135-3.503-1.296 0-2.571 1.734-4.313 5.865-3.467 8.22-2.445 10.112 2.731 5.057 3.391-3.31 3.966-4.46 3.717-7.42zM834 783c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm-62.974-1.032c.986-1.187 1.02-2.374.15-5.276-1.436-4.791-.318-8.938 2.831-10.508 1.362-.679 2.645-2.114 2.852-3.19.207-1.076 1.653-3.505 3.212-5.397 3.011-3.652 2.99-5.097-.071-5.097-3.097 0-3.217-1.654-.542-7.502 1.398-3.057 2.542-5.925 2.542-6.374 0-.45.71-2.24 1.578-3.979.984-1.974 1.338-4.25.941-6.058-.364-1.659-.184-3.176.422-3.55.583-.36 1.059-2.653 1.059-5.096 0-4.992-2.073-6.102-4.09-2.191-.638 1.238-2.481 3.487-4.095 4.998-3.403 3.187-2.958 4.752 1.351 4.752 2.51 0 2.921.309 2.328 1.75a40.005 40.005 0 00-1.192 3.378c-.26.896-1.457 2.077-2.661 2.626-1.636.745-2.5 2.497-3.415 6.932-.674 3.264-1.226 6.89-1.226 8.058 0 1.566-.713 2.206-2.718 2.44-1.786.208-3.525 1.516-5.074 3.816-2.486 3.692-2.46 2.903-.628 19 .866 7.615 3.392 10.149 6.446 6.468zm-115.633-4.73c1.244-1.972.285-3.212-1.85-2.393-1.785.685-2.142 5.021-.364 4.429.648-.216 1.644-1.132 2.214-2.036zm130.215-2.16c.727-1.892-1.43-5.804-2.926-5.306-1.69.563-2.057 3.571-.642 5.276 1.527 1.84 2.87 1.852 3.568.03zm11.515-7.66c.343-2.43.23-5.176-.25-6.102-1.319-2.545-1.05-6.571.657-9.875 1.194-2.308 1.281-3.425.397-5.077-.623-1.165-1.293-5.942-1.488-10.616-.195-4.673-.588-8.73-.873-9.015-.285-.285-1.204.051-2.042.747-1.091.906-1.524 3.19-1.524 8.049 0 6.156-.175 6.738-1.887 6.29-2.64-.69-3.563 1.346-1.817 4.01 1.424 2.173 1.756 3.876 3.442 17.671.437 3.575 1.166 7.086 1.62 7.803 1.478 2.333 3.129.63 3.765-3.884zm19.437.631c.981-1.497 1.342-3.282.928-4.585l-.677-2.135-2.406 2.26c-2.682 2.52-2.98 3.935-1.205 5.711 1.566 1.566 1.497 1.592 3.36-1.251zm14.249-.807c.46-2.369-1.732-9.742-2.896-9.742-1.773 0-5.849 5.417-5.881 7.817-.025 1.81.375 2.189 1.827 1.728 1.082-.344 2.398.06 3.15.966 1.527 1.84 3.366 1.468 3.8-.769zm-77.817-1.723c.679-1.639.95-4.114.602-5.5-.354-1.41-.2-2.519.348-2.519.54 0 1.473-1.829 2.075-4.064.84-3.12.793-4.745-.205-7-1.049-2.369-2.677-3.905-2.847-2.686-.02.138-.733 3.85-1.585 8.25-.853 4.4-1.788 9.232-2.077 10.738-1.091 5.676 1.638 7.734 3.689 2.781zm-92.967-2.584c1.271-3.344 1.23-4.435-.165-4.435-1.537 0-3.789 3.089-3.828 5.25-.049 2.68 2.892 2.08 3.993-.815zm149.212-1.892c1.431-6.925-.878-8.927-3.623-3.142-2.371 4.996-2.145 7.815.595 7.419 1.678-.243 2.407-1.273 3.028-4.277zm34.752 2.97c.68-.818.976-2.16.66-2.983-.866-2.26-3.649-.675-3.649 2.077 0 2.725 1.183 3.083 2.99.906zm-139.043-9.078c-1.106-1.332-3.946-2.027-3.946-.966 0 .258 1.012 2.396 2.25 4.75L705.5 763l.318-3.315c.175-1.824-.217-3.961-.872-4.75zM788 758.5c0-.55-.675-1-1.5-1s-1.5.45-1.5 1 .675 1 1.5 1 1.5-.45 1.5-1zm29-6.083c0-2.437-2.337-2.093-2.823.416-.192.987.318 1.667 1.25 1.667.927 0 1.573-.855 1.573-2.083zm32.905-7.26c1.157-3.725 1.203-4.948.222-5.926-1.732-1.726-5.075 2.762-5.105 6.852-.045 6.252 2.823 5.708 4.883-.926zm-38.448 2.412c.317-.512.118-1.213-.44-1.559-.56-.345-1.017.073-1.017.931 0 1.757.6 2.015 1.457.628zm-79.496-2.522c.979-1.18.616-2.028-1.936-4.523-2.863-2.798-5.025-3.246-5.025-1.042 0 .81 4.836 7.018 5.466 7.018.16 0 .832-.654 1.495-1.453zm35.039-.606c0-.518-.675-.941-1.5-.941-1.546 0-1.987 1.18-.86 2.306.798.8 2.36-.104 2.36-1.365zm66.333-.756c1.898-2.097 4.155-8.03 3.358-8.828-1.565-1.564-9.272 7.894-8.047 9.875.818 1.324 2.98.841 4.689-1.047zM702 741.5c0-.55-.9-1-2-1s-2 .45-2 1 .9 1 2 1 2-.45 2-1zm170-1.073c0-2.563-3.31-2.272-3.812.334-.23 1.2.308 1.739 1.739 1.739 1.43 0 2.073-.642 2.073-2.073zm-109.198-7.098c-.303-5.182-2.196-7.572-3.437-4.338-.74 1.928 1.53 9.509 2.847 9.509.491 0 .757-2.327.59-5.171zm6.698 4.171c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm35.428-5.75a485 485 0 013.658-7.581c1.848-3.7 1.786-4.416-.445-5.124-3.017-.958-5.141.431-5.141 3.362 0 1.481-.378 3.12-.84 3.643-.462.523-1.416 2.413-2.121 4.2-1.024 2.596-1.032 3.554-.038 4.75 1.898 2.288 2.5 1.89 4.927-3.25zm39.243 3.095c3.242-2.934 1.589-8.05-1.715-5.309-1.437 1.193-2.087 6.964-.785 6.964.37 0 1.494-.745 2.5-1.655zM701 732.441c0-.518-.45-.941-1-.941s-1 .702-1 1.559.45 1.28 1 .941c.55-.34 1-1.041 1-1.559zM813 731c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm9.85-1.25c1.094-2.084.989-14.228-.125-14.33-1.997-.181-2.757.913-3.529 5.08-.866 4.673.168 11 1.797 11 .515 0 1.35-.787 1.856-1.75zm17.716-6.933c-.664-1.723-.751-1.726-1.687-.06-1.205 2.148-.14 4.404 1.367 2.897.56-.56.705-1.837.32-2.837zm24.434.624c0-.518-.45-.941-1-.941s-1 .702-1 1.559.45 1.28 1 .941c.55-.34 1-1.041 1-1.559zm-11.5-1.941c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zM792 719c0-.825-.675-1.5-1.5-1.5-1.562 0-1.984 1.183-.833 2.333 1.15 1.151 2.333.729 2.333-.833zm44.443-1.723c1.997-2.85 1.998-6.394.001-7.16-1.106-.424-1.99.444-3.062 3.01-2.37 5.673-.131 8.708 3.06 4.15zM845 716c0-.76-.45-1.66-1-2-.57-.352-1 .51-1 2s.43 2.352 1 2c.55-.34 1-1.24 1-2zm-121.5-2.5c0-.733-.563-1.52-1.25-1.75-.744-.248-1.25.461-1.25 1.75s.506 1.998 1.25 1.75c.688-.23 1.25-1.017 1.25-1.75zm10-.014c0-2.143-2.906-1.834-3.327.355-.257 1.336.15 1.743 1.486 1.486 1.013-.195 1.841-1.023 1.841-1.84zm68.666.191c3.038.43 3.76-2.748.836-3.676-2.908-.923-1.884-3.044 1.357-2.813 2.825.202 3.047-.41 2.016-5.563-.344-1.719-1.244-3.125-2-3.125s-1.375-.493-1.375-1.096c0-1.32 3.488-6.388 6.968-10.12 2.48-2.66 2.6-2.684 5.833-1.101 2.595 1.27 3.556 1.355 4.5.395 2.113-2.15-2.736-5.078-8.412-5.078-2.689 0-4.882-.338-4.874-.75.041-1.999 1.896-3.413 3.719-2.834 3.25 1.03 4.787-1.746 3.431-6.198-.872-2.865-2.053-4.156-5.149-5.629-2.209-1.05-4.016-2.513-4.016-3.25 0-.736-.822-1.339-1.826-1.339s-2.882-1.125-4.174-2.5c-3.753-3.995-5.665-3.288-6.92 2.561-.742 3.46-.763 5.662-.067 6.963 1.295 2.42 3.81 1.528 4.604-1.634.33-1.315 1.136-2.39 1.791-2.39 2.311 0 3.592 2.45 3.636 6.95.024 2.502.501 6.575 1.061 9.05 2.215 9.79 2.222 9.65-.647 12.87-3.215 3.609-4.907 3.126-4.051-1.154.414-2.071.1-3.603-.983-4.8-1.512-1.671-1.714-1.65-4.103.413-1.381 1.194-3.118 3.337-3.86 4.763-1.17 2.248-1.13 2.81.302 4.243 1.29 1.29 1.387 1.915.444 2.858-1.563 1.563-1.54 2.807.052 2.807.693 0 1.822-.9 2.509-2 1.21-1.937 5.645-2.782 6.564-1.25.248.412-.352 3.9-1.332 7.75-1.869 7.338-1.726 9.348.53 7.476.743-.617 2.379-.977 3.636-.799zM820 710.655c0-1.884-3.54-4.058-5.023-3.085-1.264.828-1.197 1.182.464 2.449 2.13 1.626 4.559 1.964 4.559.636zm63.823-1.488c.192-.987-.318-1.667-1.25-1.667-.927 0-1.573.855-1.573 2.083 0 2.437 2.337 2.093 2.823-.416zm-139.12-3.905c2.758-1.22 5.203-3.548 5.265-5.012.058-1.351-3.694-.785-4.968.75-.685.825-2.12 1.5-3.188 1.5-2.442 0-5.812 1.76-5.812 3.035 0 1.366 5.38 1.198 8.703-.273zm91.319-4.74l-2.102-2.102 2.108-2.96c3.032-4.257.26-3.884-4.03.542-2.267 2.34-3.727 3.17-4.396 2.5-2.817-2.817-7.115.47-4.591 3.51 1.595 1.923 2.459 1.875 4.587-.253 1.252-1.252 1.858-1.392 2.155-.5.228.683 1.446 1.241 2.708 1.241 1.262 0 2.912.745 3.667 1.656 1.239 1.495 1.402 1.5 1.683.061.172-.877-.634-2.54-1.79-3.695zm52.93-4.701c3.134-8.663 3.539-12.339 1.435-13.03-1.212-.399-2.142 1.69-5.31 11.918-2.445 7.896-2.575 9.791-.672 9.791.858 0 2.629-3.38 4.546-8.68zm-12.107.231c.221-1.14-.139-1.62-1-1.334-.74.246-1.5 1.25-1.69 2.23-.221 1.14.139 1.62 1 1.334.74-.246 1.5-1.25 1.69-2.23zm-120.857-6.22c.007-1.193.285-2.88.619-3.75.431-1.124.016-1.582-1.434-1.582-1.48 0-2.127.752-2.357 2.741-.209 1.813-.993 2.862-2.316 3.098-3.043.54-3.8 1.733-2.563 4.043l1.122 2.097 3.458-2.24c2.18-1.41 3.463-3.04 3.47-4.407zM882 693.107c0-.216-.675-.652-1.5-.969-.825-.316-1.5-.14-1.5.393s.675.969 1.5.969 1.5-.177 1.5-.393zm-30.707-1.234c.991-.99-2.098-6.198-4.41-7.436-3.821-2.045-4.313.504-.857 4.44 3.194 3.638 4.107 4.157 5.267 2.996zm-20.486-5.026c.348-2.44-3.22-5.51-5.422-4.665-1.65.634-1.706 1.343-.383 4.822 1.253 3.297 5.328 3.186 5.805-.157zm48.876-3.535c-.32-.797-.556-.56-.604.605-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.917zm-40.248-.707c.305-.493-.119-1.153-.94-1.469-.908-.348-1.495.003-1.495.895 0 1.618 1.563 1.986 2.435.574zm46.914-.573c.642-1.67-.848-2.96-2.349-2.032-1.495.924-1.206 3.5.393 3.5.766 0 1.647-.66 1.956-1.468zM794 680c0-1.375-.45-2.5-1-2.5s-1-.9-1-2c0-2.202-.124-2.273-2.418-1.393-1.663.638-2.223 3.393-.69 3.393.49 0 1.174 1.125 1.519 2.5s1.294 2.5 2.108 2.5c.913 0 1.481-.959 1.481-2.5zm-94-1.5c1.1-1.1 2-3.323 2-4.941 0-1.618.45-3.22 1-3.559 1.292-.798 1.305-4.5.016-4.5-.542 0-2.297 1.238-3.902 2.75-2.147 2.023-3.071 4.005-3.497 7.5-.655 5.38.825 6.308 4.383 2.75zm46.264.402c.802-.8-.247-3.402-1.371-3.402-.491 0-.893.9-.893 2 0 1.95 1.06 2.606 2.264 1.402zm110.072-5.152c-.31-2.155-1.559-4.687-2.937-5.952-1.328-1.22-2.399-3.34-2.399-4.75 0-1.401-.395-2.548-.878-2.548-1.798 0-2.88 2.675-3.541 8.75-.685 6.292.009 7.654 2.419 4.75 1.78-2.145 2.912-1.861 4 1 .523 1.375 1.608 2.5 2.412 2.5 1.119 0 1.336-.881.924-3.75zm-19.385-3c2.456-2.974 3.017-4.474 2.71-7.25-.777-7.037-3.661-9.257-3.661-2.819 0 2.491-.258 2.85-1.38 1.919-.758-.63-1.647-2.485-1.974-4.122-.339-1.692-1.234-2.978-2.074-2.978-1.182 0-1.361.982-.898 4.9.43 3.634.16 5.498-1.047 7.222-2.216 3.163-2.044 4.775.623 5.847 3.683 1.48 4.46 1.206 7.701-2.719zm36.478.412c.813-1.305.71-1.944-.429-2.654-1.96-1.222-4.507 1.228-3.636 3.498.75 1.952 2.555 1.578 4.065-.844zM773 667.547c0-2.435-2.046-7.047-3.125-7.047-2.375 0-3.827 7.45-1.625 8.338 2.825 1.14 4.75.616 4.75-1.29zm43.304-7.053c.485-1.922.858-4.739.828-6.26-.034-1.74.694-3.223 1.964-4 2.447-1.496 6.385-7.586 5.487-8.484-.354-.355-1.98.144-3.614 1.11-1.633.964-2.969 1.518-2.969 1.231 0-.287 1.35-2.65 3-5.252s3-5.74 3-6.976c0-1.235.45-2.523 1-2.863.55-.34 1-1.308 1-2.151 0-.844.902-2.68 2.005-4.083 1.531-1.946 1.739-2.87.878-3.907-1.652-1.99-2.783-1.673-4.065 1.141-.626 1.375-1.689 2.5-2.361 2.5-1.698 0-6.457 10.06-6.457 13.65 0 1.622-.412 3.378-.915 3.9-.504.523-1.066 2.045-1.25 3.383-.385 2.796-5.684 4.93-6.99 2.816-.405-.655-.873-.98-1.04-.72-.168.259-1.384 1.695-2.702 3.192-1.998 2.268-2.184 2.977-1.117 4.262 1.019 1.228 1.577 1.294 2.743.327 1.177-.977 1.654-.877 2.43.508.53.948 1.406 1.45 1.946 1.117.54-.334 1.621-.077 2.402.57 1.22 1.014 1.198 1.516-.162 3.592-1.295 1.975-1.35 2.692-.305 3.95 1.99 2.399 4.295 1.28 5.264-2.553zM812 652.5c0-2.267 1.037-2.563 2.8-.8 1.763 1.763 1.467 2.8-.8 2.8-1.333 0-2-.667-2-2zm45 10.122c0-.482-.675-1.437-1.5-2.122-1.217-1.01-1.5-.97-1.5.21 0 .802.3 1.757.667 2.123.95.95 2.333.825 2.333-.21zm-73.553-3.207a1.117 1.117 0 00-1.532-.362 1.117 1.117 0 00-.362 1.532 1.117 1.117 0 001.532.362 1.117 1.117 0 00.362-1.532zM882.15 654c.083-1.925.195-4.063.25-4.75.223-2.792-2.834-1.013-3.647 2.122-1.026 3.96-.42 6.128 1.716 6.128 1.055 0 1.578-1.089 1.681-3.5zm-110.957.75c.827-.963 1.794-2.57 2.15-3.57.423-1.188 1.431-1.709 2.903-1.5 1.881.267 2.203.849 1.947 3.516-.305 3.176-.282 3.193 3.5 2.612 6.433-.99 6.656-1.82 2.23-8.302-2.476-3.629-5.071-6.21-6.873-6.839-1.592-.555-3.435-2.057-4.095-3.338-1.51-2.932-6.035-7.829-7.235-7.829-.515 0-.61 2.48-.222 5.75.376 3.162.67 9.237.653 13.5-.026 6.783.193 7.75 1.755 7.75.981 0 2.46-.788 3.287-1.75zm84.837-2.232c-.946-.584-.93-1.205.072-2.81 1.004-1.608 1.03-2.624.114-4.634-1.23-2.699-3.14-3.46-3.322-1.324-.058.688-.016 2.568.094 4.179.233 3.408 3.2 8.505 3.838 6.592.23-.689-.129-1.59-.796-2.003zM745 649.21c0-.518-.945-.695-2.099-.393-1.716.448-1.99.196-1.5-1.384.33-1.062.876-2.832 1.216-3.932.81-2.625-.446-2.477-4.065.482-2.792 2.281-2.874 2.558-1.541 5.214 2.679 5.34 3.081 5.566 5.64 3.163 1.292-1.214 2.349-2.632 2.349-3.15zm144.68-3.708c1.508-5.897 1.206-8.001-1.149-8.001-1.03 0-1.531.968-1.531 2.953 0 1.624-.51 4.07-1.131 5.436-1.26 2.764-.495 5.986 1.28 5.395.632-.21 1.77-2.813 2.53-5.783zM797 649.5c0-.55-.9-1.9-2-3s-2.45-2-3-2c-1.393 0-1.253 3.347.2 4.8 1.453 1.453 4.8 1.593 4.8.2zm45.53-2.347c.809-1.154 1.47-2.673 1.47-3.376 0-2.006-3.384-1.493-4.768.723-.687 1.1-1.92 2-2.74 2-1.804 0-2.002 2.662-.242 3.254 2.092.704 4.732-.39 6.28-2.601zM801 645c.991-1.195.991-2.108 0-4.5-1.195-2.885-3.313-3.922-4.404-2.157-.286.464-.254 2.489.072 4.5.625 3.85 2.253 4.661 4.331 2.157zm65.539.436c.361-.585-.098-1.897-1.02-2.917-1.368-1.51-1.461-2.26-.506-4.044.848-1.584.87-2.493.08-3.283-1.517-1.517-2.799.051-3.598 4.403-.49 2.669-.233 4.023.994 5.25 1.914 1.914 3.123 2.09 4.05.591zm-76.91-6.592c.802-3.199-.657-5.845-3.224-5.845-2.1 0-2.89 2.434-1.974 6.08.852 3.397 4.325 3.24 5.197-.235zM750 637.393c0-1.041-.45-1.893-1-1.893s-1-1.35-1-3c0-3.604-1.2-3.864-2.927-.636-1.052 1.966-.995 2.885.339 5.465 1.742 3.37 4.588 3.41 4.588.064zm154.448-3.196c2.7-5.08 3.275-9.132 1.456-10.256-.603-.373-1.663-.062-2.356.69-1.692 1.837-4.829 13.606-3.99 14.964.879 1.42 1.817.384 4.89-5.398zM737 638.5c0-.55-.675-1-1.5-1s-1.5.45-1.5 1 .675 1 1.5 1 1.5-.45 1.5-1zm139.581-.352c.317-.826 1.473-1.17 2.97-.883 1.416.27 2.449-.003 2.449-.648 0-.615-.852-1.117-1.893-1.117-2.522 0-3.192-2.1-2.435-7.626.565-4.122.44-4.542-1.264-4.214-2.748.53-4.145 4.585-3.649 10.59.305 3.693.86 5.25 1.869 5.25.79 0 1.668-.608 1.953-1.352zm-18.301-7.36c-.272-.709-1.346-1.288-2.387-1.288-1.407 0-1.893.72-1.893 2.8 0 1.54.563 3.364 1.25 4.054 1.001 1.005 1.476.704 2.387-1.512.625-1.522.915-3.347.643-4.055zM807 635.666c0-1.302-1.189-2.168-2.156-1.57-1.034.638-.142 2.403 1.215 2.403.518 0 .941-.375.941-.833zm30.035-.71c.91-1.095.97-1.852.21-2.612-1.432-1.432-3.245-.195-3.245 2.214 0 2.335 1.287 2.505 3.035.399zM777 629c0-4.891-2.02-6.198-3.965-2.565-1.306 2.44.29 7.065 2.44 7.065 1.14 0 1.525-1.134 1.525-4.5zm22 3c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm47.406-.782c.744-1.18.718-1.994-.091-2.803-1.624-1.624-3.315-.233-3.315 2.727 0 2.758 1.69 2.795 3.406.076zm47.928.855c.72-1.875-1.642-3.776-3.707-2.983-1.848.709-1.84.69-1.02 2.828.756 1.97 3.99 2.077 4.727.155zm-85.726-9.995c.583-1.519-1.217-5.63-2.961-6.763-.721-.468-.64-1.458.254-3.13.778-1.454 1.016-3.408.586-4.816-1.681-5.505-7.41-8.485-5.996-3.119.399 1.512.789 4.325.867 6.25.078 1.925.526 3.78.995 4.123.47.342.357 1.55-.25 2.684-.607 1.134-1.103 2.991-1.103 4.127 0 1.698.63 2.066 3.531 2.066 2.13 0 3.748-.564 4.077-1.422zm93.82-1.15c.865-.864 1.572-3.114 1.572-5 0-2.38.458-3.428 1.5-3.428 1.89 0 1.875-1.92-.036-4.448-.81-1.07-1.257-2.646-.992-3.5.645-2.075-.959-4.487-2.394-3.6-.732.452-1.016 3.021-.788 7.128.197 3.53.017 6.42-.399 6.42-1.203 0-2.086 3.81-1.391 6 .765 2.409.925 2.432 2.929.429zM781 619.5c0-.55-.423-1-.941-1s-1.22.45-1.559 1c-.34.55.084 1 .941 1s1.559-.45 1.559-1zm59.6-2.6c-.484-1.261-.966-1.434-1.766-.634-.605.605-.8 1.88-.434 2.834.484 1.261.966 1.434 1.766.634.605-.605.8-1.88.434-2.834zm17.4 1.6c0-1.111-.667-2-1.5-2-1.522 0-2.051 2.115-.833 3.333 1.267 1.268 2.333.66 2.333-1.333zm-35.916-2.722c.678-1.781.701-3.454.069-4.842-.574-1.26-.605-2.691-.075-3.528 1.354-2.139 1.116-4.315-1.13-10.319-1.467-3.92-2.467-5.327-3.5-4.93-1.755.673-1.939 6.556-.3 9.616.63 1.179 1.112 5.424 1.07 9.434-.059 5.744.234 7.291 1.378 7.291.8 0 1.92-1.225 2.488-2.722zM830.15 612c0-.522-.484-1.111-1.075-1.308-.591-.197-1.075.391-1.075 1.308s.484 1.505 1.075 1.308c.591-.197 1.075-.786 1.075-1.308zm38.806-2.947c2.492-3.003-.776-16.553-3.992-16.553-1.54 0-6.118 7.157-5.54 8.662.476 1.241.897 1.316 2.044.365 2.25-1.868 3.818-.174 3.224 3.482-.744 4.587 1.806 7.006 4.264 4.044zm-8.384-4.315c-.333-.332-1.157-.053-1.83.62-.967.967-.91 1.422.266 2.157 1.063.664 1.59.486 1.83-.62.187-.853.066-1.824-.266-2.157zm22.355 1.127c1.14-1.449 2.073-3.69 2.073-4.98 0-3.438-3.011-10.385-4.502-10.385-1.897 0-2.498 2.384-2.498 9.915 0 8.882 1.192 10.2 4.927 5.45zM907 596.531c0-1.339-.48-1.784-1.5-1.393-.825.317-1.5 1.203-1.5 1.969s.675 1.393 1.5 1.393 1.5-.885 1.5-1.969zm-38.446-7.118c1.03-1.668-1.287-3.58-2.667-2.2-1.154 1.154-.432 3.287 1.113 3.287.485 0 1.184-.49 1.554-1.087zm-25.73-2.246c.186-.964-.316-1.667-1.192-1.667-1.857 0-2.979 1.63-2.1 3.053.905 1.463 2.902.623 3.291-1.386zM908.444 575c-.7-11.47-1.323-13.557-3.327-11.142-1.178 1.42-1.301 3.246-1.154 17.095.079 7.388 1.495 9.887 3.844 6.778.995-1.316 1.147-4.368.637-12.731zm-19.096 9.968c-.31-.807-.965-1.468-1.456-1.468-1.026 0-1.207 2.353-.254 3.306 1.067 1.067 2.312-.27 1.71-1.838zm-27.44-2.091c1.389-3.843.335-5.792-2.535-4.69-1.734.665-6.302-4.614-6.342-7.33-.035-2.351-2.578-3.9-3.625-2.207-.9 1.456 1.534 9.007 3.496 10.85.879.825 2.15 2.738 2.826 4.25 1.761 3.944 4.582 3.546 6.18-.873zM849 580.5c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm33-1.5c0-1.556-.567-2.5-1.5-2.5-1.5 0-2.091 3.075-.833 4.333 1.36 1.36 2.333.595 2.333-1.833zm-65.317-2.688c-.32-.797-.556-.56-.604.605-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.917zm74.567-3.204c3.24-2.46 2.176-4.608-2.281-4.608-4.402 0-6.098 1.934-3.958 4.513 1.513 1.823 3.914 1.86 6.239.095zm-26.857-4.19c.839-2.186.76-5.93-.143-6.836-.412-.414-.75-2.4-.75-4.416 0-3.374-.232-3.667-2.933-3.714-1.613-.027-3.113-.59-3.333-1.251-.22-.66-1.376-1.185-2.567-1.165-2.562.044-7.804 6.444-6.998 8.545.883 2.3 4.275 1.636 5.513-1.081 1.348-2.96 2.07-3.055 5.914-.784 3.064 1.81 3.547 2.769 1.904 3.784-.55.34-1 2.391-1 4.559 0 3.2.356 3.941 1.893 3.941 1.041 0 2.166-.712 2.5-1.582zm-29.636-3.402c.683-2.192 1.243-4.727 1.243-5.635 0-2.62-3.904 2.888-4.634 6.538-.939 4.696 1.877 3.946 3.39-.903zM872 554c0-.825-.675-1.5-1.5-1.5s-1.5.675-1.5 1.5.675 1.5 1.5 1.5 1.5-.675 1.5-1.5zm39-5.941c0-2.054-2.07-3.063-3.046-1.485-.452.732-.6 1.69-.329 2.128.84 1.36 3.375.877 3.375-.643zm4-3.059c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm1-8c0-2.541-2.278-3.478-3.53-1.452-.963 1.558.247 3.952 1.999 3.952.966 0 1.531-.922 1.531-2.5zm-7.5.5c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm-11.5-1.941c0-1.068-.399-2.188-.887-2.489-1.218-.753-3.438 2.095-2.64 3.386 1.095 1.771 3.527 1.153 3.527-.897zm-18-2c0-1.35-1.823-2.286-3.016-1.549-.56.346-.758 1.047-.441 1.56.75 1.214 3.457 1.206 3.457-.011zm35.5-6.059c.34-.55.168-1-.382-1s-1.278.45-1.618 1c-.34.55-.168 1 .382 1s1.278-.45 1.618-1zm5.5 0c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm-10.245-6.407c.225-5.013.034-5.7-1.499-5.404-1.33.256-1.798 1.424-1.927 4.824-.211 5.51.294 7.28 1.92 6.737.76-.253 1.349-2.658 1.506-6.157zm-21.947 4.332c-.197-.591-.786-1.075-1.308-1.075s-1.111.484-1.308 1.075c-.197.591.391 1.075 1.308 1.075s1.505-.484 1.308-1.075zm36.73-13.405c2.518-4.41 5.074-8.746 5.68-9.634.605-.888.79-2.422.412-3.409-.621-1.618-.986-1.51-3.696 1.087-1.654 1.584-3.285 3.988-3.625 5.342-.34 1.353-1.22 3.616-1.957 5.027-.737 1.412-1.342 3.069-1.346 3.682-.003.613-.837 2.188-1.854 3.5-1.016 1.312-2.177 3.735-2.581 5.385l-.734 3 2.56-2.98c1.409-1.638 4.622-6.588 7.14-11zM910 503.441c0-2.158-1.589-2.642-2.27-.691-.61 1.749.298 3.851 1.375 3.185.492-.304.895-1.426.895-2.494zm-6.446-5.028c1.147-1.856-1.252-3.408-3.012-1.948-.848.704-1.542 1.675-1.542 2.157 0 1.259 3.753 1.086 4.554-.21zm24.27-10.246c.217-1.124-.353-1.667-1.75-1.667-2.286 0-2.352.112-1.45 2.46.76 1.985 2.757 1.49 3.2-.793zm-19.607-4.85c-.651-.651-1.472-.896-1.824-.543-.352.352-.345 1.41.016 2.35.5 1.304.934 1.433 1.824.543s.886-1.448-.016-2.35zm21.466-3.005c-.32-.797-.556-.56-.604.605-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.916zm-7.47-3.812c-.242-1.65-.614-3-.826-3-.213 0-.387 1.35-.387 3s.372 3 .827 3c.455 0 .628-1.35.386-3zm11.287-27.07c0-2.446-.492-3.497-1.75-3.74-1.289-.248-1.75.32-1.75 2.155 0 1.37.28 3.222.623 4.115 1.04 2.71 2.877 1.093 2.877-2.53zM553.188 978.762c.184-.957 1.082-1.883 1.995-2.059 1.238-.238 1.523.204 1.122 1.739-.655 2.506-3.596 2.807-3.117.32zm5 1.055c-1.018-.407-.928-.947.406-2.42.944-1.044 2.269-1.897 2.944-1.897 1.303 0 2.63 3.498 1.687 4.442-.668.667-3.215.604-5.036-.125zm-160.892-1.989c-.962-2.505 5.202-5.875 7.804-4.266 1.057.653.967 1.207-.45 2.772-2.284 2.525-6.62 3.406-7.354 1.494zM414 976.04c0-2.3 2.584-3.573 5.904-2.91 2.074.416 3.087 1.153 2.893 2.108-.392 1.938-8.797 2.704-8.797.802zm-75.738-1.23c.93-.93 1.971-1.41 2.314-1.067.985.984-.526 2.757-2.35 2.757-1.526 0-1.523-.132.036-1.69zm134.168-2.816c-1.591-3.354-1.587-3.663.076-5.5 2.44-2.696 3.494-1.638 3.494 3.506 0 5.665-1.445 6.472-3.57 1.994zm-42.68 1.817c-1.142-.299-1.75-1.432-1.75-3.262 0-1.77-.802-3.337-2.17-4.246-1.268-.842-1.868-1.933-1.442-2.622 1.265-2.047 4.501-1.288 7.14 1.673 1.869 2.098 3.197 2.73 5.008 2.384 1.372-.262 2.464 0 2.464.595 0 1-6.216 6.302-7.094 6.051a175.19 175.19 0 00-2.156-.573zm118.529-3.028c-.691-1.8 3.53-6.283 5.917-6.283 2.553 0 4.52 4.432 2.857 6.436-1.551 1.87-8.042 1.756-8.774-.152zm-184.82-.35c-.363-.586-.42-1.306-.126-1.6.717-.716 2.667.546 2.667 1.726 0 1.278-1.726 1.193-2.541-.126zm147.563-.183c.012-.688.843-2.317 1.846-3.622 1.65-2.145 1.89-2.203 2.502-.605.41 1.066.013 2.502-1 3.622-1.941 2.144-3.38 2.404-3.348.605zm87.814-2.629c-.885-1.033-2.17-2.066-2.855-2.294-1.912-.637-.291-4.364 2.438-5.608 2.796-1.274 3.581-.737 3.581 2.448 0 2.861 2.56 3.12 3.29.333.38-1.456 1.364-2 3.616-2 3.94 0 3.957 1.502.04 3.527-1.678.869-3.928 2.455-5 3.526-2.418 2.419-3.09 2.428-5.11.068zm-116.302-2.084c-2.422-2.675-1.297-5.037 2.4-5.037 3.961 0 5.778 3.046 3.205 5.374-2.339 2.117-3.445 2.05-5.605-.337zM530 965c0-1.982.44-2.562 1.75-2.31.963.186 1.75 1.225 1.75 2.31s-.787 2.124-1.75 2.31c-1.31.252-1.75-.328-1.75-2.31zm-78-1.5c0-1.1.45-2 1-2s1 .9 1 2-.45 2-1 2-1-.9-1-2zm185.605.412c-.808-2.105-.82-2.079.895-2.079.825 0 1.5.574 1.5 1.275 0 1.983-1.721 2.562-2.395.805zM437.4 963.1c-.366-.954-.17-2.23.434-2.834.8-.8 1.282-.627 1.766.634.366.954.17 2.23-.434 2.834-.8.8-1.282.627-1.766-.634zm98.267.733c-1.08-1.08-.771-2.079.833-2.695 1.02-.391 1.5.054 1.5 1.393 0 1.965-1.072 2.564-2.333 1.302zm-77.353-1.526c-1.935-2.466-2.137-5.855-.54-9.055l1.598-3.204 1.064 2.58c.585 1.42 1.703 3.347 2.484 4.284 1.253 1.502 1.126 1.997-1.08 4.203-1.985 1.985-2.711 2.23-3.526 1.192zm-71.647-.474c-.367-.366-.667-1.266-.667-2 0-1.77 2.64-1.715 3.324.07.808 2.105-1.098 3.49-2.657 1.93zm153.245-1.94c-1.117-1.345-.946-1.864 1.137-3.465 2.919-2.243 5.951-2.496 5.951-.496 0 .788-1.3 2.357-2.888 3.488-2.612 1.86-3.012 1.905-4.2.474zm-190.416-4.4c-.397-.642-.22-1.668.391-2.28 2.62-2.62.016-8.007-2.977-6.157-.5.309-.91-1.013-.91-2.938 0-3.96 1.393-5.367 3.544-3.582 1.18.98 1.456.88 1.456-.52 0-1.167.515-1.532 1.582-1.123.87.334 1.77.607 2 .607.23 0 .418.675.418 1.5s-.675 1.5-1.5 1.5c-1.75 0-1.984 2.116-.406 3.694.755.755 2.182.793 4.62.12 4.632-1.28 6.172.135 3.705 3.405-3.723 4.937-10.433 8.186-11.923 5.775zm-15.971-1.966c-1.474-1.628-1.572-2.265-.54-3.508 1.585-1.91 3.422-1.938 4.97-.073.864 1.041 1.855 1.196 3.543.555 1.925-.732 2.63-.454 3.946 1.554 1.54 2.352 1.513 2.445-.721 2.445-1.278 0-2.815-.492-3.416-1.093-.79-.79-1.77-.65-3.537.508-2.285 1.497-2.562 1.472-4.245-.388zm38.944.923c-.95-1.538.351-2.53 1.635-1.246.718.718.735 1.277.052 1.7-.56.346-1.319.141-1.687-.454zM525 951.434c0-.586.492-1.984 1.093-3.107.79-1.477.79-2.344 0-3.134-1.332-1.332-1.433-4.365-.171-5.145 1.253-.774 4.078 5.113 4.078 8.499 0 1.575-.672 2.997-1.582 3.346-2.322.891-3.418.744-3.418-.459zm22 .066c0-.55.648-1 1.441-1s1.72.45 2.059 1c.34.55-.309 1-1.441 1-1.132 0-2.059-.45-2.059-1zm31.4-1.54c-.407-1.623-.094-3.157.868-4.25.966-1.097 1.327-2.874 1.005-4.96-.381-2.477-.134-3.25 1.042-3.25 2.047 0 3.383 9.828 1.75 12.88-1.543 2.882-3.889 2.672-4.664-.42zM328 950c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm44.631-.202c-2.067-2.068.827-9.298 3.722-9.298 1.53 0 2.705 5.225 1.5 6.676-1.633 1.968-4.457 3.386-5.222 2.622zm195.96-.15c-.788-1.276 1.942-4.555 3.163-3.8 1.421.878.357 4.652-1.312 4.652-.728 0-1.561-.384-1.851-.853zm-114.18-8.974l-.633-3.964-5.749.521c-5.633.51-5.763.465-6.452-2.28-.478-1.903-.129-3.868 1.087-6.126 2.807-5.212 5.336-3.933 5.336 2.698 0 4.078 1.59 4.522 4.595 1.283 2.223-2.395 2.52-3.422 2.03-7.013-.666-4.87.367-6.065 2.86-3.31 1.459 1.612 1.648 3.079 1.13 8.727-.81 8.83-.837 9.541-.445 11.24.181.787-.447 1.601-1.397 1.81-1.337.292-1.87-.519-2.361-3.586zM302.2 942.3c-1.487-1.487-1.569-3.8-.134-3.8 2.033 0 4.934 2.078 4.934 3.535 0 1.766-3.126 1.939-4.8.265zm257.8-.253c0-2.518 2.264-6.547 3.68-6.547.974 0 1.172.777.701 2.75-1.069 4.475-4.381 7.346-4.381 3.797zm-11.664-1.114c-.907-2.364 1.22-4.046 3.122-2.468.848.704 1.542 1.9 1.542 2.657 0 1.901-3.923 1.742-4.664-.19zm-168.908-2.1c-.315-1.008-.99-2.508-1.503-3.333-.511-.825-1.406-2.625-1.989-4a122.3 122.3 0 00-2.497-5.404c-2.818-5.687-.72-10.51 4.64-10.666 1.331-.04 3.321-.427 4.421-.862 2.701-1.069 4.5-.254 4.5 2.039 0 1.417-.72 1.893-2.864 1.893-2.482 0-3.098.613-4.62 4.595-1.612 4.224-1.624 4.726-.145 6.205 1.48 1.479 1.723 1.454 3.011-.308 1.191-1.629 1.643-1.716 3.01-.582 2.157 1.79 2.029 3.795-.326 5.054-1.063.57-2.075 2.238-2.25 3.709-.376 3.18-2.576 4.258-3.388 1.66zm203.662-1.426c-2.013-2.722-2.695-3.016-5.689-2.455-3.248.61-3.401.505-3.401-2.334 0-1.98-.835-3.63-2.5-4.94-1.375-1.08-2.497-2.351-2.492-2.822.011-1.27 7.573-5.356 9.914-5.356 1.26 0 2.64-1.186 3.647-3.134 1.576-3.048 1.55-3.2-.974-5.54-3.702-3.433-3.471-7.495.608-10.687 3.505-2.744 5.26-2.52 4.453.57-.645 2.465.184 4.791 1.708 4.791 1.259 0 7.636-6.575 7.636-7.873 0-.443-1.125-1.319-2.5-1.945-2.747-1.252-3.636-6.182-1.114-6.182 1.492 0 4.35-1.4 9.114-4.465a219.104 219.104 0 013.255-2.07c.14-.077-.256-1.602-.878-3.39-.928-2.66-.855-3.525.4-4.78 1.972-1.973 3.723-.87 3.723 2.347 0 3.442 2.2 2.524 3.2-1.334.942-3.634 3.196-5.754 5.273-4.957 1.173.45 1.36 1.615.864 5.362-.35 2.633-1.243 5.675-1.986 6.76-.743 1.084-1.351 2.702-1.351 3.595 0 2.265-3.61 5.296-5.463 4.585-.924-.355-1.568-1.898-1.616-3.872-.043-1.804-.329-2.606-.634-1.781-.306.825-1.051 2.124-1.657 2.886-1.422 1.79-1.94 13.805-.63 14.614 2.207 1.364.964 3.5-2.035 3.5-3.119 0-7.505 2.199-9.715 4.871-.688.831-1.25 3.664-1.25 6.294 0 4.286-.307 4.942-2.95 6.31-1.623.838-3.836 1.525-4.919 1.525-3.258 0-5.131 1.11-5.131 3.04 0 3.927 8.342 2.868 11.985-1.521.719-.867 2.878-1.519 5.03-1.519 3.928 0 4.98-1.123 4.991-5.332.003-1.192.679-3.457 1.5-5.032.822-1.576 1.494-3.713 1.494-4.75 0-1.208.706-1.886 1.966-1.886 1.799 0 1.93.558 1.534 6.549-.297 4.511-1.047 7.331-2.41 9.064-1.088 1.383-1.746 3.12-1.462 3.86.308.801-.424 1.64-1.806 2.07-1.277.397-4.524 2.913-7.215 5.59-2.69 2.677-5.644 4.867-6.562 4.867-.918 0-2.698-1.392-3.955-3.093zm4.339-2.478c1.657-1.658 2.084-3.434.821-3.421-.412 0-1.27 1.13-1.906 2.5-1.342 2.893-1.096 3.101 1.085.92zm1.41-15.841c.186-.96.037-2.948-.332-4.416-.646-2.573-.721-2.6-2.088-.73-1.497 2.047-1.89 5.754-.732 6.912 1.09 1.09 2.782.142 3.152-1.766zm-233.371 18.311c-.37-1.168-.149-2.61.5-3.25 1.708-1.682 4.456 2.136 2.893 4.019-1.57 1.892-2.624 1.654-3.393-.769zm208.032-2.914c-1.1-.489-3.083-1.752-4.406-2.809-2.695-2.15-2.314-5.176.652-5.176 2.668 0 8.365 5.546 7.64 7.437-.674 1.755-1.049 1.808-3.886.548zM328.362 933c-.345-.9-.118-2.144.505-2.767.623-.623 1.133-2.168 1.133-3.433 0-2.801 1.121-2.928 3.42-.388 1.023 1.13 1.597 3.07 1.405 4.75-.258 2.255-.89 2.903-3.08 3.155-1.839.211-2.965-.227-3.383-1.317zm100.37-2.036c-2.053-1.395-3.732-3.168-3.732-3.941 0-2.79 2.129-2.617 5.629.456 3.274 2.874 3.672 2.992 4.817 1.426.758-1.037 1.497-1.306 1.88-.686.677 1.096-2.463 5.281-3.961 5.281-.495 0-2.58-1.141-4.633-2.536zM473 931.5c0-1.95 1.06-2.606 2.264-1.402.802.8-.247 3.402-1.371 3.402-.491 0-.893-.9-.893-2zm-158.67-3.583c-.931-2.426 3.242-6.177 5.374-4.832 2.79 1.76 2.56 3.137-.807 4.817-3.922 1.956-3.823 1.956-4.567.015zm48.337.916c-1.365-1.364-.598-2.462 1.505-2.153 2.748.405 3.671 2.82 1.078 2.82-1.054 0-2.217-.3-2.583-.667zM542.5 927.5c-.4-.646-.276-1.624.274-2.174.667-.667 1.242-.609 1.726.174.4.646.276 1.624-.274 2.174-.667.667-1.242.609-1.726-.174zM354 921.539c0-1.72 3.875-6.497 4.645-5.728.16.16-.22 1.955-.845 3.99-1.195 3.893-3.8 5.084-3.8 1.738zm75-.539c-.685-.825-1.865-1.5-2.622-1.5-.758 0-1.378-.675-1.378-1.5s.675-1.5 1.5-1.5 1.5.378 1.5.84c0 .461 1.125 1.352 2.5 1.978 1.375.627 2.5 1.599 2.5 2.16 0 1.537-2.584 1.228-4-.478zm114.716-1.404c-2.16-3.655-2.146-4.096.123-4.096 1.66 0 4.161 3.635 4.161 6.047 0 2.023-2.65.816-4.284-1.951zm-63.231.517c-2.399-1.754-1.326-4.646 1.454-3.919 2.04.534 2.852 3.7 1.208 4.715-.469.29-1.667-.069-2.662-.796zm13.993-2.826c-2.693-4.069-3.505-7.752-3.467-15.717.019-4.007.36-4.526 2.446-3.725 1.183.454 1.543 2.191 1.543 7.45 0 6.05.299 7.137 2.542 9.244 2.522 2.37 2.987 5.966.862 6.665-.603.198-2.37-1.565-3.926-3.917zm-83.47.065c-1.654-1.732-3.008-3.52-3.008-3.975 0-.866 4.9-.167 8.75 1.247 3.803 1.397 2.413 5.876-1.823 5.876-.5 0-2.264-1.417-3.918-3.148zm-99.816.073c.197-.591.785-1.075 1.308-1.075.522 0 1.111.484 1.308 1.075.197.591-.391 1.075-1.308 1.075s-1.505-.484-1.308-1.075zm84.243-.03c-1.023-1.656 2.203-4.301 5.307-4.351 3.516-.056 4.549-4 1.316-5.026-2.64-.838-2.685-3.518-.058-3.518 1.202 0 2 .667 2 1.671 0 .92.76 2.51 1.687 3.536 1.587 1.753 1.572 1.977-.25 3.784-2.807 2.784-9.161 5.264-10.002 3.904zm164.09.145c-.848-1.372-.097-2.402 1.38-1.894.606.208.683.914.188 1.71-.625 1.006-1.03 1.054-1.568.184zm-173.844-7.79c.395-1.512.675-4.55.622-6.75-.098-4.126 1.88-7.5 4.398-7.5.997 0 1.342 1.203 1.216 4.25-.097 2.337.138 5.416.522 6.84.564 2.092.21 2.91-1.836 4.25-3.965 2.599-5.781 2.196-4.922-1.09zm-53.2.718c-.389-.628-.281-1.568.239-2.088 1.214-1.215 4.484.01 3.99 1.493-.524 1.573-3.377 1.974-4.23.595zm14.202-1.896c-2.772-2.827-2.387-4.663.727-3.468.874.335 1.59.112 1.59-.497 0-1.657 2.976-1.334 3.64.395.826 2.155-.456 6.503-1.909 6.47-.677-.015-2.498-1.32-4.048-2.9zm-33.734-1.167c-.93-1.738-.746-2.446 1.08-4.146 1.978-1.843 2.034-2.144.553-2.973-1.25-.7-1.493-1.741-1.01-4.314.482-2.576.143-4.019-1.411-5.995-1.126-1.431-2.588-4.261-3.25-6.29-.66-2.028-2.036-4.76-3.056-6.072-2.484-3.194-2.338-4.115.653-4.115 1.993 0 2.837.822 4.109 4 .88 2.2 2.24 4 3.024 4 1.6 0 3.349 3.836 2.62 5.75-.77 2.023 1.362 1.438 4.557-1.25 5.458-4.593 6.969-2.862 2.182 2.5-1.65 1.848-3 3.747-3 4.22 0 .474-.953 2.15-2.118 3.725-1.165 1.576-1.813 3.358-1.44 3.96 1.023 1.656 4.337 1.312 5.385-.56 1.168-2.087 4.45-1.015 3.997 1.305-.178.911-2.012 2.532-4.074 3.601-2.063 1.07-3.75 2.576-3.75 3.347 0 2.174-3.796 1.653-5.051-.693zm159.497 1.008c-.858-1.389 1.044-3.346 2.423-2.494 1.149.71.413 3.581-.917 3.581-.459 0-1.136-.49-1.506-1.087zm92.958-4.302c-.652-1.699.225-3.611 1.655-3.611 1.261 0 1.207 3.718-.066 4.504-.554.343-1.269-.06-1.589-.893zM477.7 900.75c-.231-.412-.467-2.396-.526-4.407-.082-2.862.437-4.013 2.39-5.292 3.853-2.525 6.422.557 2.9 3.48-.845.701-1.419 1.994-1.275 2.872.463 2.822-2.3 5.473-3.49 3.347zm-147.522-1.803c.452-2.172 2.227-2.305 2.633-.197.21 1.095-.28 1.75-1.31 1.75-.96 0-1.512-.647-1.323-1.553zm174.163-2.004c-.68-1.773-.823-9.003-.234-11.835.7-3.358-1.82-2.806-4.111.9-1.776 2.873-2.758 3.54-4.852 3.297-3.244-.377-4.082-3.372-1.2-4.287 2.914-.925 2.55-2.795-.943-4.859-3.79-2.239-3.777-4.01.06-8.381 2.844-3.238 2.947-3.613 1.45-5.267-.887-.98-2.94-2.047-4.561-2.371-2.961-.592-4.041-3.083-1.699-3.92.687-.245 2.533.203 4.102.996 2.593 1.31 3.047 1.264 5-.51 1.181-1.073 2.67-1.76 3.306-1.526 1.588.583 2.801-1.62 1.57-2.851-1.502-1.502-.243-4.986 1.651-4.568.892.197 1.467 1.006 1.28 1.798-.188.793-.567 3.46-.842 5.928s-.91 5.253-1.411 6.19c-1.06 1.98.708 3.61 2.247 2.07.539-.539 2.288-3.611 3.887-6.828 2.764-5.56 2.828-5.972 1.28-8.333-1.13-1.726-1.275-2.601-.473-2.868.634-.212 1.153-1.446 1.153-2.742 0-3.348 1.83-4.053 2.94-1.133 1.41 3.706 2.464 3.872 6.63 1.045 2.095-1.422 5.973-3.284 8.619-4.138 3.498-1.13 4.811-2.068 4.811-3.44 0-1.457-.62-1.82-2.73-1.598-2.586.273-2.763.018-3.378-4.86-.357-2.833-.867-5.533-1.134-6-.758-1.33 2.594-10.66 3.992-11.113 1.587-.515 1.691 5.068.148 7.952-1.444 2.698 1.875 7.423 4.97 7.075 3.288-.369 4.41 2.987 3.622 10.838-.639 6.354-.876 6.896-3.02 6.896-1.28 0-3.03-.704-3.89-1.564-2.087-2.086-3.736-.907-2.975 2.125.685 2.73-.703 3.23-2.605.939-1.613-1.943-2.605-1.891-4.767.25-.971.963-2.94 2.512-4.377 3.443-1.436.93-2.926 2.956-3.311 4.5-.386 1.544-1.267 3.482-1.958 4.307-.692.825-1.869 3.075-2.616 5-1.623 4.184-2.597 4.965-6.221 4.985-2.874.016-6.75 3.073-6.75 5.324 0 .72.598 2.127 1.33 3.128 1.25 1.71 1.512 1.623 4.392-1.458 4.204-4.498 6.154-3.595 5.733 2.655-.208 3.09.241 5.737 1.272 7.48 1.351 2.289 1.399 3.168.312 5.792-1.385 3.343-4.667 4.228-5.7 1.537zm120.16-.443c-.34-.55-.352-1.43-.027-1.956.823-1.331 3.527-.133 3.527 1.563 0 1.599-2.576 1.888-3.5.393zM247 893.122c0-2.482 2.204-5.085 3.342-3.947 1.266 1.266.644 5.116-.924 5.718-2.325.892-2.418.824-2.418-1.77zm331.6.54c-.284-.46 1.264-2.576 3.441-4.702 4.547-4.44 4.736-5.024 1.87-5.773-1.579-.413-1.93-1.05-1.437-2.606.382-1.203.03-2.951-.847-4.202-1.318-1.883-1.323-2.413-.041-4.37 1.284-1.96 1.278-2.377-.05-3.48-1.835-1.522-4.536-.665-4.536 1.44 0 .842-.675 1.531-1.5 1.531-2.223 0-1.856-4.367.55-6.545 1.98-1.792 2.165-1.794 5.388-.058 3.155 1.699 3.479 1.704 5.94.092 2.382-1.561 2.654-1.569 3.224-.084.342.891.096 2.255-.548 3.03-.896 1.08-.87 1.887.114 3.462.954 1.528.993 2.343.15 3.185-.842.843-1.567.468-2.834-1.466-2.13-3.25-3.484-2.517-3.484 1.884 0 3.787.854 4.62 5.029 4.909 3.095.214 7.268 3.3 6.388 4.725-.294.476-1.408.866-2.476.866S591 886.175 591 887s-.787 1.518-1.75 1.54c-.962.023-3.308 1.373-5.212 3-3.648 3.119-4.594 3.488-5.438 2.123zm-324.6-4.66c-1.341-3.53-1.353-3.502 1.5-3.502 2.111 0 2.5-.467 2.5-3 0-3.5.606-3.653 4-1.005l2.5 1.95-2.138 3.778c-2.76 4.873-6.854 5.744-8.362 1.778zm123.6 1.195c-2.498-1.827-1.648-4.956 1.665-6.121 4.037-1.42 5.72.565 3.534 4.167-2.02 3.33-2.877 3.652-5.198 1.954zm152.577-.25c.452-2.172 2.227-2.305 2.633-.197.21 1.095-.28 1.75-1.31 1.75-.96 0-1.512-.647-1.323-1.553zM232 888.441c0-1.133.45-1.78 1-1.441.55.34 1 1.266 1 2.059 0 .793-.45 1.441-1 1.441s-1-.927-1-2.059zm157.497-4.947c-1.746-3.872-1.744-4.12.04-7.433 2.052-3.81 4.161-5.12 9.713-6.034 2.954-.487 3.75-.296 3.75.896 0 .833-.562 1.308-1.25 1.055-2.039-.748-9.2 5.906-8.453 7.854.352.918 1.295 1.668 2.095 1.668 1.98 0 7.608-4.849 7.608-6.554 0-1.21 2.877-3.446 4.434-3.446.311 0 .566 1.07.566 2.378 0 3.45 2.461 5.189 5.43 3.836 2.26-1.03 3.57-.723 3.57.836 0 .394-.787.964-1.75 1.267-.962.303-3.669 1.255-6.014 2.117-3.428 1.259-4.647 1.327-6.219.345-1.694-1.058-2.376-.791-5.105 2-4.21 4.305-6.203 4.12-8.415-.785zM534 886.035c0-1.93 3.636-3.933 4.525-2.494.808 1.307-1.3 3.959-3.147 3.959-.758 0-1.378-.66-1.378-1.465zm-347.921-4.118c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm53.497.516c-.848-2.424-.138-10.247.964-10.613.572-.19 1.559 1.572 2.193 3.917 1.022 3.776.936 4.484-.75 6.196-1.543 1.566-2 1.66-2.407.5zm95.125-.565c-.385-.386-.701-1.783-.701-3.104 0-1.92.452-2.339 2.25-2.084 1.644.234 2.25.99 2.25 2.806 0 2.414-2.315 3.865-3.799 2.382zm20.642-.916c-.343-.894.199-2.148 1.282-2.968 2.392-1.812 2.86-1.81 4.375.016.993 1.197.993 1.803 0 3-1.621 1.953-4.9 1.925-5.657-.048zm77.308.08c-.642-1.67.848-2.96 2.349-2.032 1.495.924 1.206 3.5-.393 3.5-.766 0-1.647-.66-1.956-1.468zm-116.433-.782c-1.654-2.014-3.154-17.398-2.077-21.3.985-3.567 4.92-6.769 5.645-4.593.558 1.674 2.214 1.395 2.214-.373 0-.834-1.575-2.267-3.5-3.185-3.628-1.73-4.657-4.641-2-5.66 2.269-.871 1.8-2.574-1-3.639-2.775-1.055-3.145-3.212-1.25-7.293 1.59-3.423 3.077-3.412 5.667.043 4.674 6.236 5.458 6.375 6.6 1.172.453-2.06.196-3.605-.788-4.739-3.311-3.82-2.739-13.183.806-13.183.91 0 1.465-.982 1.465-2.593 0-1.758.648-2.764 2.01-3.12 1.976-.516 3.195-3.327 2.727-6.287-.49-3.106 1.844-2.157 3.932 1.598 2.913 5.239 2.846 6.402-.365 6.402h-2.696L337 817c3.494 3.605 6.54 4.351 10.066 2.465 2.164-1.158 2.714-7.639.931-10.97-.67-1.252-.67-2.079 0-2.493.552-.341 1.003-.111 1.003.51 0 .622.675 1.806 1.5 2.631.825.825 1.5 2.445 1.5 3.6 0 1.155.74 2.917 1.643 3.915 1.546 1.709 1.384 2.051-2.75 5.788-2.416 2.185-4.73 3.99-5.143 4.013-.412.023-.753 1.054-.756 2.291-.003 1.238-.481 3.964-1.063 6.059-.966 3.478-1.327 3.782-4.167 3.5-3.98-.395-4.554-2.128-1.211-3.65 2.948-1.344 2.812-3.507-.25-3.961-1.394-.207-3.35 1.186-6.172 4.39-2.272 2.582-4.131 5.236-4.131 5.898 0 2.166 3.363 4.326 5.5 3.533 1.1-.408 2.563-.531 3.25-.273 1.44.54 1.71 3.254.323 3.254-1.155 0-4.073 5.721-4.073 7.987 0 2.654-1.04 3.033-3.646 1.326-3.107-2.036-3.783-1.273-2.532 2.862 3.317 10.974 2.969 14.833-1.195 13.235-1.893-.726-2.08-2.696-.53-5.592.852-1.59.761-2.388-.402-3.551-1.333-1.334-1.633-1.252-2.695.732-.657 1.228-1.394 4.993-1.638 8.367-.507 7-.925 8.634-2.208 8.634-.5 0-1.371-.562-1.936-1.25zm15.351-30.862c.754-1.22-1.492-3.054-2.771-2.263-.439.271-.798 1.142-.798 1.934 0 1.697 2.577 1.935 3.57.33zm4.256-22.138c.843-3.108-.028-6.758-1.61-6.744-.393 0-1.46 1.315-2.37 2.915-1.462 2.57-1.484 3.149-.193 4.993 2.043 2.916 3.15 2.607 4.173-1.164zm-87.374 50.667a77.838 77.838 0 00-1.532-4.214c-1.447-3.618-1.084-6.016 1.013-6.681 1.062-.338 2.302-1.725 2.755-3.083.78-2.339.943-2.386 3.068-.898 1.455 1.019 2.245 2.6 2.245 4.491 0 2.71-.18 2.85-2.536 1.954-1.941-.738-2.665-.626-3.088.477-.747 1.945.331 3.475 3.221 4.574 3.053 1.16 3.116 2.963.103 2.963-1.265 0-2.825.525-3.467 1.167-.89.89-1.313.712-1.782-.75zm128.216-2.084c-1.31-1.309-.68-5.333.833-5.333 1 0 1.5 1 1.5 3 0 2.867-.9 3.767-2.333 2.333zM441 874.2c0-1.855 2.094-3.7 4.2-3.7 2.056 0 2.376 2.024.6 3.8-1.6 1.6-4.8 1.533-4.8-.1zm99.4-2.1c-.366-.954-.17-2.23.434-2.834.8-.8 1.282-.627 1.766.634.366.954.17 2.23-.434 2.834-.8.8-1.282.627-1.766-.634zm-9.733-.267c-.989-.988-.808-5.128.252-5.783 1.32-.815 4.081 2.245 4.081 4.521 0 1.885-2.874 2.722-4.333 1.262zM610 866.97c0-1.514 2.637-3.166 3.567-2.236.264.265.196 1.22-.15 2.124-.796 2.073-3.417 2.159-3.417.112zm-15.554-2.556c-1.03-1.668 1.287-3.58 2.667-2.2 1.154 1.154.432 3.287-1.113 3.287-.485 0-1.184-.49-1.554-1.087zm-66.78-.58c-2.086-2.086.758-9.333 3.663-9.333 1.08 0 .772 4.684-.49 7.453-1.182 2.595-1.983 3.07-3.172 1.88zm257.379-.78c-.845-1.017-.468-1.43 1.683-1.844 3.365-.646 3.379-.628 1.172 1.474-1.44 1.372-1.967 1.44-2.855.37zm-426.378-.22c-1.268-1.267-.66-2.333 1.333-2.333 1.111 0 2 .667 2 1.5 0 1.522-2.115 2.051-3.333.833zm191.583-.995c-1.758-.71-1.562-3.338.25-3.338.833 0 1.5.889 1.5 2 0 1.1-.113 1.964-.25 1.921a41.72 41.72 0 01-1.5-.583zm240.866-4.888c-.064-1.127-.564-2.592-1.112-3.254-.548-.661-.28-.58.596.182s1.376 2.226 1.112 3.254c-.433 1.684-.491 1.666-.596-.182zm-335.794-.7c-1.652-2.593-4.996-15.833-4.134-16.366 1.517-.938 3.812 1.717 3.812 4.41 0 1.402.694 3.316 1.543 4.253.848.938 1.807 3.336 2.13 5.329.468 2.878.265 3.624-.983 3.624-.865 0-1.93-.563-2.368-1.25zm98.514-2.005c-4.602-3.878-7.41-11.654-4.792-13.272.574-.355 1.772-.044 2.661.69.89.736 2.552 1.337 3.694 1.337 1.759 0 2.246.95 3.195 6.227 1.456 8.102.322 9.298-4.758 5.018zm-398.66-1.298c.453-2.172 2.228-2.305 2.634-.197.21 1.095-.28 1.75-1.31 1.75-.96 0-1.512-.647-1.323-1.553zM211 851.941c0-1.451.433-2.292 1-1.941.55.34 1 1.492 1 2.559 0 1.068-.45 1.941-1 1.941s-1-1.152-1-2.559zm287.543 1.628c-.683-1.105.894-2.299 1.818-1.375.95.95.773 2.306-.302 2.306-.518 0-1.2-.419-1.516-.93zM567 852.065c0-.79.5-2.702 1.11-4.25.612-1.548 1.174-6.084 1.25-10.079.13-6.783.338-7.425 3.14-9.711 5.306-4.33 7.311-1.49 2.409 3.412-2.818 2.819-3.05 3.46-2.043 5.668 1.402 3.077 1.47 7.07.134 7.895-.55.34-1.014 1.604-1.032 2.809-.036 2.53-2.163 5.691-3.828 5.691-.627 0-1.14-.646-1.14-1.435zm-351.541-1.632c-.363-.586-.42-1.306-.126-1.6.717-.716 2.667.546 2.667 1.726 0 1.278-1.726 1.193-2.541-.126zm166.097-.843c-.91-1.471.375-3.715 2.902-5.067 3.206-1.717 4.901-.574 3.395 2.288-1.812 3.442-5.014 4.855-6.297 2.78zm-13.01-1.017c-.351-.567-.186-1.878.368-2.912.553-1.034.74-3.518.415-5.52-.475-2.926-.274-3.641 1.021-3.641 2.123 0 2.93 3.554 1.911 8.427-.82 3.927-2.515 5.59-3.716 3.647zm-76.19-1.586c-.681-1.777 1.291-4.487 3.266-4.487 1.696 0 1.813 3.165.178 4.8-1.614 1.613-2.743 1.51-3.443-.313zm59.187-2.418c-.74-1.196 1.141-2.382 2.473-1.559 1.119.691.384 2.49-1.016 2.49-.485 0-1.14-.419-1.457-.93zm232.152-.829c-2.493-.563-1.589-2.543 1.69-3.702 2.87-1.014 5.629 0 6.418 2.37.277.83-.389 1.16-1.94.96-1.3-.169-2.813-.062-3.363.237-.55.299-1.812.36-2.805.135zM284 842.5c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm213.123-2.872c-2.226-1.712-2.297-2.07-1.12-5.634.817-2.48 1.033-6.192.62-10.65-.627-6.74-.158-7.98 2.144-5.677.89.89 1.32.77 1.807-.5.874-2.277 4.426-2.17 4.426.133 0 .99-.372 2.228-.826 2.75-2.327 2.676-4.915 17.874-3.222 18.92 1.449.896 1.317 2.535-.202 2.508-.688-.012-2.32-.845-3.627-1.85zm-143.965-2.994c-1.542-5.146-1.464-6.134.482-6.134 2.368 0 4.291 3 4.328 6.75.025 2.502-.392 3.25-1.81 3.25-1.271 0-2.2-1.197-3-3.866zm242.228.465c.567-2.259.337-2.599-1.752-2.599-2.656 0-6.171-4.322-5.024-6.177.38-.617.737-2.286.791-3.71.151-3.955 2.922-3.755 4.881.353 2.076 4.352 4.553 4.607 5.365.55.328-1.64.945-2.768 1.37-2.505.828.511-.236 6.417-1.535 8.518-.43.696-.827 2.656-.882 4.355-.07 2.182-.653 3.195-1.983 3.451-1.577.304-1.777-.06-1.231-2.236zM282.2 836.3c-.66-.66-1.2-2.433-1.2-3.941s-.503-3.052-1.118-3.432c-.714-.441-.894-2.322-.499-5.205.408-2.976.193-5.029-.632-6.022-1.086-1.309-1.556-4.725-1.747-12.7-.156-6.503 1.91-15.779 4.012-18.017 1.244-1.324 2.762-3.393 3.373-4.597.611-1.205 2.011-2.684 3.111-3.288 2.7-1.482 3.58-2.821 2.962-4.5-.284-.772-.02-2.91.588-4.75.961-2.912 1.542-3.348 4.458-3.348 2.716 0 3.414.428 3.672 2.25.206 1.446 1.124 2.364 2.57 2.57 2.51.356 2.77 1.34 1.15 4.366-1.253 2.342-.16 1.896 3.808-1.554 1.852-1.61 2.292-3.013 2.292-7.312 0-4.062.355-5.32 1.5-5.32 3.26 0 .798 18.635-3.109 23.534-2.293 2.875-2.388 2.899-5.159 1.262-3.817-2.255-5.447-1.027-5.051 3.806.257 3.135.75 3.96 2.521 4.211 1.38.197 2.683-.456 3.49-1.75.71-1.135 1.856-2.063 2.549-2.063 1.766 0 1.576 2.665-.241 3.362-.825.316-1.5 1.264-1.5 2.107 0 .842-.627 1.531-1.393 1.531-2.27 0-2.579 2.58-.52 4.343 2.31 1.977 2.466 4.532.373 6.063-.937.685-1.677 3.12-1.887 6.215-.39 5.733-1.344 9.379-2.455 9.379-1.525 0-4.063-7.024-3.52-9.741.404-2.02-.717-5.395-4.158-12.513-2.592-5.36-5.092-9.746-5.557-9.746-1.972 0-2.109 5.204-.206 7.83 4.174 5.762 6.15 14.251 4.179 17.952-1.068 2.005-1.09 2.634-.106 2.965 1.826.613 1.537 1.908-.939 4.214l-2.188 2.039h2.121c2.896 0 3.6 2.934 1.759 7.339-1.61 3.852-4.827 4.937-7.303 2.461zm4.669-22.142c1.224-1.474.54-2.658-1.536-2.658-.733 0-1.333.9-1.333 2 0 2.307 1.26 2.596 2.869.658zm8.677-18.732c.365-.59-.284-2.082-1.441-3.315-1.158-1.232-2.105-2.725-2.105-3.318 0-.594-.675-1.338-1.5-1.655-1.68-.645-2.119 1.862-.5 2.862.55.34 1 1.401 1 2.359 0 3.09 3.198 5.248 4.546 3.067zm352.177 41.463c-1.397-1.397-.702-4.33 1.277-5.389 1.664-.89 2-.76 2 .774 0 2.321-2.314 5.58-3.277 4.615zm-351.97-5.659c-.532-4.954.47-6.62 2.809-4.679 1.568 1.302 3.759 5.442 3.88 7.335.032.487-1.358 1.04-3.089 1.23-3.03.332-3.164.187-3.6-3.886zm286.67 2.93c-.75-1.956.244-3.66 2.136-3.66 1.88 0 1.851 2.415-.047 3.99-1.203.998-1.604.935-2.089-.33zm-147.923-.425c-.55-.404-1.51-1.635-2.135-2.735-.77-1.356-1.977-1.907-3.75-1.712-2.724.3-3.347-1.082-1.678-3.72.775-1.226 1.528-1.237 5.234-.079 2.381.744 5.342 1.244 6.579 1.11 2.856-.308 2.926 1.772.177 5.266-2.191 2.787-2.819 3.051-4.427 1.87zm-178.75-.924c-2.152-.563-2.163-1.173-.135-7.373.888-2.716 2.169-4.938 2.845-4.938 1.617 0 4.541 3.274 4.536 5.079-.005 1.822-3.724 7.958-4.731 7.805-.42-.064-1.552-.322-2.515-.573zm100.06-2.702c-1.255-1.727-1.4-2.619-.564-3.455 1.447-1.447 4.754 1.336 4.754 4.001 0 2.54-2.153 2.26-4.19-.546zm-202.8-.097c-1.003-1.208-.92-1.61.445-2.132 1.97-.757 4.07.96 3.099 2.533-.923 1.493-2.08 1.362-3.544-.4zm87.74-.904c-3.47-2.634-1.366-5.536 2.46-3.392 1.26.706 2.413 1.332 2.564 1.39.15.06-.01.847-.357 1.75-.756 1.97-2.295 2.052-4.667.252zM274 829c0-.862.902-1.5 2.122-1.5 1.774 0 1.918.247.878 1.5-.685.825-1.64 1.5-2.122 1.5-.483 0-.878-.675-.878-1.5zm-5.338-4.98c-.858-2.515-2.482-5.747-3.61-7.181-1.172-1.49-2.052-4.094-2.052-6.07 0-1.903-.808-4.655-1.797-6.115-1.812-2.677-4.975-11.594-7.26-20.47-1.493-5.8-.566-7.122 5.646-8.047 3.499-.521 4.426-.25 6.424 1.877 1.285 1.367 3.095 2.486 4.022 2.486 1.285 0 1.843 1.251 2.342 5.25.634 5.084.544 5.348-2.861 8.356-2.811 2.483-3.516 3.837-3.516 6.754 0 3.5.13 3.637 3.25 3.394 3.586-.28 3.285-1.334 2.92 10.246-.078 2.475-.035 6.484.094 8.908.32 5.975-1.66 6.311-3.602.612zM265 790c0-.825-.654-1.5-1.453-1.5-.8 0-2.204-1.582-3.122-3.516-2.45-5.165-3.596-5.312-3.237-.415.312 4.265.95 4.843 7.562 6.855.138.042.25-.599.25-1.424zm97.18 35.26c.41-2.876 3.82-3.715 3.82-.94 0 1.081-.712 2.24-1.582 2.573-2.4.92-2.583.787-2.238-1.633zm84.993.58c.421-2.188 3.327-2.497 3.327-.354 0 .818-.828 1.646-1.84 1.841-1.337.257-1.744-.15-1.487-1.486zm-198.138-1.274c-.57-1.064-1.035-2.802-1.035-3.863 0-1.06-1.368-3.65-3.04-5.753-2.8-3.525-2.9-3.901-1.25-4.785 2.72-1.459 2.734-1.516.87-3.576-1.364-1.508-1.507-2.358-.66-3.94.594-1.11 1.08-3.397 1.08-5.083 0-2.059.493-3.066 1.5-3.066 2.023 0 1.887-1.238-.465-4.228-1.698-2.16-1.804-2.923-.78-5.635.65-1.725 1.48-3.137 1.842-3.137 1.718 0 3.23 3.581 3.91 9.26.412 3.432 1.346 7.686 2.076 9.454.95 2.3 1.05 4.007.349 6-1.332 3.787-2.896 3.51-3.098-.547-.198-3.954-.946-4.955-2.524-3.378-.874.875-.87 1.783.017 3.73.645 1.417 1.173 3.393 1.173 4.393s.9 2.962 2 4.36c2.476 3.148 2.867 11.728.535 11.728-.805 0-1.93-.87-2.5-1.934zM540 825.5c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm-146.572-2.328c-.28-.73-.073-2.475.46-3.878.714-1.878.59-3.094-.47-4.607-1.534-2.191-.435-3.791 1.97-2.868.712.273 1.887.13 2.612-.32 1.085-.67 1.09-1.368.025-3.939-1.593-3.846-.709-4.989 1.98-2.556 1.96 1.774 2.086 1.759 4.527-.534 1.382-1.298 2.86-3.704 3.286-5.347.973-3.756 2.7-4.394 4.217-1.557.865 1.616.883 2.818.068 4.607-.607 1.332-1.103 3.27-1.103 4.307 0 1.085-.955 2.176-2.25 2.57-3.435 1.048-5.75 3.505-5.75 6.105 0 1.361-.597 2.345-1.422 2.345-.783 0-1.943 1.575-2.578 3.5-1.19 3.607-4.523 4.907-5.572 2.172zm177.978-1.19c-.348-1.386-.398-3.743-.112-5.24.286-1.496.057-3.586-.51-4.645-.72-1.346-.663-3.558.189-7.365.882-3.943.916-5.743.122-6.537-.602-.602-1.095-1.873-1.095-2.824 0-.95-.757-2.485-1.682-3.41-1.577-1.577-1.767-1.567-3.027.156-1.066 1.457-1.702 1.607-3.068.722-1.275-.827-1.649-2.224-1.438-5.38.416-6.22 1.668-7.968 2.99-4.177.953 2.737 4.615 5.162 5.881 3.895.624-.624-1.135-4.013-3.105-5.983-1.734-1.734-.993-8.694.925-8.694 1.754 0 4.064 2.974 5.403 6.957.638 1.901 2.118 4.476 3.288 5.72 1.748 1.862 1.903 2.534.87 3.778-1.544 1.861-2.309 22.545-.832 22.545.54 0 1.223-.922 1.518-2.048.32-1.223 1.19-1.913 2.156-1.712 1.214.253 1.56 1.318 1.379 4.241-.295 4.75-1.581 6.326-3.716 4.554-1.778-1.475-2.115-.01-.393 1.714.865.865.735 1.779-.523 3.7-2.13 3.25-4.409 3.265-5.22.033zm-6.625-.171c-.917-1.014-2.165-4.086-2.774-6.827-1.295-5.838-4.949-16.463-6.25-18.176-.498-.656-2.335-1.33-4.081-1.5-1.94-.188-3.228-.892-3.31-1.808-.075-.825-.187-2.288-.25-3.25-.064-.963-.806-1.75-1.65-1.75-.843 0-2.441-1.538-3.55-3.418-1.11-1.88-3.007-4.081-4.216-4.892-1.21-.81-3.279-3.66-4.597-6.332-1.318-2.672-4.431-8.322-6.917-12.556-4.312-7.342-5.272-8.196-11.436-10.177-2.653-.852-2.173-3.625.628-3.625 3.308 0 4.795-2.198 5.135-7.588.16-2.538.784-5.11 1.389-5.714.604-.604 1.098-1.847 1.098-2.763 0-.916.933-2.851 2.073-4.3 2.376-3.02 5.345-3.598 4.548-.885-.283.962-.803 3.55-1.157 5.75-.788 4.907-3.742 11.656-5.878 13.429-2.29 1.9-1.955 3.582.98 4.92 1.718.782 3.541 3.317 5.51 7.66 2.745 6.051 4.924 8.315 4.924 5.113 0-.757.627-1.898 1.394-2.534 2.455-2.038 4.721 1.338 3.986 5.936-.905 5.658.267 10.467 2.887 11.844 6.312 3.32 9.243 6.406 11.289 11.89 1.768 4.74 2.608 5.787 5.168 6.45 2.447.634 3.16 1.44 3.572 4.042.283 1.788 1.261 7.214 2.173 12.06 1.863 9.899 1.728 11.67-.688 9zM157.6 819.69c-2.16-4.178-.48-5.875 2.211-2.234 2.554 3.454 2.78 5.043.716 5.043-.811 0-2.128-1.264-2.927-2.81zm441.499-2.34c-1.395-4.002-1.415-3.905.652-3.143 2.171.802 3.215 2.267 3.235 4.542.025 2.937-2.72 1.949-3.887-1.4zM134.2 817.3c-1.394-1.394-1.63-6.8-.298-6.8.837 0 3.098 5.219 3.098 7.15 0 1.222-1.403 1.047-2.8-.35zm223.994-4.385c-2.617-2.956-2.988-3.931-2.116-5.56 1.622-3.032 4.184-1.798 6.55 3.157 3.352 7.019.852 8.373-4.434 2.403zm-41.527 1.918c-1.244-1.243-.675-4.333.798-4.333 1.28 0 3.535 2.829 3.535 4.434 0 .792-3.523.71-4.333-.1zm199.034.035c-1.571-1.571-.572-3.368 1.872-3.368 1.906 0 2.487.451 2.239 1.739-.35 1.82-2.907 2.833-4.11 1.63zM410 812c0-2.964 1.075-3.18 3.347-.669 1.832 2.024 1.285 3.169-1.514 3.169-1.289 0-1.833-.742-1.833-2.5zm193.427 1.69c-1.592-1.103-.95-8.955.9-11 .92-1.016 1.673-2.584 1.673-3.484 0-.9.853-2.092 1.895-2.65 1.042-.557 2.369-2.373 2.948-4.035.93-2.667.832-3.021-.836-3.021-3.479 0-3.27-1.925 1.331-12.218 1.916-4.287 2.059-6.172.665-8.777-.795-1.484-.489-2.264 1.5-3.828 1.373-1.08 2.497-2.511 2.497-3.18 0-.825.88-.993 2.748-.524 1.511.38 2.783.766 2.826.858.043.093 1.094 1.857 2.334 3.919 2.452 4.078 1.116 5.236-1.836 1.59-2.27-2.803-4.072-1.627-4.072 2.66 0 1.86-.45 3.66-1 4-.55.34-1 3.903-1 7.918 0 6.196-.454 8.151-3 12.922-1.65 3.092-3 6.459-3 7.481 0 2.783-5.424 12.164-6.573 11.369zm-9.831-1.462c-1.597-.548-4.473-2.062-6.39-3.363-1.917-1.3-3.872-2.365-4.346-2.365-.952 0-1.192-4.334-.29-5.237.729-.728 13.055 8.277 13.867 10.13.83 1.897.517 1.99-2.841.835zm-61.635-1.478c-.02-.963-1.483-2.657-3.25-3.766-3.583-2.249-4.616-5.722-2.37-7.968.814-.814 1.69-2.05 1.945-2.748.367-1.002.737-1.011 1.765-.042 1.064 1.002.978 1.584-.469 3.183-1.701 1.88-1.686 2.007.407 3.273 2.398 1.45 6.292 8.203 5.301 9.194-1.26 1.26-3.291.573-3.329-1.127zm301.539.75c.34-.55.816-1 1.059-1s.441.45.441 1-.477 1-1.059 1-.78-.45-.441-1zm-341.5-.553c0-1.27 5.6-7.447 6.75-7.447.688 0 1.25-.648 1.25-1.441 0-1.743 1.64-2.9 2.956-2.086 1.331.823.133 3.527-1.563 3.527-.766 0-1.393.819-1.393 1.82 0 2.096-4.3 6.18-6.508 6.18-.82 0-1.492-.249-1.492-.553zm336.441-2.002c-1.864-1.494-1.852-1.512.309-.465 1.237.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zM156 808.459c0-.573-1.783-4.679-3.962-9.124-3.827-7.809-3.912-8.2-2.507-11.564 1.627-3.894 1.265-6.271-2.14-14.055-2.049-4.685-2.196-5.903-1.299-10.756.832-4.501.736-5.867-.54-7.69-3.031-4.327-1.104-6.485 2.71-3.033 1.822 1.649 1.983 1.648 3.197-.011 1.14-1.56 1.414-1.583 2.55-.216 1.507 1.816.708 12.37-1.164 15.367-1.167 1.868-.021 7.455 3.359 16.38.574 1.515.798 3.99.497 5.5-.3 1.508.078 3.868.841 5.243.763 1.375 1.403 3.712 1.423 5.193.02 1.481.98 4.294 2.134 6.25 1.995 3.382 1.544 4.8-.786 2.47-.783-.783-1.275-.783-1.76 0-.854 1.384-2.553 1.414-2.553.046zm210.925-1.034c-1.435-1.435-1.965-2.937-1.638-4.647.36-1.878 0-2.652-1.402-3.018-1.923-.503-2.703-4.26-.885-4.26 1.543 0 1.182-3.604-.5-5-1.729-1.435-2.005-5.57-.437-6.539 1.752-1.083 4.623 2.346 5.959 7.118.69 2.463 1.004 4.728.7 5.033-.306.305.532 2.72 1.861 5.367 2.914 5.8 2.907 5.688.44 7.009-1.58.845-2.404.631-4.098-1.063zM389 805.427c0-2.563 3.31-2.272 3.812.334.23 1.2-.308 1.739-1.739 1.739-1.43 0-2.073-.642-2.073-2.073zm441 1.24c0-.459.655-.834 1.456-.834.8 0 1.224.375.941.834-.283.458-.938.833-1.456.833s-.941-.375-.941-.833zm-512.465-4.128c-1.476-1.63-1.653-2.939-1.054-7.75 1.136-9.113 3.27-11.432 6.864-7.46 2.108 2.33 2.092 4.03-.06 6.408-1.16 1.282-1.652 3.329-1.521 6.329.215 4.948-1.226 5.79-4.229 2.473zm9.178-.289c-.25-.688.13-2.687.842-4.443.842-2.077 1.057-4.875.613-8-.61-4.297-.974-4.84-3.425-5.123-3.614-.417-3.49-2.028.257-3.334 1.915-.668 3-1.733 3-2.948 0-2.514-2.484-2.418-5.1.198-2.801 2.801-4.006 1.303-2.897-3.6.976-4.316.532-7.381-1.712-11.834-.786-1.559-1.867-5.609-2.403-9-.535-3.391-1.846-7.951-2.913-10.134-1.164-2.38-1.576-4.331-1.03-4.877.515-.515.545-1.866.07-3.115-1.215-3.196.233-4.945 3.429-4.144 3.093.777 8.045-2.21 9.082-5.48.355-1.116 1.732-2.444 3.06-2.949 1.766-.671 2.414-1.676 2.414-3.742 0-1.554.412-3.252.915-3.775.504-.522 1.066-2.07 1.25-3.44.522-3.881 3.117-3.485 8.382 1.282 4.662 4.221 4.843 4.588 4.897 9.96.06 6.043-.517 7.318-2.9 6.403-1.112-.427-1.544-2.018-1.544-5.69 0-5.6-1.305-8.965-3.476-8.965-2.149 0-2.997 2.038-3.011 7.236-.014 4.954-1.608 6.546-2.575 2.573-.461-1.895-.683-1.592-1.24 1.691-1.358 8.028-1.013 9.5 2.225 9.5 3.086 0 8.324 3.724 10.22 7.267.604 1.128 1.266 4.788 1.47 8.133.282 4.578.86 6.455 2.342 7.59 1.949 1.495 1.95 1.534.029 4.01-1.067 1.375-1.95 3.26-1.962 4.191-.033 2.544-2.155 3.348-3.604 1.365-.704-.962-1.59-4.656-1.971-8.208-.677-6.322-.775-6.496-4.57-8.14-4.584-1.986-4.835-3.599-1.155-7.44 2.198-2.294 2.508-3.17 1.612-4.554-1.157-1.785-1.576-1.826-7.334-.72l-3.5.67 2.432-1.973c2.27-1.843 2.304-2.001.5-2.384-1.063-.226-3.38.176-5.15.891-1.77.716-4.132 1.302-5.25 1.302-2.858 0-2.525 1.285.718 2.776 4.437 2.04 6.54 4.024 5.937 5.598-.338.88-1.346 1.266-2.513.961-2.294-.6-3.765 1.232-2.376 2.959.534.663 1.301 2.781 1.704 4.706.995 4.752 1.435 5.297 3.137 3.885 2.039-1.692 5.427 1.45 3.568 3.308-1.65 1.65-1.514 4.884.366 8.653 1.977 3.962 3.24 3.99 4.595.103.699-2.005 1.624-2.937 2.698-2.719 1.945.396 1.873 2.119-.445 10.654-1.313 4.83-1.465 6.816-.626 8.16 1.354 2.167.458 8.501-1.423 10.062-.755.627-1.372 2.209-1.372 3.516 0 1.677-.565 2.378-1.917 2.378-1.054 0-2.12-.563-2.37-1.25zM326 732.5c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm13 69.5c0-.917.484-1.505 1.075-1.308.591.197 1.075.785 1.075 1.308 0 .522-.484 1.111-1.075 1.308-.591.197-1.075-.391-1.075-1.308zm205 .95c0-1.686 3.233-6.424 4.043-5.924 1.334.825 1.196 3.836-.243 5.274-1.216 1.216-3.8 1.658-3.8.65zm-78.114-.617c-.256-.75-.964-5.497-1.168-7.833-.168-1.93.308-2.575 2.087-2.827 2.187-.31 2.29-.058 2 4.922-.179 3.074-.823 5.418-1.555 5.66-.688.226-1.301.262-1.364.079zm151.446-2.41c-.333-.868.116-2.3.997-3.18 1.47-1.47 1.678-1.402 2.52.827.504 1.336.717 2.767.475 3.18-.785 1.332-3.369.796-3.992-.828zm-225.75-.29c-.294-.476.29-1.612 1.298-2.525 1.187-1.074 1.665-2.535 1.357-4.147-.367-1.924-.13-2.357 1.045-1.906 2.09.802 3.288 7.468 1.54 8.576-1.73 1.097-4.562 1.098-5.24 0zm193.057.173c-.351-.352-.639-1.62-.639-2.818s-.9-2.993-2-3.988c-1.1-.996-2.014-2.528-2.032-3.405-.017-.877-.678-2.449-1.468-3.492-1.408-1.86-1.193-3.603.445-3.603.455 0 1.574 1.575 2.488 3.5 1.876 3.952 3.968 4.488 5.603 1.433.86-1.608.752-2.607-.488-4.5-.877-1.338-1.921-2.433-2.322-2.433-.4 0-2.727-1.828-5.172-4.063-4.055-3.707-4.356-4.3-3.426-6.761.708-1.877.67-4.245-.125-7.776-.672-2.982-.862-7.517-.46-10.989.738-6.384.628-7.843-1.72-22.815-1.847-11.77-3.438-15.97-6.916-18.249-2.35-1.54-2.522-2.095-1.907-6.194.454-3.031 1.464-5.123 3.087-6.4 2.024-1.592 2.413-2.778 2.413-7.357 0-3.93-.42-5.62-1.5-6.034-.825-.317-1.5-.978-1.5-1.469 0-1.394 2.99-1.048 3.082.357.044.688.72-.212 1.502-2 1.484-3.392 3.807-4.278 4.753-1.813.304.79-.168 3.27-1.048 5.51-1.276 3.246-1.366 4.589-.445 6.61 1.666 3.657 1.422 9.184-.553 12.528-1.478 2.502-1.543 3.47-.476 7.154 3.3 11.4 4.123 14.832 4.762 19.841.38 2.981 1.121 6.254 1.647 7.272.822 1.594 1.287 1.14 3.32-3.25 2.205-4.76 2.607-5.102 5.98-5.102 3.159 0 3.575.279 3.296 2.209-.199 1.37-1.269 2.457-2.82 2.862-2.328.609-2.362.703-.5 1.373 7.369 2.649 8.452 3.957 6.902 8.341-1.249 3.533-3.15 3.86-4.552.785-.649-1.423-2.457-3.225-4.018-4.004-2.473-1.234-3.032-1.223-4.335.08-1.834 1.834-1.838 1.571.09 5.615.873 1.83 2.898 3.908 4.5 4.617 3.353 1.484 3.84 4.067.913 4.832-1.1.288-2 .9-2 1.36 0 1.692 2.308 5.834 3.507 6.294 1.918.736 5.768-5.13 5.104-7.778-.414-1.65.233-3.02 2.412-5.108 1.815-1.74 2.977-3.872 2.977-5.465 0-1.437.473-3.086 1.052-3.665.735-.735.695-2.468-.135-5.764-1.26-5.006-.84-6.602 3.403-12.888 1.736-2.57 1.76-2.95.302-4.561-1.634-1.806-1.411-3.626 1.288-10.494.96-2.442 1.35-2.67 2.683-1.564 1.285 1.067 1.72 1.042 2.468-.141 1.304-2.062 1.16-3.035-.771-5.168-1.262-1.395-1.397-2.084-.516-2.628.657-.406 2.275-2.874 3.597-5.484 2.138-4.223 2.345-5.662 1.882-13.09-.508-8.13-.455-8.388 2.069-10.041 3.39-2.222 4.675-1.282 3.993 2.92-.452 2.787-.064 3.897 2.13 6.091 2.615 2.615 2.651 2.815 1.422 7.824-.693 2.827-1.847 6.028-2.564 7.113-1.609 2.435-1.68 5.75-.158 7.272.86.86.486 1.31-1.5 1.808-1.455.365-2.645 1.256-2.645 1.979 0 .723-1.125 2.652-2.5 4.286-3.023 3.592-3.134 5.298-.5 7.682 1.1.996 2 3.02 2 4.5s-.9 3.505-2 4.5c-1.1.996-2 2.415-2 3.155 0 1.84-3.923 1.708-4.638-.155-.926-2.413-3.088-1.728-3.826 1.21-1.008 4.017 3.424 6.93 6.247 4.107 1.96-1.96 2.715.046 1.305 3.471-.727 1.767-2.087 5.414-3.022 8.105-.935 2.691-2.607 5.627-3.714 6.523-1.107.897-2.831 3.772-3.831 6.39s-2.2 4.996-2.67 5.286c-1.218.753-1.05 4.877.32 7.886 1.05 2.303.848 2.909-1.938 5.797-3.508 3.637-5.233 7.502-5.233 11.722 0 2.044-.861 3.48-3 5.003-1.65 1.175-3 2.754-3 3.51 0 1.614-1.444 2.713-2.36 1.796zM592 775.434c0-1.733-1.99-4.934-3.067-4.934-1.646 0-2.244 2.92-.922 4.513 1.426 1.718 3.989 1.989 3.989.421zm-6.006-9.184c-.013-3.123-2.218-8.75-3.428-8.75-1.41 0-2.306 3.955-1.754 7.75.236 1.626 1 2.25 2.758 2.25 1.336 0 2.427-.563 2.424-1.25zm27.818-44.489c-.502-2.606-3.812-2.897-3.812-.334 0 1.43.642 2.073 2.073 2.073s1.97-.539 1.739-1.739zM668 797.783c0-3.127 3.248-10.283 4.667-10.283 3.255 0 2.804 6.53-.692 10.025-2.43 2.43-3.975 2.53-3.975.258zm-294.655-3.826c-.326-.849-.33-1.804-.012-2.124 1.01-1.009 3.667.539 3.667 2.136 0 1.996-2.888 1.986-3.655-.012zm125.155.543c-.792-1.282.26-3 1.837-3 1.837 0 4.88-3.992 4.265-5.594-.296-.773-1.003-1.406-1.57-1.406-1.184 0-1.415-3.645-.276-4.349 1.602-.99 6.355.689 7.382 2.607.846 1.58.579 3.112-1.24 7.127-1.276 2.813-2.438 5.292-2.584 5.507-.146.216-.952-.176-1.79-.872-1.042-.865-1.524-.91-1.524-.142 0 1.39-3.655 1.49-4.5.122zm105.5-1.333c0-.927.777-1.66 1.75-1.652.999.01 1.32.336.75.762-.55.41-1.337 1.154-1.75 1.651-.412.498-.75.155-.75-.761zm-202.482-.639c-1.006-1.627.497-7.19 1.823-6.748 1.51.503 1.51 6.936 0 7.44-.636.212-1.457-.1-1.823-.692zm114.121-1.722c-.953-.953-.772-3.306.254-3.306 1.227 0 2.212 2.817 1.203 3.44-.45.278-1.105.218-1.457-.134zm-78.421-2.3c-2.853-1.752-3.139-2.286-2.18-4.076.893-1.67 1.378-1.83 2.566-.844 1.153.957 1.988.935 3.929-.103 3.13-1.675 3.478-1.27 2.6 3.018-.857 4.195-2.55 4.685-6.915 2.004zm15.995.807c-1.877-1.877-1.44-2.984 1.037-2.633 1.238.176 2.25.958 2.25 1.737 0 1.904-1.791 2.392-3.287.895zm391.294-1.801c-.35-.567.051-.735.941-.394 1.732.665 2.05 1.382.611 1.382-.518 0-1.216-.445-1.552-.989zM517 783.7c0-.99.392-2.228.872-2.75.479-.522 1.135-3.963 1.457-7.647l.586-6.696-5.199-4.48c-8.453-7.282-3.782-7.206 6.076.099 3.055 2.264 3.275 2.81 3.065 7.607-.124 2.842.097 5.868.492 6.725.442.96-.062 2.458-1.316 3.903-1.118 1.29-2.033 2.951-2.033 3.692 0 .74-.9 1.347-2 1.347-1.26 0-2-.667-2-1.8zm-150.046-7.088c-3.414-3.248-7.248-6.38-8.519-6.96-1.271-.579-2.834-2.03-3.473-3.223-.81-1.512-.825-1.962-.053-1.485 1.97 1.217 4.844-.433 6.12-3.515 1.449-3.497 3.084-3.359 4.403.372.737 2.084.528 3.086-.991 4.764-1.921 2.123-1.917 2.133 3.567 6.999 3.02 2.68 5.83 4.887 6.242 4.904 1.066.045.932 2.802-.17 3.482-.505.313-3.712-2.09-7.126-5.338zM468 781.5c0-.55.423-1 .941-1s1.22.45 1.559 1c.34.55-.084 1-.941 1s-1.559-.45-1.559-1zm-30.435-1.69c-1.245-3.245-.547-7.25 1.45-8.318 1.638-.877 2.119-.743 2.573.715.307.986.975 2.574 1.485 3.53 1.29 2.415 1.276 2.442-2.008 4.08-2.58 1.288-3.003 1.287-3.5-.01zm-374.6-.852c-1.041-1.255-1.037-1.768.024-2.75 1.027-.95 1.148-.932.572.086-.403.711-.19 1.949.475 2.75.665.8.984 1.456.709 1.456s-1.076-.694-1.78-1.543zm79.035-.423c0-1.12.648-2.035 1.441-2.035 2.391 0 2.75 1.827.587 2.985-1.729.925-2.028.785-2.028-.95zm354.687 1.215c-1.641-2.86 1.179-12.07 3.295-10.761 1.08.668 2.13 8.056 1.41 9.931-.617 1.61-3.923 2.192-4.705.83zm-253.972-1.868c-1.057-1.057.48-13.8 1.856-15.382.717-.825 2.938-2.375 4.937-3.445 3.105-1.663 3.765-1.736 4.547-.5.503.795.921 2.458.93 3.695.012 1.743-.554 2.25-2.51 2.25-3.026 0-4.93 3.95-4.044 8.393.317 1.591.07 3.504-.55 4.25-1.165 1.404-4.083 1.822-5.166.739zm108.952-.049c-1.248-1.247-.673-6.084.875-7.369 2.779-2.305 4.004.366 2.053 4.477-1.808 3.81-1.91 3.91-2.928 2.892zM410 777c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm-299.8-1.7c-1.708-1.708-1.488-3.139.692-4.5 2.35-1.468 3.108-.769 3.108 2.867 0 2.984-1.713 3.72-3.8 1.633zm163.8-.805c-.825-.559-3.154-.753-5.175-.43-4.694.748-7.825-.893-7.825-4.1 0-1.356.378-2.465.84-2.465.461 0 1.336-1.09 1.943-2.424.871-1.91.795-2.681-.358-3.639-1.606-1.332-1.182-6.597.87-10.788.964-1.969.847-2.572-.72-3.717-1.028-.753-2.257-1.129-2.73-.837-1.272.787-2.15-2.244-1.453-5.02.334-1.332 1.678-3.694 2.987-5.25 1.446-1.718 2.567-4.592 2.857-7.326.436-4.107 1.892-9.144 3.756-12.999.4-.825 1.352-1.5 2.117-1.5 1.099 0 1.317 1.628 1.038 7.75-.295 6.473-.099 7.75 1.19 7.75 2.145 0 3.057 1.82 1.72 3.432-.674.811-.864 2.926-.479 5.33.674 4.215-.785 6.43-2.865 4.35-1.808-1.807-4.713-1.326-4.713.781 0 2.411 2.54 3.412 4.907 1.933 3.103-1.938 5.36-.321 4.571 3.273-.619 2.82-.49 3.04 1.42 2.433 2.696-.855 2.74 1.095.102 4.468-1.358 1.736-1.962 4.084-1.978 7.683-.018 4.363.303 5.285 2.036 5.835 1.521.483 1.978 1.349 1.75 3.318-.335 2.9-3.163 3.951-5.808 2.16zm-1.64-17.27c1.607-1.174 1.514-1.442-1.196-3.445-1.616-1.195-3.214-1.897-3.551-1.56-1.099 1.1-.645 5.1.637 5.618 1.955.789 2.256.744 4.11-.612zm119.248 16.55c-1.189-1.19-.583-4.07.982-4.671 1.887-.724 3.41.042 3.41 1.714 0 1.442-3.53 3.818-4.392 2.956zm290.33-2.337c-2.361-2.361-2.07-4.516.576-4.273.99.091 2.436-.472 3.214-1.25 2.021-2.021 2.612-1.803 4.705 1.74 1.808 3.062 1.809 3.195.024 4.5-2.662 1.946-6.15 1.653-8.52-.718zm-222.601-4.255c-2.29-2.3-4.875-5.758-5.745-7.683-.87-1.925-2.476-4.963-3.568-6.752-1.092-1.788-3.366-7.34-5.054-12.338-2.362-6.993-2.805-9.404-1.923-10.467.887-1.069.672-1.985-.95-4.047-2.657-3.377-2.635-4.074.123-3.975 1.612.057 2.795-1.016 4.319-3.921 1.869-3.562 2.501-4 5.78-4 3.897 0 4.727 1.387 2.123 3.548-.857.711-2.246 2.904-3.086 4.872-2.068 4.841-1.095 17.455 1.637 21.23 1.055 1.457 2.24 3.932 2.631 5.5 1.445 5.778 5.304 13.131 7.875 15.003 2.153 1.57 2.518 2.43 1.964 4.637-.374 1.49-.969 2.68-1.321 2.643-.353-.037-2.515-1.95-4.805-4.25zm-90.233.403c-.777-.493-1.12-1.603-.772-2.508.524-1.365.944-1.422 2.645-.36 2.238 1.398 2.73 3.79.773 3.767-.688-.01-1.878-.413-2.646-.9zm50.896-.572c0-.744 7.397-7.456 8.25-7.487 1.815-.066.51 4.016-1.885 5.9-2.355 1.853-6.365 2.852-6.365 1.587zm131.38-.966c-.697-1.815.315-3.548 2.072-3.548 1.53 0 2.458 1.915 1.817 3.75-.597 1.713-3.206 1.577-3.889-.202zm-177.002-5.162c.136-6.386 1.958-8.262 3.665-3.773 1.66 4.364.85 8.83-1.665 9.19-1.962.28-2.113-.128-2-5.417zM110 764.622c0-.482.675-1.437 1.5-2.122 1.253-1.04 1.5-.896 1.5.878 0 1.22-.638 2.122-1.5 2.122-.825 0-1.5-.395-1.5-.878zm516.75-1.917c-2.818-1.71-3.524-3.608-1.75-4.705.55-.34 1-1.737 1-3.104 0-1.368 1.096-3.583 2.435-4.922 1.34-1.34 2.019-2.693 1.51-3.008-.537-.332-.3-2.075.564-4.142.82-1.962 1.491-4.197 1.491-4.966 0-.769 1.125-3.18 2.5-5.358 1.59-2.518 2.5-5.416 2.5-7.96 0-3.687-.332-4.174-4.25-6.238-3.61-1.901-3.92-2.29-2.052-2.583 1.21-.19 3.09.132 4.178.715 2.697 1.443 4.712.474 6.129-2.945 1.626-3.926.52-5.31-3.62-4.533-4.805.901-4.246-1.937 1.807-9.175 2.161-2.584 2.582-3.897 2.135-6.653-.455-2.803-.168-3.642 1.558-4.566 2.146-1.149 2.946-4.062 1.115-4.062-2.196 0-.817-3.043 2.052-4.527 3.536-1.829 5.139-5.16 3.753-7.801-1.613-3.075-.184-4.998 3.21-4.319 2.355.47 2.985.246 2.985-1.064 0-.913-.87-2.59-1.932-3.725-2.108-2.252-8.068-13.763-8.068-15.581 0-2.264 3.313-.396 5.05 2.846 1.994 3.723 4.878 7.171 5.997 7.171.405 0 1.019-1.125 1.364-2.5.66-2.635 3.589-3.513 3.589-1.077 0 .783 1.125 2.76 2.5 4.395 3.026 3.596 3.274 7.167.547 7.88-1.075.281-2.664 1.594-3.531 2.918-1.217 1.857-2.141 2.265-4.047 1.787-2.22-.557-2.469-.313-2.469 2.417 0 1.67-.604 3.641-1.342 4.38-2.287 2.286-3.658 5.539-3.658 8.677 0 1.655-.953 4.624-2.118 6.599-1.513 2.563-1.94 4.48-1.497 6.7.342 1.71.178 3.645-.364 4.299-.652.785-.59 3.079.184 6.765 1.062 5.065.972 5.977-.984 9.919-1.185 2.387-3.093 7.557-4.239 11.488-1.582 5.423-2.587 7.278-4.17 7.692-1.745.456-1.982 1.06-1.455 3.698.523 2.612.285 3.244-1.384 3.68-1.58.413-1.769.824-.876 1.9.626.755.884 2.162.573 3.128-.312.965-1.377 4.09-2.368 6.942l-1.802 5.187zm85.961.173c-1.064-1.064-.857-5.17.296-5.882.554-.343 1.245 0 1.536.756.67 1.745-.879 6.079-1.832 5.126zM330 758.56c0-3.338.959-4.32 2.99-3.065 1.122.693 1.166 1.37.225 3.434-1.57 3.447-3.215 3.258-3.215-.369zm340.521-1.309c.383-2.337 1.382-5.026 2.22-5.974 1.366-1.547 1.355-1.981-.11-4.215-2.114-3.228-2.066-4.488.149-3.908 3.516.92 7.264-1.5 9.238-5.961 1.05-2.374 2.814-5.135 3.92-6.135 1.6-1.449 1.93-2.76 1.616-6.438-.216-2.54-.84-5.782-1.385-7.202-1.08-2.808-.046-5.577 1.682-4.509 2.71 1.675 4.228 15.113 1.963 17.378-.652.652-1.92 3.562-2.82 6.467-.898 2.905-3.965 8.487-6.814 12.404s-5.18 7.552-5.18 8.078c0 1.096-3.281 4.265-4.417 4.265-.417 0-.445-1.913-.062-4.25zm-424.34-2c.21-1.477 1.006-2.25 2.319-2.25s2.11.773 2.32 2.25c.262 1.846-.155 2.25-2.32 2.25s-2.582-.404-2.32-2.25zm55.225 1.098c-.744-1.204 2.115-3.848 4.163-3.848 1.692 0 3.724 2.717 2.958 3.956-.872 1.41-6.232 1.33-7.12-.108zm169.17-.765c-1.385-1.529-1.51-2.338-.62-4 1.517-2.834 3.87-2.624 4.633.415.685 2.732-.02 5.502-1.403 5.502-.482 0-1.657-.863-2.61-1.917zm73.762.356c-.414-1.078-.02-2.198 1.045-2.977 1.216-.89 1.52-2 1.055-3.853-.946-3.77.148-6.198 2.074-4.6 1.614 1.34 2.078 7.991.558 7.991-.512 0-1.075.977-1.25 2.172-.404 2.745-2.607 3.547-3.482 1.267zm71.056-.856c-.828-2.157.323-4.844 1.857-4.333.687.23 1.249 1.467 1.249 2.75 0 2.74-2.227 3.876-3.106 1.583zm-254.867-1.2c-2.596-2.595-1.25-3.883 4.056-3.883 4.297 0 4.956-.276 5.228-2.189.19-1.334 1.14-2.31 2.433-2.5 1.32-.193 2.39-1.323 2.833-2.99.391-1.473 1.677-3.714 2.856-4.98 1.18-1.265 2.4-3.323 2.714-4.571.313-1.249.934-2.27 1.378-2.27 1.299 0 1.752 2.326.902 4.629-.513 1.391-.26 2.878.73 4.293 1.85 2.639.615 4.574-3.432 5.383-1.85.37-3.091 1.502-3.85 3.513-.792 2.098-2.016 3.164-4.178 3.639-1.683.37-3.595 1.318-4.25 2.107-1.59 1.915-5.418 1.822-7.42-.18zM557 754c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm-304-1.227c0-1.953 1.773-4.273 3.266-4.273.477 0 .724 1.234.55 2.741-.369 3.198-3.816 4.581-3.816 1.532zm284.555-3.79c-2.513-3.295-2.685-4.19-2.74-14.25-.058-11.03-1.524-17.233-4.071-17.233-.748 0-2.777 2.012-4.51 4.47-3.37 4.782-7.782 6.874-9.31 4.415-.602-.969.256-2.464 2.858-4.98 4.401-4.255 8.108-10.104 8.894-14.036.31-1.553 1.186-3.34 1.945-3.969.758-.63 1.379-1.977 1.379-2.994 0-1.017 1.013-4.224 2.25-7.127 1.954-4.584 2.184-6.479 1.75-14.386-.485-8.831-.614-9.234-4.25-13.253-3.11-3.44-3.75-4.88-3.75-8.452 0-4.255 2.175-8.847 3.542-7.48.388.39 1.331 3.412 2.095 6.718.764 3.307 2.733 8.003 4.376 10.438 1.643 2.434 2.987 5.733 2.987 7.331 0 1.598.451 3.356 1.003 3.908 1.155 1.155-.34 11.375-2.254 15.397-.654 1.375-1.262 4.75-1.352 7.5-.09 2.75-.216 5.55-.28 6.224-.064.674-1.467 1.923-3.117 2.776-3.618 1.87-3.84 3.796-.609 5.269 2.087.95 2.486 2.022 3.132 8.41.408 4.027.829 10.544.936 14.483.13 4.732.764 8.03 1.869 9.715 3.555 5.426 1.23 6.354-2.773 1.107zM283.55 750.25c-.963-3.104-1.533-11.75-.775-11.75 3.74 0 7.197 10.138 4.121 12.086-1.933 1.224-2.891 1.128-3.346-.336zm11.943-2.5c.399-1.512.68-4.523.625-6.69-.178-7.03 1.753-15.764 4.352-19.693 1.392-2.103 2.531-4.913 2.531-6.243 0-2.093-.438-2.399-3.25-2.271l-3.25.147-.074-6c-.09-7.325-1.58-12.78-5.692-20.848-2.766-5.425-3.103-6.978-2.859-13.142.153-3.844.761-7.572 1.352-8.284.773-.93.72-1.958-.189-3.654-.993-1.857-1.009-3.13-.073-5.966 1.399-4.239 2.835-4.512 6-1.143 1.277 1.36 3.261 2.368 4.425 2.25 1.976-.2 2.09.186 1.78 6.088-.181 3.466.115 6.841.658 7.5 1.76 2.138 3.621 12.999 3.647 21.291.016 5.182.498 8.664 1.34 9.681.723.874 1.565 4.006 1.87 6.961.488 4.73.181 6.033-2.565 10.9-1.716 3.04-3.12 6.533-3.12 7.763 0 1.229-.489 3.147-1.086 4.263-.886 1.657-.657 2.485 1.25 4.515 2.21 2.352 2.24 2.556.553 3.79-1.682 1.23-1.638 1.475.776 4.344 2.749 3.267 1.909 5.083-1.397 3.019-1.717-1.072-2.324-.874-4.493 1.466-3.182 3.434-4.025 3.422-3.111-.044zM305 706.441c0-3.627-1.644-3.816-3.215-.37-.94 2.066-.897 2.742.224 3.435 2.032 1.255 2.991.273 2.991-3.065zM299 688c0-2.541-2.278-3.478-3.53-1.452-.963 1.558.247 3.952 1.999 3.952.966 0 1.531-.922 1.531-2.5zm2-6.157c0-1.53-2.55-6.967-4.287-9.14-1.552-1.943-2.68.387-2.698 5.58-.012 3.533.378 4.428 2.235 5.118 2.756 1.024 4.75.37 4.75-1.558zM148.544 745.55c-1.39-1.537-1.662-2.913-1.174-5.963.662-4.137-.834-6.54-2.466-3.964-.48.758-.866.928-.857.378.01-.55.677-1.874 1.485-2.941.807-1.068 1.468-3.895 1.468-6.282 0-5.188 2.335-11.277 4.324-11.277 1.702 0 2.88 4.607 2.942 11.5.087 9.873-.17 11.242-2.22 11.777-1.742.456-1.827.844-.785 3.603 1.546 4.095-.12 6.038-2.717 3.17zm-4.899-.531c-.39-1.019-.253-2.31.306-2.869 1.572-1.572 2.476.078 1.384 2.526-.912 2.045-1.028 2.068-1.69.343zm362.555.282c-1.763-1.763-1.467-2.8.8-2.8 1.333 0 2 .667 2 2 0 2.267-1.037 2.563-2.8.8zm-264.976-12.888c-.213-9.994.015-12.912 1.01-12.912.707 0 1.88.953 2.608 2.118.974 1.56 1.616 1.824 2.44 1 3.51-3.51 11.1 2.403 10.52 8.195-.435 4.362-2.555 4.52-3.356.251-.525-2.796-1.14-3.564-2.857-3.564-1.204 0-2.722-.532-3.372-1.183-.651-.651-1.507-.86-1.902-.465-.395.395.497 1.846 1.983 3.224 1.486 1.378 2.702 3.416 2.702 4.53 0 1.114.48 2.922 1.067 4.018.586 1.096.788 3.258.449 4.804-.578 2.633-.945 2.813-5.817 2.853l-5.199.044-.276-12.912zM457 742c0-.825.675-1.5 1.5-1.5s1.5.675 1.5 1.5-.675 1.5-1.5 1.5-1.5-.675-1.5-1.5zm94.667-1.167c-1.225-1.224-.686-4.333.751-4.333.78 0 2.13-.273 3-.607 1.102-.423 1.582-.028 1.582 1.3 0 3.156-3.457 5.516-5.333 3.64zm104.686-5.856c-.428-1.115-.241-2.014.467-2.25.649-.217 1.18-1.031 1.18-1.81 0-.78.499-1.417 1.108-1.417.708 0 .863.996.43 2.75-.941 3.81-2.317 4.988-3.185 2.727zm-376.02-1.05c-.331-.865.361-2.875 1.541-4.47l2.143-2.9-2.471-1.619-2.472-1.62 2.05-2.773c1.492-2.017 2.138-4.65 2.37-9.659.175-3.787.36-7.276.412-7.753.052-.476.994-.63 2.094-.343 1.3.34 2 .03 2-.884 0-2.166 1.667-1.678 4.427 1.298l2.508 2.705-3.11 2.596c-2.736 2.284-2.968 2.86-1.932 4.795.807 1.507 2.111 2.2 4.142 2.2 1.99 0 2.965.501 2.965 1.525 0 1.83-4.56 3.873-7.892 3.536-1.983-.2-2.253.073-1.58 1.599.447 1.012 1.006 3.75 1.242 6.083.353 3.477.096 4.348-1.42 4.823-1.017.319-2.631.997-3.586 1.507-2.349 1.254-2.729 1.182-3.43-.645zM388 733.48c0-2.867 5.386-13.664 8.578-17.198 3.655-4.046 3.853-5.07 2.266-11.723-.624-2.615 2.615-2.033 4.9.88 1.99 2.54 2.103 3.195 1 5.816-.684 1.625-3.156 5.091-5.494 7.702-3.438 3.84-4.25 5.481-4.25 8.589 0 2.835-.582 4.248-2.223 5.397-2.542 1.781-4.777 2.032-4.777.537zm68.574-.647c-.753-1.963.777-3.852 2.339-2.887 1.576.974 1.335 4.554-.306 4.554-.766 0-1.68-.75-2.033-1.667zm41.015.122c-1.723-1.272-1.82-2.066-1-8.108 1.282-9.429 3.019-9.256 3.671.364.29 4.284.238 8.096-.116 8.472-.354.375-1.504.048-2.555-.728zm125.578.543c.565-1.695 5.626-4.539 6.507-3.657.415.415.276 1.52-.31 2.457-1.22 1.95-6.807 3.031-6.197 1.2zM138 726.5c0-1.111.667-2 1.5-2s1.5.889 1.5 2-.667 2-1.5 2-1.5-.889-1.5-2zm172 .622c0-.207.675-.937 1.5-1.622 1.229-1.02 1.5-.951 1.5.378 0 .892-.675 1.622-1.5 1.622s-1.5-.17-1.5-.378zm343.64-.316c-1.196-1.195-.646-3.306.86-3.306.825 0 1.5.648 1.5 1.441 0 1.67-1.427 2.798-2.36 1.865zm-103.69-1.866c-1.855-2.235-.064-6.846 2.82-7.26 2.633-.377 2.736.366.717 5.198-1.729 4.136-1.787 4.17-3.537 2.062zm79.05.56c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm33.2-1.2c-.66-.66-1.2-2.46-1.2-4 0-3.655 2.692-3.74 4.066-.128 1.625 4.276-.155 6.84-2.866 4.128zm5.8.021c0-.648.555-2.715 1.234-4.592 1.047-2.894 1-3.59-.312-4.571-.85-.637-1.858-1.988-2.239-3.003-.381-1.015-1.59-2.08-2.688-2.367-2.605-.68-2.573-3.97.047-4.801 2.182-.693 2.11-1.588-.676-8.393-1.242-3.035-1.208-3.611.317-5.297 1.668-1.842 1.748-1.822 3.098.755.762 1.455 1.122 3.698.799 4.985-.756 3.013.963 4.045 4.015 2.412 2.836-1.518 3.098-3.721.655-5.51-2.568-1.88-2.004-18.001.733-20.935 1.028-1.102 2.181-3.264 2.564-4.804.446-1.796 1.255-2.692 2.257-2.5 1.679.324 3.283 7.875 4.63 21.8.424 4.374 1.359 8.203 2.244 9.187 2.206 2.451.64 4.41-1.777 2.223-1.8-1.628-2.007-1.624-3.885.076-1.198 1.084-2.24 3.72-2.63 6.655-.683 5.155-1.356 5.805-3.425 3.312-.994-1.198-1.46-1.265-2.058-.296-.795 1.286 1.896 6.843 3.313 6.843 1.523 0 .758 4.228-1.284 7.096-2.08 2.921-4.932 3.919-4.932 1.725zm10.5-40.821c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm-363.002 39.996c-.378-.61-.414-2.193-.082-3.518.833-3.32 3.804-2.16 3.388 1.323-.329 2.75-2.197 3.99-3.307 2.195zm117.168-1.423c-.702-1.83 1.856-4.155 2.834-2.574.824 1.334-.084 4.001-1.362 4.001-.508 0-1.17-.642-1.472-1.427zm153.743-.95c-.323-.841.067-2.465.867-3.607 1.119-1.597 1.25-3.165.569-6.796-.487-2.596-.596-6.07-.241-7.72.745-3.465 4.047-8.5 5.575-8.5 1.218 0 .181 6.968-1.257 8.45-1.597 1.646-1.082 8.361.72 9.37 2.31 1.292 1.038 5.105-2.67 8.007-2.507 1.962-3.068 2.087-3.563.797zm-443.121-3.316c-1.105-2.879-.658-10.445 1.11-18.807 3.037-14.352 3.03-13.981.295-16.716-1.371-1.371-3.213-2.77-4.093-3.107-.88-.338-1.6-1.534-1.6-2.66 0-1.124-.521-2.878-1.158-3.898-1.321-2.116-.42-5.478 1.313-4.9.635.211 1.715 2.281 2.4 4.6 2.358 7.989 2.342 7.97 4.453 5.174 1.528-2.021 2.126-2.252 3.163-1.218 1.016 1.013 1.027 1.678.054 3.236-1.75 2.803-1.616 4.558.231 3.025 1.91-1.584 2.577-1.062 5.459 4.265l2.415 4.464-2.165 2.752c-1.19 1.514-2.165 3.444-2.165 4.29 0 .844-.73 2.342-1.621 3.327-1.97 2.177-1.151 4.866 1.483 4.866 2.398 0 3.46 2.531 2.115 5.043-.782 1.461-1.704 1.762-3.996 1.303-2.695-.539-3.123-.25-4.493 3.03-1.694 4.053-2.256 4.392-3.2 1.931zm112.86-1.194c-1.648-1.045-2.42-16.975-.914-18.853.576-.719 2-.989 3.38-.642 2.124.533 2.386.264 2.386-2.45 0-3.226 1.566-5.002 3.077-3.491 1.234 1.234 1.987 19.166.834 19.878-.509.315-1.195-.132-1.525-.992-.839-2.185-2.579-1.96-2.199.285.312 1.844-2.004 7.166-3.106 7.137-.32-.008-1.19-.401-1.933-.872zm5.456-12.842c-1.016-1.017-1.855.514-1.021 1.863.63 1.02.866 1.02 1.204.004.232-.695.15-1.535-.183-1.867zM320 713.417c0-2.437 2.337-2.093 2.823.416.192.987-.318 1.667-1.25 1.667-.927 0-1.573-.855-1.573-2.083zm90.614.518c-.768-2.001.044-3.435 1.945-3.435 1.833 0 1.869 2.4.058 3.903-1.071.889-1.523.783-2.003-.468zm207.832.478c-.37-.598-.17-1.588.441-2.2.817-.817 1.113-.528 1.113 1.087 0 2.415-.52 2.787-1.554 1.113zm-242.413-1.163c.045-1.669 3.506-5.75 4.877-5.75 1.47 0 1.389 4.301-.11 5.8-1.577 1.577-4.81 1.543-4.767-.05zm42.982.5c.038-1.845 1.923-3.488 3.367-2.934 2.111.81.95 3.684-1.489 3.684-1.041 0-1.886-.338-1.878-.75zM442 712c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm268.154.062c.19-.917.796-1.644 1.346-1.615 1.484.079 1.212 2.316-.345 2.835-.842.28-1.216-.177-1-1.22zm-657.818-3.13c-.33-.861-.122-2.046.464-2.632 1.555-1.555 4.2-.19 4.2 2.169 0 2.466-3.753 2.84-4.664.464zm319.105-.528c-.373-.603.05-1.824.94-2.714 1.492-1.491 1.619-1.405 1.619 1.096 0 2.761-1.332 3.604-2.56 1.618zm61.984-.239C432.303 705.242 434.307 695 436 695c1.198 0 1.443 1.208 1.22 5.995-.298 6.338-2.51 10.519-3.795 7.17zm23.575.77c0-.312.466-1.437 1.035-2.5 1.265-2.364 4.465-2.68 3.572-.353-.334.87-.607 1.995-.607 2.5 0 .505-.9.918-2 .918s-2-.255-2-.566zm258.463-4.185c.374-1.512 1.726-3.65 3.004-4.75s2.585-3.16 2.904-4.579c.32-1.422 1.708-3.091 3.093-3.723 2.283-1.04 2.57-.91 3.16 1.436.357 1.428.185 2.868-.388 3.223-.569.354-1.192 1.749-1.385 3.1-.215 1.508-1.897 3.524-4.351 5.217-5.267 3.633-6.922 3.654-6.037.076zm-194.856-.832c-1.043-2.717-.664-7.232.643-7.673 2.07-.697 4.968 4.98 3.727 7.299-1.263 2.358-3.534 2.553-4.37.374zM338 702.573c0-1.14.402-2.073.893-2.073.989 0 2.402-3.038 1.728-3.712-.234-.235-1.359.156-2.499.868-3.288 2.053-4.777-.194-2.518-3.8a394.81 394.81 0 001.95-3.13c.088-.15.804-.026 1.592.277 2.062.79 4.43 9.358 3.15 11.392-1.574 2.5-4.296 2.613-4.296.178zm69.509-.063c-2.267-2.505-2.234-6.249.093-10.57 3.21-5.959 6.663-3.713 4.02 2.613-.792 1.896-1.214 4.632-.937 6.08.652 3.409-.94 4.349-3.176 1.877zm44.876-.449c-.296-.773-.114-2.227.406-3.233.52-1.005 1.242-3.47 1.604-5.478.362-2.007 1.378-4.247 2.258-4.977 1.698-1.41 1.681-.61-.216 10.309-.662 3.809-3.105 5.846-4.052 3.38zM490 700.618c0-.55.45-1.278 1-1.618.55-.34 1-.168 1 .382s-.45 1.278-1 1.618c-.55.34-1 .168-1-.382zm-218.62-2.57c-.306-.799-.252-1.946.12-2.549.855-1.382 3.5.6 3.5 2.623 0 1.832-2.912 1.772-3.62-.074zm330.287.785c-.367-.366-.667-1.454-.667-2.416 0-.982-1.316-2.332-3-3.077-1.65-.73-3-1.613-3-1.962 0-1.388 2.842-2.876 4.373-2.288 1.358.52 1.627-.14 1.627-3.983 0-3.345-.395-4.607-1.441-4.607-.793 0-1.72.45-2.059 1-1.14 1.844-2.52 1.026-4.195-2.487-1.883-3.947-1.384-5.204 1.38-3.478 1.48.925 2.689.836 5.695-.42 3.69-1.542 3.875-1.521 5.622.635 1.498 1.851 1.75 3.707 1.478 10.913-.18 4.776-.827 9.618-1.439 10.76-1.1 2.057-3.087 2.697-4.374 1.41zM47 697.5c0-.55.675-1 1.5-1s1.5.45 1.5 1-.675 1-1.5 1-1.5-.45-1.5-1zm239.5-1c-.35-1.1-.322-2.984.06-4.187.67-2.111.74-2.122 2.067-.309 1.812 2.479 1.775 6.496-.06 6.496-.788 0-1.718-.9-2.067-2zm25.236 1.402c-.974-.973.363-3.402 1.871-3.402.766 0 1.393.9 1.393 2 0 1.883-1.948 2.72-3.264 1.402zM353 696.5c0-1.506.522-2.046 1.75-1.81.963.186 1.75 1 1.75 1.81s-.787 1.624-1.75 1.81c-1.228.236-1.75-.304-1.75-1.81zm-104.622-1.75c-.308-.963-1.052-2.776-1.653-4.03-.874-1.819-.757-2.617.578-3.951 1.563-1.564 1.804-1.532 3.685.487 1.23 1.322 2.012 3.535 2.012 5.702 0 2.894-.372 3.542-2.031 3.542-1.118 0-2.283-.787-2.591-1.75zm82.074-1.327c-.855-1.385 1.325-5.624 3.279-6.373 1.77-.68 3.288.152 3.214 1.759-.09 1.926-5.693 5.908-6.493 4.614zm158.596-1.296c-1.929-5.074-1.63-7.627.893-7.627 2.694 0 3.205 1.237 2.453 5.94-.731 4.571-2.005 5.213-3.346 1.687zm-90.186-1.377c-2.575-3.112-4.144-7.073-3.483-8.795.497-1.295.958-1.42 2.012-.545 2.628 2.181 6.794 8.981 6.145 10.031-.979 1.585-3.044 1.28-4.674-.691zm130.72.884c-.43-.697-.512-1.537-.182-1.867.895-.895 1.87.421 1.387 1.871-.338 1.016-.574 1.016-1.204-.004zM561 690.56c0-2.515 1.614-3.507 2.395-1.471.958 2.496.718 3.412-.895 3.412-.825 0-1.5-.873-1.5-1.941zm-304-2.837c0-.428.9-1.548 2-2.49 1.1-.942 2-2.422 2-3.29 0-1.122.577-1.394 2-.942 1.268.402 3.114-.157 5.036-1.526 3.412-2.43 7.086-2.03 4.954.538-.68.818-1.992 1.488-2.916 1.488-.925 0-3.208 1.575-5.074 3.5-3.04 3.137-8 4.824-8 2.722zm65-3.222c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm240.218-.154c.246-.74 1.25-1.501 2.23-1.691 1.14-.221 1.62.139 1.334 1-.246.74-1.25 1.5-2.23 1.69-1.14.221-1.62-.139-1.334-1zm-285.836-2.232c.38-1.515.05-2.84-.904-3.632-.962-.799-1.17-1.65-.579-2.365.508-.614 1.076-2.467 1.263-4.117.208-1.85.913-3 1.838-3 1.18 0 1.562 1.658 1.792 7.75.277 7.355.182 7.75-1.858 7.75-1.767 0-2.044-.425-1.552-2.386zm104.792-1.928c-2.527-2.691-2.814-4.686-.674-4.686.825 0 1.5-.45 1.5-1s-.642-1-1.427-1c-.784 0-2.111-1.373-2.949-3.051-1.523-3.054-1.255-5.949.55-5.949.529 0 .695-.837.37-1.86-.802-2.528 2.617-6.676 4.809-5.835.915.351 2.177 1.763 2.803 3.137 1.338 2.937-.208 5.558-3.278 5.558-2.192 0-2.538 2.533-.456 3.332.783.3 1.57 1.586 1.75 2.857.226 1.593 1.648 2.924 4.578 4.285 4.416 2.051 5.679 4.526 2.309 4.526-1.068 0-2.22.45-2.559 1-1.1 1.779-5.093 1.062-7.326-1.314zm146.912-1.304c-1.132-1.44-1.813-3.014-1.513-3.5.3-.485-.382-.882-1.514-.882-1.516 0-2.059-.643-2.059-2.441 0-1.343.435-2.71.967-3.039.532-.329.701-1.93.375-3.559-.465-2.328-.238-2.961 1.064-2.961.911 0 1.807.563 1.991 1.25.184.688 1.295 4.234 2.469 7.881 3.211 9.979 2.534 12.736-1.78 7.251zm-117.56-1.341c-.327-.528-.166-1.765.357-2.75.522-.985 1.463-3.182 2.09-4.882 1.186-3.222 6.262-6.409 10.206-6.409 1.784 0 1.339.817-2.88 5.276-2.744 2.902-5.525 6.277-6.18 7.5-1.264 2.363-2.62 2.84-3.594 1.265zm225.993-2.21c.388-1.282 1.105-2.758 1.593-3.281 2.003-2.143-.14-9.67-3.563-12.51-1.809-1.5-3.057.727-3.837 6.848-.307 2.413-1.224 5.053-2.038 5.866-1.305 1.306-1.62 1.217-2.675-.756-.952-1.778-.899-2.976.26-5.866 3.837-9.564 3.852-9.936.567-13.677-1.668-1.9-3.887-3.455-4.93-3.455-1.043 0-1.896-.627-1.896-1.393 0-2.218 3.108-2.82 5.126-.993 2.324 2.103 4.282.71 5.903-4.202 1.213-3.674 4.374-6.187 5.498-4.369.825 1.335-.304 10.568-1.748 14.302-1.009 2.609-.805 3.116 2.447 6.095 4.103 3.76 5.047 7.075 4.003 14.06-.63 4.212-1.115 5.052-3.081 5.332-2.029.288-2.242.026-1.629-2zm24.994 1.19c-.721-1.167 1.17-5.021 2.463-5.021 1.636 0 2.136 1.922 1.035 3.98-1.171 2.188-2.538 2.594-3.498 1.04zm-328.763-.737c-3.148-.477-3.484-2.234-1.118-5.845 1.509-2.303 1.509-2.626 0-4.293-2.106-2.327-2.068-2.725.616-6.492 1.236-1.735 2.924-4.504 3.75-6.154.885-1.767 2.29-3 3.419-3 2.513 0 3.067 1.873 1.128 3.813-.85.85-1.56 2.814-1.577 4.366-.017 1.551-.692 3.695-1.5 4.762-1.995 2.638-1.887 8.532.185 10.047 1.74 1.273 1.07 3.618-.962 3.362-.655-.082-2.429-.337-3.941-.566zm99.5.054c-1.943-.784-1.471-4.047.666-4.606 2.266-.592 4.084.952 4.084 3.468 0 1.752-2.025 2.237-4.75 1.138zm137.293-.588c-.364-1.153-.667-2.73-2.181-11.338-.372-2.115-.02-3.612 1.119-4.75 2.586-2.587 3.284-2.03 3.87 3.088.298 2.612.847 6.49 1.219 8.615.486 2.779.29 4.11-.697 4.735-1.91 1.21-2.87 1.11-3.33-.35zM263 674.5c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm348 0c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm-460.04-5.077c-1.143-2.242-1.94-5.055-1.77-6.25.273-1.915.932-2.173 5.56-2.173 4.582 0 5.25.254 5.253 2 .004 2.757-4.223 10.5-5.731 10.5-.677 0-2.167-1.835-3.311-4.077zm116.19 3.127c.43-1.29 1.801-1.52 1.925-.325.041.399-.465.905-1.125 1.125-.66.22-1.02-.14-.8-.8zm190.839-3.563c-.72-.869-.993-2.717-.651-4.425.496-2.482.247-2.981-1.626-3.247-2.637-.375-2.97-3.142-.436-3.63 2.636-.507 5.652 3.736 5.69 8.006.038 4.18-1.15 5.497-2.977 3.296zm-321.397-4.338c-.675-1.092 1.473-13.35 2.555-14.582.451-.514 1.15-.603 1.555-.199 1.135 1.135 1.179 12.974.053 14.382-1.148 1.435-3.39 1.65-4.163.399zm140.123.233c-.34-.34-.338-2.017.004-3.727.618-3.086.605-3.097-1.798-1.546-3.114 2.01-6.776 2.934-7.43 1.876-.281-.455.73-2.847 2.249-5.316 2.649-4.306 6.903-6.626 9.363-5.106.494.305.897 3.678.897 7.496 0 5.118-.35 6.941-1.333 6.941-.733 0-1.611-.278-1.951-.618zm330.87-2.563c-1.44-2.056-1.634-2.085-3.387-.498-2.06 1.863-3.198 1.32-3.198-1.523 0-1.028-.704-2.943-1.565-4.257-1.422-2.17-1.42-2.67.026-5.465 2.034-3.934 3.539-3.93 3.539.007 0 5.098 2.334 2.84 3.6-3.484.634-3.163 1.64-6.24 2.237-6.836.597-.597 3.015-1.125 5.374-1.174 3.652-.076 4.289.208 4.289 1.91 0 1.523-.836 2.122-3.5 2.509-3.403.494-3.493.622-3.246 4.624.167 2.7-.264 4.546-1.25 5.365-1.905 1.58-1.919 4.072-.036 6.562.808 1.067 1.483 2.503 1.5 3.19.052 2.023-2.727 1.433-4.382-.93zm61.475.753c-.699-.842-1.295-4.242-1.326-7.567-.05-5.287-.275-5.968-1.811-5.48-2.698.856-2.992-.788-.77-4.297 1.985-3.136 2.067-3.163 5.431-1.757 1.879.785 3.416 1.037 3.416.56 0-2.2-1.475-4.261-3.636-5.083-3.225-1.226-2.97-3.583.586-5.422 2.684-1.388 3.035-1.376 3.88.134.83 1.484 1.05 1.432 2.084-.5 1.657-3.095 5.086-2.865 5.086.34 0 1.556.567 2.5 1.5 2.5.825 0 1.502-.338 1.505-.75.009-1.406 6.091-7.25 7.546-7.25 2.004 0 1.812 2.675-.42 5.846-2.93 4.16-3.382 6.768-1.729 9.965 1.388 2.684 1.353 3.075-.448 5.008-1.075 1.154-1.954 2.534-1.954 3.068 0 2.125-3.131 4.037-5.789 3.536-2.403-.454-2.938-.024-4.711 3.782-2.189 4.7-6.054 6.242-8.44 3.367zm49.297-.085c-.753-1.962 1.366-4.487 3.765-4.487 2.285 0 2.359.868.321 3.777-1.814 2.59-3.268 2.843-4.086.71zm185.875-1.487c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-440.62-.652c-1.735-2.38-1.774-2.958-.474-7.144 1.867-6.012 3.514-6.405 4.193-1.002.297 2.364.845 5.76 1.218 7.548.574 2.752.393 3.245-1.186 3.219-1.024-.018-2.713-1.197-3.751-2.621zm-47.208.263c-.652-1.699.225-3.611 1.655-3.611 1.261 0 1.207 3.718-.066 4.504-.554.343-1.269-.06-1.589-.893zm12.596-.456c0-2.613 3.412-5.376 6.157-4.985 2.688.382 3.899 3.83 1.345 3.83-.905 0-2.32.675-3.145 1.5-2.064 2.064-4.357 1.882-4.357-.345zm115.658 1.17c-.362-.362-.658-2.735-.658-5.272 0-4.268.239-4.705 3.184-5.816 1.751-.661 3.352-1.035 3.556-.83.205.205-.374 2.655-1.287 5.446-1.672 5.112-3.58 7.687-4.795 6.472zm-387.183-6.353c-1.478-1.633-1.593-2.418-.655-4.476 1.824-4.004 4.18-3.19 4.18 1.445 0 4.74-1.113 5.697-3.525 3.031zm150.725.828c-.66-.66-1.2-1.785-1.2-2.5 0-.715-.45-1.3-1-1.3s-1-.93-1-2.067c0-1.685.417-1.938 2.25-1.368 1.238.385 2.406 1.109 2.597 1.609.191.5.979.386 1.75-.255 1.131-.938 1.403-.74 1.403 1.024 0 2.471-1.678 6.057-2.835 6.057-.42 0-1.305-.54-1.965-1.2zm38.984-1.541c.327-2.834 2.54-3.963 5.524-2.817 1.366.524 1.262.961-.733 3.084-3.142 3.346-5.195 3.231-4.791-.267zM167 654.5c0-1.1.45-2 1-2s1 .9 1 2-.45 2-1 2-1-.9-1-2zm-161-.889c0-.489.787-.826 1.75-.75.963.077 1.637-.423 1.5-1.111-.138-.688.2-1.25.75-1.25 1.614 0 1.146 2.73-.582 3.393-2.224.854-3.418.755-3.418-.282zm569.25-.773c-1.57-.634-1.623-3.565-.092-5.096.876-.876.831-1.55-.186-2.776-1.68-2.024-.298-3.066 5.325-4.016 4.333-.732 4.193-.798 5.19 2.438.666 2.162.489 2.34-1.876 1.888-1.817-.347-2.611-.07-2.611.912 0 1.867-2.854 7.334-3.776 7.233-.398-.043-1.287-.306-1.974-.583zM698 650c0-.825.436-1.5.969-1.5.532 0 .71.675.393 1.5-.317.825-.753 1.5-.969 1.5-.216 0-.393-.675-.393-1.5zm13-1.432c0-2.427-5.811-6.86-6.408-4.889-1.315 4.342-1.612 4.75-3.054 4.197-.846-.324-1.538-1.342-1.538-2.26 0-2.295 2.81-6.116 4.498-6.116 2.317 0 2.763-1.953 1.044-4.577-1.536-2.343-1.507-2.663.492-5.471 2.379-3.34 7.08-6.162 8.545-5.129 1.04.732 3.421 5.714 3.421 7.157 0 .487-.907 1.173-2.015 1.525-2.395.76-1.673 2.495 1.039 2.495 2.042 0 4.447 3.43 3.49 4.977-.318.515-1.18.704-1.917.422-2.161-.83-4.4 2.18-3.832 5.15.316 1.657-.016 2.996-.878 3.542-2.135 1.352-2.887 1.085-2.887-1.023zm-54.755-5.318c-2.03-2.538-2.317-5.445-.67-6.812 1.38-1.145 1.77-1.075 2.639.48.76 1.356 1.217 1.503 1.791.574.424-.687 1.272-.939 1.883-.561 1.917 1.184 1.215 4.271-1.353 5.954-2.961 1.94-3.026 1.946-4.29.365zM159 634.5c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm11.59.146c-.652-1.056 1.943-4.146 3.481-4.146 1.512 0 1.065 1.567-.972 3.41-1.125 1.018-2.149 1.319-2.509.736zm-4.084-5.136c-.536-.868.131-5.386 2.086-14.102.386-1.725.01-3.163-1.125-4.298-2.126-2.126-1.38-2.94 2.588-2.827 3.756.106 5.474 1.428 6.799 5.227.81 2.326.655 3.347-.79 5.192-.99 1.264-2.77 4.435-3.956 7.048-2.04 4.491-4.238 5.967-5.602 3.76zm8.048-18.923c-.973-1.574-3.554-1.335-3.554.33 0 1.681 2.138 2.664 3.363 1.545.474-.433.56-1.277.19-1.875zm2.664 15.758c.246-.74 1.25-1.5 2.23-1.69 1.14-.222 1.62.139 1.334 1-.246.74-1.25 1.5-2.23 1.69-1.14.221-1.62-.139-1.334-1zM128 621.56c0-.518.45-1.22 1-1.559.55-.34 1 .084 1 .941s-.45 1.559-1 1.559-1-.423-1-.941zm32.543-4.99c-.317-.512-.118-1.213.44-1.559.56-.345 1.017.073 1.017.931 0 1.757-.6 2.015-1.457.628zm609.124-1.736c-1.047-1.047-.78-5.333.333-5.333.55 0 1 1.35 1 3 0 3.107-.204 3.463-1.333 2.333zm-623.13-1.272c-.68-1.102.218-8.166 1.63-12.811.76-2.5 1.547-3.25 3.41-3.25 1.333 0 2.423.415 2.423.923s1.112 2.246 2.472 3.861c2.867 3.408 2.46 4.216-2.127 4.216-3.102 0-3.364.265-3.961 4-.602 3.763-2.486 5.263-3.846 3.06zM163 611.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm-33.596-3.39c-.91-2.37 1.163-4.443 2.803-2.803.943.943.842 1.573-.463 2.878-1.56 1.56-1.715 1.555-2.34-.075zM773.362 606c-.317-.825-.286-2.255.068-3.178.59-1.537.777-1.544 2.243-.077 1.65 1.65 1.21 4.755-.673 4.755-.585 0-1.322-.675-1.638-1.5zm-77.55-10.183c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.605-.604zm25-4c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.605-.604zm17-4c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.605-.604zM842.159 510.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-782.286-7.75c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM53.2 494.3c-.66-.66-1.148-2.123-1.084-3.25.114-2.008.126-2.01.608-.05.27 1.1.948 2.563 1.506 3.25 1.295 1.595.55 1.63-1.03.05zm-6.328-11.55c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM885 484.122c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM904.638 460c-.316-.825-.14-1.5.393-1.5s.969.675.969 1.5-.177 1.5-.393 1.5c-.216 0-.652-.675-.969-1.5zm-9.095-18.43c-.317-.513-.193-1.168.274-1.457.467-.289.85.13.85.931 0 1.686-.316 1.833-1.124.525zm29.021-8.363c.376-.986.935-1.541 1.243-1.233.308.307 0 1.114-.683 1.793-.988.98-1.102.865-.56-.56zm7.036.528c.605-.404 1.357-1.41 1.671-2.235.382-1.002.597-.753.65.75.053 1.512-.495 2.245-1.671 2.235-1.08-.01-1.328-.297-.65-.75zm-4.869-7.315c.354-1.352.807-1.806 1.057-1.057.24.722-.038 1.787-.62 2.369-.742.742-.872.351-.437-1.312zm-34.615-7.111c-.064-2.58.24-4.911.675-5.18.435-.269.634 1.167.442 3.191-.586 6.184-.995 6.913-1.117 1.989zm-870.037-2.392c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM-9.728 412.5c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm12.334.848c1.042-1.459 2.094-2.459 2.338-2.222.245.236-.607 1.43-1.894 2.652L.712 416zm893.727-3.304c0-.8.383-1.22.85-.93.467.288.59.943.274 1.455-.808 1.308-1.124 1.161-1.124-.525zm-877.52-1.227c.721-.289 1.584-.253 1.916.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.605-.604zm-28.734-3.9c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm30.101-2.667c.176-1.238.545-2.061.82-1.831.275.23 1.625-.137 3-.817l2.5-1.236-2.5 2.06c-2.12 1.747-2.273 2.21-1 3.051 1.214.803 1.058.995-.82 1.008-1.836.012-2.253-.453-2-2.235zm871.978-1.75c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-868.346-6.683c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.605-.604zM27.5 392.5c.34-.55 1.041-1 1.559-1s.941.45.941 1-.702 1-1.559 1-1.28-.45-.941-1zm866.579-2.583c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-865.548-.71c-.428-.986-.497-2.074-.155-2.417 1.016-1.015 1.835.411 1.367 2.382-.414 1.747-.468 1.748-1.212.035zm886.701-7.707c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-914.153.417c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm38.69.415c.58-.582 1.646-.86 2.368-.62.749.25.295.703-1.057 1.057-1.663.435-2.054.305-1.312-.437zm9.275-7.471c-.024-1.727.743-4.07 1.706-5.209 1.518-1.794 1.921-1.875 3.04-.61.713.807.835 1.458.273 1.458-.558 0-1.906 1.688-2.995 3.75l-1.98 3.75-.044-3.14zm858.563-5.943c-.86-2.24-.755-8.418.143-8.417.412 0 .818 2.25.901 5 .16 5.284-.056 5.99-1.044 3.417zM9.023 365.75c1.821-2.337 3.55-4.01 3.844-3.716.293.293-1.197 2.205-3.31 4.25L5.712 370zm33.19-7.177c-3.134-4.238-2.743-4.696.716-.839 2.489 2.776 3.027 3.012 3.586 1.571.412-1.065-.517-3.481-2.5-6.5L40.858 348l3.583 4c2.426 2.71 3.498 4.804 3.32 6.491-.371 3.544-2.961 3.582-5.549.082zm860.648-6.132l-2.361-2.06 2.75 1.675c1.512.92 2.75 1.847 2.75 2.059 0 .78-.835.335-3.14-1.674zM37.405 350.25L35.5 348l2.25 1.905c2.114 1.79 2.705 2.595 1.905 2.595-.19 0-1.202-1.012-2.25-2.25zm-14.856-2.57c1.073-1.827 3.414-4.92 5.201-6.876 1.788-1.956 3.25-3.767 3.25-4.025 0-1.182 4.255-6.279 5.242-6.279.609 0 .18 1.012-.95 2.25-1.132 1.238-2.783 3.685-3.67 5.44-.886 1.753-2.46 3.783-3.497 4.51-1.037.726-2.052 2.162-2.256 3.191-.203 1.029-1.472 2.599-2.82 3.49L20.6 351zm17.015-1.887c-.542-1.425-.428-1.54.56-.56.684.679.99 1.486.683 1.793-.308.308-.867-.247-1.243-1.233zm37.936.857c1.281-.416 2-1.533 2-3.109 0-1.971.645-2.59 3.25-3.124 3.925-.802 4.228-.24.611 1.136-1.451.551-2.367 1.275-2.035 1.606 1.209 1.21-1.456 4.338-3.611 4.241-2.084-.093-2.097-.138-.215-.75zm-39.769-5.07c-.435-1.663-.305-2.054.437-1.312.582.582.86 1.647.62 2.369-.25.749-.703.295-1.057-1.057zm51.495-10.259c.548-1.644 3.534-3.394 4.369-2.56.95.952-1.51 3.739-3.3 3.739-.804 0-1.285-.53-1.069-1.179zm-48.724-4.107c1.534-2.082 4.187-4.741 5.894-5.909 1.707-1.167 4.474-3.288 6.148-4.714 1.674-1.425 1.224-.896-1 1.176a809.597 809.597 0 00-8.938 8.5c-4.656 4.502-4.759 4.548-2.104.947zM843 312c0-1.814-4.075-2.025-5.8-.3-.66.66-1.234.772-1.277.25-.231-2.875-.95-4.67-2.83-7.06-1.307-1.66-2.093-4.117-2.093-6.539v-3.88l4.25 2.765c5.979 3.888 8.167 6.972 8.493 11.966.154 2.364.05 4.298-.231 4.298-.282 0-.512-.675-.512-1.5zm-777.14-5.44c1.3-1.133 2.837-2.06 3.417-2.06 1.23 0 1.171.05-2.777 2.362l-3 1.757zm5.873-3.184c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM81 297c2.304-1.925 4.447-3.5 4.761-3.5.895 0-7.157 6.912-8.106 6.958-.464.023 1.04-1.533 3.345-3.458zm152.44-2.879c-9.667-5.17-24.418-14.795-24.43-15.94-.013-1.093 5.732-9.403 7.071-10.231 1.157-.715 11.205 5.648 22.919 14.513 4.125 3.121 8.4 6.24 9.5 6.932 1.347.846 1.452 1.087.323.74-1.573-.484-5.857 3.9-6.917 7.081-.27.81-3.097-.223-8.466-3.095zM490 291.806c-2.475-1.404-7.875-4.803-12-7.555s-8.625-5.01-10-5.018c-1.375-.008-5.655 1.535-9.51 3.43-3.856 1.893-9.155 4.043-11.776 4.777-2.621.734-5.005 1.723-5.299 2.197-.293.475-.983.863-1.533.863-.55 0-.72-.454-.376-1.01.343-.554-.74-3.03-2.407-5.5-2.425-3.591-2.704-4.49-1.394-4.49.9 0 2.348-.642 3.216-1.427 1.359-1.229 15.224-8.352 27.27-14.011l3.692-1.734 12.323 8.413c16.263 11.103 22.289 15.759 20.394 15.759-.855 0-2.346 1.238-3.314 2.75-1.855 2.898-3.925 5.299-4.465 5.178-.176-.039-2.346-1.22-4.821-2.622zm-235.032-20.663c-4.715-2.625-25.024-15.331-27.314-17.088-1.767-1.356-1.718-1.602 1.166-5.793 3.802-5.526 5.771-7.233 6.67-5.78.366.595 5.694 4.405 11.838 8.468 6.145 4.063 12.577 8.662 14.294 10.219l3.123 2.831-3.155 4.537-3.155 4.537z",
      fill: "#9a4c11",
      transform: "matrix(.92146 0 0 .82007 29.733 153.837)"
    }), /* @__PURE__ */ React46.createElement("path", {
      d: "M201 1014.379c-74.285-4.954-94.778-6.97-132-12.993-39.702-6.422-73.848-15.914-81.204-22.57-2.289-2.072-2.313-6.552-.046-8.545 15.777-13.87 124.223-32.738 188.75-32.84 20.947-.033 30.981 1.169 37.396 4.479 2.532 1.306 6.179 2.934 8.104 3.617 6.274 2.225 21.439 10.09 24 12.448 1.375 1.265 3.625 2.628 5 3.029 3.925 1.144 15.307 6.822 17.331 8.646 1.008.908 3.258 1.898 5 2.201 1.743.304 5.725.98 8.85 1.505 3.568.598 7.396 2.133 10.294 4.127 4.064 2.796 7.883 4.109 18.893 6.493 1.577.342 2.629.86 2.337 1.153-.293.292-3.307-.18-6.7-1.049-3.391-.869-6.852-1.58-7.69-1.58-.84 0-3.39-1.238-5.67-2.75-5.894-3.91-8.592-5.067-13.145-5.637-7.63-.954-10.899-1.906-12.883-3.755-1.097-1.022-2.542-1.858-3.211-1.858-.67 0-3.172-.964-5.561-2.142-5.304-2.615-6.07-2.92-17.345-6.904-4.95-1.75-13.185-5.155-18.3-7.568-5.114-2.412-9.671-4.386-10.127-4.386-.456 0-2.457-.68-4.446-1.511-1.99-.832-3.957-1.56-4.372-1.62-.415-.06-1.73-.48-2.92-.932-6.342-2.41-28.275-4.152-44.335-3.52-17.047.671-51.032 4.118-75.5 7.657-36.166 5.232-74.899 14.497-87.522 20.937-10.705 5.461-5.978 11.303 14.03 17.339 42.004 12.671 102.063 21.325 179.492 25.861 30.238 1.772 150.29 1.726 163.5-.062 5.225-.707 11.162-1.494 13.194-1.748 2.032-.255 5.857-1.12 8.5-1.921 2.643-.802 5.763-1.463 6.934-1.47 1.17-.01 2.64-.628 3.266-1.382.908-1.094.477-1.617-2.128-2.584-1.796-.666-3.958-1.568-4.804-2.004-.847-.436-3.443-1.115-5.77-1.508-2.328-.393-4.817-1.3-5.532-2.015-.715-.715-3.518-1.513-6.23-1.773-2.711-.26-5.83-.741-6.93-1.07-6.678-1.994-10.867-3.57-10-3.762.55-.122-2.6-.579-7-1.015-4.4-.437-10.7-1.484-14-2.327-6.525-1.667-6.149-1.654 11.5.379 8.836 1.018 13.526 2.054 25 5.524 2.475.748 7.055 1.623 10.178 1.944 3.122.32 10.243 1.483 15.823 2.583 5.982 1.18 14.195 2 20.013 2 5.5 0 10.142.443 10.486 1 .375.606 7.777 1.006 18.809 1.015 17.124.014 23.3.77 19.193 2.346-.916.351-3.752.639-6.302.639-4.802 0-20.132 1.632-47.7 5.08-16.945 2.118-30.776 3.426-52 4.92-15.952 1.12-127.26 1.028-144.5-.122zm287.864-18.015L486.5 994l4.803-.307c5.02-.32 5.176-.48 6.133-6.274.535-3.242.377-3.573-1.672-3.5-1.953.07-2.23-.365-2.01-3.169.221-2.833-.054-3.25-2.143-3.25-2.588 0-3.602 1.631-3.626 5.832-.019 3.244-.798 4.507-3.735 6.054-1.238.651-2.25 2.053-2.25 3.114 0 2.808-3.487 4.374-7.007 3.147-1.949-.679-3.984-.655-6.36.073-2.551.783-4.928.75-8.813-.123-2.926-.657-6.783-1.159-8.57-1.115-3.73.092-4.225-1.7-1.818-6.579.788-1.597 1.737-4.14 2.109-5.653.643-2.617.501-2.75-2.933-2.75-2.863 0-3.608.387-3.608 1.877 0 1.033-.71 2.467-1.576 3.186-1.105.917-1.4 2.25-.986 4.456.504 2.689.217 3.317-1.971 4.314-3.42 1.558-18.701 1.533-20.267-.033-1.865-1.865-1.421-2.972 1.06-2.647 1.243.163 3.358-.473 4.7-1.413 2.183-1.528 2.678-1.552 4.705-.224 3.1 2.032 5.568 1.86 7.613-.528 2.322-2.712 2.204-2.988-1.278-2.988-2.682 0-3-.326-3-3.07 0-2.596-.34-3.02-2.209-2.75-1.396.202-2.424 1.24-2.794 2.82-.508 2.167-1.299 2.588-5.945 3.16-6.132.754-7.702.362-9.115-2.278-1.177-2.199-2.86-2.39-5.304-.603-1.653 1.208-1.635 1.412.308 3.653 1.133 1.306 2.059 3.21 2.059 4.233 0 1.622-.542 1.776-4.25 1.21-2.338-.356-4.812-1.091-5.5-1.633-.832-.657-2.255-.568-4.275.268-2.587 1.072-3.294 1.011-4.87-.416-1.561-1.412-2.265-1.478-4.568-.429-2.443 1.113-2.902 1.002-4.473-1.08-1.307-1.733-2.307-2.143-3.955-1.62-2.428.77-5.109-.866-5.109-3.119 0-2.115 2.822-2.78 5.566-1.31 3.62 1.937 4.382.13.987-2.343-5.63-4.101-10.553-3.025-10.553 2.307 0 3.343-1.962 5.268-4.034 3.958-.806-.51-2.5-.934-3.766-.943-1.264-.01-3.667-.722-5.34-1.587-2.881-1.49-2.952-1.669-1.36-3.428 1.089-1.203 1.44-2.611 1-4-.448-1.41-.076-2.811 1.086-4.095 1.334-1.474 1.484-2.235.614-3.105-.87-.87-1.607-.742-3.005.524-2.187 1.98-6.35 2.43-4.395.476 1.66-1.66 1.507-4.8-.232-4.8-2.25 0-6.059 5.91-4.691 7.277 1.743 1.744 1.408 8.4-.459 9.116-2.182.837-8.673.735-10.052-.158-.624-.404-1.304-1.635-1.51-2.735-.538-2.86-4.51-3.15-6.667-.485l-1.75 2.161-2.47-2.068c-1.887-1.58-2.163-2.27-1.172-2.926 1.027-.68.943-1.153-.405-2.27-2.495-2.07-4.287-7.011-3.684-10.162.289-1.513.833-2.75 1.209-2.75 1.32 0 3.083 2.42 3.083 4.231 0 2.224 2.712 3.457 4.242 1.927.802-.802.81-2.401.032-5.804-.772-3.375-.767-5.372.019-7.097.86-1.887.785-2.595-.35-3.313-2.223-1.407-2.592-1.204-4.885 2.682-2.528 4.286-3.583 3.759-3.196-1.597.205-2.835-.27-4.436-1.751-5.918-1.227-1.227-2.3-4.055-2.709-7.138-.512-3.859-1.27-5.496-3.101-6.696-2.107-1.38-2.34-2.091-1.775-5.432.744-4.403-.234-4.85-3.352-1.53-2.739 2.915-2.778 5.827-.1 7.499 3.386 2.115 5.353 7.963 5.492 16.333.104 6.223.534 8.165 2.31 10.422 1.396 1.775 1.835 3.12 1.22 3.735-1.409 1.41-3.84.152-5.84-3.02-.966-1.531-2.618-2.784-3.673-2.784-1.054 0-2.104-.562-2.333-1.25-.23-.687.24-1.25 1.044-1.25s1.969-.612 2.59-1.36c.89-1.072.266-1.957-2.954-4.188-2.244-1.556-4.954-3.938-6.02-5.294-1.717-2.182-1.777-2.712-.527-4.62 1.917-2.926.608-4.89-4.348-6.527-4.238-1.398-6.812-3.568-5.632-4.747.378-.379 1.628-.101 2.777.616 2.305 1.44 3.774.257 3.805-3.063.016-1.749 3.325-3.362 4.9-2.388 1.65 1.02 8.115-2.36 8.115-4.242 0-.983.51-2.297 1.133-2.92 1.267-1.267.493-4.267-1.102-4.267-.567 0-1.031.9-1.031 2 0 2.605-4.044 2.714-6.345.171-3.08-3.402-1.444-5.817 1.766-2.607.86.86 2.017 1.283 2.571.94 1.184-.73 1.364-3.504.227-3.504-.43 0-1.29-1.35-1.913-3-1.198-3.174-3.978-4.018-4.944-1.5-.62 1.615-4.056 1.98-6.146.655-.706-.448-1.002-1.548-.659-2.444 1.128-2.94-1.347-8.13-4.553-9.55-1.652-.73-3.004-1.98-3.004-2.776 0-2.058-2.47-2.739-5.008-1.381-2.492 1.334-3.926.53-2.175-1.22 1.673-1.674 1.47-7.301-.317-8.784-2.305-1.913-1.787-3.106 1.21-2.788 2.113.225 3.008-.319 4.055-2.462 2.01-4.112 3.096-3.346 3.433 2.421.313 5.366 2.468 7.824 3.476 3.967.298-1.14 1.487-2.372 2.641-2.738 1.606-.51 2.755.12 4.892 2.68 3.101 3.713 3.424 6.192 1.293 9.92-1.972 3.45-1.904 3.664 1.545 4.866 3.646 1.27 4.28.26 4.386-6.977.05-3.462-.493-5.348-2.032-7.057-1.156-1.283-2.379-3.12-2.719-4.082-.34-.963-1.306-1.75-2.149-1.75-.842 0-1.531-.45-1.531-1s-.884-1-1.965-1c-2.117 0-4.514-3.416-3.522-5.02.949-1.537 3.247-1.15 4.68.785 1.293 1.747 5.948 4.235 7.924 4.235 1.32 0 .708-4.492-.617-4.526-3.354-.088-6.475-5.25-3.75-6.204.687-.24 1.25.05 1.25.647 0 .595.441 1.083.98 1.083.54 0-.136-2-1.5-4.442-1.364-2.444-2.48-5.096-2.48-5.894 0-1.392-2.01-2.664-4.21-2.664-.66 0-.81 1.475-.406 4 .544 3.402.376 3.995-1.122 3.967-2.301-.043-6.262-3.377-6.262-5.27 0-1.578-2.401-2.963-3.402-1.961-.329.328-.598 1.39-.598 2.36 0 2.122-2.593 4.904-4.571 4.904-1.637 0-1.988-4.537-.426-5.502.67-.414.67-1.24 0-2.493-1.569-2.93-1.317-3.328 3.998-6.313 5.479-3.077 5.668-3.41 3.558-6.25-1.212-1.633-1.73-1.742-3.25-.685-4.783 3.325-6.226 3.628-8.305 1.747-1.102-.998-2.004-2.364-2.004-3.037 0-.672-.615-1.733-1.367-2.357-1.039-.862-1.662-.78-2.591.34-1.18 1.421-1.029 7.27.466 18.05.305 2.2.684 8.599.841 14.22.221 7.881.672 10.645 1.969 12.079.925 1.022 1.682 3.141 1.682 4.709 0 1.567.552 4.377 1.227 6.243 1.045 2.89.97 3.84-.5 6.402-.95 1.655-1.727 3.662-1.727 4.46 0 2.025 2.728 2.857 4.513 1.376 1.655-1.373 1.954-.276.536 1.966-1.652 2.612 1.892 7.012 6.204 7.701 3.767.603 5.537 1.887 4.302 3.123-.355.355-1.525.096-2.6-.575-1.795-1.121-1.955-.944-1.955 2.165 0 1.862.675 3.946 1.5 4.631 3.61 2.996.164 4.136-4.085 1.352-1.554-1.018-2.294-2.224-1.937-3.155.648-1.69-3.1-6.197-5.152-6.197-1.628 0-1.69 1.451-.183 4.268.858 1.603.858 2.232 0 2.518-1.862.62-1.306 4.412 1.01 6.877 1.359 1.446 2.118 3.493 2.06 5.549-.058 2.033.834 4.473 2.375 6.492 2.047 2.684 2.949 3.139 5.296 2.67 3.772-.755 4.955 1.923 1.537 3.48-1.4.638-2.421 1.956-2.421 3.125 0 2.33.031 2.34 3.416 1.053 1.607-.611 2.343-1.495 1.997-2.399-.673-1.753.873-2.844 2.92-2.059 2.062.792 2.725 2.884 2.024 6.389-.532 2.662-.885 2.89-3.722 2.402-1.724-.296-3.81-.798-4.635-1.115a95.878 95.878 0 00-2-.75c-2.63-.909-4-1.915-4-2.94 0-1.132-7.177-7.56-8.441-7.56-.308 0-.559 1.313-.559 2.917 0 1.604-.464 3.071-1.031 3.26-1.394.465.83 6.828 2.379 6.808.634-.01 1.805-.429 2.604-.934 1.023-.647 1.852-.348 2.807 1.015 1.488 2.124 5.209 2.566 6.949.826.81-.81 2.088-.784 4.758.097 3.343 1.103 3.597 1.45 3.013 4.109-.788 3.588 2.035 5.287 4.098 2.467 1.226-1.677 1.408-1.673 3.823.088 1.396 1.016 2.551 2.114 2.569 2.44.017.326-1.502 1.418-3.375 2.427-3.054 1.645-3.648 1.682-5.75.358-1.29-.812-4.948-2.34-8.13-3.396-4.348-1.443-5.928-2.487-6.358-4.2-.315-1.255-1.235-2.281-2.044-2.281-1.114 0-1.311.727-.812 3 .362 1.65.286 2.985-.17 2.968-1.843-.071-4.33-2.815-4.33-4.777 0-2.3-3.709-6.812-6.026-7.33-.81-.182-2.924.275-4.696 1.014-3.09 1.289-3.33 1.216-5.84-1.766-1.438-1.71-3.494-3.11-4.568-3.11-1.263 0-3.054-1.77-5.068-5.011-2.916-4.691-3.251-4.924-5.221-3.633-1.71 1.12-2.33 1.139-3.303.098-1.839-1.969-2.627-6.327-1.41-7.794.746-.9.787-2.375.129-4.67-1.147-3.998-.971-4.272 2.227-3.47 2.05.516 2.426 1.167 2.26 3.916-.11 1.814-.47 3.735-.8 4.268-.698 1.129 1.972 5.297 3.392 5.297.53 0 .68-1.125.335-2.5-.466-1.857-.231-2.5.913-2.5 1.478 0 3.336 3.54 2.828 5.387-.384 1.397 3.802 5.385 6.315 6.015 1.531.385 2.475 1.56 2.88 3.585.697 3.485 2.785 3.9 5.746 1.14 2.81-2.617 1.645-6.974-2.226-8.323-1.8-.629-2.867-1.708-2.867-2.903 0-2.765 2.484-2.33 3.854.676 1.454 3.193 3.538 2.686 3.968-.964.177-1.503.627-2.57 1-2.37 4.782 2.553 8.59 3.745 9.394 2.94 1.49-1.49.518-5.721-1.25-5.44-1.956.312-4.99-8.903-3.134-9.521 1.93-.644 1.33-2.513-1.582-4.932l-2.75-2.283 2.25-1.914c3.484-2.964 2.924-5.094-1.339-5.094-2.824 0-4.684-.958-8.732-4.5-5.753-5.032-6.646-5.343-7.371-2.57-.278 1.063-1.136 2.174-1.907 2.47-1.908.732-1.775 4.243.19 4.996 2.131.818 3.409-.099 3.409-2.445 0-1.836.1-1.846 2-.219 2.386 2.043 2.532 3.582.5 5.268-2.062 1.712-1.88 2.745.625 3.54 1.286.408 2.43.18 2.899-.579.862-1.395 3.976-.606 3.976 1.008 0 .567-.9 1.031-2 1.031-1.29 0-2 .667-2 1.878 0 2.361-2.515 4.522-4.414 3.793-1.971-.756-3.891 1.624-2.463 3.052.592.592.783 1.998.425 3.125-.946 2.98-3.386 1.597-5.205-2.95-1.255-3.134-2.55-4.304-7.05-6.364-3.866-1.77-5.345-2.957-4.953-3.977.342-.89-.22-1.701-1.446-2.09-1.601-.509-1.943-1.36-1.7-4.225.394-4.618 2.465-5.281 4.13-1.322.716 1.702 3.131 4.44 5.368 6.085 3.68 2.707 4.194 2.838 5.405 1.378 1.152-1.387.952-1.944-1.435-3.997-1.526-1.312-3.314-2.386-3.974-2.386-2.074 0-4.167-6.003-2.837-8.133.632-1.012 1.149-2.029 1.149-2.26 0-.23-2.25-2.036-5-4.011-3.71-2.666-5-4.238-5-6.094 0-1.557.566-2.502 1.5-2.502 1.774 0 1.987-1.581.348-2.594-.633-.391-1.746.101-2.472 1.095-1.148 1.57-1.399 1.603-1.915.257-.81-2.109 1.208-9.238 3.046-10.764 1.03-.854 1.493-3.16 1.493-7.425 0-3.41.568-6.963 1.265-7.916 1.122-1.535 1.484-1.166 3.21 3.282 2.073 5.343 3.716 6.745 5.451 4.654.765-.922.754-2.207-.037-4.478-.986-2.827-.802-3.629 1.636-7.148 1.511-2.18 3.073-3.963 3.472-3.963.398 0 2.163 2.7 3.922 6 2.775 5.206 3.58 6 6.08 6 3.672 0 4.196-.927 3.387-5.989-.619-3.869-.82-4.075-3.427-3.502-3.676.807-4.926-1.27-2.064-3.43 2.076-1.566 2.11-1.824.682-5.24l-1.502-3.595-4.787.864c-9.375 1.691-9.04 1.456-9.787 6.886-.814 5.92-1.608 6.637-4.932 4.46-2.404-1.576-2.508-1.547-3.118.884-.493 1.964-1.212 2.475-3.29 2.338-2.098-.139-2.73.323-2.995 2.19-.184 1.3.153 2.853.75 3.45 1.57 1.57 1.298 3.848-.784 6.556-1.556 2.023-1.916 2.133-2.447.75-.342-.892-1.263-1.622-2.045-1.622-.783 0-1.692-1.071-2.02-2.38-.33-1.31-1.483-2.612-2.564-2.895-1.149-.3-2.22-1.7-2.578-3.37-.337-1.57-1.52-5.478-2.628-8.685-1.917-5.544-1.93-5.923-.278-7.75.956-1.056 2.707-1.92 3.892-1.92 1.184 0 2.996-.616 4.025-1.368 1.803-1.319 1.788-1.413-.414-2.592-2.866-1.534-8.058-.628-11.381 1.986-3.105 2.443-3.227 2.441-5.744-.076l-2.05-2.05 2.3-1.916c1.265-1.055 3.029-1.932 3.92-1.95 1.062-.023 1.812-1.226 2.181-3.502.488-3.005.091-3.94-2.97-7-1.942-1.943-4.071-3.532-4.731-3.532-2.232 0-3.6-2.382-3.6-6.268v-3.868l5.458 5.725c4.644 4.872 5.688 5.535 7 4.446 2.073-1.72 1.941-3.249-.458-5.303-2.426-2.078-2.571-4.313-.36-5.55 1.939-1.086.827-3.575-1.241-2.782-.917.352-1.399-.166-1.399-1.5 0-2.97-4.387-2.195-4.82.85-.575 4.053-3.438 2.095-4.758-3.256-.406-1.646-1.394-4.006-2.195-5.244-1.416-2.186-1.355-2.25 2.132-2.25 2.986 0 3.854-.51 5.158-3.033 1.764-3.41 3.483-3.103 3.483.623 0 2.83 2.765 4.39 4.086 2.306.486-.768.89-3.035.899-5.039.024-5.813 3.681-5.912 5.447-.148 1.173 3.828 1.576 12.406.665 14.133-.481.912-1.137 6.158-1.458 11.658-.619 10.616-.056 12.598 3.939 13.866 1.138.361 3.302 1.943 4.808 3.515 2.694 2.812 2.871 3.688 2.522 12.427-.062 1.545.642 3.642 1.564 4.661 1.745 1.929 1.802 1.917 8.393-1.668.201-.109-.852-1.246-2.34-2.526-2.662-2.29-2.677-2.366-.866-4.573 1.13-1.377 3.555-2.533 6.273-2.99 3.8-.638 4.545-1.165 5.222-3.694.625-2.339.345-3.423-1.354-5.23-1.882-2.004-1.985-2.574-.847-4.7.712-1.33 2.14-2.64 3.17-2.91 2.307-.603 2.45-2.52.253-3.364-.977-.375-1.992.036-2.55 1.032-.509.91-1.466 1.658-2.126 1.662-.66 0-2.264 1.87-3.564 4.146-2.122 3.714-2.198 4.232-.743 5.046 1.256.703 1.386 1.344.578 2.853-1.64 3.065-3.263 2.296-6.13-2.905-2.886-5.235-2.68-6.499 1.31-8.015 2.49-.947 2.56-1.174 1.54-4.994-1.01-3.783-2.364-5.046-7.024-6.549-2.668-.86-1.485-3.035 1.863-3.426 1.581-.185 3.352-.988 3.936-1.786.874-1.196 1.374-.918 2.854 1.586 1.113 1.885 2.624 3.048 3.987 3.068 1.206.017 3.067.692 4.134 1.5 2.378 1.798 5.881 1.942 5.315.218-.225-.687-1.95-2.283-3.833-3.545-1.883-1.262-4.024-3.737-4.758-5.5s-2.463-4.398-3.842-5.856c-3.372-3.565-2.69-5.755 2.625-8.43 2.446-1.232 5.003-2.999 5.681-3.926 1.448-1.98.756-4.493-1.236-4.493-2.093 0-1.675-2.569.672-4.128 2.602-1.729 1.688-4.635-1.886-5.994-1.963-.746-2.742-.624-3.39.535-.463.827-1.522 1.243-2.352.924-2.159-.828-4.649-6.095-3.939-8.331.423-1.333-.155-2.39-1.948-3.565-2.663-1.745-3.374-4.814-1.399-6.034.668-.413 2.242.615 3.75 2.45 1.43 1.738 3.15 3.157 3.824 3.152.835-.01 1.03.97.61 3.065-.598 2.99-.523 3.065 2.775 2.75l3.39-.324.056-5.5c.031-3.025.613-6.52 1.294-7.765 1.031-1.89.98-2.363-.307-2.857-1.001-.384-1.543-1.875-1.543-4.244 0-2.499-.597-4.026-1.89-4.833-1.654-1.033-1.879-2.404-1.808-11.049.063-7.744-.284-10.388-1.611-12.283-2.44-3.484-2.12-4.672 1.759-6.512 3.941-1.87 5.92-1.197 5 1.7-1.007 3.173 1.455 8 3.898 7.644 2.41-.352 8.652-8.123 8.652-10.772 0-2.632-3.058-3.525-3.697-1.08-.282 1.077-1.598 2.67-2.925 3.54-2.212 1.448-2.467 1.443-3.046-.066-.347-.905.064-2.833.913-4.284 2.438-4.164 1.254-16.322-1.876-19.262-2.743-2.577-2.973-4.131-.869-5.877.825-.685 1.5-2.717 1.5-4.515 0-3.643 1.727-4.843 5.58-3.876 2.721.683 3.197 2.857.905 4.14-2.124 1.188-.918 6.496 2.126 9.355L251 684.85l2.597-2.425c5.096-4.756 9.669-16.694 7.43-19.392-.7-.843-2.09-1.532-3.09-1.532-2.68 0-3.251-1.663-1.664-4.845 1.713-3.435.912-11.105-1.273-12.183-5.247-2.59-6.929-3.134-7.87-2.552-1.4.865 1.75 7.58 3.555 7.58 1.573 0 1.637 1.302.301 6.109-1.133 4.081.758 10.195 3.477 11.238 1.834.704 1.954 2.644.376 6.106-1.707 3.749-3.839 3.239-3.839-.918 0-2.378-.595-3.783-1.897-4.48-1.577-.844-1.956-2.408-2.25-9.285-.229-5.364-.897-9.037-1.9-10.454-2.2-3.101-3.975-1.517-4.518 4.032-.322 3.286-1.45 5.964-3.82 9.069-2.479 3.247-3.546 5.874-4.06 9.995-.74 5.92-3.174 9.822-4.644 7.444-1.644-2.66-1.979-13.41-.618-19.83 1.162-5.483 1.742-6.562 3.784-7.044 1.327-.313 2.56-1.337 2.741-2.276.254-1.316-.39-1.706-2.817-1.706h-3.146l.258-5.576c.267-5.763-.67-7.376-4.308-7.409-1.316-.012-1.764 1.049-2 4.735-.251 3.91-.669 4.802-2.36 5.044-1.13.162-2.888-.626-3.905-1.75-1.018-1.124-2.511-2.044-3.32-2.044-1.068 0-1.322-.751-.928-2.75.846-4.29-.278-8.023-3.431-11.399-2.632-2.818-3.28-3.04-7.09-2.43-3.59.574-4.431.355-5.845-1.52-2.115-2.803-3.93-1.685-3.91 2.408.024 5.222 1.206 6.265 5.576 4.924 6.645-2.04 7.192.219 1.444 5.966-4.141 4.142-6.45 4.3-5.465.375.408-1.627.067-2.5-1.164-2.971-2.59-.994-3.566.608-3.82 6.277-.256 5.682-1.022 7.09-2.854 5.242-.748-.756-1.233-4.075-1.233-8.434 0-8.284-1.786-9.69-4.69-3.688-4.805 9.933-5.22 11.508-4.969 18.87.19 5.56-.134 7.797-1.318 9.105-.863.954-2.37 4.005-3.347 6.78-1.496 4.248-2.046 4.897-3.477 4.097-.934-.523-1.736-1.717-1.78-2.652-.053-1.114-.498-.76-1.29 1.027-.666 1.5-2.478 4.05-4.029 5.668-2.804 2.928-2.811 5.105-.016 5.105.806 0 1.893-1.125 2.416-2.5.887-2.332 2.857-3.44 3.114-1.75.063.412.21 5.925.327 12.25.151 8.167-.19 12.318-1.177 14.322-.999 2.028-1.089 3.184-.32 4.11.61.734 1.119 6.393 1.187 13.178.152 15.272.28 14.41-2.632 17.796-2.95 3.429-3.021 4.248-.85 9.673 1.371 3.428 1.42 4.26.289 4.96-.858.53-1.44 3.073-1.579 6.892-.12 3.33-.504 6.952-.853 8.05-.437 1.376.116 2.699 1.78 4.258 2.164 2.028 4.549 6.336 6.031 10.896.293.9-.115 2.559-.905 3.688-1.165 1.662-1.262 3.629-.51 10.34.586 5.244.574 8.948-.034 10.084-.528.987-.707 2.204-.398 2.705.31.5.105 1.192-.454 1.538-1.521.94-1.224 3.51.406 3.51 1.637 0 3.397 5.005 3.425 9.733.018 3.173-1.128 4.688-3.586 4.74-.681.015-1.244.365-1.25.777-.043 2.884.023 2.967 1.425 1.803 3.38-2.805 7.543 2.91 6.153 8.447-.903 3.6-2.149 3.108-5.167-2.043-5.063-8.64-7.408-2.2-2.473 6.793C165.282 849 166 851.573 166 855.683c0 4.135.46 5.767 2 7.085 1.244 1.065 2 2.95 2 4.985 0 2.423.579 3.53 2.229 4.26 1.341.594 2.639 2.464 3.258 4.695.567 2.04 1.589 4.268 2.271 4.95.683.683 1.242 1.982 1.242 2.887s.9 2.46 2 3.455c1.1.996 2 3 2 4.455s.551 3.196 1.225 3.87c.944.945.956 1.655.05 3.105-.956 1.533-.813 2.297.776 4.128l1.949 2.248v-2.249c0-1.236.761-3.537 1.691-5.111 1.359-2.3 1.465-3.314.542-5.155-.633-1.26-1.281-3.416-1.441-4.791-.167-1.426-.936-2.5-1.792-2.5-.825 0-2.091-1.575-2.814-3.5-1.923-5.121-1.926-6.54-.011-6.223.92.152 1.96-.186 2.309-.75 1.291-2.09 3.533-.922 5.01 2.612 1.068 2.558 1.212 4.01.482 4.89-.739.89-.488 2.22.87 4.611 3.02 5.319 4.43 12.447 2.933 14.842-1.037 1.661-.914 2.625.737 5.757 1.091 2.068 2.996 4.581 4.234 5.584 1.745 1.413 2.25 2.858 2.25 6.437v4.614L199 922c-1.65-1.58-3.007-3.577-3.015-4.437-.023-2.314-1.2-3.704-3.834-4.527-2.057-.642-2.266-.473-1.682 1.365 1.052 3.315-1.089 2.45-3.469-1.401-1.504-2.434-2.897-3.5-4.574-3.5-1.418 0-3.511-1.235-5.084-3-1.47-1.65-3.3-3-4.065-3-.766 0-3.28-1.956-5.585-4.346-4.024-4.171-5.469-6.263-10.45-15.133-1.243-2.211-3.718-5.294-5.5-6.85a690.682 690.682 0 01-5.337-4.705c-1.637-1.467-2.362-1.614-3.32-.671-.965.948-1.105.619-.656-1.545.314-1.512.788-3.808 1.053-5.101.7-3.421-.502-3.979-3.171-1.471-1.588 1.492-2.664 1.869-3.357 1.176-1.81-1.81.068-4.354 3.216-4.354 2.73 0 2.933-.248 2.643-3.227-.212-2.187-1.061-3.598-2.633-4.377-3.395-1.683-5.468-5.111-4.771-7.89.329-1.31.147-2.663-.405-3.004-1.894-1.17-1.003-4.116 1.529-5.059l2.533-.943-3.671-5.415c-2.982-4.4-3.752-6.554-4.102-11.484-.237-3.337-.789-6.3-1.227-6.584-.438-.284-1.112-1.53-1.499-2.767-.602-1.931-.338-2.25 1.866-2.25 1.578 0 2.567-.56 2.567-1.453 0-2.2-2.191-6.547-3.3-6.547-.539 0-1.535-.76-2.214-1.688-1.128-1.543-1.447-1.457-3.725 1-1.37 1.479-2.895 2.688-3.389 2.688-.494 0-1.342 1.013-1.885 2.25-1.696 3.865-3.95 2.77-4.299-2.087-.286-3.985-.144-4.284 1.75-3.683 1.6.508 2.062.22 2.062-1.29 0-1.07-.65-2.484-1.444-3.144-.795-.659-1.582-2.851-1.75-4.872-.278-3.335-.553-3.645-2.987-3.361-2.857.333-5.858-3.053-3.822-4.311 1.896-1.172.998-2.276-2.238-2.75-2.22-.327-3.602.02-4.391 1.098-.97 1.326-1.406 1.364-2.76.24-3.055-2.535-1.276-6.123 2.1-4.234 1.365.764 2.082.373 3.453-1.881 1.986-3.265 2.66-12.55 1.124-15.489-1.423-2.724-2.591-14.816-1.785-18.486 1.19-5.415 2.384-4.168 5.69 5.94.799 2.443 2.04 4.637 2.76 4.877 1.046.349 1.164-1.337.588-8.44-.395-4.883-1.128-9.304-1.628-9.827-1.434-1.497-1.061-4.55.555-4.55.805 0 1.987-1.012 2.625-2.25.638-1.237 2.454-3.462 4.035-4.944 2.432-2.279 2.875-3.472 2.875-7.75 0-2.78.402-5.056.893-5.056 1.455 0 2.219-2.977 3.205-12.5 1.456-14.06 3.857-28.679 6.264-38.138 1.749-6.87 6.266-17.315 8.154-18.854.68-.554 1.52-2.54 1.866-4.413.721-3.898 2.25-6.095 4.24-6.095 2.015 0 1.825 9.389-.254 12.56-1.518 2.317-1.51 2.626.114 4.42 1.454 1.607 1.562 2.456.644 5.09-1.292 3.706-.781 4.93 2.058 4.93 1.739 0 1.976-.452 1.495-2.855-.352-1.761.006-3.678.937-5.007.829-1.184 1.428-2.936 1.33-3.895-.732-7.217-.067-8.668 5.14-11.225 6.59-3.235 7.13-3.984 5.67-7.854-1.345-3.562-3.398-3.68-2.994-.172.21 1.834-.005 2.05-1.124 1.123-1.092-.906-1.735-.617-3.035 1.368-2.494 3.806-3.966 3.19-3.239-1.358.489-3.057.173-4.444-1.495-6.565l-2.116-2.689-2.836 3.314c-1.56 1.823-2.854 3.63-2.876 4.015-.023.385-1.391 2.7-3.041 5.145-1.65 2.445-3 4.926-3 5.515 0 .588-.9 1.551-2 2.14-1.529.818-2 2.094-2 5.413 0 2.831-.578 4.82-1.663 5.715-1.358 1.12-1.743 1.132-2.105.057-.243-.723-1.52-1.724-2.837-2.225-2.452-.932-3.197-3.346-1.38-4.47.646-.398.407-1.66-.651-3.451-1.499-2.537-1.553-4.277-.532-17.116.625-7.86 1.593-14.748 2.152-15.307.559-.559 1.016-2.024 1.016-3.257s.44-2.513.98-2.846c.604-.374.632-1.258.072-2.31-.498-.936-1.15-2.49-1.448-3.453-1.492-4.823-5.604 2.315-5.604 9.73 0 2.442-3.505 5.352-4.836 4.014-.365-.367-.742-4.566-.838-9.33-.281-14.002-.472-14.753-5.132-20.164-4.076-4.734-7.319-6.226-8.694-4-.905 1.464-2.5 1.22-2.5-.381 0-.76-1.688-2.654-3.75-4.209-2.063-1.555-3.9-3.183-4.083-3.619-.184-.435-1.136-.791-2.117-.791-1.56 0-1.849 1.28-2.311 10.25-.394 7.635-.197 10.6.77 11.618 2.546 2.683 3.786.197 3.174-6.36-.38-4.072-.185-6.606.568-7.36 1.752-1.751 2.749-1.379 2.749 1.03 0 1.232 1.41 3.354 3.25 4.892 3.044 2.543 3.147 2.833 1.633 4.572-.89 1.022-2.39 5.078-3.335 9.013-1.307 5.449-2.188 7.28-3.692 7.673-2.13.557-2.068 2.99.32 12.405.994 3.918.777 9.094-.777 18.525-.414 2.508-.084 4.886.99 7.15 1.882 3.966 2.018 5.785.543 7.26-.757.757-.739 2.882.063 7.302.996 5.493.926 6.46-.587 8.132-1.625 1.796-1.62 2.006.092 3.898.996 1.1 2.405 2 3.132 2 .727 0 2.059 1.125 2.96 2.5.9 1.375 2.261 2.5 3.023 2.5 1.593 0 1.915 4.554.389 5.498-.629.388-.444 1.684.5 3.51 3.42 6.615.957 13.434-4.034 11.16-2.747-1.251-3.022-2.31-1.312-5.05.904-1.447.794-2.969-.5-6.924-.912-2.788-1.658-6.196-1.658-7.573 0-2.712-1.477-4.277-2.49-2.637-1.31 2.12-4.463 1.052-5.122-1.734-.358-1.512-1.539-3.73-2.624-4.926-1.085-1.197-1.706-2.608-1.38-3.137.327-.528-.076-1.516-.895-2.196-2.627-2.18-1.759-3.991 1.912-3.991 3.273 0 3.399-.141 3.347-3.75-.034-2.357-.862-4.679-2.228-6.25-2.76-3.174-6.728-12.36-9.503-22-1.187-4.125-2.987-9.975-4-13-1.711-5.115-2.552-13.21-3.505-33.75-.346-7.437-.205-8.25 1.427-8.25.996 0 3.153-.268 4.794-.597 2.51-.502 3.077-.237 3.575 1.666.376 1.438-.138 3.288-1.408 5.072-1.526 2.143-1.842 3.653-1.331 6.374.5 2.665.233 4.047-1.06 5.474-1.633 1.805-1.634 2.206-.018 7.343 1.541 4.9 1.56 5.665.183 7.8-1.337 2.074-1.352 2.865-.115 6.368.776 2.2 1.432 4.9 1.458 6 .026 1.1.689 2.848 1.474 3.885s1.729 3.962 2.097 6.5c.369 2.538 1.906 7.366 3.417 10.73 2.915 6.489 5.015 8.942 4.256 4.972-.247-1.294.043-2.657.645-3.029 1.559-.963 1.353-6.157-.377-9.503-.81-1.565-1.783-4.79-2.163-7.166-.38-2.377-1.074-4.786-1.542-5.355-4.417-5.362-5.924-8.984-5.292-12.724.876-5.186 2.683-4.402 4.085 1.771 1.544 6.806 2.743 3.537 1.935-5.28-1.424-15.542-1.672-26.581-.621-27.632 2.142-2.142.96-11.113-1.595-12.094-1.067-.409-1.307-.058-.879 1.29.884 2.784-2.048 4.872-4.6 3.277-1.09-.68-2.816-.972-3.835-.649-1.02.324-2.196.034-2.615-.643-.436-.706-.205-1.417.541-1.666 2.082-.694 5.052-4.048 5.052-5.706 0-1.905-7.554-10.202-9.993-10.976-.994-.315-2.086-1.683-2.427-3.038-1.047-4.175-3.268-2.926-3.841 2.16-.884 7.843-4.993 7.888-6.264.068-1.325-8.154-4.587-16.152-8.05-19.734-1.884-1.948-3.39-4.423-3.346-5.5.057-1.412.229-1.54.616-.458.295.825 3.457 4.484 7.026 8.131 5.662 5.786 6.419 6.998 5.931 9.5-.307 1.578-.2 4.669.238 6.869l.797 4 1.275-4.75c1.44-5.362 4.29-6.485 6.142-2.42.584 1.281 3.725 4.692 6.979 7.58 5.71 5.065 5.917 5.422 5.917 10.17 0 3.707.37 4.92 1.5 4.92.933 0 1.5-.944 1.5-2.5 0-3.502 3.481-3.354 5.195.22.718 1.497 2.355 3.245 3.64 3.885 1.283.64 2.836 1.665 3.45 2.28.613.613 2.118 1.115 3.344 1.115 2.869 0 5.593 2.726 4.901 4.905-.447 1.408.027 1.628 2.81 1.303 2.924-.34 3.753.122 6.55 3.653 1.76 2.223 4.78 4.613 6.71 5.31 2.891 1.047 3.41 1.655 2.954 3.47-.515 2.05-.11 2.247 5.974 2.899 4.865.52 6.881 1.206 7.923 2.694.923 1.318 2.95 2.17 5.973 2.51 2.517.284 4.576.853 4.576 1.265 0 .934 4.67 2.8 8 3.194 1.715.204 2.95 1.317 3.93 3.547.787 1.787 1.786 3.25 2.22 3.25.435 0 3.25 1.125 6.256 2.5 3.006 1.375 6.282 2.507 7.28 2.515 2.395.02 3.459.838 6.207 4.772 1.648 2.359 2.817 3.122 4.14 2.702 1.275-.404 2.22.125 3.056 1.713 1.733 3.29 2.74 3.689 6.103 2.422 2.63-.991 3.198-.858 4.805 1.126 1.167 1.44 2.918 2.25 4.86 2.25 2.79 0 11.345 3.81 13.593 6.052.523.521 1.99.948 3.26.948 1.272 0 4.233.903 6.581 2.007 2.349 1.104 5.381 1.964 6.74 1.91 5.152-.2 12.682 1.816 16.502 4.42 3.551 2.42 4.005 2.518 4.333.933.2-.973.828-2.062 1.393-2.418 1.693-1.067 6.842 1.248 7.653 3.44.84 2.272.799 2.263 17.588 3.768 8.789.788 13.392.774 17.202-.053 3.442-.747 5.818-.8 7.022-.155 2.073 1.11 11.891 3.296 14.526 3.236a92.412 92.412 0 013.5 0c.963.022 3.879-.002 6.481-.054l4.731-.095-.606 3.03c-.724 3.62.664 3.947 4.371 1.03 2.762-2.172 6.047-2.415 18.453-1.367 7.225.611 7.523.74 8.69 3.75 1.17 3.021 1.252 3.056 2.635 1.118.785-1.1 1.879-2.53 2.431-3.176 1.276-1.494 24.317-1.172 26.236.366.73.586 2.34 1.376 3.578 1.755 1.238.38 2.25 1.11 2.25 1.622 0 .513 1.167.933 2.594.933 1.752 0 2.763-.649 3.116-2 .63-2.407 3.871-2.62 8.763-.576 2.966 1.24 3.565 1.235 4.621-.038.933-1.124 3.548-1.43 11.31-1.327 6.946.092 11.5-.36 14.596-1.448 8.21-2.886 13.93-1.976 14.116 2.246.091 2.08.22 2.216.603.643 1.133-4.652 3.338-5.757 10.469-5.25 3.678.26 7.109.053 7.623-.46.514-.515 2.454-.79 4.312-.613 3.127.299 3.4.607 3.692 4.155.259 3.143.618 3.707 2 3.136.927-.382 2.577-.949 3.667-1.259 2.16-.614 3.214-1.38 7.31-5.304 3.103-2.973 11.963-5.301 15.373-4.04 1.407.521 3.148.333 4.775-.517 3.225-1.683 11.768-1.717 15.06-.06 1.748.88 2.594 2.228 2.813 4.485.416 4.279 2.187 4.157 2.187-.15 0-4.324 1.264-5.257 7.954-5.87 4.968-.454 5.703-.25 8.25 2.297 1.538 1.538 2.796 3.554 2.796 4.48 0 1.212.491 1.482 1.75.963a40.638 40.638 0 013.5-1.223c.963-.277 1.75-1.281 1.75-2.232 0-2.74 3.558-5.366 6.329-4.67 1.745.438 3.157-.089 5.123-1.912 2.277-2.11 3.307-2.406 6.382-1.835 4.183.777 7.742 2.832 8.55 4.939.825 2.15 4.099 1.742 7.29-.907 2.172-1.804 3.68-2.243 6.519-1.897 2.994.364 4.185-.043 6.295-2.153 1.432-1.432 3.413-2.603 4.402-2.603 1.93 0 4.418 2.407 5.427 5.25.933 2.633 1.974 2.135 4.19-2.003 1.366-2.55 2.707-3.757 4.197-3.777 1.204-.017 2.513-.354 2.91-.75 1.624-1.625 4.429-.538 5.886 2.28.853 1.65 1.905 3 2.338 3 .432 0 1.784-1.35 3.004-3 1.427-1.93 3.102-3 4.696-3 2.218 0 2.35.208 1.246 1.975-.985 1.577-.974 2.232.058 3.25 1.05 1.036 1.848.656 4.26-2.031 2.188-2.436 3.5-3.138 4.982-2.667 1.107.35 2.625.13 3.375-.493.937-.778 1.565-.804 2.011-.083 1.254 2.029 4.667 1.013 8.233-2.451 3.716-3.608 7.83-4.567 10.055-2.342.876.876 1.497.876 2.556-.004.821-.681 2.7-.902 4.543-.533 2.999.6 3.143.482 3.143-2.563 0-2.891.258-3.162 2.75-2.875 2.388.275 2.79.81 3.06 4.067.21 2.537.798 3.75 1.818 3.75 2.574 0 9.334-6.31 9.354-8.731.012-1.538.794-2.426 2.516-2.858 3.985-1 5.55.122 5.26 3.771-.417 5.236 2.556 4.85 8.438-1.094 2.77-2.798 5.771-5.097 6.67-5.107.899-.01 5.438-1.585 10.087-3.5 4.65-1.915 9.207-3.481 10.128-3.481.92 0 2.196-.629 2.834-1.397 1.915-2.308 11.024-4.899 12.606-3.586 1.014.841 1.793.706 3.162-.549 3.145-2.882 12.478-9.468 13.417-9.468.495 0 .9.45.9 1s.916 1 2.035 1c1.702 0 1.866-.317 1-1.935-.57-1.063-1.035-2.127-1.035-2.362 0-.407 5.482-2.13 14.634-4.598 3.236-.874 5.027-2.3 8.25-6.567 2.264-2.999 4.116-5.649 4.116-5.89 0-1.372 6.102-6.648 7.689-6.648 2.79 0 11.544-9.228 10.741-11.322-.86-2.242 1.45-2.19 3.217.072 1.26 1.613 1.713 1.378 5.773-3 2.423-2.612 5.106-4.75 5.964-4.75.923 0 1.894-1.325 2.381-3.25.538-2.125 1.847-3.77 3.779-4.754 5.734-2.917 20.539-14.847 25.85-20.83 1.628-1.833 4.18-5.641 5.673-8.463 3.16-5.975 4.517-6.742 6.618-3.742l1.528 2.18 1.48-2.113c1.241-1.772 1.265-2.374.144-3.724-.76-.914-1.385-4.244-1.447-7.707-.061-3.353-.427-7.528-.815-9.277-.594-2.689-.345-3.372 1.61-4.414 2.004-1.068 2.152-1.036 1.102.238-1.83 2.22-.987 11.695 1.518 17.051 2.586 5.531 2.725 7.418.697 9.446-1.19 1.19-1.262 1.946-.35 3.678.63 1.2 1.456 2.406 1.833 2.681.377.275 1.138 1.328 1.691 2.34 1.278 2.342-.43 10.352-2.366 11.095-2.228.855-3.66-4.276-2.387-8.551 1.406-4.722 1.358-5.884-.243-5.884-.725 0-2.289-1.115-3.474-2.478-2.7-3.105-4.7-2.433-7.169 2.405-2.792 5.473-24.083 25.066-28.827 26.528-1.408.434-2.895 2.216-3.86 4.628-.863 2.158-3.378 5.355-5.588 7.106-5.555 4.4-8.94 12.811-5.155 12.811 1.149 0 1.394.499.859 1.75-1.588 3.712-1.624 7.186-.098 9.365 1.163 1.66 1.289 2.594.481 3.567-1.343 1.618-2.849 1.715-2.849.183 0-.625-1.125-2.178-2.5-3.453-3.055-2.831-3.4-9.072-.75-13.582 1.678-2.855 1.673-3.035-.106-4.342-1.677-1.232-2.323-.828-6.73 4.207-5.501 6.287-6.837 10.588-4.638 14.934.8 1.579 1.761 6.396 2.138 10.704.609 6.968.502 7.796-.969 7.5-.91-.183-3.069-2.29-4.8-4.681-3.123-4.318-3.185-4.61-3.601-16.952-.075-2.228-2.588-.036-7.559 6.592-4.472 5.965-4.63 6.39-3.036 8.151 1.245 1.377 1.37 2.05.484 2.598-.68.42-1.58.055-2.085-.848-.793-1.417-1.614-1.316-7.618.94-3.702 1.39-7.44 3.166-8.309 3.947-.868.781-2.351 1.42-3.295 1.42-3.363 0-6.41 4.42-7.154 10.379-.388 3.106-1.103 5.893-1.589 6.193-.486.3-.883 1.43-.883 2.508 0 1.145-1.087 2.458-2.61 3.152-2.232 1.017-2.806.92-3.972-.675-1.164-1.591-1.449-1.64-1.95-.336-.322.84-.447 3.225-.277 5.298.367 4.482-1.209 5.463-4.11 2.561-1.663-1.662-1.861-2.527-1.063-4.627.54-1.42.982-4.608.982-7.084 0-2.475.486-5.41 1.081-6.52.595-1.111.85-2.252.567-2.534-1.115-1.116-7.578 1.93-9.133 4.302-1.151 1.757-2.006 2.222-2.832 1.54-1.087-.898-7.862.688-9.367 2.193-.294.294.415 1.868 1.575 3.497 2.432 3.415 2.62 4.733.835 5.853-.7.44-2.079 2.065-3.063 3.61-1.358 2.135-2.434 2.736-4.476 2.5-2.47-.285-2.687-.671-2.687-4.796 0-3.615.37-4.558 1.903-4.853 1.046-.202 2.306.355 2.8 1.236.996 1.781 3.797 2.194 3.797.56 0-.575-1.038-2.163-2.306-3.53-2.27-2.45-2.366-2.462-6.25-.853-5.94 2.462-7.665 4.729-6.862 9.012.78 4.16-.875 7.996-3.78 8.755-2.962.775-2.11 6.045 1.049 6.492 1.982.28 2.257.751 1.756 3-1.963 8.806-1.88 11.88.407 14.972 2.107 2.85 2.415 2.96 4.487 1.603 2.083-1.365 2.39-1.239 4.861 2 3.3 4.328 3.306 5.386.033 6.208-2.058.516-3.055.101-4.75-1.977-2.368-2.903-3.572-2.535-5.415 1.658-1.644 3.739-1.551 5.703.27 5.703 2.059 0 1.883 1.615-.347 3.193-2.25 1.592-4.577 8.259-3.69 10.57.51 1.33 1.104.87 2.84-2.195 2.7-4.764 5.155-6.51 6.818-4.847.902.902.41 2.05-2.106 4.915l-3.283 3.739 2.832 2.258c2.625 2.093 2.732 2.445 1.47 4.804-1.093 2.043-1.122 3.073-.147 5.214 1.426 3.13.307 4.309-4.116 4.334-1.686.009-5.412 1.973-9.75 5.138-6.297 4.595-7.021 5.47-7.021 8.5 0 1.857.45 3.377 1 3.377s1.337-.009 1.75-.02c.412-.01.75-1.014.75-2.23 0-2.916 3.047-3.465 4.47-.806.947 1.77.743 2.23-1.432 3.22-3.555 1.62-3.564 5.836-.013 5.836 2.006 0 2.648-.617 3.125-3 .842-4.21 3.606-4.033 3.175.204-.276 2.718.054 3.293 2.175 3.79 1.54.362 2.618 1.404 2.808 2.71.298 2.049.023 2.106-7.75 1.628-7.468-.46-8.058-.354-8.058 1.436 0 1.063 1.35 3.796 3 6.073 1.65 2.278 3 4.37 3 4.65 0 .28-1.35.509-3 .509-3.481 0-3.779 1.428-1.04 4.993 1.688 2.198 2.25 2.366 4.748 1.423 1.558-.588 3.386-.885 4.062-.66 2.525.842 1.098 2.967-2.77 4.126-4.472 1.34-4.773 1.831-2.25 3.68 1.652 1.21 1.633 1.44-.35 4.11-1.674 2.252-3.014 2.889-6.588 3.126-5.719.38-8.065-1.745-4.91-4.447 1.635-1.399 1.937-2.507 1.473-5.404-.39-2.44-.026-4.721 1.1-6.898 1.6-3.096 1.59-3.357-.234-5.401-3.033-3.4-4.634-12.379-3.861-21.649.66-7.92.63-8.075-1.352-7.014-1.514.81-2.028 2.09-2.028 5.05 0 2.18-.45 3.965-1 3.965s-1-.873-1-1.941-.45-2.22-1-2.559c-1.734-1.072-1.102-3.787 2.56-11 8.365-16.478 9.387-19.782 9.22-29.814-.14-8.33.085-9.585 2.236-12.494 2.292-3.1 2.323-3.349.735-6.037-.913-1.545-1.402-3.772-1.09-4.964.31-1.189.292-2.87-.04-3.737-.544-1.417-.903-1.4-3.547.162-2.225 1.314-3.274 1.463-4.3.612-1.042-.865-1.63-.69-2.533.757-.67 1.073-2.589 2.02-4.458 2.2-2.141.205-3.183.79-2.994 1.681.159.752-.325 2.327-1.076 3.5-1.365 2.136-3.117 8.244-4.136 14.422-.388 2.355-.122 3.45.94 3.857.816.313 1.483 1.635 1.483 2.937 0 2.122.264 2.268 2.536 1.404 2.797-1.063 4.218.607 3.067 3.605-.335.875.108 3.105.986 4.955 1.325 2.792 1.393 3.978.404 6.975-.655 1.986-.968 4.465-.696 5.508.273 1.044-.132 2.42-.9 3.057-1.506 1.25-1.547 1.164-1.968-4.086-.587-7.333-1.15-10.121-2.27-11.242-.638-.637-1.159-2.118-1.159-3.291 0-4.686-3.37-3.908-5.537 1.276-1.916 4.585-1.889 4.742 1.037 6.075 1.375.627 2.5 1.833 2.5 2.682s-1.125 2.055-2.5 2.682c-3.093 1.41-3.423 5.343-.512 6.105 1.093.286 2.507 1.8 3.142 3.366 1.891 4.664 3.643 18.418 2.815 22.091-1.371 6.079 1.46 12.256 5.618 12.256 1.276 0 2.556.383 2.845.85.5.811-3.715 2.391-9.658 3.62-1.512.312-2.75 1.062-2.75 1.666 0 .603.884.866 1.965.583 2.198-.574 3.502 1.901 2.448 4.648-.348.907.065 2.713.917 4.014.853 1.301 1.69 4.56 1.86 7.242.28 4.41.525 4.847 2.56 4.564 1.238-.172 2.25.166 2.25.75 0 .585-.905 1.063-2.012 1.063-1.79 0-1.948.468-1.437 4.25.316 2.338.78 5.263 1.031 6.5.491 2.424-.635 2.827-3.547 1.269-1.32-.707-2.03-2.67-2.533-7.002-.683-5.88-1.746-8.049-2.974-6.062-.709 1.147-9.204 5.045-10.995 5.045-.666 0-1.725-1.125-2.351-2.5-.627-1.375-1.824-2.5-2.66-2.5-.837 0-1.522.17-1.522.378 0 1.308 3.424 8.248 4.362 8.842.839.53.803 1.259-.135 2.772-1.064 1.718-1.022 2.15.258 2.64.931.358 3.092-.824 5.525-3.022 2.198-1.986 4.643-3.61 5.434-3.61 3.672 0 2.843 5.639-.97 6.596-3.07.77-4.674 2.72-3.899 4.74.946 2.464 4.314 3.075 6.425 1.164 1.81-1.638 6-1.337 6 .432 0 .438-2.186 3.017-4.857 5.73-2.671 2.714-5.413 5.974-6.093 7.244-1.786 3.337-3.179 1.356-3.924-5.58C681.67 798.592 681.09 797 680 797c-1.041 0-1.592 1.257-1.8 4.112-.22 3.008-1.095 4.871-3.257 6.943-3.495 3.348-4.914 2.56-5.86-3.254-.87-5.355-3.576-5.206-3.602.199-.01 2.2-.318 4.471-.684 5.048-.756 1.19.474 3.633 1.815 3.603.488-.011.756.626.594 1.415-.21 1.024.687 1.434 3.135 1.434 2.542 0 3.847-.638 5.046-2.468.937-1.43 2.214-2.239 3.038-1.923 2.391.918 2.736 3.586.748 5.796-1.037 1.152-2.732 3.576-3.769 5.386-1.036 1.81-2.9 3.547-4.144 3.859-2.572.645-2.59.713-1.335 5.088.73 2.547.56 3.676-.807 5.365-1.628 2.01-1.835 2.037-3.425.447-1.948-1.948-2.222-5.621-.544-7.299.865-.865.725-1.794-.564-3.762-2.063-3.148-4.187-2.742-3.818.73.146 1.38-.416 3.075-1.25 3.767-2.135 1.772-1.884 4.526.56 6.149 2.683 1.781 3.142 7.624.721 9.192-2.192 1.42-3.461.177-1.829-1.79 2.175-2.62.55-4.212-4.376-4.287-4.206-.063-4.593.134-4.593 2.34 0 1.476.582 2.41 1.5 2.41.825 0 1.5.45 1.5 1s-.699 1-1.553 1c-1.992 0-8.447 5.122-8.447 6.703 0 .662-1.8 2.65-4 4.417-4.05 3.255-5.193 5.88-2.559 5.88.793 0 1.72-.45 2.059-1 .34-.55 1.575-1 2.745-1 1.17 0 3.204-1.012 4.521-2.25 2.111-1.983 2.534-2.068 3.565-.714.643.845 1.956 1.375 2.919 1.177 3.607-.741 1.975 2.921-3.398 7.626-2.56 2.241-2.754 2.263-5.865.654-4.03-2.084-5.355-.928-3.765 3.285 1.764 4.673-.01 6.17-4.674 3.946-2.112-1.007-3.708-1.275-4.074-.683-.33.535.103 1.243.963 1.573 2.257.866 1.93 3.039-1.048 6.942-2.784 3.65-2.612 6.74.348 6.24 1.232-.207 2.428 1.059 3.972 4.204 2.63 5.359 2.872 8.563.71 9.393-2.466.946-2.676.768-2.049-1.731.333-1.327-.022-3.166-.82-4.25-1.38-1.875-1.42-1.874-2.052.088-.354 1.1-1.286 3.477-2.071 5.284-2.74 6.306-1.883 7.269 4.211 4.722 1.966-.821 4.043-1.203 4.616-.85 1.243.769-12.808 14.344-14.847 14.344-2.234 0-1.672-4.702.766-6.409 1.839-1.288 1.93-1.615.591-2.128-3.097-1.189-4.181-6.031-2.749-12.272.719-3.13 1.63-6.064 2.023-6.519.394-.455.347-2.465-.104-4.467-.597-2.645-.389-4.553.762-6.977 1.18-2.488 1.43-4.975.981-9.782-.626-6.707-.226-7.346 3.389-5.411 2.668 1.428 2.621-1.103-.066-3.535-1.1-.996-2-2.625-2-3.62 0-.996-1.35-3.348-3-5.227-1.65-1.88-3-3.717-3-4.083 0-1.09 5.395-5.505 6.77-5.539.877-.022 1.068.817.62 2.719-.514 2.182-.389 2.507.61 1.571.964-.904 1.702-.904 3.173 0 1.606.988 2.191.815 3.621-1.076 1.895-2.504 4.301-8.412 6.209-15.245 2.284-8.181 4.374-13.49 5.613-14.255 1.189-.733 7.384-12.63 7.384-14.178 0-.426 2.285-3.509 5.078-6.851 4.307-5.155 4.996-6.542 4.545-9.146-.777-4.48 1.525-14.07 3.377-14.07 1.053 0 1.41-.848 1.197-2.845-.166-1.565.415-3.94 1.292-5.279 1.633-2.492 1.2-4.92-.67-3.764-2.595 1.603-3.83-5.528-1.319-7.612 1.641-1.362 2.007-7.651.577-9.91-.815-1.288-.549-2.263 1.828-6.7.327-.61 1.446-2.316 2.487-3.791 2.638-3.74.953-7.6-3.318-7.6-2.876 0-2.979.165-3.272 5.241-.25 4.343-.645 5.295-2.302 5.559-4.392.698-4.722 1.046-3.137 3.308 1.926 2.75 1.237 4.34-2.952 6.813-2.663 1.57-3.411 2.663-3.411 4.98 0 2.493-.439 3.017-2.75 3.283-3.498.403-4.46 4.298-1.308 5.298 3.466 1.1 2.498 3.519-1.409 3.519-2.653 0-4.32-.854-7.105-3.639-2.87-2.87-3.827-3.345-4.532-2.25-1.36 2.112-.604 4.323 1.616 4.73 2.51.46 5.488 3.059 5.488 4.788 0 .726-1.35 2.018-3 2.87-5.27 2.726-4.05 3.792 4.5 3.934 3.533.059 3.972.329 3.762 2.313-.13 1.236.656 3.71 1.747 5.5 2.379 3.902 2.536 6.33.46 7.127-1.025.394-1.913-.313-2.693-2.143-1.885-4.427-3.901-6.23-6.965-6.23-2.23 0-3.344-.79-4.943-3.5-2.385-4.042-3.606-4.383-4.737-1.324l-.806 2.176-.569-2.176c-.313-1.197-1.342-2.176-2.287-2.176-1.397 0-1.6.594-1.085 3.168.348 1.743.917 6.224 1.265 9.96l.63 6.791 4.496.674c3.44.516 4.69.328 5.32-.8 1.902-3.396 4.652-6.068 5.628-5.465 1.522.941 2.546 9.224 1.403 11.354-.536 1-1.66 3.678-2.496 5.951-1.314 3.573-1.329 4.387-.107 6 1.916 2.53 1.883 6.367-.054 6.367-.843 0-1.797.787-2.12 1.75-2.086 6.193-4.68 10.25-6.555 10.25-1.695 0-1.925-.45-1.406-2.75.342-1.513.911-5.149 1.265-8.08.517-4.28 1.198-5.74 3.46-7.412l2.817-2.082-2.567-1.332c-1.412-.732-3.646-1.06-4.965-.73-3.53.887-3.028-1.55.602-2.92 3.332-1.258 4.073-4.559 1.502-6.692-1.252-1.04-1.702-.755-2.752 1.74-1.063 2.528-1.599 2.858-3.502 2.154-1.819-.673-2.248-.48-2.248 1.014 0 1.014-.675 2.405-1.5 3.09-2.112 1.753-1.864 4.092.5 4.71 2.32.606 2.642 3.512.58 5.223-1.113.924-1.61.834-2.31-.416-.802-1.432-1.057-1.41-2.536.224-2.263 2.5-4.54 11.961-3.977 16.523.256 2.07.025 4.32-.514 5-.538.68-1.72 3.51-2.626 6.291-1.708 5.24-1.085 9.744 1.86 13.445 2.959 3.718 3.93 8.71 3.93 20.195 0 12.464-.868 15.327-3.889 12.82-.861-.715-1.845-1.022-2.185-.681-.34.34-1.248 4.262-2.017 8.716l-1.399 8.097 2.542 1.999c3.141 2.47 3.25 5.133.291 7.123l-2.25 1.513 2.75 1.27c3.414 1.575 3.442 2.616.16 6.041-2.247 2.346-2.43 3-1.385 4.953 1.15 2.148 1.065 2.222-1.867 1.635-2.631-.526-3.385-.171-5.274 2.481-1.774 2.492-1.981 3.452-1.064 4.92 1.411 2.26-.134 3.449-1.83 1.407-.679-.82-1.776-1.49-2.438-1.49-1.514 0-5.552 4.23-5.552 5.815 0 1.41-1.922 1.52-3.966.228-2.375-1.502-3.884.62-3.378 4.747.355 2.892-.087 4.371-2.001 6.705-2.402 2.928-2.502 2.954-4.484 1.16-1.317-1.191-2.756-1.604-4.104-1.176-1.41.448-2.27.156-2.679-.91-.851-2.218-3.388-1.953-3.388.355 0 1.057-1.35 3.272-2.999 4.921-3.488 3.489-3.168 5.28 1.294 7.245 2.768 1.218 3.246 1.977 3.508 5.558.327 4.494 3.057 6.431 5.283 3.75.637-.769 2.15-1.397 3.363-1.397 1.892 0 2.14.435 1.754 3.072-.298 2.03-1.224 3.365-2.73 3.938-1.253.476-2.574 1.344-2.935 1.928-.36.584-1.512 1.062-2.558 1.062-1.374 0-2.202-1.113-2.98-4-.949-3.524-1.43-4-4.038-4-3.353 0-3.919 2.15-1.43 5.44.807 1.068 1.468 2.475 1.468 3.128 0 1.604-9.124 5.432-12.947 5.432-3.027 0-3.066-.064-2.44-3.985.895-5.591-1.436-9.015-6.136-9.015-1.912 0-3.477-.486-3.477-1.08 0-.671 1.098-.838 2.905-.441 3.185.7 4.452-.386 3.463-2.964-.54-1.408-1.43-1.54-5.754-.857-2.813.445-7.202.71-9.755.591-5.2-.243-7.096 1.18-7.258 5.451-.142 3.711-1.847 3.845-3.936.31-1.41-2.388-2.466-3.01-5.106-3.01-2.395 0-3.763-.663-4.876-2.362-.851-1.299-2.928-2.637-4.615-2.975-2.346-.469-3.068-1.15-3.068-2.89 0-3.289-7.871-7.448-10.963-5.793-2.694 1.442-2.161 3.412 1.041 3.855 3.07.424 7.922 4.955 7.922 7.397 0 1.022 1.125 2.984 2.5 4.359 2.448 2.447 3.478 5.13 1.5 3.909-1.5-.928-2.99.36-2.35 2.032.67 1.744 6.524 1.98 9.509.383 1.115-.597 3.11-.814 4.434-.481 3.47.87 3.1 4.51-.843 8.29-2.658 2.548-4.343 3.224-9.25 3.71-3.3.328-8.536.865-11.636 1.195-5.025.534-5.891.343-8-1.765zm-28.573-5.037c1.077.893 2.72.946 6.332.201 2.682-.553 7.127-1.18 9.877-1.396 4.748-.37 5-.535 5-3.261 0-2.258-.505-2.943-2.365-3.206-1.301-.184-2.854.154-3.45.75-1.33 1.33-8.346 1.442-9.148.145-.344-.557-1.974-.358-4.005.491-2.053.858-3.66 1.052-4.01.484-1.26-2.039-3.522.26-3.522 3.58 0 3.104.168 3.297 1.919 2.204 1.492-.932 2.242-.93 3.372.01zm42.58-3.91c-.827-.515-1.519-.423-1.743.23-.204.597.246 1.468 1 1.937.828.514 1.52.422 1.744-.232.204-.596-.246-1.467-1-1.936zM406 984.19c0-.55-.9-.185-2 .81-1.1.996-2 2.26-2 2.81 0 .55.9.185 2-.81 1.1-.996 2-2.26 2-2.81zm-14.553-3.01c-.823-3.838-1.274-4.68-2.506-4.68-.518 0-.941 1.035-.941 2.3s-.52 2.82-1.158 3.458c-1.904 1.904.826 4.49 3.327 3.151 1.577-.843 1.826-1.669 1.278-4.229zM563 984.942c0-.858-.45-1.28-1-.941-.55.34-1 1.042-1 1.559 0 .518.45.941 1 .941s1-.702 1-1.559zm-197.517-3.067c2.272-2.272 1.614-6.874-.983-6.874-1.638 0-2.056.77-2.308 4.25-.326 4.509.638 5.277 3.29 2.624zM345 978.927c0-.932-.68-1.442-1.667-1.25-2.509.486-2.853 2.823-.416 2.823 1.228 0 2.083-.646 2.083-1.573zm211.305-.485c.401-1.535.116-1.977-1.122-1.739-2.092.403-2.872 3.797-.873 3.797.801 0 1.699-.926 1.995-2.058zm6.92 1.5c.944-.944-.384-4.442-1.687-4.442-.675 0-2 .853-2.944 1.896-1.334 1.474-1.424 2.014-.405 2.421 1.82.73 4.368.792 5.036.125zm-158.575-3.608c1.417-1.565 1.507-2.12.45-2.772-2.602-1.609-8.766 1.761-7.804 4.266.733 1.912 5.07 1.03 7.354-1.494zm18.147-1.096c.194-.955-.82-1.693-2.893-2.107-3.32-.664-5.904.61-5.904 2.91 0 1.901 8.405 1.135 8.797-.803zm-82.256.195c1.173-1.897-.538-2.365-2.28-.624-1.558 1.56-1.56 1.691-.034 1.691.91 0 1.952-.48 2.314-1.067zM476 970c0-5.144-1.055-6.202-3.494-3.506-1.663 1.837-1.667 2.146-.076 5.5 2.125 4.478 3.57 3.671 3.57-1.994zm-40.344 1.95c3.95-3.015 4.34-4.873.88-4.212-1.811.346-3.14-.286-5.008-2.383-2.639-2.962-5.875-3.72-7.14-1.674-.426.69.174 1.78 1.441 2.622 1.37.909 2.171 2.477 2.171 4.246 0 1.83.608 2.963 1.75 3.262.963.251 1.933.51 2.156.573.223.064 1.91-1.032 3.75-2.435zm121.397-1.014c1.663-2.004-.304-6.436-2.857-6.436-2.386 0-6.608 4.483-5.917 6.284.732 1.908 7.223 2.021 8.774.152zM366 970.56c0-1.18-1.95-2.442-2.667-1.726-.716.717.546 2.667 1.726 2.667a.944.944 0 00.941-.941zm148.37-.914c1.013-1.12 1.41-2.556 1-3.622-.613-1.598-.852-1.54-2.502.605-3.201 4.163-1.901 6.776 1.501 3.017zm-26.23-3.77c2.572-2.33.755-5.375-3.207-5.375-3.696 0-4.82 2.361-2.4 5.037 2.161 2.387 3.267 2.454 5.606.337zM533.5 965c0-1.085-.787-2.124-1.75-2.31-1.31-.252-1.75.328-1.75 2.31s.44 2.562 1.75 2.31c.963-.186 1.75-1.225 1.75-2.31zm-79.5-1.5c0-1.1-.45-2-1-2s-1 .9-1 2 .45 2 1 2 1-.9 1-2zm-14.4-2.6c-.484-1.261-.966-1.434-1.766-.634-.605.605-.8 1.88-.434 2.834.484 1.261.966 1.434 1.766.634.605-.605.8-1.88.434-2.834zm98.4 1.631c0-1.339-.48-1.784-1.5-1.393-1.604.616-1.913 1.615-.833 2.695 1.26 1.262 2.333.663 2.333-1.302zm-75.08-5.62c-.781-.936-1.899-2.863-2.484-4.282l-1.064-2.58-1.598 3.203c-1.597 3.2-1.395 6.589.54 9.055.815 1.038 1.541.792 3.526-1.192 2.206-2.206 2.333-2.701 1.08-4.203zm-73.656 4.991c.974-.973-.363-3.402-1.871-3.402-.766 0-1.393.6-1.393 1.333 0 2.215 1.909 3.425 3.264 2.07zm-105.847-2.759c-.628-1.635-5.417-2.374-5.417-.836 0 .732 5.124 3.094 5.774 2.662.15-.1-.01-.922-.357-1.826zM547 955.932c0-2-3.032-1.747-5.95.496-2.084 1.601-2.255 2.12-1.138 3.466 1.188 1.431 1.588 1.386 4.2-.474 1.589-1.13 2.888-2.7 2.888-3.488zm-189.563-2.177c1.197-.903 2.99-2.719 3.982-4.036 2.467-3.27.927-4.685-3.706-3.406-2.437.673-3.864.636-4.62-.12-1.577-1.577-1.344-3.693.407-3.693.825 0 1.5-.675 1.5-1.5s-.188-1.5-.418-1.5c-.23 0-1.13-.273-2-.607-1.067-.41-1.582-.044-1.582 1.122 0 1.401-.277 1.5-1.456.521-2.151-1.785-3.544-.378-3.544 3.582 0 1.925.41 3.247.91 2.938 2.993-1.85 5.598 3.536 2.977 6.157-.612.612-.788 1.638-.39 2.28.88 1.426 4.917.542 7.94-1.738zm-16.13-.348c.601.601 2.138 1.093 3.416 1.093 2.234 0 2.262-.093.721-2.445-1.316-2.008-2.021-2.286-3.946-1.554-1.688.642-2.679.486-3.543-.555-1.548-1.865-3.385-1.838-4.97.073-1.032 1.243-.934 1.88.54 3.508 1.683 1.86 1.96 1.885 4.245.388 1.768-1.158 2.746-1.299 3.537-.508zm32.797-.203c-1.284-1.284-2.585-.292-1.635 1.246.368.595 1.127.8 1.687.453.683-.422.666-.981-.052-1.7zm154.314-1.311c.91-.35 1.582-1.77 1.582-3.346 0-3.386-2.825-9.273-4.078-8.499-1.262.78-1.161 3.813.17 5.145.79.79.79 1.657 0 3.134-2.008 3.753-1.238 4.934 2.326 3.566zm22.082-.393c-.34-.55-1.266-1-2.059-1-.793 0-1.441.45-1.441 1s.927 1 2.059 1c1.132 0 1.78-.45 1.441-1zm32.565-1.121c1.633-3.052.297-12.879-1.75-12.879-1.176 0-1.423.772-1.042 3.25.322 2.085-.039 3.863-1.005 4.96-1.8 2.043-.95 6.79 1.216 6.79.795 0 1.956-.955 2.58-2.121zM330 950c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm47.854-2.824c1.204-1.45.03-6.676-1.5-6.676-2.896 0-5.79 7.23-3.723 9.298.765.764 3.59-.654 5.223-2.622zm194.435 1.325c.288-1.1.047-2.293-.535-2.653-1.221-.755-3.951 2.524-3.163 3.8.965 1.561 3.169.878 3.698-1.147zm-114.12-6.051c-.391-1.699-.363-2.41.447-11.24.517-5.648.328-7.115-1.13-8.726-2.494-2.756-3.527-1.561-2.861 3.31.49 3.59.193 4.617-2.03 7.012-3.005 3.239-4.595 2.795-4.595-1.283 0-6.63-2.53-7.91-5.336-2.698-1.216 2.258-1.565 4.223-1.087 6.126.689 2.745.819 2.79 6.452 2.28l5.749-.521.634 3.964c.49 3.068 1.024 3.878 2.36 3.586.95-.208 1.58-1.023 1.398-1.81zM307 942.035c0-1.457-2.9-3.535-4.934-3.535-1.435 0-1.353 2.313.134 3.8 1.674 1.674 4.8 1.501 4.8-.265zm255.74.215c.541-.688 1.28-2.487 1.641-4 .862-3.61-1.598-3.764-3.22-.203-2.035 4.466-.935 7.395 1.579 4.203zm-9.74-1.128c0-.757-.694-1.953-1.542-2.657-1.901-1.578-4.03.104-3.122 2.468.74 1.93 4.664 2.09 4.664.19zm-170.184-3.95c.175-1.47 1.187-3.138 2.25-3.708 2.355-1.26 2.484-3.263.326-5.054-1.367-1.134-1.819-1.047-3.01.582-1.288 1.762-1.532 1.787-3.01.308-1.48-1.48-1.468-1.981.145-6.205 1.52-3.982 2.137-4.595 4.619-4.595 2.143 0 2.864-.476 2.864-1.893 0-2.293-1.799-3.108-4.5-2.039-1.1.435-3.09.823-4.421.862-5.36.155-7.458 4.979-4.64 10.666a122.3 122.3 0 012.497 5.404c.583 1.375 1.478 3.175 1.99 4 .511.825 1.187 2.325 1.502 3.333.812 2.598 3.012 1.52 3.388-1.66zm210.791-1.54c2.691-2.676 5.938-5.192 7.215-5.59 1.382-.43 2.114-1.268 1.806-2.069-.284-.74.374-2.477 1.462-3.86 1.363-1.733 2.113-4.553 2.41-9.064.395-5.991.265-6.549-1.534-6.549-1.26 0-1.966.677-1.966 1.886 0 1.037-.672 3.174-1.494 4.75-.821 1.575-1.496 3.84-1.5 5.032-.012 4.208-1.063 5.332-4.99 5.332-2.153 0-4.312.652-5.031 1.518-3.643 4.39-11.985 5.449-11.985 1.522 0-1.93 1.873-3.04 5.131-3.04 1.083 0 3.296-.687 4.919-1.526 2.643-1.367 2.95-2.023 2.95-6.309 0-2.63.563-5.463 1.25-6.294 2.21-2.672 6.596-4.871 9.715-4.871 3 0 4.242-2.136 2.036-3.5-1.31-.81-.793-12.824.63-14.614.605-.762 1.35-2.061 1.656-2.886.305-.825.59-.023.634 1.781.048 1.974.692 3.517 1.616 3.872 1.853.71 5.463-2.32 5.463-4.586 0-.892.608-2.51 1.35-3.595.744-1.084 1.637-4.126 1.987-6.759.497-3.747.31-4.912-.864-5.362-2.077-.797-4.331 1.322-5.273 4.957-1 3.858-3.2 4.776-3.2 1.334 0-3.217-1.75-4.32-3.724-2.347-1.254 1.255-1.327 2.12-.4 4.78.623 1.787 1.018 3.312.879 3.39-.14.077-1.605 1.009-3.255 2.07-4.764 3.065-7.622 4.465-9.114 4.465-2.522 0-1.633 4.93 1.114 6.182 1.375.626 2.5 1.502 2.5 1.945 0 1.298-6.377 7.873-7.636 7.873-1.524 0-2.353-2.326-1.708-4.79.807-3.09-.948-3.315-4.453-.571-4.08 3.192-4.31 7.253-.608 10.686 2.524 2.34 2.55 2.493.974 5.54-1.007 1.949-2.387 3.135-3.647 3.135-2.34 0-9.903 4.085-9.914 5.356-.004.47 1.117 1.741 2.492 2.823 1.665 1.31 2.5 2.959 2.5 4.939 0 2.84.153 2.944 3.401 2.334 2.994-.561 3.676-.267 5.689 2.455 1.257 1.701 3.037 3.093 3.955 3.093.918 0 3.871-2.19 6.562-4.867zm-7.263-1.624c1.145-2.47 2.656-3.368 2.656-1.58 0 .868-2.737 4.072-3.477 4.072-.184 0 .185-1.121.821-2.492zm-.656-13.154c-1.158-1.158-.766-4.865.73-6.912 1.368-1.87 1.443-1.843 2.09.73 1.127 4.493-.639 8.364-2.82 6.182zM358.86 938.168c1.563-1.883-1.185-5.7-2.893-4.019-1.212 1.194-.453 5.351.977 5.351.446 0 1.308-.6 1.916-1.332zm208.525-4.231c.725-1.89-4.972-7.437-7.64-7.437-2.966 0-3.347 3.026-.652 5.176 2.287 1.826 5.657 3.623 7.049 3.76.354.036.913-.64 1.243-1.499zm-232.561-2.775c.192-1.68-.382-3.62-1.405-4.75-2.299-2.54-3.42-2.413-3.42.388 0 1.265-.51 2.81-1.133 3.433-1.938 1.938-.18 4.436 2.877 4.084 2.19-.252 2.823-.9 3.081-3.155zm101.287.209c1.016-1.171 1.562-2.59 1.215-3.152-.384-.62-1.123-.351-1.88.686-1.146 1.566-1.544 1.448-4.818-1.426-3.5-3.073-5.629-3.246-5.629-.456 0 1.376 6.588 6.477 8.365 6.477.495 0 1.731-.958 2.747-2.13zm39.212.727c.565-1.472-.082-2.598-1.49-2.598-.459 0-.834.9-.834 2 0 2.293 1.523 2.685 2.324.598zm-156.427-4.196c3.367-1.68 3.597-3.057.807-4.817-2.132-1.345-6.305 2.406-5.374 4.832.744 1.94.645 1.94 4.567-.015zm47.858.348c-.477-1.447-4.755-2.335-4.755-.986 0 1.428 1.175 2.236 3.25 2.236 1.086 0 1.738-.542 1.505-1.25zM544.5 925.5c-.484-.783-1.06-.84-1.726-.174-.55.55-.673 1.528-.274 2.174.484.783 1.06.84 1.726.174.55-.55.673-1.528.274-2.174zm-186.7-5.7c.624-2.034 1.004-3.829.845-3.989-.77-.77-4.645 4.009-4.645 5.728 0 3.346 2.605 2.155 3.8-1.738zm75.2 1.679c0-.562-1.125-1.535-2.5-2.161-1.375-.626-2.5-1.517-2.5-1.978 0-.462-.675-.84-1.5-.84s-1.5.675-1.5 1.5.62 1.5 1.378 1.5c.757 0 1.937.675 2.622 1.5 1.416 1.706 4 2.015 4 .479zm115 .069c0-2.412-2.501-6.048-4.16-6.048-2.27 0-2.283.441-.124 4.096 1.635 2.768 4.284 3.975 4.284 1.952zm-64-2.99c0-1.003-.928-2.067-2.061-2.363-2.78-.727-3.853 2.164-1.454 3.918 2.148 1.571 3.515.966 3.515-1.555zm15.792.328c.162-1.094-.832-3.014-2.25-4.346-2.243-2.107-2.542-3.194-2.542-9.245 0-5.258-.36-6.995-1.543-7.45-2.087-.8-2.427-.282-2.446 3.725-.038 7.965.774 11.649 3.467 15.717 2.928 4.425 4.808 4.99 5.314 1.599zm-82.374 1.007c2.357-.904 1.924-4.316-.668-5.269-3.85-1.414-8.75-2.113-8.75-1.247 0 1.147 5.812 7.123 6.927 7.123.5 0 1.621-.273 2.491-.607zm-103.61-2.468c-.197-.59-.786-1.075-1.308-1.075-.523 0-1.111.484-1.308 1.075-.197.592.391 1.075 1.308 1.075s1.505-.483 1.308-1.075zm91.629-3.933c1.822-1.807 1.837-2.031.25-3.785-.928-1.025-1.687-2.616-1.687-3.535 0-1.005-.798-1.672-2-1.672-2.627 0-2.582 2.68.058 3.519 3.233 1.026 2.2 4.97-1.316 5.026-3.104.05-6.33 2.695-5.307 4.35.84 1.36 7.195-1.12 10.002-3.903zm155.468 2.154c-1.477-.508-2.228.523-1.38 1.895.538.87.943.822 1.568-.184.495-.797.418-1.503-.188-1.71zm-170.302-4.805c2.047-1.34 2.4-2.158 1.836-4.25-.384-1.425-.619-4.503-.522-6.84.126-3.048-.219-4.25-1.216-4.25-2.518 0-4.497 3.373-4.398 7.5.053 2.2-.227 5.237-.622 6.75-.86 3.286.957 3.688 4.922 1.09zm-53.894-.967c.495-1.485-2.775-2.708-3.99-1.493-.52.52-.627 1.46-.239 2.088.853 1.379 3.706.977 4.23-.595zm15.88-.871c.345-1.374.367-3.174.05-4-.664-1.73-3.639-2.053-3.639-.396 0 .61-.716.833-1.59.497-3.114-1.195-3.499.642-.727 3.469 3.481 3.55 5.093 3.667 5.906.43zM318 908.098c0-.771 1.688-2.277 3.75-3.347 2.063-1.07 3.896-2.69 4.074-3.6.454-2.321-2.83-3.393-3.997-1.306-1.048 1.872-4.362 2.216-5.386.56-.372-.602.276-2.384 1.441-3.96 1.165-1.575 2.118-3.251 2.118-3.724 0-.474 1.35-2.373 3-4.221 4.787-5.362 3.276-7.093-2.182-2.5-3.195 2.688-5.326 3.273-4.556 1.25.728-1.914-1.02-5.75-2.621-5.75-.783 0-2.144-1.8-3.024-4-1.272-3.178-2.116-4-4.109-4-2.991 0-3.137.921-.653 4.115 1.02 1.312 2.395 4.044 3.057 6.072.66 2.029 2.123 4.859 3.249 6.29 1.554 1.976 1.893 3.419 1.41 5.995-.482 2.573-.238 3.615 1.011 4.314 1.48.829 1.425 1.13-.553 2.973-1.826 1.7-2.01 2.408-1.08 4.146 1.255 2.346 5.051 2.867 5.051.693zm157.35-.066c.705-1.838-1.17-3.112-2.55-1.732-1.067 1.067-.3 3.2 1.152 3.2.459 0 1.088-.66 1.397-1.468zM183 906.107c0-.216-.675-.652-1.5-.969-.825-.316-1.5-.14-1.5.393s.675.969 1.5.969 1.5-.177 1.5-.393zm385-3.666c0-2.086-1.471-2.606-2.53-.893-.907 1.468.302 4.211 1.523 3.456.554-.342 1.007-1.495 1.007-2.563zm-394.065-3.519c-.639-.77-1.582-1.14-2.097-.822-.553.342-.46 1.15.227 1.978.639.77 1.582 1.14 2.097.822.553-.342.46-1.15-.227-1.978zm306.731 1.328c.431-.688.666-1.969.522-2.847-.144-.878.43-2.17 1.275-2.872 3.522-2.923.953-6.005-2.9-3.48-1.953 1.279-2.472 2.43-2.39 5.292.059 2.011.295 3.994.526 4.407.638 1.141 2.09.897 2.967-.5zm-147.856-1.5c-.406-2.108-2.181-1.975-2.633.197-.189.906.362 1.553 1.323 1.553 1.03 0 1.52-.655 1.31-1.75zm177.229-3.344c1.087-2.624 1.04-3.503-.312-5.792-1.03-1.744-1.48-4.39-1.272-7.48.421-6.25-1.53-7.153-5.733-2.655-2.88 3.081-3.141 3.168-4.392 1.458-.732-1-1.33-2.408-1.33-3.128 0-2.25 3.876-5.308 6.75-5.324 3.624-.02 4.598-.8 6.221-4.985.747-1.925 1.924-4.175 2.616-5 .691-.825 1.573-2.763 1.958-4.307.385-1.545 1.875-3.57 3.311-4.5 1.436-.931 3.406-2.48 4.377-3.443 2.162-2.142 3.154-2.193 4.767-.25 1.902 2.292 3.29 1.792 2.605-.939-.761-3.032.888-4.21 2.974-2.125.86.86 2.611 1.564 3.89 1.564 2.145 0 2.382-.542 3.02-6.896.789-7.85-.333-11.207-3.621-10.838-3.095.348-6.414-4.377-4.97-7.075 1.543-2.884 1.44-8.467-.148-7.952-1.398.454-4.75 9.784-3.992 11.112.267.468.777 3.168 1.134 6 .615 4.88.792 5.134 3.378 4.861 2.11-.222 2.73.14 2.73 1.598 0 1.371-1.313 2.31-4.811 3.44-2.646.854-6.524 2.716-8.619 4.138-4.166 2.827-5.22 2.661-6.63-1.045-1.11-2.92-2.94-2.215-2.94 1.133 0 1.296-.519 2.53-1.153 2.742-.802.267-.657 1.142.474 2.868 1.547 2.361 1.483 2.773-1.28 8.333-1.6 3.217-3.35 6.29-3.888 6.828-1.54 1.54-3.308-.09-2.247-2.07.5-.937 1.136-3.722 1.411-6.19.275-2.468.654-5.135.842-5.928.187-.792-.388-1.601-1.28-1.798-1.894-.418-3.153 3.066-1.65 4.567 1.23 1.231.017 3.435-1.57 2.852-.638-.234-2.126.453-3.307 1.526-1.953 1.774-2.407 1.82-5 .51-1.569-.793-3.414-1.24-4.102-.996-2.342.836-1.262 3.327 1.699 3.92 1.622.324 3.674 1.391 4.56 2.37 1.498 1.655 1.395 2.03-1.448 5.268-3.838 4.371-3.851 6.142-.061 8.381 3.493 2.064 3.857 3.934.943 4.859-2.882.915-2.044 3.91 1.2 4.287 2.094.244 3.076-.424 4.852-3.296 2.29-3.707 4.81-4.26 4.111-.901-.59 2.832-.447 10.062.234 11.835 1.033 2.691 4.314 1.806 5.699-1.537zm117.961.701c0-1.696-2.704-2.894-3.527-1.563-.325.526-.313 1.406.027 1.956.924 1.495 3.5 1.206 3.5-.393zm-378.582-1.214c1.568-.602 2.19-4.452.924-5.718-1.138-1.138-3.342 1.465-3.342 3.947 0 2.595.093 2.663 2.418 1.771zm334.62-3.352c1.904-1.628 4.25-2.978 5.212-3 .962-.022 1.75-.716 1.75-1.541s.873-1.5 1.941-1.5 2.182-.39 2.476-.866c.88-1.424-3.293-4.51-6.388-4.725-4.175-.29-5.029-1.122-5.029-4.909 0-4.4 1.355-5.134 3.484-1.885 1.267 1.934 1.992 2.31 2.834 1.467.843-.842.804-1.657-.15-3.185-.984-1.575-1.01-2.382-.114-3.463.644-.774.89-2.138.548-3.03-.57-1.484-.842-1.477-3.225.084-2.46 1.613-2.784 1.608-5.94-.092-3.222-1.735-3.407-1.733-5.387.058-2.406 2.178-2.773 6.546-.55 6.546.825 0 1.5-.69 1.5-1.532 0-2.104 2.7-2.962 4.535-1.439 1.329 1.102 1.335 1.52.051 3.48-1.282 1.957-1.277 2.487.041 4.37.877 1.25 1.23 2.999.847 4.201-.493 1.556-.142 2.194 1.436 2.607 2.867.75 2.678 1.333-1.869 5.772-3.517 3.435-4.35 5.54-2.194 5.54.4 0 2.287-1.33 4.19-2.959zm-417.58 1.028c.316-.512.117-1.214-.442-1.559s-1.016.073-1.016.931c0 1.756.6 2.015 1.457.628zm95.904-5.346l2.138-3.777-2.5-1.95c-3.394-2.649-4-2.497-4 1.004 0 2.533-.389 3-2.5 3-2.854 0-2.841-.028-1.5 3.501 1.508 3.966 5.603 3.095 8.362-1.778zm120.437 1.02c2.186-3.602.503-5.587-3.534-4.167-3.313 1.165-4.163 4.294-1.664 6.121 2.32 1.698 3.178 1.375 5.198-1.954zm150.01 1.507c-.405-2.108-2.18-1.975-2.632.197-.189.906.362 1.553 1.323 1.553 1.03 0 1.52-.655 1.31-1.75zM234 889.059c0-.792-.45-1.72-1-2.059-.55-.34-1 .308-1 1.441 0 1.132.45 2.059 1 2.059s1-.648 1-1.441zm163.912-4.78c2.729-2.791 3.41-3.059 5.105-2 1.572.982 2.79.914 6.22-.345 2.344-.862 5.05-1.814 6.013-2.117.963-.303 1.75-.873 1.75-1.267 0-1.559-1.31-1.866-3.57-.836-2.969 1.353-5.43-.386-5.43-3.836 0-1.308-.255-2.378-.566-2.378-1.557 0-4.434 2.236-4.434 3.446 0 1.705-5.629 6.554-7.608 6.554-.8 0-1.743-.75-2.095-1.668-.747-1.948 6.414-8.602 8.453-7.854.688.253 1.25-.222 1.25-1.055 0-1.192-.796-1.383-3.75-.896-5.552.913-7.661 2.224-9.713 6.034-1.784 3.313-1.786 3.561-.04 7.433 2.212 4.904 4.206 5.09 8.415.785zm140.052 1.765c.664-.801.917-1.927.561-2.503-.89-1.44-4.525.565-4.525 2.494 0 1.886 2.402 1.89 3.964.01zm-375.231-3.6c-.675-1.08-1.383-1.495-1.574-.92-.557 1.67.735 4.16 1.813 3.493.627-.387.54-1.327-.24-2.573zm23.95-1.132c-.32-.797-.556-.56-.604.605-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.917zm56.05-5.575c-1.45-5.362-3.167-4.94-3.446.846-.31 6.452.34 7.742 2.695 5.35 1.687-1.712 1.773-2.42.751-6.196zm95.767 3.75c0-1.818-.606-2.573-2.25-2.807-1.798-.255-2.25.164-2.25 2.084 0 2.88.865 3.909 2.951 3.507.903-.174 1.549-1.335 1.549-2.785zM361 881c.993-1.197.993-1.803 0-3-1.516-1.827-1.983-1.828-4.375-.016-2.252 1.705-1.492 4.516 1.221 4.516 1.05 0 2.47-.675 3.154-1.5zm75 .059c0-1.743-1.64-2.9-2.956-2.086-1.331.823-.133 3.527 1.563 3.527.766 0 1.393-.648 1.393-1.441zm-116.51-.809c.235-.688.627-4.01.872-7.384.244-3.374.981-7.139 1.638-8.367 1.062-1.984 1.362-2.066 2.695-.732 1.163 1.163 1.254 1.96.403 3.55-1.55 2.896-1.364 4.867.529 5.593 4.164 1.598 4.512-2.26 1.195-13.235-1.25-4.135-.575-4.899 2.532-2.862 2.605 1.706 3.646 1.328 3.646-1.326 0-2.266 2.918-7.987 4.073-7.987 1.387 0 1.118-2.715-.323-3.255-.688-.257-2.15-.134-3.25.274-2.137.793-5.5-1.367-5.5-3.533 0-.662 1.859-3.316 4.131-5.898 2.821-3.204 4.778-4.597 6.172-4.39 3.062.453 3.198 2.617.25 3.96-3.343 1.523-2.768 3.256 1.21 3.65 2.841.283 3.202-.02 4.168-3.5.582-2.094 1.06-4.82 1.063-6.058.003-1.237.343-2.268.756-2.291.412-.023 2.727-1.828 5.143-4.013 4.134-3.737 4.296-4.08 2.75-5.788-.904-.998-1.643-2.76-1.643-3.915 0-1.155-.675-2.775-1.5-3.6-.825-.825-1.5-2.009-1.5-2.63 0-.622-.451-.852-1.003-.511-.67.414-.67 1.24 0 2.493 1.783 3.331 1.233 9.812-.931 10.97-3.525 1.886-6.572 1.14-10.066-2.465l-3.392-3.5h2.696c3.211 0 3.278-1.164.365-6.402-2.087-3.755-4.423-4.704-3.932-1.598.468 2.96-.751 5.77-2.726 6.287-1.363.356-2.011 1.362-2.011 3.12 0 1.61-.555 2.593-1.465 2.593-3.545 0-4.117 9.363-.806 13.183.984 1.134 1.24 2.679.788 4.738-1.142 5.203-1.926 5.064-6.6-1.171-2.59-3.455-4.077-3.466-5.667-.043-1.895 4.08-1.525 6.238 1.25 7.293 2.8 1.065 3.269 2.768 1 3.638-2.657 1.02-1.628 3.93 2 5.66 1.925.918 3.5 2.352 3.5 3.186 0 1.768-1.656 2.047-2.214.372-.286-.855-.925-.852-2.54.012-3.26 1.746-4.2 6.768-3.053 16.32.958 7.972 1.998 10.812 3.96 10.812.5 0 1.102-.563 1.337-1.25zm8.51-31.191c0-.792.359-1.663.798-1.934 1.279-.79 3.525 1.043 2.771 2.263-.992 1.606-3.569 1.368-3.569-.329zm3.652-20.645c-1.291-1.844-1.269-2.422.194-4.994 1.912-3.361 2.736-3.604 3.972-1.17 1.004 1.977-.357 8.25-1.79 8.25-.503 0-1.572-.939-2.376-2.086zM253.7 877.5c3.013 0 2.95-1.802-.103-2.963-2.89-1.099-3.968-2.629-3.221-4.574.423-1.103 1.147-1.215 3.088-.477 2.356.896 2.536.757 2.536-1.954 0-1.891-.79-3.472-2.245-4.49-2.125-1.49-2.288-1.442-3.068.897-.453 1.358-1.693 2.745-2.755 3.083-2.097.665-2.46 3.063-1.013 6.68a77.838 77.838 0 011.532 4.215c.469 1.461.892 1.64 1.782.75.642-.642 2.202-1.167 3.467-1.167zm125.3-4c0-2-.5-3-1.5-3-1.514 0-2.142 4.024-.833 5.333 1.433 1.434 2.333.534 2.333-2.333zm66.8.8c1.776-1.776 1.456-3.8-.6-3.8-2.106 0-4.2 1.845-4.2 3.7 0 1.633 3.2 1.7 4.8.1zm96.8-4.4c-.484-1.261-.966-1.434-1.766-.634-.605.605-.8 1.88-.434 2.834.484 1.261.966 1.434 1.766.634.605-.605.8-1.88.434-2.834zm-7.6.671c0-2.276-2.762-5.336-4.08-4.521-1.061.655-1.242 4.795-.253 5.783 1.46 1.46 4.333.623 4.333-1.262zm78.417-3.714c.346-.904.414-1.86.15-2.124-.93-.93-3.567.722-3.567 2.236 0 2.047 2.62 1.961 3.417-.112zm-15.863-2.444c1.03-1.668-1.287-3.58-2.667-2.2-1.154 1.154-.432 3.287 1.113 3.287.485 0 1.184-.49 1.554-1.087zm-66.715-2.46c1.262-2.769 1.57-7.453.49-7.453-1.737 0-4.329 3.586-4.329 5.988 0 4.605 2.052 5.388 3.84 1.465zM362 862c0-.833-.889-1.5-2-1.5-1.992 0-2.601 1.065-1.333 2.333 1.218 1.218 3.333.69 3.333-.833zm190-1.5c0-1.111-.667-2-1.5-2-2.725 0-1.78 2.964 1.25 3.921.138.043.25-.821.25-1.921zm-93.326-6.624c-.324-1.993-1.283-4.391-2.131-5.329-.849-.937-1.543-2.851-1.543-4.253 0-2.693-2.295-5.348-3.812-4.41-.862.533 2.482 13.773 4.134 16.366.438.688 1.503 1.25 2.368 1.25 1.248 0 1.45-.746.984-3.624zm100.516 2.101c.287-.288.019-3.325-.596-6.75-.949-5.277-1.436-6.227-3.195-6.227-1.142 0-2.804-.601-3.694-1.336-1.98-1.636-3.705-.731-3.705 1.945 0 5.72 8.472 15.085 11.19 12.368zm-401.38-3.227c-.406-2.108-2.181-1.975-2.633.197-.189.906.362 1.553 1.323 1.553 1.03 0 1.52-.655 1.31-1.75zm55.19-.191c0-1.067-.45-2.22-1-2.559-.567-.35-1 .49-1 1.941 0 1.407.45 2.559 1 2.559s1-.873 1-1.941zm288 1.108c0-1.302-1.189-2.168-2.156-1.57-1.034.639-.142 2.403 1.215 2.403.518 0 .941-.375.941-.833zm69.608-1.917c.73-.963 1.343-2.736 1.36-3.941.018-1.205.482-2.47 1.032-2.809 1.336-.826 1.268-4.818-.134-7.896-1.006-2.208-.775-2.848 2.043-5.667 4.902-4.902 2.897-7.742-2.409-3.412-2.802 2.286-3.01 2.928-3.14 9.712-.076 3.994-.638 8.53-1.25 10.078-2.091 5.301-.474 7.85 2.498 3.935zM218 850.559c0-1.18-1.95-2.442-2.667-1.726-.716.717.546 2.667 1.726 2.667a.944.944 0 00.941-.941zm167.6-.824c2.038-1.361 3.508-5.05 2.307-5.792-1.372-.848-5.612 1.345-6.357 3.288-1.044 2.72 1.433 4.251 4.05 2.504zm-13.339-4.809c1.019-4.872.212-8.426-1.91-8.426-1.296 0-1.497.715-1.022 3.64.325 2.003.138 4.487-.415 5.521-.554 1.034-.72 2.345-.369 2.912 1.201 1.944 2.896.28 3.716-3.647zM295.8 847.3c1.635-1.635 1.518-4.8-.178-4.8-1.975 0-3.947 2.71-3.265 4.487.7 1.824 1.83 1.927 3.443.313zm58.657-2.73c.74-1.198-1.141-2.383-2.473-1.56-1.119.691-.384 2.49 1.016 2.49.485 0 1.14-.419 1.457-.93zm235.405-1.203c2.656.343 2.586-1.55-.119-3.257-1.88-1.187-6.844.18-7.467 2.056-.423 1.274 2.62 2.31 4.224 1.439.55-.299 2.063-.406 3.362-.238zM286 842.5c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm216-1.941c0-.517-.472-1.232-1.048-1.589-1.693-1.046.895-16.244 3.222-18.92.454-.522.826-1.76.826-2.75 0-2.303-3.552-2.41-4.426-.133-.487 1.27-.917 1.39-1.807.5-2.302-2.303-2.771-1.062-2.145 5.677.414 4.458.198 8.17-.62 10.65-1.176 3.563-1.105 3.922 1.121 5.634 2.585 1.987 4.877 2.425 4.877.931zm-144.032-3.309c-.036-3.75-1.96-6.75-4.328-6.75-1.946 0-2.024.988-.482 6.134.8 2.67 1.729 3.866 3 3.866 1.418 0 1.835-.748 1.81-3.25zm240.632-1.366c.055-1.7.452-3.659.882-4.355 1.299-2.101 2.363-8.007 1.536-8.518-.426-.263-1.043.864-1.371 2.505-.812 4.057-3.29 3.802-5.365-.55-1.959-4.108-4.73-4.308-4.88-.352-.055 1.423-.411 3.092-.792 3.709-1.147 1.855 2.368 6.177 5.024 6.177 2.09 0 2.319.34 1.752 2.599-.546 2.176-.346 2.54 1.23 2.236 1.331-.256 1.913-1.269 1.984-3.452zm-309.097-2.045c1.84-4.405 1.137-7.339-1.759-7.339h-2.121l2.188-2.039c2.476-2.306 2.765-3.601.939-4.214-.984-.33-.962-.96.105-2.965 1.972-3.7-.005-12.19-4.178-17.952-1.903-2.626-1.766-7.83.206-7.83.465 0 2.965 4.386 5.557 9.746 3.441 7.118 4.562 10.492 4.158 12.513-.543 2.717 1.995 9.741 3.52 9.741 1.11 0 2.065-3.646 2.455-9.379.21-3.095.95-5.53 1.887-6.215 2.093-1.531 1.937-4.086-.372-6.063-2.06-1.763-1.751-4.343.519-4.343.766 0 1.393-.69 1.393-1.531 0-.843.675-1.79 1.5-2.107 1.817-.697 2.007-3.362.24-3.362-.692 0-1.839.929-2.547 2.063-.808 1.294-2.11 1.947-3.491 1.75-1.771-.252-2.264-1.076-2.521-4.211-.396-4.833 1.234-6.06 5.051-3.806 2.77 1.637 2.866 1.613 5.16-1.262 3.906-4.9 6.367-23.534 3.108-23.534-1.145 0-1.5 1.258-1.5 5.32 0 4.299-.44 5.702-2.292 7.312-3.968 3.45-5.061 3.897-3.808 1.554 1.62-3.026 1.36-4.01-1.15-4.366-1.446-.206-2.364-1.124-2.57-2.57-.258-1.822-.956-2.25-3.672-2.25-2.916 0-3.497.436-4.458 3.347-.607 1.841-.872 3.979-.588 4.75.619 1.68-.263 3.019-2.962 4.501-1.1.604-2.5 2.084-3.11 3.288-.612 1.204-2.13 3.273-3.374 4.597-2.103 2.238-4.168 11.514-4.012 18.017.191 7.975.661 11.391 1.747 12.7.825.993 1.04 3.046.632 6.022-.395 2.883-.215 4.764.5 5.205.614.38 1.117 1.925 1.117 3.432 0 3.34 1.641 5.141 4.687 5.141 1.687 0 2.687-.96 3.816-3.661zM284 813.5c0-1.922 1.956-2.711 3.325-1.342.757.757-1.136 3.342-2.447 3.342-.483 0-.878-.9-.878-2zm8.2-18.2c-.66-.66-1.2-1.983-1.2-2.941 0-.958-.45-2.02-1-2.359-1.619-1-1.18-3.507.5-2.862.825.317 1.5 1.061 1.5 1.654 0 .594.947 2.087 2.105 3.32 2.865 3.05 1.03 6.122-1.905 3.188zM651 832.274c0-1.535-.336-1.665-2-.774-1.979 1.059-2.674 3.993-1.277 5.39.963.963 3.277-2.295 3.277-4.616zm-348.557 1.612c-.122-1.893-2.313-6.033-3.881-7.335-2.34-1.941-3.34-.275-2.81 4.68.437 4.072.571 4.217 3.601 3.885 1.73-.19 3.121-.743 3.09-1.23zM586 831.878c0-1.614-2.587-1.855-3.53-.33-.356.576-.377 1.752-.047 2.613.485 1.264.886 1.327 2.089.33.818-.68 1.488-1.856 1.488-2.613zm-147.073-.013c2.749-3.495 2.679-5.574-.177-5.266-1.238.133-4.198-.366-6.579-1.11-3.706-1.159-4.459-1.147-5.234.079-1.67 2.637-1.046 4.02 1.678 3.72 1.773-.196 2.98.355 3.75 1.711 2.375 4.186 3.803 4.374 6.562.866zm-177.916-1.615c2.417-3.963 2.483-5.546.334-7.921-2.637-2.914-4.002-2.174-5.73 3.109-2.269 6.936-2.176 7.214 2.65 7.946.42.064 1.656-1.347 2.746-3.134zm98.989.405c0-2.665-3.307-5.448-4.754-4-.836.835-.69 1.727.563 3.454 2.038 2.806 4.191 3.086 4.191.546zm-203.446-.242c.972-1.573-1.13-3.29-3.1-2.534-1.363.523-1.447.924-.444 2.133 1.463 1.763 2.621 1.894 3.544.4zm88.863-1.556c.346-.904.507-1.691.357-1.75-.15-.06-1.305-.685-2.565-1.39-3.825-2.145-5.929.757-2.459 3.391 2.372 1.8 3.911 1.717 4.667-.251zM277 829c1.04-1.253.896-1.5-.878-1.5-1.22 0-2.122.638-2.122 1.5 0 .825.395 1.5.878 1.5.482 0 1.437-.675 2.122-1.5zm-4.736-5.592c-.13-2.424-.172-6.433-.094-8.908.365-11.58.666-10.526-2.92-10.246-3.12.243-3.25.107-3.25-3.394 0-2.917.705-4.27 3.516-6.754 3.405-3.008 3.495-3.272 2.86-8.356-.498-3.999-1.056-5.25-2.341-5.25-.927 0-2.737-1.119-4.022-2.486-1.998-2.127-2.925-2.398-6.424-1.877-6.212.925-7.14 2.247-5.646 8.047 2.285 8.876 5.448 17.793 7.26 20.47.989 1.46 1.797 4.212 1.797 6.116 0 1.975.88 4.58 2.052 6.069 1.128 1.434 2.752 4.666 3.61 7.181 1.942 5.7 3.922 5.363 3.602-.612zM261 790.09c-3.168-1.138-3.53-1.662-3.812-5.521-.359-4.897.786-4.75 3.237.415.918 1.934 2.323 3.516 3.122 3.516.8 0 1.453.675 1.453 1.5s-.113 1.466-.25 1.424c-.138-.042-1.825-.642-3.75-1.334zm103.418 36.803c.87-.334 1.582-1.492 1.582-2.573 0-2.775-3.41-1.936-3.82.94-.345 2.42-.161 2.554 2.238 1.633zm86.082-1.407c0-2.143-2.906-1.834-3.327.355-.257 1.336.15 1.744 1.486 1.486 1.013-.195 1.841-1.023 1.841-1.84zM253 821.908c0-3.078-.66-5.43-2-7.135-1.1-1.399-2-3.36-2-4.36 0-1-.528-2.977-1.173-4.393-.887-1.948-.891-2.855-.017-3.73 1.578-1.578 2.326-.577 2.524 3.377.202 4.057 1.766 4.334 3.098.547.7-1.993.601-3.7-.349-6-.73-1.768-1.664-6.022-2.075-9.455-.68-5.678-2.193-9.259-3.911-9.259-.362 0-1.191 1.412-1.843 3.137-1.023 2.712-.917 3.476.781 5.635 2.352 2.99 2.488 4.228.465 4.228-1.007 0-1.5 1.007-1.5 3.066 0 1.686-.486 3.973-1.08 5.083-.847 1.582-.704 2.432.66 3.94 1.864 2.06 1.85 2.117-.87 3.576-1.65.884-1.55 1.26 1.25 4.785 1.672 2.104 3.04 4.693 3.04 5.753 0 2.788 1.835 5.797 3.535 5.797 1.074 0 1.465-1.226 1.465-4.592zm289 3.592c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zM399 821c.635-1.925 1.795-3.5 2.578-3.5.825 0 1.422-.984 1.422-2.345 0-2.6 2.315-5.057 5.75-6.104 1.295-.395 2.25-1.486 2.25-2.571 0-1.037.496-2.975 1.103-4.307.815-1.789.797-2.99-.068-4.607-1.518-2.837-3.244-2.2-4.217 1.557-.426 1.643-1.904 4.049-3.286 5.347-2.44 2.293-2.567 2.308-4.528.534-2.688-2.433-3.572-1.29-1.979 2.556 1.065 2.57 1.06 3.27-.025 3.94-.725.448-1.9.592-2.611.319-2.406-.923-3.505.677-1.97 2.868 1.06 1.513 1.183 2.729.47 4.607-1.237 3.252-.486 5.206 2.002 5.206 1.346 0 2.313-1.088 3.109-3.5zm177.626.949c1.258-1.921 1.388-2.835.523-3.7-1.722-1.722-1.385-3.19.393-1.714 2.135 1.772 3.42.196 3.716-4.554.181-2.923-.165-3.989-1.379-4.24-.967-.202-1.836.488-2.156 1.71-.295 1.127-.978 2.049-1.518 2.049-1.477 0-.712-20.684.833-22.545 1.032-1.245.877-1.916-.871-3.777-1.17-1.245-2.65-3.82-3.288-5.721-1.339-3.983-3.649-6.957-5.403-6.957-1.918 0-2.659 6.96-.925 8.694 1.97 1.97 3.73 5.36 3.105 5.983-1.266 1.266-4.928-1.158-5.882-3.895-1.321-3.791-2.573-2.042-2.989 4.177-.21 3.156.163 4.553 1.438 5.38 1.366.885 2.002.735 3.068-.722 1.26-1.723 1.45-1.733 3.027-.157.925.926 1.682 2.46 1.682 3.411 0 .951.493 2.222 1.095 2.824.794.794.76 2.594-.122 6.537-.852 3.807-.909 6.02-.188 7.365.566 1.058.795 3.149.509 4.645-.711 3.722.434 7.758 2.202 7.758.802 0 2.21-1.148 3.13-2.551zm-11.157-9.14c-.912-4.845-1.89-10.271-2.173-12.059-.412-2.601-1.125-3.407-3.572-4.042-2.56-.663-3.4-1.71-5.168-6.45-2.046-5.484-4.977-8.57-11.29-11.89-2.619-1.377-3.79-6.186-2.886-11.844.735-4.598-1.53-7.974-3.986-5.936-.767.636-1.394 1.777-1.394 2.534 0 3.202-2.18.938-4.923-5.113-1.97-4.343-3.793-6.878-5.51-7.66-2.936-1.338-3.271-3.02-.981-4.92 2.136-1.773 5.09-8.522 5.878-13.429.354-2.2.874-4.787 1.157-5.75.797-2.713-2.172-2.136-4.548.885-1.14 1.449-2.073 3.384-2.073 4.3 0 .916-.494 2.16-1.098 2.763-.605.605-1.23 3.176-1.39 5.714-.339 5.39-1.826 7.588-5.134 7.588-2.8 0-3.28 2.773-.628 3.625 6.164 1.981 7.124 2.835 11.436 10.177 2.486 4.234 5.599 9.884 6.917 12.556 1.318 2.672 3.387 5.521 4.597 6.332 1.21.81 3.107 3.012 4.216 4.892 1.109 1.88 2.707 3.418 3.55 3.418.844 0 1.586.788 1.65 1.75.063.963.175 2.425.25 3.25.082.916 1.37 1.62 3.31 1.808 1.746.17 3.583.844 4.08 1.5 1.302 1.713 4.956 12.338 6.251 18.176 1.077 4.853 4.1 9.693 4.78 7.652.187-.56-.406-4.981-1.318-9.826zM162 821.46c0-.572-.985-2.373-2.19-4.002-2.692-3.641-4.372-1.944-2.211 2.234 1.398 2.705 4.401 3.911 4.401 1.769zm440.985-2.709c-.02-2.276-1.064-3.74-3.235-4.542-2.067-.762-2.047-.86-.652 3.143 1.167 3.348 3.912 4.336 3.887 1.399zM137 817.65c0-1.931-2.261-7.15-3.098-7.15-1.333 0-1.096 5.406.298 6.8 1.397 1.397 2.8 1.572 2.8.35zm227.327-1.9c.798-1.347-3.798-9.717-5.517-10.048-.921-.177-2.15.566-2.732 1.653-.872 1.629-.5 2.604 2.116 5.56 3.047 3.442 5.187 4.43 6.133 2.835zM321 814.934c0-1.605-2.255-4.434-3.535-4.434-1.473 0-2.042 3.09-.798 4.333.81.81 4.333.893 4.333.101zm198.812-1.695c.248-1.288-.333-1.739-2.239-1.739-2.444 0-3.443 1.797-1.872 3.368 1.204 1.204 3.76.19 4.11-1.63zm-105.476.592c.74-.74-2.153-4.331-3.491-4.331-.465 0-.845 1.125-.845 2.5 0 1.758.544 2.5 1.833 2.5 1.009 0 2.135-.301 2.503-.669zM610 802.321c0-1.022 1.35-4.389 3-7.48 2.546-4.772 3-6.727 3-12.923 0-4.015.45-7.578 1-7.918.55-.34 1-2.14 1-4 0-4.287 1.802-5.463 4.072-2.66 2.952 3.646 4.288 2.488 1.836-1.59-1.24-2.063-2.29-3.826-2.334-3.919-.043-.093-1.315-.479-2.826-.858-1.867-.469-2.748-.3-2.748.525 0 .668-1.124 2.098-2.497 3.179-1.989 1.564-2.295 2.344-1.5 3.828 1.394 2.605 1.251 4.49-.665 8.777-4.6 10.293-4.81 12.218-1.331 12.218 1.668 0 1.766.354.836 3.021-.58 1.662-1.906 3.478-2.948 4.035-1.042.558-1.895 1.75-1.895 2.65 0 .9-.752 2.468-1.672 3.484-1.85 2.045-2.493 9.897-.9 11 1.148.795 6.572-8.586 6.572-11.369zm-13.563 9.072c-.812-1.853-13.138-10.858-13.867-10.13-.903.903-.662 5.237.29 5.237.474 0 2.43 1.064 4.346 2.365 3.219 2.184 8.928 4.656 9.568 4.141.15-.12-.001-.847-.337-1.613zm-61.147.483c.99-.99-2.903-7.743-5.301-9.193-2.093-1.266-2.108-1.394-.407-3.274 1.447-1.599 1.533-2.18.47-3.183-1.03-.97-1.4-.96-1.766.042-.256.698-1.13 1.934-1.945 2.749-2.246 2.246-1.213 5.719 2.37 7.968 1.767 1.108 3.23 2.803 3.25 3.766.038 1.7 2.069 2.386 3.33 1.126zm-37.798-2.556c1.38-1.2 2.508-3 2.508-4 0-1.001.627-1.82 1.393-1.82 1.696 0 2.894-2.704 1.563-3.527-1.316-.814-2.956.343-2.956 2.086 0 .793-.563 1.441-1.25 1.441-1.15 0-6.75 6.178-6.75 7.447 0 1.32 3.19.375 5.492-1.627zm-338.938-.907c.484-.783.976-.783 1.759 0 2.33 2.33 2.781.912.786-2.47-1.155-1.957-2.115-4.77-2.134-6.25-.02-1.481-.66-3.818-1.423-5.193-.763-1.375-1.14-3.735-.84-5.244.3-1.51.076-3.984-.498-5.5-3.38-8.924-4.526-14.511-3.359-16.38 1.872-2.996 2.67-13.55 1.164-15.366-1.136-1.367-1.41-1.344-2.55.216-1.214 1.66-1.375 1.66-3.197.01-3.814-3.45-5.741-1.293-2.71 3.035 1.276 1.822 1.372 3.188.54 7.688-.897 4.854-.75 6.072 1.3 10.757 3.404 7.784 3.766 10.16 2.14 14.055-1.406 3.363-1.321 3.755 2.506 11.564 2.18 4.445 3.962 8.55 3.962 9.124 0 1.368 1.699 1.337 2.554-.046zM373 806.86c0-.313-1.088-2.735-2.417-5.381-1.33-2.647-2.167-5.062-1.862-5.367.305-.305-.009-2.57-.699-5.033-1.336-4.771-4.207-8.2-5.959-7.118-1.568.97-1.292 5.104.437 6.539 1.682 1.396 2.043 5 .5 5-1.818 0-1.038 3.757.885 4.26 1.402.366 1.761 1.14 1.402 3.018-.681 3.565 2.964 7.193 5.736 5.71 1.087-.582 1.977-1.315 1.977-1.628zm19.812-1.099c-.502-2.606-3.812-2.897-3.812-.334 0 1.43.642 2.073 2.073 2.073s1.97-.538 1.739-1.738zm-71.048-5.695c-.13-3 .361-5.047 1.521-6.329 2.152-2.378 2.168-4.079.06-6.408-3.595-3.972-5.729-1.653-6.864 7.46-.6 4.811-.422 6.12 1.054 7.75 3.003 3.318 4.444 2.475 4.229-2.473zm9.236 1.056c0-1.307.617-2.89 1.372-3.516 1.88-1.56 2.777-7.895 1.423-10.063-.839-1.343-.687-3.328.626-8.159 2.318-8.535 2.39-10.258.445-10.654-1.074-.218-2 .714-2.698 2.719-1.356 3.888-2.618 3.86-4.595-.103-1.88-3.769-2.017-7.002-.366-8.653 1.859-1.859-1.53-5-3.568-3.308-1.702 1.412-2.142.867-3.137-3.885-.403-1.925-1.17-4.043-1.704-4.706-1.39-1.727.082-3.559 2.376-2.959 1.167.305 2.175-.08 2.513-.96.604-1.575-1.5-3.559-5.937-5.599-3.243-1.491-3.576-2.776-.718-2.776 1.118 0 3.48-.586 5.25-1.302 1.77-.715 4.087-1.117 5.15-.891 1.804.383 1.77.54-.5 2.384l-2.432 1.974 3.5-.672c5.758-1.105 6.177-1.064 7.334.72.896 1.385.586 2.261-1.612 4.555-3.68 3.841-3.43 5.454 1.156 7.44 3.794 1.644 3.892 1.818 4.569 8.14.38 3.552 1.267 7.246 1.97 8.208 1.45 1.983 3.572 1.179 3.605-1.365.012-.93.895-2.816 1.962-4.191 1.92-2.476 1.92-2.515-.029-4.01-1.481-1.135-2.06-3.012-2.341-7.59-.205-3.345-.867-7.005-1.471-8.133-1.896-3.543-7.134-7.267-10.22-7.267-3.238 0-3.583-1.472-2.224-9.5.556-3.283.778-3.586 1.239-1.691.967 3.973 2.561 2.38 2.575-2.573.014-5.198.862-7.236 3.01-7.236 2.172 0 3.477 3.365 3.477 8.966 0 3.671.432 5.262 1.543 5.689 2.384.915 2.962-.36 2.901-6.403-.054-5.372-.235-5.739-4.897-9.96-5.265-4.767-7.86-5.163-8.382-1.282-.184 1.37-.746 2.917-1.25 3.44-.503.522-.915 2.221-.915 3.775 0 2.066-.648 3.071-2.414 3.742-1.328.505-2.705 1.833-3.06 2.95-1.037 3.269-5.989 6.256-9.082 5.48-3.196-.802-4.644.947-3.429 4.143.475 1.249.445 2.6-.07 3.115-.546.546-.134 2.496 1.03 4.877 1.067 2.183 2.378 6.743 2.913 10.134.536 3.391 1.617 7.441 2.403 9 2.244 4.453 2.688 7.518 1.712 11.833-1.11 4.904.096 6.402 2.897 3.601 2.616-2.616 5.1-2.712 5.1-.198 0 1.215-1.085 2.28-3 2.948-3.747 1.306-3.871 2.917-.257 3.334 2.451.282 2.815.826 3.425 5.123.444 3.125.23 5.923-.613 8-1.556 3.837-1.058 5.693 1.528 5.693 1.352 0 1.917-.701 1.917-2.378zm-7-68.622c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm17.15 69.5c0-.522-.484-1.111-1.075-1.308-.591-.197-1.075.391-1.075 1.308s.484 1.505 1.075 1.308c.591-.197 1.075-.785 1.075-1.308zm206.65.3c1.439-1.438 1.577-4.449.243-5.274-.81-.5-4.043 4.238-4.043 5.924 0 1.008 2.584.566 3.8-.65zm-78.995-5.705c.29-4.98.187-5.232-2-4.922-2.364.335-2.542 1.3-1.451 7.827.558 3.34.477 3.222 1.896 2.755.732-.242 1.376-2.586 1.555-5.66zm152.519 4.155c.242-.413.029-1.844-.476-3.18-.84-2.229-1.05-2.297-2.52-.828-.88.882-1.33 2.313-.996 3.18.623 1.624 3.207 2.16 3.992.828zm-224.501-1.12c1.747-1.107.55-7.773-1.54-8.575-1.176-.451-1.413-.018-1.046 1.906.308 1.612-.17 3.073-1.357 4.148-1.008.912-1.592 2.048-1.297 2.525.677 1.095 3.51 1.094 5.24 0zM587 798.01c0-.756 1.35-2.335 3-3.51 2.139-1.523 3-2.959 3-5.003 0-4.22 1.725-8.085 5.233-11.722 2.786-2.888 2.988-3.494 1.939-5.797-1.371-3.01-1.539-7.133-.32-7.886.468-.29 1.67-2.669 2.669-5.286 1-2.618 2.724-5.493 3.831-6.39 1.107-.897 2.779-3.832 3.714-6.523s2.295-6.338 3.022-8.105c1.41-3.425.655-5.431-1.305-3.471-2.823 2.823-7.255-.09-6.247-4.106.738-2.94 2.9-3.624 3.826-1.211.715 1.863 4.638 1.994 4.638.155 0-.74.9-2.16 2-3.155 1.1-.995 2-3.02 2-4.5s-.9-3.505-2-4.5c-2.634-2.384-2.523-4.09.5-7.682 1.375-1.634 2.5-3.563 2.5-4.286 0-.723 1.19-1.614 2.645-1.979 1.986-.498 2.36-.949 1.5-1.808-1.523-1.523-1.45-4.837.158-7.272.717-1.085 1.87-4.286 2.564-7.113 1.23-5.01 1.193-5.209-1.422-7.824-2.194-2.194-2.582-3.304-2.13-6.091.682-4.202-.602-5.142-3.993-2.92-2.524 1.653-2.577 1.91-2.07 10.041.464 7.428.257 8.867-1.881 13.09-1.322 2.61-2.94 5.078-3.597 5.484-.881.544-.746 1.233.516 2.628 1.93 2.133 2.075 3.106.77 5.168-.748 1.183-1.182 1.208-2.467.141-1.333-1.106-1.723-.878-2.683 1.564-2.7 6.867-2.922 8.688-1.288 10.494 1.459 1.612 1.434 1.99-.302 4.561-4.242 6.286-4.664 7.882-3.403 12.888.83 3.296.87 5.029.135 5.764-.579.579-1.052 2.228-1.052 3.665 0 1.593-1.162 3.726-2.978 5.465-2.178 2.087-2.825 3.459-2.411 5.108.664 2.647-3.186 8.514-5.104 7.778-1.2-.46-3.507-4.602-3.507-6.294 0-.46.9-1.072 2-1.36 2.928-.765 2.44-3.348-.913-4.832-1.602-.709-3.627-2.787-4.5-4.617-1.928-4.044-1.924-3.781-.09-5.615 1.303-1.303 1.862-1.314 4.335-.08 1.561.779 3.37 2.58 4.018 4.004 1.401 3.076 3.303 2.748 4.552-.785 1.55-4.384.467-5.692-6.902-8.341-1.862-.67-1.828-.764.5-1.373 1.551-.405 2.621-1.491 2.82-2.862.279-1.93-.137-2.209-3.296-2.209-3.373 0-3.775.343-5.98 5.102-2.033 4.39-2.498 4.844-3.32 3.25-.526-1.018-1.267-4.291-1.647-7.272-.639-5.009-1.462-8.441-4.762-19.84-1.067-3.684-1.002-4.653.476-7.155 1.975-3.344 2.22-8.871.553-12.528-.92-2.021-.83-3.364.445-6.61.88-2.24 1.352-4.72 1.048-5.51-.946-2.465-3.27-1.579-4.753 1.813-.781 1.787-1.458 2.687-1.502 2-.092-1.405-3.082-1.751-3.082-.357 0 .491.675 1.152 1.5 1.469 1.08.414 1.5 2.104 1.5 6.034 0 4.579-.389 5.765-2.413 7.357-1.623 1.277-2.633 3.369-3.087 6.4-.615 4.099-.444 4.654 1.907 6.194 3.478 2.279 5.07 6.478 6.915 18.249 2.349 14.972 2.459 16.431 1.72 22.815-.4 3.472-.211 8.007.46 10.99.796 3.53.834 5.898.126 7.775-.93 2.461-.629 3.054 3.426 6.76 2.445 2.236 4.772 4.064 5.173 4.064.4 0 1.444 1.095 2.321 2.433 1.24 1.892 1.348 2.892.488 4.5-1.635 3.055-3.727 2.52-5.603-1.433-.913-1.925-2.033-3.5-2.488-3.5-1.638 0-1.853 1.742-.445 3.603.79 1.043 1.45 2.615 1.468 3.492.018.877.932 2.41 2.032 3.405 1.1.995 2 2.79 2 3.988s.288 2.466.64 2.818c.916.917 2.36-.183 2.36-1.797zm1.01-22.997c-1.32-1.592-.723-4.513.923-4.513 1.077 0 3.067 3.201 3.067 4.934 0 1.568-2.563 1.297-3.99-.421zm-7.198-9.763c-.552-3.795.343-7.75 1.754-7.75 1.21 0 3.414 5.627 3.428 8.75.003.688-1.088 1.25-2.424 1.25-1.757 0-2.522-.624-2.758-2.25zM610 721.427c0-2.563 3.31-2.272 3.812.334.23 1.2-.308 1.739-1.739 1.739-1.43 0-2.073-.642-2.073-2.073zm61.975 76.098c2.248-2.248 3.516-6.303 2.664-8.523-1.072-2.795-3.359-1.524-5.003 2.781-2.793 7.313-1.762 9.843 2.339 5.742zM377 793.97c0-1.597-2.658-3.145-3.667-2.136-.319.32-.314 1.275.012 2.124.767 1.998 3.655 2.008 3.655.012zm126 .409c0-.768.482-.723 1.524.142.838.696 1.644 1.088 1.79.873.146-.216 1.308-2.695 2.583-5.508 1.82-4.015 2.087-5.547 1.24-7.127-1.026-1.919-5.78-3.597-7.381-2.607-1.139.704-.908 4.349.275 4.349.568 0 1.275.633 1.571 1.406.615 1.602-2.428 5.594-4.265 5.594-1.577 0-2.63 1.718-1.837 3 .845 1.368 4.5 1.269 4.5-.122zm103.5-2.101c.57-.426.249-.753-.75-.762-.973-.01-1.75.725-1.75 1.652 0 .916.338 1.26.75.761.412-.497 1.2-1.24 1.75-1.651zm-202-2.777c0-1.833-.522-3.507-1.159-3.72-1.326-.442-2.83 5.121-1.823 6.748 1.262 2.043 2.982.297 2.982-3.028zm112.85-.532c-.31-.807-.966-1.468-1.457-1.468-1.026 0-1.207 2.353-.254 3.306 1.067 1.067 2.312-.27 1.71-1.838zm-73.216-2.467c.877-4.289.528-4.693-2.601-3.018-1.942 1.038-2.776 1.06-3.93.103-1.187-.986-1.672-.826-2.566.844-.958 1.79-.672 2.324 2.18 4.076 4.367 2.68 6.059 2.19 6.917-2.005zm12.366 1.916c0-.78-1.013-1.56-2.25-1.737-2.477-.351-2.914.756-1.038 2.633 1.497 1.496 3.288 1.008 3.288-.896zm64.5-4.264c0-.74.915-2.402 2.033-3.692 1.254-1.444 1.758-2.942 1.316-3.903-.395-.857-.616-3.883-.492-6.725.21-4.797-.01-5.343-3.065-7.607-9.858-7.305-14.529-7.38-6.076-.098l5.199 4.479-.586 6.696c-.322 3.684-.978 7.125-1.457 7.647-1.64 1.787-.954 4.55 1.128 4.55 1.1 0 2-.606 2-1.347zm-146-4.212c0-.793-.338-1.455-.75-1.473-.412-.017-3.221-2.224-6.242-4.904-5.484-4.866-5.488-4.876-3.567-6.999 1.52-1.678 1.728-2.68.991-4.764-1.318-3.731-2.954-3.87-4.403-.372-1.276 3.082-4.15 4.732-6.12 3.515-.772-.477-.756-.027.053 1.485.639 1.194 2.202 2.644 3.473 3.223 1.271.58 5.105 3.711 8.519 6.96 5.918 5.632 8.046 6.512 8.046 3.329zm95.5 1.559c-.34-.55-1.041-1-1.559-1s-.941.45-.941 1 .702 1 1.559 1 1.28-.45.941-1zm-26.5-3.587c0-.242-.417-1.222-.927-2.177-.51-.955-1.178-2.543-1.485-3.53-.912-2.927-4.588-.325-4.588 3.247 0 5.27.714 6.036 4.065 4.365 1.614-.806 2.935-1.663 2.935-1.905zm-298.531-.463c-1.071-1.733-3.469-.983-3.469 1.085 0 1.735.3 1.875 2.028.95 1.115-.597 1.764-1.513 1.441-2.035zm355.923 1.47c.72-1.875-.33-9.263-1.41-9.931-2.116-1.308-4.936 7.902-3.295 10.761.782 1.362 4.088.78 4.705-.83zm-253.51-1.777c.619-.746.866-2.659.549-4.25-.885-4.443 1.018-8.393 4.044-8.393 1.956 0 2.522-.507 2.51-2.25-.008-1.238-.427-2.9-.93-3.695-.782-1.236-1.443-1.163-4.547.5-1.999 1.07-4.22 2.62-4.937 3.445-1.376 1.582-2.913 14.325-1.856 15.382 1.083 1.083 4 .665 5.166-.739zm106.713-2.201c1.95-4.112.726-6.783-2.053-4.477-2.064 1.713-2.003 8.035.078 8.035.157 0 1.046-1.601 1.975-3.558zM412 777c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm-298-3.333c0-3.636-.758-4.335-3.108-2.868-2.18 1.362-2.4 2.793-.692 4.501 2.087 2.087 3.8 1.35 3.8-1.633zm165.808-1.331c.228-1.97-.229-2.835-1.75-3.318-1.733-.55-2.054-1.472-2.036-5.835.016-3.599.62-5.947 1.978-7.683 2.639-3.373 2.594-5.323-.101-4.468-1.911.607-2.04.386-1.42-2.433.789-3.594-1.47-5.21-4.572-3.273-2.368 1.479-4.907.478-4.907-1.933 0-2.107 2.905-2.588 4.713-.78 2.08 2.08 3.539-.136 2.865-4.35-.385-2.405-.195-4.52.478-5.331 1.338-1.611.426-3.432-1.718-3.432-1.29 0-1.486-1.277-1.191-7.75.279-6.122.06-7.75-1.038-7.75-.765 0-1.718.675-2.117 1.5-1.864 3.855-3.32 8.892-3.756 12.999-.29 2.734-1.41 5.608-2.857 7.327-1.309 1.555-2.653 3.917-2.987 5.249-.697 2.776.18 5.807 1.454 5.02.472-.292 1.7.084 2.73.837 1.566 1.145 1.683 1.748.719 3.717-2.052 4.19-2.476 9.456-.87 10.788 1.153.958 1.229 1.728.358 3.639-.607 1.333-1.482 2.424-1.944 2.424-.461 0-.839 1.11-.839 2.465 0 3.207 3.131 4.848 7.825 4.1 2.021-.323 4.35-.129 5.175.43 2.645 1.792 5.473.74 5.808-2.16zm-11.558-14.498c-1.282-.518-1.736-4.519-.637-5.618.337-.337 1.935.365 3.551 1.56 2.71 2.003 2.803 2.27 1.196 3.446-1.854 1.356-2.155 1.4-4.11.612zM396 770.818c0-1.672-1.523-2.438-3.41-1.714-1.565.6-2.171 3.482-.982 4.67.862.862 4.392-1.514 4.392-2.956zm294.457 1.337c1.785-1.305 1.784-1.438-.024-4.5-2.093-3.543-2.684-3.761-4.705-1.74-.778.778-2.225 1.34-3.214 1.25-2.646-.243-2.937 1.912-.577 4.272 2.37 2.37 5.858 2.664 8.52.718zm-224.994-3.365c.554-2.207.19-3.068-1.964-4.637-2.57-1.872-6.43-9.225-7.875-15.003-.392-1.568-1.576-4.043-2.63-5.5-2.733-3.775-3.706-16.389-1.638-21.23.84-1.968 2.23-4.161 3.086-4.872 2.604-2.161 1.774-3.548-2.124-3.548-3.278 0-3.91.438-5.78 4-1.523 2.905-2.706 3.978-4.318 3.92-2.758-.098-2.78.599-.123 3.976 1.622 2.062 1.837 2.978.95 4.047-.882 1.063-.44 3.474 1.923 10.467 1.688 4.998 3.962 10.55 5.054 12.338 1.092 1.789 2.697 4.827 3.568 6.752 1.445 3.197 9.027 11.773 10.55 11.933.352.037.947-1.153 1.321-2.643zM373 767.24c0-.692-.91-1.827-2.023-2.522-1.7-1.062-2.121-1.005-2.645.36-.631 1.644 1.11 3.378 3.418 3.407.688.01 1.25-.552 1.25-1.245zm53.365-1.813c2.396-1.884 3.7-5.965 1.885-5.9-.853.031-8.25 6.743-8.25 7.486 0 1.266 4.01.267 6.365-1.586zm128.904.823c.64-1.835-.287-3.75-1.817-3.75-1.757 0-2.769 1.732-2.072 3.548.683 1.78 3.292 1.915 3.89.202zm-176.47-3.306c.38-3.885-1.429-8.734-3.055-8.192-.778.259-1.29 2.556-1.366 6.134-.113 5.289.037 5.697 2 5.417 1.55-.221 2.202-1.126 2.42-3.36zM113 763.378c0-1.774-.247-1.918-1.5-.878-.825.685-1.5 1.64-1.5 2.122 0 .483.675.878 1.5.878.862 0 1.5-.902 1.5-2.122zm520.67-11.133c.311-.966.053-2.373-.573-3.128-.893-1.076-.703-1.487.876-1.9 1.67-.436 1.907-1.068 1.384-3.68-.527-2.638-.29-3.242 1.455-3.698 1.583-.414 2.588-2.269 4.17-7.692 1.146-3.93 3.054-9.1 4.239-11.488 1.956-3.942 2.046-4.854.984-9.919-.773-3.686-.836-5.98-.184-6.765.542-.654.706-2.588.364-4.299-.444-2.22-.016-4.137 1.497-6.7 1.165-1.975 2.118-4.944 2.118-6.599 0-3.138 1.371-6.391 3.658-8.678.738-.738 1.342-2.708 1.342-4.379 0-2.73.25-2.974 2.47-2.417 1.905.478 2.83.07 4.046-1.787.867-1.324 2.456-2.637 3.53-2.918 2.728-.713 2.48-4.284-.546-7.88-1.375-1.634-2.5-3.612-2.5-4.395 0-2.436-2.928-1.558-3.59 1.077-.344 1.375-.958 2.5-1.363 2.5-1.12 0-4.003-3.448-5.997-7.17-1.737-3.243-5.05-5.11-5.05-2.847 0 1.818 5.96 13.329 8.068 15.581 1.063 1.136 1.932 2.812 1.932 3.725 0 1.31-.63 1.535-2.985 1.064-3.394-.679-4.823 1.244-3.21 4.319 1.386 2.642-.217 5.972-3.753 7.801-2.869 1.484-4.248 4.527-2.052 4.527 1.83 0 1.031 2.913-1.115 4.062-1.726.924-2.013 1.763-1.558 4.566.447 2.756.026 4.07-2.135 6.653-6.053 7.238-6.612 10.076-1.807 9.175 4.14-.777 5.246.607 3.62 4.532-1.417 3.42-3.432 4.389-6.129 2.946-1.089-.583-2.968-.904-4.178-.715-1.867.293-1.558.682 2.052 2.583 3.918 2.064 4.25 2.55 4.25 6.238 0 2.544-.91 5.442-2.5 7.96-1.375 2.178-2.5 4.59-2.5 5.358 0 .769-.671 3.004-1.491 4.966-.864 2.067-1.101 3.81-.565 4.142.51.315-.17 1.668-1.509 3.008-1.34 1.34-2.435 3.554-2.435 4.921 0 1.368-.45 2.765-1 3.105-1.774 1.097-1.068 2.995 1.75 4.705l2.75 1.669 1.802-5.187c.99-2.853 2.056-5.977 2.368-6.942zm80.873 5.507c-.29-.758-.982-1.099-1.536-.756-1.153.712-1.36 4.818-.296 5.882.953.953 2.502-3.38 1.832-5.126zm-381.328 1.176c.94-2.065.897-2.741-.224-3.434-2.032-1.255-2.991-.273-2.991 3.065 0 3.627 1.644 3.816 3.215.37zm339.956.917c1.006-.91 1.829-2.085 1.829-2.61 0-.526 2.331-4.16 5.18-8.078 2.85-3.917 5.916-9.499 6.814-12.404.9-2.905 2.168-5.815 2.82-6.467 2.265-2.265.747-15.703-1.963-17.378-1.728-1.068-2.761 1.7-1.682 4.509.546 1.42 1.17 4.661 1.385 7.202.313 3.678-.016 4.99-1.617 6.438-1.105 1-2.869 3.761-3.919 6.135-1.974 4.462-5.722 6.88-9.238 5.96-2.215-.579-2.263.681-.148 3.909 1.464 2.234 1.475 2.668.109 4.215-1.643 1.86-3.408 10.224-2.158 10.224.418 0 1.582-.745 2.588-1.655zM250.82 755.25c-.21-1.477-1.007-2.25-2.32-2.25s-2.11.773-2.32 2.25c-.262 1.846.155 2.25 2.32 2.25s2.582-.404 2.32-2.25zm57.707 1.206c.766-1.239-1.266-3.956-2.958-3.956-2.048 0-4.907 2.644-4.163 3.848.889 1.438 6.25 1.519 7.121.108zm166.112-.458c.88-2.292-.495-6.498-2.123-6.498-.795 0-1.947.937-2.56 2.083-.89 1.662-.765 2.471.62 4 2.087 2.307 3.29 2.43 4.063.415zm73.18-1.326c.176-1.195.739-2.172 1.25-2.172 1.521 0 1.057-6.65-.557-7.99-1.926-1.599-3.02.828-2.074 4.599.465 1.853.161 2.963-1.055 3.853-1.065.779-1.459 1.899-1.045 2.977.875 2.28 3.078 1.478 3.482-1.267zM618.5 753.5c0-1.283-.562-2.52-1.25-2.75-1.533-.51-2.684 2.176-1.856 4.333.88 2.293 3.106 1.158 3.106-1.583zm-250.553.564c.655-.79 2.567-1.738 4.25-2.107 2.162-.475 3.386-1.54 4.178-3.639.759-2.011 2-3.143 3.85-3.513 4.047-.81 5.281-2.744 3.433-5.383-.991-1.415-1.244-2.902-.73-4.293.849-2.303.396-4.629-.903-4.629-.444 0-1.065 1.021-1.378 2.27-.313 1.248-1.535 3.306-2.714 4.571-1.18 1.266-2.465 3.507-2.856 4.98-.443 1.667-1.513 2.797-2.833 2.99-1.293.19-2.243 1.166-2.433 2.5-.272 1.913-.931 2.189-5.228 2.189-5.306 0-6.652 1.288-4.056 3.884 2.002 2.002 5.83 2.095 7.42.18zM559 754c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm-302.184-2.759c.174-1.507-.073-2.741-.55-2.741-1.493 0-3.266 2.32-3.266 4.273 0 3.05 3.447 1.666 3.816-1.532zm285.184.224c0-.57-.753-2.184-1.672-3.588-1.105-1.686-1.74-4.983-1.869-9.715-.107-3.939-.528-10.456-.936-14.483-.646-6.388-1.045-7.46-3.132-8.41-3.231-1.473-3.009-3.398.609-5.269 1.65-.853 3.053-2.102 3.117-2.776.064-.673.19-3.474.28-6.224.09-2.75.698-6.125 1.352-7.5 1.914-4.022 3.41-14.242 2.254-15.397-.552-.552-1.003-2.31-1.003-3.908 0-1.598-1.344-4.897-2.987-7.331-1.643-2.435-3.612-7.131-4.376-10.438-.764-3.306-1.707-6.329-2.095-6.717-1.367-1.368-3.542 3.224-3.542 7.48 0 3.571.64 5.012 3.75 8.45 3.636 4.02 3.765 4.423 4.25 13.254.434 7.907.204 9.802-1.75 14.386-1.238 2.903-2.25 6.11-2.25 7.127 0 1.017-.62 2.364-1.38 2.994-.758.63-1.633 2.416-1.944 3.97-.786 3.93-4.493 9.78-8.894 14.035-2.602 2.516-3.46 4.011-2.858 4.98 1.528 2.459 5.94.367 9.31-4.414 1.733-2.46 3.762-4.471 4.51-4.471 2.547 0 4.013 6.204 4.072 17.234.054 10.058.226 10.954 2.74 14.25 2.655 3.482 4.444 4.48 4.444 2.48zm-255.105-.88c1.923-1.216.814-9.093-1.52-10.8-2.973-2.174-3.467-1.482-2.829 3.965.957 8.164 1.329 8.749 4.35 6.836zm11.708-2.79c2.17-2.341 2.776-2.54 4.493-1.467 3.306 2.064 4.146.248 1.397-3.019-2.414-2.869-2.458-3.114-.776-4.344 1.687-1.234 1.657-1.438-.553-3.79-1.907-2.03-2.136-2.858-1.25-4.515.597-1.116 1.086-3.034 1.086-4.263 0-1.23 1.404-4.723 3.12-7.763 2.746-4.867 3.053-6.17 2.565-10.9-.305-2.955-1.147-6.087-1.87-6.96-.842-1.018-1.324-4.5-1.34-9.682-.026-8.292-1.886-19.153-3.647-21.29-.543-.66-.84-4.035-.658-7.5.31-5.903.196-6.289-1.78-6.089-1.164.118-3.148-.89-4.424-2.25-3.166-3.37-4.602-3.096-6 1.143-.937 2.836-.921 4.11.072 5.966.908 1.696.962 2.724.19 3.654-.592.712-1.2 4.44-1.353 8.284-.244 6.164.093 7.717 2.86 13.142 4.112 8.068 5.601 13.523 5.691 20.848l.074 6 3.25-.147c2.812-.128 3.25.178 3.25 2.271 0 1.33-1.139 4.14-2.53 6.243-2.6 3.929-4.53 12.662-4.353 19.693.055 2.167-.226 5.177-.625 6.69-.914 3.466-.071 3.478 3.111.044zm3.406-38.29c-1.12-.692-1.165-1.368-.224-3.433 1.57-3.447 3.215-3.258 3.215.369 0 3.338-.959 4.32-2.99 3.065zm-6.629-20.457c-.712-1.856.327-3.548 2.179-3.548.87 0 1.441.99 1.441 2.5 0 2.748-2.671 3.52-3.62 1.048zm.87-5.647c-1.857-.69-2.247-1.585-2.235-5.119.019-5.192 1.146-7.522 2.698-5.58 1.737 2.174 4.287 7.611 4.287 9.141 0 1.928-1.994 2.582-4.75 1.558zm-144.99 58.98c-1.04-2.76-.956-3.148.787-3.604 2.048-.535 2.306-1.904 2.219-11.777-.061-6.893-1.24-11.5-2.942-11.5-1.99 0-4.324 6.09-4.324 11.277 0 2.387-.66 5.214-1.468 6.282-.808 1.067-1.476 2.391-1.485 2.941-.009.55.376.38.857-.378 1.632-2.577 3.128-.173 2.466 3.964-.488 3.05-.217 4.426 1.174 5.963 2.597 2.87 4.263.926 2.717-3.169zm-5.62-.574c-1.188-1.189-2.73 1.293-1.995 3.21.662 1.726.778 1.703 1.69-.342.539-1.207.676-2.497.305-2.868zM509 744.5c0-1.333-.667-2-2-2-2.267 0-2.563 1.037-.8 2.8 1.763 1.763 2.8 1.467 2.8-.8zm-256.484-2.072c.34-1.546.137-3.708-.45-4.804-.586-1.096-1.066-2.904-1.066-4.018 0-1.114-1.216-3.152-2.702-4.53-1.486-1.378-2.378-2.829-1.983-3.224s1.25-.186 1.902.465c.65.65 2.168 1.183 3.372 1.183 1.717 0 2.332.768 2.857 3.564.801 4.27 2.921 4.11 3.357-.251.578-5.792-7.012-11.704-10.52-8.195-.825.824-1.467.56-2.441-1-.728-1.165-1.901-2.118-2.608-2.118-.995 0-1.223 2.918-1.01 12.912l.276 12.913 5.2-.044c4.871-.04 5.238-.22 5.816-2.853zM460 742c0-.825-.675-1.5-1.5-1.5s-1.5.675-1.5 1.5.675 1.5 1.5 1.5 1.5-.675 1.5-1.5zm95.8-1.7c1.829-1.829 1.542-5.145-.382-4.407-.87.334-2.22.607-3 .607-1.437 0-1.976 3.109-.751 4.333 1.024 1.025 2.805.795 4.133-.533zm103.738-8.05c.433-1.754.278-2.75-.43-2.75-.61 0-1.108.637-1.108 1.417 0 .779-.531 1.593-1.18 1.81-.708.236-.895 1.135-.467 2.25.868 2.261 2.244 1.083 3.185-2.727zm-375.774 2.323c.955-.51 2.569-1.188 3.586-1.507 1.516-.475 1.773-1.346 1.42-4.823-.236-2.334-.795-5.071-1.241-6.083-.674-1.526-.404-1.799 1.58-1.599 3.331.337 7.891-1.707 7.891-3.536 0-1.024-.975-1.525-2.965-1.525-2.03 0-3.335-.693-4.142-2.2-1.036-1.936-.804-2.51 1.932-4.795l3.11-2.596-2.508-2.705c-2.76-2.976-4.427-3.464-4.427-1.298 0 .914-.7 1.224-2 .884-1.1-.288-2.042-.133-2.094.343-.052.477-.237 3.966-.413 7.753-.231 5.01-.877 7.642-2.368 9.66l-2.05 2.773 2.47 1.62 2.472 1.618-2.143 2.9c-1.18 1.595-1.872 3.605-1.54 4.47.701 1.828 1.081 1.9 3.43.646zm109.013-1.63c1.641-1.149 2.223-2.562 2.223-5.397 0-3.108.812-4.748 4.25-8.589 2.337-2.611 4.81-6.077 5.494-7.702 1.103-2.621.99-3.277-1-5.816-2.285-2.913-5.524-3.495-4.9-.88 1.587 6.652 1.389 7.677-2.266 11.723-3.192 3.534-8.578 14.331-8.578 17.198 0 1.495 2.235 1.244 4.777-.537zM460 732.56c0-2.318-1.795-3.664-3.12-2.34-1.255 1.256-.035 4.281 1.727 4.281.766 0 1.393-.873 1.393-1.941zm40.26-7.348c-.652-9.62-2.389-9.793-3.67-.364-.822 6.042-.724 6.836 1 8.108 1.05.776 2.2 1.103 2.554.728.354-.376.406-4.188.116-8.472zm129.104 7.087c.586-.936.725-2.042.31-2.457-.881-.882-5.942 1.962-6.507 3.657-.61 1.831 4.976.75 6.197-1.2zM141 726.5c0-1.111-.667-2-1.5-2s-1.5.889-1.5 2 .667 2 1.5 2 1.5-.889 1.5-2zm172-.622c0-1.33-.271-1.398-1.5-.378-.825.685-1.5 1.415-1.5 1.622 0 .208.675.378 1.5.378s1.5-.73 1.5-1.622zm343-.937c0-.793-.675-1.441-1.5-1.441-1.506 0-2.056 2.111-.86 3.306.933.933 2.36-.194 2.36-1.865zm-102.513-2.063c2.019-4.832 1.916-5.575-.717-5.198-2.884.414-4.675 5.025-2.82 7.26 1.75 2.108 1.808 2.074 3.537-2.062zM630.5 725.5c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm35.072-1.328c.783-2.038-1.334-6.672-3.047-6.672-1.004 0-1.525.958-1.525 2.8 0 4.105 3.383 6.97 4.572 3.872zm7.36-1.576c2.042-2.868 2.807-7.096 1.284-7.096-1.417 0-4.108-5.557-3.313-6.843.599-.969 1.064-.902 2.058.296 2.07 2.493 2.742 1.843 3.426-3.312.39-2.935 1.43-5.57 2.629-6.655 1.878-1.7 2.086-1.704 3.885-.076 2.417 2.187 3.983.228 1.777-2.223-.885-.984-1.82-4.813-2.244-9.187-1.347-13.925-2.951-21.476-4.63-21.8-1.002-.192-1.811.704-2.257 2.5-.382 1.54-1.536 3.702-2.564 4.804-2.737 2.934-3.3 19.054-.733 20.935 2.443 1.789 2.18 3.992-.655 5.51-3.052 1.633-4.771.6-4.015-2.412.323-1.287-.037-3.53-.799-4.985-1.35-2.577-1.43-2.597-3.098-.755-1.525 1.686-1.56 2.262-.317 5.297 2.786 6.805 2.858 7.7.676 8.393-2.62.831-2.652 4.12-.047 4.801 1.097.287 2.307 1.352 2.688 2.367.381 1.015 1.389 2.366 2.24 3.003 1.31.982 1.358 1.677.311 4.57-.679 1.878-1.234 3.945-1.234 4.593 0 2.194 2.852 1.196 4.932-1.725zM677 683.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm-358.196 37.8c.416-3.482-2.555-4.641-3.388-1.322-.332 1.325-.296 2.908.082 3.518 1.109 1.795 2.978.555 3.306-2.195zm116.816.748c.306-.799.252-1.946-.12-2.549-.978-1.581-3.536.743-2.834 2.574.708 1.843 2.242 1.83 2.954-.025zm157.994-6.43c.47-1.674.182-2.653-.973-3.299-1.801-1.008-2.316-7.723-.719-9.369 1.438-1.482 2.475-8.45 1.257-8.45-1.528 0-4.83 5.035-5.575 8.5-.355 1.65-.246 5.124.24 7.72.682 3.63.55 5.199-.568 6.796-.8 1.142-1.19 2.766-.867 3.608.495 1.29 1.056 1.165 3.562-.797 1.636-1.28 3.275-3.399 3.643-4.708zm-447.126.257c1.37-3.28 1.798-3.568 4.493-3.029 2.292.459 3.214.158 3.996-1.303 1.344-2.512.283-5.043-2.115-5.043-2.634 0-3.454-2.689-1.483-4.866.891-.985 1.621-2.483 1.621-3.328 0-.845.974-2.775 2.165-4.289l2.165-2.752-2.415-4.464c-2.882-5.327-3.55-5.849-5.459-4.265-1.847 1.533-1.981-.222-.231-3.025.973-1.558.962-2.223-.054-3.236-1.037-1.034-1.635-.803-3.163 1.218-2.112 2.795-2.095 2.815-4.454-5.175-.684-2.318-1.764-4.388-2.399-4.6-1.733-.577-2.634 2.785-1.313 4.9.637 1.02 1.158 2.775 1.158 3.9s.72 2.321 1.6 2.659c.88.337 2.722 1.736 4.093 3.107 2.735 2.735 2.742 2.364-.294 16.716-1.77 8.362-2.216 15.928-1.111 18.807.944 2.461 1.506 2.122 3.2-1.932zm113.593-1.027c.78-1.458 1.278-3.483 1.106-4.5-.38-2.244 1.36-2.47 2.199-.285.33.86 1.016 1.307 1.525.992 1.153-.712.4-18.644-.834-19.878-1.511-1.511-3.077.265-3.077 3.49 0 2.715-.262 2.984-2.386 2.451-1.38-.347-2.804-.077-3.38.642-1.506 1.878-.734 17.808.914 18.853 2.026 1.284 2.389 1.121 3.933-1.765zm.502-9.214c-.43-.697-.513-1.537-.183-1.867.895-.895 1.87.421 1.387 1.871-.338 1.016-.574 1.016-1.204-.004zm62.24 8.199c-.486-2.509-2.823-2.853-2.823-.416 0 1.228.646 2.083 1.573 2.083.932 0 1.442-.68 1.25-1.667zM414 711.878c0-1.537-2.568-1.886-3.444-.468-.31.5-.283 1.637.058 2.525.48 1.251.932 1.357 2.003.468.76-.631 1.383-1.768 1.383-2.525zm206 1.422c0-1.615-.296-1.904-1.113-1.087-.612.612-.81 1.602-.44 2.2 1.034 1.674 1.553 1.302 1.553-1.113zm-239.2 0c1.499-1.499 1.58-5.8.11-5.8-1.37 0-4.832 4.081-4.877 5.75-.042 1.593 3.19 1.627 4.767.05zm42.576-.338c.77-2.007-2.29-3.208-3.462-1.358-1.351 2.135-1.094 2.896.979 2.896 1.041 0 2.159-.692 2.483-1.538zM444 712c0-.825-.45-1.5-1-1.5s-1 .675-1 1.5.45 1.5 1 1.5 1-.675 1-1.5zm268.5-.333c0-1.809-1.957-1.479-2.345.395-.216 1.043.158 1.5 1 1.22.74-.247 1.345-.974 1.345-1.615zM374 706.786c0-2.501-.127-2.587-1.618-1.096-.89.89-1.314 2.111-.941 2.714 1.227 1.986 2.559 1.143 2.559-1.618zm63.22-5.79c.223-4.788-.022-5.996-1.22-5.996-1.693 0-3.697 10.242-2.575 13.165 1.285 3.349 3.497-.832 3.794-7.17zm23.78 7.586c0-.505.273-1.63.607-2.5.893-2.327-2.307-2.011-3.572.352-1.439 2.689-1.32 3.066.965 3.066 1.1 0 2-.413 2-.918zm260.5-3.908c2.454-1.693 4.136-3.709 4.35-5.217.194-1.351.817-2.746 1.386-3.1.573-.355.745-1.795.387-3.223-.589-2.346-.876-2.476-3.16-1.436-1.384.632-2.772 2.301-3.092 3.723-.32 1.419-1.626 3.479-2.904 4.579-2.795 2.406-4.387 7.517-2.325 7.467.747-.019 3.158-1.275 5.358-2.793zm-196.523-1.13c.796-1.488.625-2.646-.715-4.838-2.13-3.485-4.262-3.087-4.262.796 0 5.803 2.812 8.087 4.977 4.042zm-182.68-1.149c1.28-2.034-1.089-10.601-3.15-11.392-.789-.303-1.505-.427-1.593-.277-.087.15-.965 1.56-1.95 3.13-2.259 3.606-.77 5.853 2.518 3.8 1.14-.712 2.265-1.103 2.499-.868.674.674-.74 3.712-1.728 3.712-.491 0-.893.933-.893 2.073 0 2.435 2.722 2.323 4.296-.178zm68.388-1.762c-.277-1.448.145-4.184.937-6.08 2.643-6.326-.81-8.572-4.02-2.613-2.327 4.321-2.36 8.065-.093 10.57 2.237 2.472 3.828 1.532 3.176-1.877zm45.752-1.951c1.898-10.92 1.914-11.718.216-10.31-.88.731-1.896 2.971-2.258 4.978-.362 2.008-1.084 4.473-1.604 5.478-.52 1.006-.702 2.46-.406 3.233.947 2.467 3.39.43 4.052-3.38zm35.563.7c0-.55-.45-.722-1-.382-.55.34-1 1.068-1 1.618s.45.722 1 .382c.55-.34 1-1.068 1-1.618zm-217-1.26c0-2.023-2.645-4.005-3.5-2.623-.988 1.6.193 4.001 1.969 4.001.842 0 1.531-.62 1.531-1.378zm331.041-.699c.612-1.142 1.26-5.984 1.44-10.76.27-7.206.02-9.062-1.48-10.913-1.746-2.156-1.931-2.177-5.621-.635-3.007 1.256-4.214 1.345-5.695.42-2.764-1.726-3.263-.47-1.38 3.478 1.675 3.513 3.055 4.331 4.195 2.487.34-.55 1.266-1 2.059-1 1.046 0 1.441 1.262 1.441 4.607 0 3.844-.27 4.504-1.627 3.983-1.53-.588-4.373.9-4.373 2.288 0 .349 1.35 1.231 3 1.962 1.684.745 3 2.095 3 3.077 0 3.598 3.301 4.257 5.041 1.006zM290 696.191c0-1.27-.618-3.154-1.373-4.187-1.326-1.813-1.398-1.802-2.068.31-.381 1.202-.408 3.086-.059 4.186.881 2.777 3.5 2.546 3.5-.309zm25 .309c0-2.274-2.508-2.725-3.324-.598-.628 1.636.11 2.598 1.99 2.598.734 0 1.334-.9 1.334-2zm41.5 0c0-.81-.787-1.624-1.75-1.81-1.228-.236-1.75.304-1.75 1.81s.522 2.046 1.75 1.81c.963-.186 1.75-1 1.75-1.81zM253 692.958c0-2.167-.781-4.38-2.012-5.702-1.881-2.019-2.122-2.05-3.685-.487-1.335 1.334-1.452 2.132-.578 3.951.601 1.254 1.345 3.067 1.653 4.03.308.962 1.473 1.75 2.59 1.75 1.66 0 2.032-.648 2.032-3.542zm83.945-4.149c.074-1.607-1.444-2.438-3.214-1.76-1.954.75-4.134 4.99-3.279 6.374.8 1.294 6.403-2.688 6.493-4.614zm155.449 1.63c.752-4.702.24-5.939-2.453-5.939-2.523 0-2.822 2.553-.893 7.627 1.341 3.526 2.615 2.884 3.346-1.688zm-88.858 1.002c.65-1.05-3.517-7.85-6.145-10.031-2.066-1.715-2.96 1.617-1.317 4.907 2.787 5.58 5.872 7.698 7.462 5.124zm127.068-1.67c-1.016-1.017-1.855.514-1.021 1.863.63 1.02.866 1.02 1.204.004.232-.695.15-1.535-.183-1.867zM564 691.58c0-1.952-1.252-4.044-2.105-3.516-1.485.917-1.005 4.435.605 4.435.825 0 1.5-.413 1.5-.918zM265 685c1.866-1.925 4.149-3.5 5.074-3.5.924 0 2.237-.67 2.916-1.488 2.132-2.568-1.542-2.967-4.954-.538-1.922 1.37-3.768 1.928-5.035 1.526-1.424-.452-2.001-.18-2.001.942 0 .868-.9 2.348-2 3.29-2.623 2.246-2.528 3.268.304 3.268 1.32 0 3.752-1.494 5.696-3.5zm59-.5c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm241.782-.846c.287-.86-.194-1.22-1.334-1-.98.19-1.984.951-2.23 1.691-.287.861.194 1.221 1.334 1 .98-.19 1.984-.95 2.23-1.69zm-285.99-6.904c-.23-6.092-.613-7.75-1.792-7.75-.925 0-1.63 1.15-1.838 3-.187 1.65-.755 3.503-1.263 4.117-.591.716-.383 1.566.579 2.365.954.792 1.284 2.117.904 3.632-.492 1.96-.215 2.386 1.552 2.386 2.04 0 2.135-.395 1.858-7.75zM388.5 681.5c.34-.55 1.491-1 2.559-1 3.37 0 2.107-2.475-2.309-4.526-2.93-1.36-4.352-2.692-4.578-4.285-.18-1.271-.967-2.557-1.75-2.857-2.082-.8-1.736-3.332.456-3.332 3.07 0 4.616-2.62 3.278-5.558-.626-1.374-1.888-2.786-2.803-3.137-2.192-.841-5.61 3.307-4.809 5.834.325 1.024.159 1.861-.37 1.861-1.805 0-2.073 2.895-.55 5.949.838 1.678 2.165 3.051 2.95 3.051.784 0 1.426.45 1.426 1s-.675 1-1.5 1c-2.14 0-1.853 1.995.674 4.686 2.233 2.376 6.227 3.093 7.326 1.314zm143.5-1.619c0-.89-.96-4.603-2.134-8.25-1.174-3.647-2.285-7.193-2.469-7.881-.184-.688-1.08-1.25-1.99-1.25-1.303 0-1.53.633-1.065 2.961.326 1.629.157 3.23-.375 3.56-.532.328-.967 1.695-.967 3.038 0 1.798.543 2.441 2.059 2.441 1.132 0 1.814.397 1.514.882-.631 1.021 3.118 6.118 4.5 6.118.51 0 .927-.728.927-1.619zm-117.88-3.605c.654-1.223 3.435-4.598 6.18-7.5 4.218-4.46 4.663-5.276 2.879-5.276-3.944 0-9.02 3.187-10.207 6.409-.626 1.7-1.567 3.897-2.09 4.882-.989 1.864-.421 3.709 1.142 3.709.498 0 1.441-1 2.096-2.224zM641.23 672c1.043-6.985.1-10.3-4.004-14.06-3.252-2.979-3.456-3.486-2.447-6.095 1.444-3.734 2.573-12.967 1.748-14.302-1.124-1.818-4.285.695-5.498 4.37-1.621 4.911-3.579 6.304-5.903 4.2-2.018-1.826-5.126-1.224-5.126.994 0 .766.853 1.393 1.896 1.393s3.262 1.555 4.93 3.455c3.285 3.741 3.27 4.113-.566 13.677-1.16 2.89-1.213 4.088-.26 5.866 1.055 1.973 1.369 2.062 2.674.756.814-.813 1.731-3.453 2.038-5.866.78-6.12 2.028-8.348 3.837-6.847 3.422 2.84 5.566 10.366 3.563 12.509-.488.522-1.205 2-1.593 3.282-.613 2.026-.4 2.288 1.629 2 1.966-.28 2.452-1.12 3.081-5.332zm23.781 3.48c1.101-2.058.601-3.98-1.035-3.98-1.293 0-3.184 3.854-2.463 5.02.96 1.554 2.327 1.148 3.498-1.04zm-326.417-.132c.391-.633-.032-1.695-.941-2.36-2.072-1.515-2.18-7.409-.185-10.047.808-1.067 1.483-3.21 1.5-4.762.018-1.552.727-3.517 1.577-4.366 1.94-1.94 1.385-3.813-1.128-3.813-1.13 0-2.534 1.233-3.42 3-.825 1.65-2.513 4.42-3.75 6.154-2.683 3.767-2.72 4.165-.615 6.492 1.509 1.667 1.509 1.99 0 4.293-3.019 4.607-2.329 5.482 5.059 6.411.655.083 1.511-.368 1.903-1.002zM437 674.7c0-2.517-1.818-4.06-4.084-3.468-2.137.56-2.609 3.822-.666 4.606 2.725 1.1 4.75.614 4.75-1.138zm135.873.9c.987-.626 1.183-1.956.697-4.735-.372-2.126-.921-6.002-1.22-8.615-.585-5.118-1.283-5.675-3.87-3.088-1.137 1.138-1.49 2.635-1.118 4.75 2.46 13.984 2.327 13.704 5.51 11.688zM265 674.5c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm348 0c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm-455.246-5.25c1.239-2.337 2.25-5.15 2.249-6.25-.002-1.746-.67-2-5.253-2-4.628 0-5.287.258-5.56 2.173-.38 2.669 3.389 10.327 5.082 10.327.677 0 2.244-1.913 3.482-4.25zm111.321 2.975c-.124-1.196-1.495-.964-1.925.325-.22.66.14 1.02.8.8.66-.22 1.166-.726 1.125-1.125zm191.892-6.534c-.039-4.27-3.055-8.513-5.69-8.006-2.534.488-2.202 3.255.435 3.63 1.873.266 2.122.765 1.626 3.247-.603 3.011 1.139 6.38 2.775 5.368.488-.301.872-2.209.854-4.239zm-320.212-1.441c1.126-1.408 1.082-13.247-.053-14.382-.405-.404-1.104-.315-1.555.199-1.082 1.232-3.23 13.49-2.555 14.582.773 1.25 3.015 1.036 4.163-.399zM280 658.559c0-3.818-.404-7.19-.897-7.496-2.46-1.52-6.715.8-9.363 5.106-1.519 2.469-2.53 4.86-2.25 5.316.655 1.058 4.317.134 7.43-1.876 2.404-1.551 2.416-1.54 1.799 1.546-.662 3.31-.198 4.345 1.948 4.345.983 0 1.333-1.823 1.333-6.941zm331.968 4.691c-.017-.688-.692-2.124-1.5-3.191-1.883-2.49-1.869-4.981.036-6.562.986-.819 1.417-2.666 1.25-5.365-.247-4.002-.157-4.13 3.246-4.624 2.664-.387 3.5-.986 3.5-2.508 0-1.703-.637-1.987-4.29-1.91-2.358.048-4.777.576-5.373 1.173-.597.597-1.603 3.673-2.237 6.836-1.267 6.323-3.6 8.582-3.6 3.484 0-3.938-1.505-3.94-3.54-.007-1.444 2.795-1.447 3.295-.025 5.465.86 1.314 1.565 3.23 1.565 4.257 0 2.844 1.139 3.386 3.198 1.523 1.753-1.587 1.948-1.558 3.388.498 1.655 2.363 4.434 2.954 4.382.931zm65.532-3.545c1.773-3.806 2.308-4.236 4.711-3.782 2.658.501 5.789-1.411 5.789-3.536 0-.534.88-1.914 1.954-3.068 1.801-1.933 1.836-2.324.448-5.008-1.653-3.197-1.2-5.804 1.73-9.965 2.231-3.17 2.423-5.846.419-5.846-1.455 0-7.538 5.844-7.546 7.25-.003.412-.68.75-1.505.75-.933 0-1.5-.944-1.5-2.5 0-3.205-3.43-3.435-5.086-.34-1.033 1.932-1.254 1.984-2.084.5-.845-1.51-1.196-1.522-3.88-.134-3.556 1.839-3.81 4.196-.586 5.422 2.16.822 3.636 2.884 3.636 5.083 0 .477-1.537.225-3.416-.56-3.364-1.406-3.446-1.38-5.431 1.757-2.222 3.51-1.928 5.153.77 4.297 1.536-.488 1.761.193 1.811 5.48.065 6.868 1.455 9.229 5.18 8.796 1.941-.226 3.085-1.372 4.586-4.596zm44.943 2.572c2.038-2.909 1.964-3.777-.32-3.777-2.4 0-4.52 2.525-3.766 4.487.818 2.133 2.272 1.88 4.086-.71zM468.55 660.25c-.373-1.788-.921-5.184-1.218-7.548-.679-5.403-2.326-5.01-4.193 1.001-1.3 4.187-1.261 4.764.474 7.145 1.038 1.424 2.727 2.603 3.751 2.62 1.579.027 1.76-.466 1.186-3.218zM419 659.441c0-2.086-1.471-2.606-2.53-.893-.907 1.468.302 4.211 1.523 3.456.554-.342 1.007-1.495 1.007-2.563zM433.357 661c.825-.825 2.24-1.5 3.145-1.5 2.554 0 1.343-3.448-1.345-3.83-2.745-.39-6.157 2.372-6.157 4.985 0 2.227 2.293 2.409 4.357.345zm116.096-5.647c.913-2.79 1.492-5.241 1.287-5.446-.204-.205-1.805.169-3.556.83-2.945 1.111-3.184 1.548-3.184 5.816 0 7.926 2.66 7.34 5.453-1.2zM161 652.44c0-4.635-2.356-5.45-4.18-1.445-.938 2.058-.823 2.843.655 4.476 2.412 2.666 3.525 1.709 3.525-3.031zm150.965 3.125c.57-1.064 1.035-2.92 1.035-4.123 0-1.764-.272-1.962-1.403-1.024-.771.64-1.559.755-1.75.255-.19-.5-1.36-1.224-2.597-1.61-1.833-.57-2.25-.316-2.25 1.369 0 1.137.45 2.067 1 2.067s1 .585 1 1.3c0 1.422 1.948 3.7 3.165 3.7.42 0 1.23-.87 1.8-1.934zm40.01-.54c1.995-2.123 2.099-2.56.733-3.084-2.984-1.146-5.197-.017-5.524 2.817-.404 3.498 1.649 3.613 4.791.267zM169 654.5c0-1.1-.45-2-1-2s-1 .9-1 2 .45 2 1 2 1-.9 1-2zm410.474-3.95c.84-1.623 1.526-3.586 1.526-4.362 0-.982.794-1.259 2.611-.912 2.365.453 2.542.274 1.876-1.888-.996-3.236-.857-3.17-5.19-2.438-5.623.95-7.005 1.992-5.325 4.016 1.017 1.226 1.062 1.9.186 2.776-1.531 1.531-1.478 4.462.092 5.096 2.268.915 2.684.69 4.224-2.288zm119.888-.55c.316-.825.14-1.5-.393-1.5s-.969.675-.969 1.5.177 1.5.393 1.5c.216 0 .652-.675.969-1.5zm14.525-.409c.862-.546 1.194-1.885.878-3.541-.568-2.971 1.67-5.98 3.832-5.151.736.282 1.6.093 1.917-.422.957-1.548-1.448-4.977-3.49-4.977-2.712 0-3.434-1.735-1.039-2.495 1.108-.352 2.015-1.038 2.015-1.525 0-1.443-2.38-6.425-3.42-7.157-1.467-1.033-6.167 1.789-8.546 5.129-2 2.808-2.028 3.128-.492 5.471 1.719 2.624 1.273 4.577-1.044 4.577-1.688 0-4.498 3.821-4.498 6.116 0 .918.692 1.936 1.538 2.26 1.442.554 1.74.145 3.054-4.197.597-1.972 6.408 2.462 6.408 4.89 0 2.107.752 2.374 2.887 1.022zm-53.352-6.706c2.568-1.683 3.27-4.77 1.353-5.954-.611-.378-1.459-.126-1.883.56-.574.93-1.032.783-1.791-.574-.87-1.554-1.26-1.624-2.64-.479-1.646 1.367-1.36 4.274.67 6.812 1.265 1.58 1.33 1.575 4.291-.365zM161 634.5c0-.55-.45-1-1-1s-1 .45-1 1 .45 1 1 1 1-.45 1-1zm14-3.155c0-1.349-1.722-.98-3.438.736-2.245 2.245-.81 3.953 1.537 1.83 1.046-.947 1.901-2.101 1.901-2.566zm-2.892-5.595c1.186-2.612 2.967-5.784 3.956-7.048 1.445-1.845 1.6-2.866.79-5.192-1.325-3.8-3.043-5.12-6.799-5.227-3.968-.113-4.714.701-2.588 2.827 1.135 1.135 1.511 2.573 1.125 4.298-1.955 8.716-2.622 13.234-2.086 14.102 1.364 2.207 3.562.731 5.602-3.76zm8.674-.096c.287-.86-.194-1.22-1.334-1-.98.19-1.984.951-2.23 1.691-.287.861.194 1.221 1.334 1 .98-.19 1.984-.95 2.23-1.69zM130 620.942c0-.857-.45-1.28-1-.941-.55.34-1 1.041-1 1.559s.45.941 1 .941 1-.702 1-1.559zm32-5c0-.857-.457-1.276-1.016-.93-.56.345-.758 1.046-.441 1.558.857 1.387 1.457 1.129 1.457-.628zm609-3.441c0-1.65-.45-3-1-3-1.112 0-1.38 4.286-.333 5.333 1.13 1.13 1.333.774 1.333-2.333zm-620.616-2c.597-3.735.86-4 3.961-4 4.586 0 4.994-.808 2.127-4.216-1.36-1.615-2.472-3.353-2.472-3.86 0-.509-1.09-.924-2.422-.924-1.864 0-2.65.75-3.41 3.25-1.413 4.645-2.312 11.709-1.63 12.81 1.36 2.203 3.244.703 3.846-3.06zm14.116 1c.34-.55.141-1-.441-1s-1.059.45-1.059 1 .198 1 .441 1 .72-.45 1.059-1zm-32.293-6.193c-1.64-1.64-3.713.433-2.803 2.803.625 1.63.78 1.635 2.34.075 1.305-1.305 1.406-1.935.463-2.878zm644.461.615c.333-.867-.115-2.297-.995-3.177-1.466-1.467-1.653-1.46-2.243.077-.78 2.033.108 4.678 1.57 4.678.585 0 1.335-.71 1.668-1.578zM145 600c0-.825-.675-1.5-1.5-1.5-2.602 0-1.76 1.97 1.25 2.921.137.043.25-.596.25-1.421zm677.683-25.688c-.32-.797-.556-.56-.604.605-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.917zM530.693 994.8c-1.63-.423-3.693-3.977-3.693-6.365 0-1.919 5.686-.898 7.854 1.41 3.656 3.891 1.526 6.428-4.16 4.955zm9.38-2.162c-.706-1.32-.61-2.39.332-3.677 1.177-1.61 1.682-1.668 4.482-.508 3.899 1.615 4.635 2.713 3.077 4.59-1.743 2.1-6.685 1.847-7.89-.405zm4.927-.579c0-.242-.45-.72-1-1.059-.55-.34-1-.141-1 .441s.45 1.059 1 1.059 1-.198 1-.441zm-13-11.59c0-1.876 3.127-2.271 4.792-.606 1.515 1.516 1.399 1.637-1.578 1.637-1.768 0-3.214-.464-3.214-1.031zm56.481-2.884c.381-1.733 2.003-4.587 3.606-6.341 3.572-3.912 3.704-5.744.413-5.744-1.786 0-2.5-.54-2.5-1.893 0-1.041.675-2.152 1.5-2.469.976-.374 1.5-1.928 1.5-4.452 0-6.069 5.538-10.042 6.184-4.436.459 3.993 2.181 3.37 2.9-1.05.746-4.59 1.346-5.225 6.172-6.528 2.655-.717 5.124-.67 8.423.157 4.85 1.217 7.116 3.671 3.39 3.671-1.153 0-2.878.397-3.833.883-2.806 1.428-6.57 2.945-8.986 3.621-3.892 1.09-2.666 3.35 2 3.688 3.683.267 4.211.592 3.958 2.435-.166 1.206.376 2.383 1.25 2.718.848.326 1.542 1.244 1.542 2.04 0 .797 1.194 2.318 2.652 3.38 1.46 1.063 2.359 2.408 2 2.99-.926 1.498-4.46.357-6.087-1.965-1.304-1.862-1.504-1.876-3.93-.286-1.406.921-2.83 2.535-3.163 3.585-.334 1.051-1.44 1.911-2.458 1.911-1.019 0-3.126.63-4.683 1.402-1.557.77-4.631 2.221-6.831 3.223-2.2 1.003-4.385 2-4.855 2.217-.471.217-.544-1.023-.164-2.757zm15.466-10.032c1.07-1.07 3.32-2.657 5-3.526 3.916-2.025 3.899-3.527-.04-3.527-2.253 0-3.236.544-3.617 2-.73 2.788-3.29 2.528-3.29-.333 0-3.185-.785-3.722-3.58-2.448-2.73 1.243-4.351 4.97-2.44 5.608.686.228 1.971 1.26 2.856 2.294 2.02 2.36 2.692 2.35 5.11-.068zm-297.958 4.926c-1.209-2.258-.566-3.979 1.487-3.979 1.619 0 2.372 1.833 1.745 4.25-.603 2.323-1.902 2.214-3.232-.27zm-7.458-.272c-.428-.986-.497-2.074-.155-2.417 1.016-1.015 1.835.411 1.367 2.382-.414 1.747-.468 1.748-1.212.035zM583 965.5c0-1.111.667-2 1.5-2s1.5.889 1.5 2-.667 2-1.5 2-1.5-.889-1.5-2zm-283.25-.392c-2.517-1.91-2.159-2.788.991-2.424 1.654.19 2.874 1.01 3.074 2.066.39 2.06-1.592 2.235-4.065.358zM572 964.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm54.44-5.096c-1.056-1.71 2.278-4.586 3.686-3.178.627.627.869 1.845.538 2.707-.692 1.803-3.225 2.086-4.223.471zM616 956.122c0-3.016 2.615-5.407 4.191-3.831.808.808.656 1.793-.565 3.658-2.096 3.198-3.626 3.271-3.626.173zM293 956c0-.917.484-1.505 1.075-1.308.591.197 1.075.785 1.075 1.308 0 .522-.484 1.111-1.075 1.308-.591.197-1.075-.391-1.075-1.308zm356.741.75c-.59-1.176-.137-7.188.598-7.922.364-.364.661-.104.661.577 0 .68.674 1.912 1.498 2.736 1.122 1.122 1.238 1.983.465 3.428-1.057 1.975-2.548 2.522-3.222 1.181zM642 951.622c0-1.582.604-3.379 1.343-3.992 1.044-.866 1.608-.534 2.532 1.494 1.008 2.213.918 2.815-.593 3.96-2.645 2.007-3.282 1.723-3.282-1.462zM627 950c0-.825.675-1.5 1.5-1.5s1.5.675 1.5 1.5-.675 1.5-1.5 1.5-1.5-.675-1.5-1.5zm33.074-2.454c-1.541-.953-.588-3.046 1.387-3.046.738 0 2.624-1.584 4.19-3.52 3.25-4.018 11.776-13.744 15.054-17.173 1.212-1.269 2.675-2.307 3.25-2.307 1.917 0 1.076 2.878-1.633 5.588-2.446 2.445-2.533 2.785-1 3.905 1.97 1.44 2.166 3.62.478 5.307-1.974 1.974-3.8 1.365-3.8-1.269 0-3.6-2.376-2.241-4.563 2.61-1.072 2.376-3.477 5.147-5.876 6.77-5.869 3.972-6.026 4.038-7.487 3.135zM627 942.193c0-1.29 1.125-3.401 2.5-4.693 1.375-1.292 2.5-2.897 2.5-3.567 0-2.19-2.666-2.304-4.476-.19-1.612 1.882-1.854 1.918-2.705.398-1.39-2.484 2.696-7.93 5.324-7.096 2.21.702 4.857-1.063 4.857-3.237 0-2.35 5.87-10.186 8.797-11.743 1.487-.79 5.327-3.966 8.534-7.056 4.8-4.624 6.09-5.404 7.293-4.406 1.721 1.428 2.67.68 5.257-4.141 2.205-4.112 4.634-5.847 6.112-4.369.732.732.286 2.086-1.475 4.478-1.388 1.886-2.814 4.273-3.17 5.304-1.982 5.746-5.132 10.141-7.47 10.422-2.917.35-5.156 4.955-3.686 7.58.81 1.448 6.834 4.623 8.77 4.623.394 0 1.23-1.125 1.856-2.5.627-1.375 1.74-2.5 2.473-2.5.734 0 2.651-1.374 4.26-3.053 2.899-3.026 2.91-3.08 1.188-6.08-1.833-3.193-1.535-6.647.897-10.407 1.581-2.446.111-9.236-2.191-10.12-.95-.364-1.229-1.354-.83-2.944.835-3.325-.412-3-4.752 1.238-2.48 2.422-4.274 3.422-5.376 3-2.109-.81-1.438-2.92 1.146-3.606 2.478-.659 6.511-3.98 7.974-6.565.609-1.076 3.196-2.547 5.75-3.268 2.554-.721 4.643-1.778 4.643-2.349 0-.57.883-2.278 1.963-3.794s2.77-4.933 3.758-7.593c1.47-3.96 2.365-4.984 4.93-5.649 3.782-.98 4.973-3.463 2.809-5.855-1.471-1.625-1.344-1.936 1.726-4.207 4.705-3.481 6.86-4.067 8.203-2.23.96 1.312 1.416 1.345 2.96.216 1.75-1.279 1.728-1.485-.512-4.992-1.285-2.011-2.787-3.683-3.337-3.715-.55-.032-1.644-.465-2.43-.963-1.214-.768-1.114-1.565.653-5.235 1.147-2.38 2.476-5.675 2.952-7.32.476-1.644 1.67-3.144 2.651-3.333 1.524-.294 1.772.363 1.694 4.49-.05 2.659-.021 5.509.064 6.334.085.825-.183 2.314-.595 3.31-.56 1.354-.213 1.95 1.381 2.366 2.226.582 2.943 4.092 1.201 5.874-.51.522-1.073 2.469-1.25 4.325-.27 2.842-.862 3.554-3.739 4.5-2.898.954-3.845 2.112-6.235 7.625-2.137 4.928-2.677 7.422-2.234 10.312.441 2.88.135 4.309-1.251 5.84-1.737 1.92-1.742 2.097-.099 3.299.955.698 1.737 2.457 1.737 3.91 0 2.504-.258 2.639-5.061 2.639h-5.062l.662 4.411c.569 3.795.378 4.563-1.369 5.498-1.117.598-2.174 2.1-2.35 3.339-.227 1.597-1.003 2.26-2.668 2.276-2.984.031-5.132 2.941-5.094 6.898.017 1.693-.048 3.753-.144 4.578-.096.825.145 3.113.536 5.084l.71 3.584-7.518 3.666c-4.135 2.016-8.368 3.666-9.406 3.666-2.506 0-6.236 4.075-6.236 6.814 0 1.202-.562 2.238-1.25 2.301-3.183.293-5.374-.43-6.791-2.242-.981-1.255-2.16-1.733-3.245-1.317-1.364.524-1.58 1.431-1.081 4.55.56 3.5.408 3.894-1.505 3.894-1.853 0-2.128-.577-2.128-4.465 0-4.707 2.079-6.986 5.798-6.356 1.864.316 9.223-5.045 9.169-6.679-.019-.55-.915-2.058-1.992-3.35-1.72-2.065-2.328-2.222-4.994-1.293-1.67.582-5.305 3.207-8.08 5.833l-5.043 4.776.668 5.761c.714 6.146.822 5.982-4.776 7.208-2.39.524-2.75.296-2.75-1.742zm59.066-58.728c1.064-.57 1.934-1.695 1.934-2.5 0-.806.81-1.465 1.8-1.465 2.447 0 4.2-1.937 4.2-4.641 0-1.232.45-2.52 1-2.859 1.512-.935 1.198-3.5-.43-3.5-1.298 0-7.57 8.126-7.57 9.81 0 .39-.9 1.271-2 1.958s-2 1.92-2 2.74c0 1.766.485 1.838 3.066.457zm-67.39 56.377c-.758-.757 1.135-3.342 2.446-3.342.483 0 .878.9.878 2 0 1.922-1.956 2.711-3.325 1.342zm-332.767-2.398c-1.189-.736-1.151-1.13.243-2.525 1.537-1.537 1.728-1.511 2.732.364 1.246 2.33-.57 3.648-2.975 2.16zm-68.219-2.396c-.85-.852-2.03-1.548-2.619-1.548-.589 0-1.071-.675-1.071-1.5 0-2.177 1.326-1.846 3.996.996 2.534 2.697 2.25 4.607-.306 2.052zm59.383-3.183c-2.25-2.86-2.534-3.962-1.231-4.767 1.1-.68 7.402 5.824 6.509 6.718-1.344 1.343-3.238.644-5.278-1.95zm-20.823-.083c-1.705-.611-1.59-4.282.133-4.282.761 0 1.619.9 1.906 2 .575 2.196-.118 2.971-2.039 2.282zm-50.777-2.325c-.87-1.408 1.6-4.284 2.717-3.166.988.988.04 4.21-1.238 4.21-.459 0-1.124-.47-1.48-1.044zm480.682-1.509c.19-.98.95-1.983 1.69-2.23.861-.287 1.221.194 1 1.334-.19.98-.95 1.984-1.69 2.23-.861.287-1.221-.194-1-1.334zm-460.811-.136c-3.059-1.1-10.344-8.84-10.344-10.992 0-2.867.295-2.871 4.286-.07 3.843 2.698 5.964 5.354 6.93 8.682.81 2.784.746 2.96-.872 2.38zm33.992-1.879c-.966-2.517 1.289-4.003 2.536-1.671 1.043 1.949.617 3.238-1.07 3.238-.476 0-1.135-.705-1.466-1.567zm25.33-4.1c-1.189-1.189-.705-4.055.91-5.396 1.132-.939 1.401-2.244.955-4.622-.567-3.024-.406-3.315 1.842-3.315 1.719 0 3.093 1.019 4.545 3.368 2.79 4.514 2.623 6.462-.668 7.761-1.512.598-3.531 1.488-4.486 1.979-2.08 1.069-2.242 1.08-3.097.226zm402.056-2.344c-.947-1.106-1.722-2.655-1.722-3.441 0-2.63 2.247-2.871 4.115-.441 3.574 4.647 1.35 8.254-2.393 3.882zm17.808 1.06c-.356-.577-.384-1.476-.061-1.998.323-.523-.355-1.454-1.506-2.07-1.674-.896-1.855-1.406-.905-2.55.653-.787 1.645-1.43 2.204-1.43 1.396 0 3.667 3.143 3.706 5.127.042 2.144-2.554 4.35-3.438 2.921zM667 913.607c0-2.111 2.59-3.579 3.557-2.015.94 1.521-.297 3.908-2.026 3.908-.842 0-1.531-.852-1.531-1.893zm-465.873-5.686c-2.405-2.48-4.113-4.768-3.796-5.085 1.359-1.36 5.751.922 7.211 3.746 2.847 5.505 1.237 6.136-3.415 1.34zm480.952 2.996c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm8.076-1.969c.19-.98.95-1.984 1.69-2.23.861-.287 1.222.194 1 1.334-.19.98-.95 1.984-1.69 2.23-.861.287-1.221-.194-1-1.334zm19.3.478c-.366-.59.306-2.107 1.492-3.37 2.655-2.826 1.959-6.916-1.57-9.228-2.784-1.824-2.948-3.324-.814-7.45 1.218-2.356 1.302-3.336.377-4.45-.916-1.104-.903-1.768.06-2.928 1.749-2.107 3.63-1.867 5.423.694 1.358 1.938 1.364 2.384.057 3.828-1.915 2.116-1.884 6.767.077 11.46 2.222 5.32.428 12.518-3.12 12.518-.726 0-1.618-.483-1.983-1.074zm-10.205-.644c-1.486-.533-1.684-5.896-.25-6.782 1.32-.815 1.292-4.5-.034-4.5-.568 0-1.963 1.575-3.098 3.5-1.999 3.387-4.868 4.745-4.868 2.305 0-1.556 5.034-6.805 6.527-6.805.633 0 1.665-1.125 2.291-2.5 1.485-3.258 4.182-3.296 4.182-.059 0 1.343.45 2.72 1 3.059 1.747 1.08 1.082 4.074-1.428 6.432-1.335 1.255-2.204 2.862-1.932 3.573.584 1.52-.617 2.413-2.39 1.777zm-419.434-2.786c-.627-1.378-.887-2.759-.576-3.07 1.006-1.006 4.76 2.002 4.76 3.814 0 2.633-2.878 2.12-4.184-.744zM680.5 907.5c-.34-.55-.141-1 .441-1s1.059.45 1.059 1-.198 1-.441 1-.72-.45-1.059-1zm-465.116-1.442c-.782-2.037-.098-4.821 1.298-5.286 1.495-.498 3.653 3.414 2.926 5.306-.709 1.848-3.512 1.835-4.224-.02zm428.096-6.867c.017-5.407.413-6.775 2.77-9.577 1.513-1.797 3.017-4.471 3.343-5.941 1.233-5.56 1.606-6.185 4.058-6.8 1.67-.42 3.063-.087 4.136.985 1.49 1.49 1.435 1.787-.69 3.767-1.892 1.762-2.202 2.819-1.717 5.851.494 3.086.179 4.09-1.894 6.037-1.367 1.285-2.486 3.321-2.486 4.526 0 2.813-3.64 7.461-5.842 7.461-1.42 0-1.694-1.034-1.678-6.309zm75.956 3.205c-1.228-1.986 4.099-6.183 7.985-6.294 2.16-.061 3.58.37 3.58 1.089-.001 1.577-1.85 2.65-4.792 2.778-1.315.058-2.822.876-3.35 1.818-1.1 1.967-2.437 2.205-3.423.609zm-503.186-4.614c-1.41-.506-1.726-3.282-.372-3.282 1.31 0 3.343 2.752 2.42 3.276-.439.25-1.36.252-2.048.01zm7.95-1.482c-1.763-1.763-1.467-2.8.8-2.8 1.333 0 2 .667 2 2 0 2.267-1.037 2.563-2.8.8zm-23.533-4.467c-.367-.366-.667-1.523-.667-2.57 0-1.046-1.319-3.82-2.93-6.162-1.612-2.342-3.805-6.848-4.873-10.013-1.418-4.199-2.765-6.255-4.98-7.603-1.671-1.016-3.315-2.719-3.653-3.784-.338-1.066-1.504-2.741-2.59-3.724-2.06-1.865-2.635-6.886-1.07-9.355.908-1.435 3.096-.739 3.096.985 0 .544 1.48 3.33 3.287 6.191 5.377 8.508 17.955 34.501 17.249 35.644-.747 1.208-1.896 1.364-2.87.391zM734 890.955c0-.265.521-1.316 1.158-2.336 1.527-2.446.417-5.119-2.127-5.119-1.139 0-2.031-.659-2.031-1.5 0-2.068 2.619-1.881 4.844.344 1.572 1.572 1.804 2.939 1.24 7.299-.098.754-3.084 2.024-3.084 1.312zm-523-2.038c0-.871.534-1.406 1.188-1.188 1.854.618 2.161 2.771.395 2.771-.87 0-1.583-.712-1.583-1.583zm425.48.551c-.388-.628-.235-1.613.34-2.188 1.344-1.344 4.477-.172 3.93 1.47-.556 1.672-3.386 2.148-4.27.718zm84.89-3.49c.325-.847-.326-2.434-1.463-3.571-1.427-1.427-1.96-3.075-1.756-5.433.196-2.277-.436-4.368-1.93-6.389-2.689-3.636-2.868-8.691-.471-13.254.962-1.832 1.798-3.454 1.857-3.604.059-.151.846.01 1.75.357.904.346 1.643 1.654 1.643 2.906 0 1.467.742 2.47 2.087 2.822 2.947.771 2.156 4.3-.868 3.874-2.917-.41-3.883 2.176-2.104 5.631 1.257 2.442 3.648 4.652 4.87 4.503.267-.033 1.203-1.356 2.08-2.94 1.886-3.402 4.935-4.435 4.935-1.672 0 1.02-2.25 4.214-5 7.097-5.454 5.718-5.725 6.349-3.511 8.186 1.715 1.424 1.107 3.009-1.155 3.009-.975 0-1.332-.563-.964-1.523zm17.987-3.99c-.79-2.058 1.408-4.488 4.059-4.488 1.586 0 2.428-.875 3.127-3.25 1.073-3.643 4.996-5.116 6.083-2.283.69 1.8-2.197 5.533-4.281 5.533-.74 0-1.345.643-1.345 1.429 0 3.653-6.428 6.225-7.643 3.058zm-527.718-.182c-1.126-1.126-.685-2.306.861-2.306.825 0 1.5.423 1.5.941 0 1.261-1.562 2.164-2.36 1.365zm430.715-1.786c.355-.926.646-1.872.646-2.102 0-.23.708-.418 1.573-.418 2.225 0 1.359 3.39-.98 3.84-1.419.273-1.725-.053-1.239-1.32zm58.116-2.77c.387-1.238 1.054-4.237 1.483-6.666.43-2.429 1.601-5.016 2.605-5.75 2.316-1.693 2.915-1.674 4.42.14.996 1.2.628 2.446-1.967 6.662-4.665 7.582-8.07 10.504-6.541 5.614zm57.634-2.664c-1.85-1.172-.657-4.086 1.673-4.086 2.582 0 5.67 2.467 4.817 3.848-.84 1.36-4.507 1.493-6.49.238zm-102.455-1.559c-.311-.81.521-2.764 1.85-4.343 1.732-2.059 2.109-3.176 1.333-3.952-1.254-1.254-.244-8.232 1.19-8.232 1.882 0 4.078 4.754 3.415 7.394-.746 2.974.87 3.446 3.91 1.143 2.02-1.53 4.653-1.03 4.653.885 0 1.849-6.517 4.661-7.808 3.37-1.686-1.686-4.192-.086-4.192 2.677 0 1.817-.534 2.531-1.893 2.531-1.041 0-2.147-.663-2.458-1.473zM207.63 870.25c-.915-3.415-.792-3.75 1.37-3.75 1.556 0 2 .667 2 3 0 3.574-2.466 4.123-3.37.75zm11.87 1.25c-.34-.55-.141-1 .441-1s1.059.45 1.059 1-.198 1-.441 1-.72-.45-1.059-1zm52.73-1.188c.617-1.854 2.77-2.161 2.77-.395 0 .87-.713 1.583-1.583 1.583-.871 0-1.406-.534-1.188-1.188zm402.77-.371c0-.858.457-1.276 1.016-.93.56.345.758 1.046.441 1.558-.857 1.387-1.457 1.129-1.457-.628zm-400.99-3.928c-1.735-2.092-.58-4.475 1.86-3.837 3.339.873 3.919 5.324.693 5.324-.725 0-1.874-.67-2.552-1.487zM176 864.97c0-1.013 1.088-1.47 3.5-1.47 2.256 0 3.5.475 3.5 1.338 0 .837-1.31 1.387-3.5 1.47-2.472.093-3.5-.3-3.5-1.338zm25.922-1.787c-2.302-1.726-8.986-10.722-10.055-13.532-1.118-2.94-.242-6.151 1.677-6.151.776 0 2.197 1.238 3.16 2.75.962 1.512 2.045 2.975 2.405 3.25.36.275 1.413 2.739 2.338 5.476.925 2.736 2.174 5.568 2.775 6.292 1.54 1.855-.317 3.401-2.3 1.915zm530.078-.56c0-2.872 2.444-4.498 3.98-2.648 1.661 2.002.575 4.525-1.949 4.525-1.32 0-2.031-.657-2.031-1.878zm10 .436c0-1.792 1.652-2.892 3.049-2.029.716.443.678 1.095-.123 2.059-1.51 1.82-2.926 1.806-2.926-.03zm-459.85-.509c.43-1.29 1.801-1.52 1.925-.325.041.399-.465.905-1.125 1.125-.66.22-1.02-.14-.8-.8zm474.85-.467c0-.87.713-1.583 1.583-1.583.871 0 1.406.534 1.188 1.188-.618 1.854-2.771 2.161-2.771.395zm8.035-.517c-1.207-2.256-1.367-5.08-.285-5.034 1.795.076 4.25 2.864 4.25 4.828 0 2.68-2.57 2.812-3.965.206zm-96.945-1.316c-.473-1.238-1.812-3.107-2.975-4.155-1.42-1.28-2.115-3.106-2.115-5.562 0-2.959.62-4.122 3.25-6.095 1.788-1.34 4.12-2.438 5.182-2.438 1.338 0 2.19-.997 2.777-3.245.473-1.815 2.045-4.01 3.568-4.982 1.498-.956 3.311-2.534 4.03-3.506.718-.972 1.73-1.767 2.25-1.767 1.818 0 .916 3.151-1.948 6.809-3.024 3.861-5.674 10.55-5.268 13.3.13.886-.905 2.358-2.302 3.273-1.396.915-2.539 2.329-2.539 3.141 0 1.775 1.171 1.906 2.767.31 1.83-1.83 2.754 1.825 1.197 4.734-1.758 3.284-6.645 3.398-7.874.183zm117.435-2.5c1.526-4.44 4.765-5.235 5.32-1.306.37 2.622-1.998 5.056-4.918 5.056-1.517 0-1.558-.387-.402-3.75zM133 858.559c0-.517.45-1.22 1-1.559.55-.34 1 .083 1 .941 0 .857-.45 1.559-1 1.559s-1-.423-1-.941zm546.446-.146c-.673-1.09 1.259-3.913 2.676-3.913.483 0 .878.852.878 1.893 0 2.108-2.59 3.58-3.554 2.02zM705 856c0-.825.338-1.55.75-1.612 4.946-.737 7.25-.69 7.25.149 0 1.079-4.175 2.963-6.565 2.963-.79 0-1.435-.675-1.435-1.5zm37 .5c0-.55.653-1 1.45-1 .798 0 1.895-.787 2.438-1.75.752-1.332 1.268-1.472 2.163-.587 1.458 1.443.239 3.662-1.62 2.949-.752-.289-1.633-.094-1.958.432-.778 1.259-2.473 1.229-2.473-.044zm-11.646-2.52c-.352-.916.083-2.346.99-3.252 1.489-1.49 1.9-1.482 5.213.098 4.572 2.18 3.979 4.086-1.394 4.482-3.142.232-4.337-.098-4.809-1.327zm-558.162-1.603c-1.574-3.946-1.794-5.711-.756-6.061 1.07-.36 2.892 5.774 2.236 7.526-.239.637-.904-.023-1.48-1.465zm483.114 1.423c-1.57-.565-.492-3.3 1.301-3.3.766 0 1.393.648 1.393 1.441 0 1.72-1.055 2.45-2.694 1.86zM123.112 851c.009-1.65.6-5.7 1.312-9 1.084-5.022 1.069-6.448-.09-8.75-.762-1.512-1.855-2.75-2.43-2.75-.573 0-.9-1.012-.724-2.25.4-2.809 3.955-3.498 5.907-1.145 2.612 3.147 2.037 8.217-2.54 22.395-1.272 3.943-1.45 4.129-1.435 1.5zm629.274 1.063c-.703-1.83 2.76-11.778 4.276-12.283 1.275-.425 4.338 5.065 4.338 7.775 0 .961-1.6 2.692-3.557 3.846-4.225 2.493-4.348 2.509-5.057.662zM685.5 851.5c-.34-.55-.141-1 .441-1s1.059.45 1.059 1-.198 1-.441 1-.72-.45-1.059-1zm-3.973-2.957c-.385-.622-.266-1.673.265-2.337.53-.663 1.298-2.331 1.708-3.706.409-1.375 2.306-4.426 4.214-6.781 3.437-4.24 3.46-4.329 2.273-9.271-1.412-5.886-.225-8.232 3.919-7.749 3.172.37 4.001 3.33 1.142 4.078-2.425.634-2.724 3.917-.523 5.744 1.362 1.13 1.345 1.465-.156 3.124-1.578 1.744-1.567 2.071.175 5.307 1.815 3.37 1.813 3.496-.054 5.56-1.219 1.346-2.645 1.92-3.936 1.582-1.376-.36-3.035.449-5.177 2.525-2.073 2.01-3.39 2.668-3.85 1.924zm-506.198-2.627c-.716-1.867 1.061-3.91 2.584-2.97 1.588.981 1.328 3.248-.45 3.93-.892.342-1.789-.062-2.134-.96zm92.117.497c-.37-.598-.17-1.588.441-2.2.817-.817 1.113-.528 1.113 1.087 0 2.414-.52 2.787-1.554 1.113zm469.119.192c-.342-.554-.606-2.491-.586-4.306.02-1.814.026-4.199.015-5.299-.011-1.1-.007-3.238.01-4.75.038-3.656-3.673-3.918-4.575-.322-.723 2.88-3.266 4.16-4.074 2.053-.87-2.268.398-6.082 3.045-9.16 2.256-2.623 2.535-2.694 5.114-1.314 3.05 1.633 4.467 4.166 2.666 4.766-1.997.666-1.306 2.978 1.07 3.581 1.238.315 2.83 1.509 3.537 2.654 1.104 1.786.99 2.46-.796 4.731-1.182 1.503-1.955 3.745-1.787 5.186.305 2.617-2.376 4.223-3.64 2.18zm-13.022-1.036c-.317-.512-.118-1.214.44-1.559.56-.345 1.017.073 1.017.931 0 1.756-.6 2.015-1.457.628zM186 842.5c0-.55.675-1 1.5-1s1.5.45 1.5 1-.675 1-1.5 1-1.5-.45-1.5-1zm560.332-1.577c-.783-2.04 2.047-4.875 4.084-4.093 1.3.498 1.372 1.041.417 3.136-1.298 2.85-3.588 3.337-4.501.957zm-116.975-.936c-.753-1.962 1.366-4.487 3.765-4.487 2.518 0 2.476 3.61-.056 4.965-2.563 1.371-3.022 1.312-3.71-.478zM769 838.223c0-3.633 2.37-7.723 4.473-7.723 2.096 0 2.407 2.157.858 5.965-2.346 5.77-5.331 6.754-5.331 1.757zm-592.75 1.615c-2.159-.871-1.417-5.833 1.246-8.334 3.066-2.881 3.758-2.299 3.683 3.101-.067 4.856-1.663 6.55-4.929 5.233zm538.933-5.084c-1.75-4.405-2.127-6.754-1.607-10.005.649-4.055.564-4.249-1.841-4.249-1.393 0-2.797-.72-3.138-1.607-.726-1.894 1.027-9.042 2.43-9.91.535-.33.973-1.412.973-2.403 0-1.614-.418-1.69-4-.735l-4 1.068v5.294c0 5.675-.704 6.383-3.394 3.41-2.079-2.297-1.268-6.692 1.509-8.179 1.084-.58 1.885-2.083 1.885-3.539 0-3.107 1.625-6.275 4.351-8.482 1.642-1.33 2.095-2.953 2.242-8.042.101-3.506-.27-6.938-.827-7.625-.688-.851-.649-1.686.124-2.617.863-1.04.773-1.668-.378-2.623-2.012-1.67-1.906-2.729.397-3.961 1.618-.866 2.253-.452 4.16 2.714 1.237 2.055 2.168 5.02 2.067 6.587-.21 3.282 2.722 14.444 4.003 15.236 1.34.828 1.015 3.403-.639 5.057-.825.825-1.5 3.084-1.5 5.02 0 2.007-.86 4.615-2 6.064-1.952 2.482-2.58 5.359-1.424 6.516 1.238 1.238 6.346-2.796 6.631-5.237.204-1.742.903-2.506 2.293-2.506 2.51 0 3.213 3.664 1.048 5.46-.851.707-1.548 2.19-1.548 3.294 0 1.106-.942 3.535-2.094 5.398-1.669 2.7-2.024 4.634-1.75 9.522.2 3.568-.08 6.28-.671 6.485-.559.193-2.044-2.24-3.302-5.405zM716 800.5c0-.55-.675-1-1.5-1s-1.5.45-1.5 1 .675 1 1.5 1 1.5-.45 1.5-1zm-93.457 37.07c-.317-.513-.118-1.215.44-1.56.56-.345 1.017.073 1.017.931 0 1.756-.6 2.015-1.457.628zM110.5 834.5c-.34-.55-.141-1 .441-1s1.059.45 1.059 1-.198 1-.441 1-.72-.45-1.059-1zm514.73-1.188c.617-1.854 2.77-2.161 2.77-.395 0 .87-.713 1.583-1.583 1.583-.871 0-1.406-.534-1.188-1.188zm151.753-5.345c-1.47-2.744-.867-4.02 1.474-3.122 1.637.628 2.124 4.178.694 5.062-.467.288-1.443-.584-2.168-1.94zm-154.316.866c-1.297-1.296-.643-5.045 1.164-6.68 2.186-1.978 3.169-1.26 3.169 2.314 0 3.561-2.56 6.14-4.333 4.366zm136.876-1.264c-.317-.512-.118-1.213.44-1.559.56-.345 1.017-2.34 1.017-4.434 0-2.432.812-4.84 2.25-6.67 1.486-1.89 2.25-4.229 2.25-6.884 0-3.316.366-4.074 2.088-4.32 1.148-.164 2.65.379 3.336 1.207 1.01 1.216.95 1.932-.309 3.73-1.036 1.48-1.234 2.616-.59 3.391.657.792.327 1.746-1.029 2.973-1.335 1.21-1.996 3.08-1.996 5.652 0 3.178-.347 3.845-2 3.845-1.333 0-2 .667-2 2 0 2.03-2.404 2.773-3.457 1.07zM175 825.5c0-1.1.45-2 1-2s1 .9 1 2-.45 2-1 2-1-.9-1-2zm567.75-.08c-.963-.56-1.75-1.72-1.75-2.578 0-1.2.631-1.4 2.748-.869 3.426.86 3.638 1.078 2.907 2.984-.685 1.785-1.475 1.878-3.905.463zm-64.735-.67c.036-1.725 1.846-3.454 2.922-2.789.879.543.876 1.059-.01 2.128-1.255 1.512-2.937 1.894-2.912.661zm-578.133-3.368c-1.615-1.615-1.815-2.305-.84-2.907 2.029-1.255 3.958.029 3.958 2.632 0 2.936-.42 2.973-3.118.275zm629.564.031c-.37-.598-.17-1.588.441-2.2.817-.817 1.113-.528 1.113 1.087 0 2.415-.52 2.787-1.554 1.113zm-604.855-1.648c-1.393-4.449-1.478-9.265-.162-9.265 1.468 0 2.536 3.005 2.557 7.191.017 3.189-1.606 4.593-2.395 2.074zm629.365-4.818c-.903-1.088-.961-1.841-.2-2.602 1.28-1.282 3.244-.28 3.244 1.655 0 2.137-1.635 2.645-3.044.947zm-643.29-.114c-1.491-1.492-.617-4.333 1.334-4.333 1.467 0 2 .667 2 2.5 0 2.353-1.815 3.351-3.333 1.833zM690 811.592c0-1.931.77-3.518 2.19-4.512 2.677-1.876 2.692-1.86 2.074 2.198-.275 1.802-1.346 3.73-2.382 4.285-1.647.882-1.882.635-1.882-1.971zm-572.964.452c-.664-.801-.901-1.953-.526-2.56.66-1.068 3.383 1.504 3.458 3.266.053 1.25-1.648.841-2.932-.706zm61.579-1.009c-2.004-3.059-2.027-4.502-.113-7.234 1.379-1.969 1.297-2.386-1-5.117-3.727-4.429-3.247-14.184.698-14.184.44 0 .8 1.822.8 4.05 0 4.282 2.24 9.623 4.904 11.688 1.43 1.108 1.35 1.43-.773 3.093-1.99 1.56-2.19 2.19-1.25 3.947 2.805 5.241-.102 8.585-3.266 3.757zM213 812.441c0-.583.45-.78 1-.441.55.34 1 .817 1 1.059 0 .243-.45.441-1 .441s-1-.477-1-1.059zm-121.91-2.724c-3.033-2.533-3.18-2.926-2.027-5.457 1.132-2.484.917-3.216-2.42-8.243-2.015-3.034-4.128-5.517-4.695-5.517-.567 0-4.435-1.992-8.595-4.427-7.138-4.179-11.258-8.001-9.99-9.27.312-.31.065-1.502-.547-2.647-1.092-2.041-1.063-2.048 1.5-.369 2.907 1.905 4.517 2.105 6.558.812 1.094-.693.432-2.546-3.25-9.092-2.543-4.523-4.624-8.41-4.624-8.64 0-.23 1.301.255 2.892 1.077 2.94 1.52 8.257 7.626 9.41 10.806.35.963 1.064 1.75 1.587 1.75.524 0 1.246 1.339 1.605 2.975.636 2.893.72 2.931 3.08 1.385 2.32-1.521 2.426-1.492 2.426.665 0 2.45 2.534 4.893 5.131 4.943.898.017 2.855 1.637 4.351 3.598 2.733 3.582 2.812 5.753.128 3.526-1.838-1.527-7.991-.065-8.387 1.991-.163.845.991 1.937 2.748 2.6 2.228.841 3.029 1.786 3.029 3.575 0 1.338.9 3.246 2 4.242s2 2.895 2 4.22c0 1.327.44 3.235.979 4.24.691 1.293.598 2.147-.32 2.908-.97.805-2.127.387-4.569-1.651zM70 780.059c0-.792-.49-1.743-1.087-2.113-1.412-.873-3.34 1.055-2.467 2.467.98 1.586 3.554 1.33 3.554-.354zm667.543 31.51c-.683-1.105.894-2.299 1.818-1.375.95.95.773 2.306-.302 2.306-.518 0-1.2-.419-1.516-.93zm13.898-2.5c-1.906-1.404-1.896-1.513.559-6.081 2.98-5.544 3.404-5.877 5.826-4.581 1.274.682 2.213.654 2.954-.087.597-.597 1.865-.787 2.818-.421 1.525.585 1.375 1.05-1.253 3.883-1.642 1.77-3.751 4.455-4.688 5.968-1.915 3.092-3.387 3.404-6.216 1.32zm78.306-.012c-1.92-1.404-2.316-4.088-.747-5.058.55-.34 1 .309 1 1.441 0 2.322 1.024 2.636 2.8.86.933-.934 1.2-.85 1.2.377 0 2.587-2.248 3.845-4.253 2.38zm-107.213-2.52c-1.694-1.872-1.54-5.038.247-5.038 1.23 0 5.22 5.665 4.499 6.387-1.14 1.14-2.962.623-4.746-1.35zm-619.31-3.05c-.704-1.128-.977-3.123-.621-4.54.434-1.732.058-3.165-1.195-4.549-1.568-1.732-1.62-2.152-.368-2.944 3.364-2.128 5.869-.449 5.746 3.853-.05 1.795-.5 3.516-.998 3.823-.498.308-.618 1.867-.267 3.465.737 3.354-.467 3.822-2.296.892zm634.082.368c-.724-1.888 2.315-4.575 4.663-4.123 1.984.382 2.598 3.793.88 4.882-2.179 1.38-4.863 1.013-5.543-.76zm97.852-.355c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-664.553-.586c-.334-.872-.236-2.25.219-3.063.723-1.293.987-1.284 2.113.073 1.335 1.609.818 4.576-.799 4.576-.508 0-1.198-.714-1.533-1.586zM782 801.691c0-.995.645-2.682 1.433-3.75 2.078-2.816 3.997-.703 2.629 2.896-1.143 3.006-4.062 3.62-4.062.854zm-53.25-.307c-1.053-.592-1.75-2.166-1.75-3.955 0-2.163-.65-3.268-2.39-4.06-3.752-1.71-6.31-8.869-3.169-8.869 2.524 0 2.837-2.075.664-4.388-2.804-2.985-2.674-3.43 1.11-3.799 3.52-.343 3.339.061 6.279-14.058.795-3.821 2.943-9.37 4.955-12.803 1.953-3.333 3.551-6.43 3.551-6.883 0-.453.65-1.364 1.446-2.024 1.115-.926 1.211-1.81.42-3.872-1.348-3.516-.294-9.814 2.167-12.943 1.082-1.375 1.967-3.304 1.967-4.288 0-.984 1.029-3.06 2.286-4.615 1.257-1.555 4.061-5.457 6.23-8.67 3.642-5.394 4.184-5.805 7.05-5.34 2.923.474 3.26.186 5.759-4.907 1.611-3.286 3.3-5.41 4.302-5.41 1.407 0 1.555-.794 1.01-5.427-.597-5.086-.465-5.562 2.113-7.57 1.512-1.179 3.656-4.024 4.763-6.323 2.384-4.949 4.84-5.494 5.32-1.18.184 1.65 1.066 3.815 1.96 4.811 1.031 1.147 1.255 2.064.61 2.5-.559.379-1.615 2.168-2.347 3.977-1.576 3.895-3.42 3.724-3.896-.362-.344-2.95-1.897-4.706-3.362-3.801-1.384.855-.866 4.642.902 6.596 1.402 1.549 1.506 2.396.591 4.819-.61 1.616-.873 3.844-.584 4.95.638 2.438-.899 2.586-4.227.405-2.442-1.6-2.446-1.596-1.547 1.25a77.699 77.699 0 011.503 5.605c.402 1.837 1.24 2.75 2.524 2.75 3.846 0 3.574 4.64-.32 5.478-6.19 1.331-7.13 1.114-7.456-1.728-.265-2.303-.794-2.75-3.25-2.75-1.614 0-3.272-.062-3.684-.138-.413-.076-1.289.92-1.947 2.211-.902 1.768-.915 2.69-.053 3.728.96 1.156 1.358 1.089 2.457-.415 1.22-1.669 1.429-1.68 2.965-.143 1.536 1.536 1.465 1.737-1.01 2.865-2.978 1.357-3.41 2.668-1.162 3.53.825.317 1.5 1.626 1.5 2.909 0 1.96-.582 2.382-3.649 2.643-5.153.438-6.148 2.513-4.17 8.697 1.874 5.86 1.355 6.966-1.853 3.952-2.97-2.791-3.78-1.888-4.03 4.495-.48 12.326-.742 13.287-4.054 14.893-2.426 1.176-2.753 1.906-2.82 6.302-.042 2.734-.155 5.534-.25 6.221-.204 1.464-3.784 1.69-4.647.294-.791-1.28-3.527-.162-3.527 1.441 0 .7.944 1.898 2.097 2.663 2.073 1.377 2.076 1.435.25 5.098-1.238 2.484-2.537 3.713-3.942 3.73-1.152.013-2.91.924-3.905 2.024-1.748 1.931-1.745 2.071.075 4.083l1.885 2.083 2.066-2.401c2.895-3.366 4.909-2.506 2.96 1.264-.818 1.58-1.505 4.356-1.528 6.171-.023 1.815-.81 4.733-1.75 6.484-1.389 2.59-2.035 3-3.458 2.2zm3.933-29.072c-.32-.797-.556-.56-.604.605-.043 1.054.193 1.644.525 1.312.332-.332.368-1.195.08-1.917zM744 749.107c0-2.752-2.783-4.336-3.65-2.077-.592 1.544 1.222 4.47 2.772 4.47.483 0 .878-1.077.878-2.393zm1.541-10.674c.363-.586.454-1.272.202-1.523-.697-.698-3.743.683-3.743 1.697 0 1.252 2.743 1.117 3.541-.174zM820 800.093c0-.913.7-1.223 2-.883 1.1.288 2 .92 2 1.407 0 .486-.9.883-2 .883s-2-.633-2-1.406zm-19.673-.665c-1.634-1.635.417-5.928 2.834-5.928 2.32 0 2.358 2.138.089 4.94-1.339 1.652-2.026 1.885-2.923.987zm-580.72-2.51c-.334-.87-.607-3.143-.607-5.052 0-2.935-.45-3.627-2.92-4.488-4.08-1.422-4.538-3.545-1.533-7.116 1.407-1.673 2.816-4.328 3.13-5.902.764-3.815 2.917-3.64 3.706.303.43 2.151.15 3.696-.875 4.829-1.906 2.105-1.954 5.9-.085 6.617.828.318 1.411 1.874 1.394 3.719-.016 1.744.296 4.41.693 5.922.554 2.105.369 2.75-.786 2.75-.83 0-1.783-.712-2.117-1.582zm558.99-6.977c-2.103-7.343-1.555-8.792 2.879-7.606 3.878 1.037 5.138 5.452 3.009 10.547-.832 1.99-2.074 3.618-2.76 3.618-.688 0-2.095-2.952-3.128-6.56zm32.703 3.897c-.358-.93.036-2.11.92-2.758.851-.621 1.712-1.981 1.913-3.022.513-2.643 2.867-3.209 2.867-.688 0 4.938-4.38 9.909-5.7 6.468zm-64.66-.032c-.352-.351-.64-3.912-.64-7.91v-7.273l-2.749.189c-2.073.142-2.82-.309-3.04-1.831-.387-2.695 3.275-6.481 6.269-6.481 3.195 0 3.964 1.513 2.53 4.975-1.029 2.484-.912 3.123.904 4.94 1.147 1.146 2.092 3.097 2.1 4.335.008 1.237.256 3.152.552 4.254.394 1.466-.242 2.464-2.374 3.723-1.601.946-3.2 1.432-3.552 1.08zm10.863-1.298c-.348-1.095-.277-2.557.157-3.25.435-.692.67-1.99.523-2.885-.147-.895.491-1.918 1.418-2.274 2.39-.917 3.037.149 1.543 2.542-1.075 1.72-1.013 2.346.386 3.891.916 1.013 1.37 2.32 1.009 2.904-1.103 1.786-4.366 1.184-5.036-.928zm86.601-5.923c-1.724-1.092-.725-4.086 1.365-4.086 1.955 0 1.934-.98-.084-3.86-1.492-2.131-1.481-2.6.152-6.222.972-2.155 2.036-3.906 2.365-3.892.775.033 4.098 7.245 4.098 8.894 0 .696-.9 2.41-2 3.808-1.1 1.398-2 3.381-2 4.407 0 1.994-1.623 2.39-3.896.951zm5.343-10.17a1.117 1.117 0 00-1.532-.363 1.117 1.117 0 00-.362 1.533 1.117 1.117 0 001.532.362 1.117 1.117 0 00.362-1.533zM632 784.058c0-3.499 1.828-4.14 3.002-1.054 1.32 3.47 1.312 3.495-1.002 3.495-1.454 0-2-.667-2-2.441zm-408.832-.705c.345-2.426 2.775-3.474 5.568-2.402 1.4.537 1.425.806.192 1.977-.786.746-2.477 1.672-3.76 2.057-2.025.608-2.288.394-2-1.632zm575.206.677c-.303-.79-.26-1.907.096-2.483 1.085-1.755 3.53-1.17 3.53.845 0 2.33-2.864 3.624-3.626 1.638zm21.097.254c-.972-2.534 4.037-13.285 6.19-13.285 1.38 0 1.913.876 2.135 3.502.25 2.96-.326 4.11-3.717 7.42-3.174 3.1-4.136 3.593-4.608 2.363zM832 783c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm-65.775-.75c-.56-.688-1.301-3.725-1.645-6.75-1.832-16.097-1.858-15.308.628-19 1.549-2.3 3.288-3.608 5.074-3.816 2.005-.234 2.718-.874 2.718-2.44 0-1.168.552-4.794 1.226-8.058.916-4.435 1.779-6.187 3.415-6.932 1.204-.549 2.402-1.73 2.66-2.626.26-.895.796-2.416 1.193-3.378.593-1.441.183-1.75-2.328-1.75-4.309 0-4.754-1.565-1.351-4.752 1.614-1.511 3.456-3.76 4.095-4.998 2.017-3.911 4.09-2.801 4.09 2.191 0 2.443-.476 4.735-1.059 5.095-.606.375-.786 1.892-.422 3.55.397 1.808.043 4.085-.941 6.059-.868 1.74-1.578 3.53-1.578 3.979 0 .45-1.144 3.317-2.542 6.374-2.675 5.848-2.555 7.502.542 7.502 3.062 0 3.082 1.445.071 5.098-1.56 1.891-3.005 4.32-3.212 5.396-.207 1.076-1.49 2.511-2.852 3.19-3.15 1.57-4.267 5.717-2.831 10.508.87 2.902.836 4.09-.15 5.276-1.54 1.857-3.426 1.967-4.8.282zM179 779.646c0-.47-1.183-2.13-2.63-3.691-2.453-2.648-2.503-2.882-.75-3.502 1.126-.398 1.88-1.618 1.88-3.04 0-1.466.67-2.507 1.75-2.718 2.132-.416 2.47 3.315.374 4.12-1.47.563-1.096 5.275.495 6.259 1.208.746 1.115 3.426-.119 3.426-.55 0-1-.384-1-.854zm9.646-1.598c-1.455-1.349-2.683-3.037-2.727-3.75-.098-1.563-.633-5.59-1.088-8.19-.54-3.087 2.028-3.022 2.792.07.834 3.377 4.223 10.108 5.48 10.886 1.397.862 1.054 3.436-.457 3.436-.745 0-2.545-1.104-4-2.453zM652 777.552c0-2.127 2.506-3.88 3.758-2.628.819.82-.953 3.808-2.58 4.35-.656.219-1.178-.543-1.178-1.722zm130.04-2.504c-1.415-1.705-1.049-4.713.642-5.276 1.495-.498 3.653 3.414 2.926 5.306-.699 1.822-2.04 1.81-3.568-.03zm-613.887-2.795c-1.44-1.44-1.507-5.417-.105-6.283.638-.394.796-2.329.404-4.944-.69-4.602.676-8.526 2.97-8.526 3.033 0 2.658 18.352-.409 19.993-1.108.593-2.11.51-2.86-.24zm625.205-.95c-.454-.717-1.183-4.228-1.62-7.803-1.686-13.795-2.018-15.498-3.442-17.671-1.746-2.664-.823-4.7 1.817-4.01 1.712.448 1.887-.134 1.887-6.29 0-4.858.433-7.143 1.524-8.05.838-.695 1.757-1.031 2.042-.746.285.285.678 4.342.873 9.015.195 4.674.865 9.451 1.488 10.616.884 1.652.797 2.769-.397 5.077-1.708 3.304-1.976 7.33-.657 9.875 1.13 2.18-.025 10.406-1.531 10.905-.637.212-1.53-.202-1.984-.918zM96.2 769.213c-1.193-1.27-2.444-3.684-2.78-5.365-.58-2.903-.424-3.086 3.14-3.664 4.381-.711 5.44-.26 5.44 2.316 0 2.203-1.582 3.485-2.49 2.016-.709-1.146-4.51-1.402-4.51-.304 0 .392 1.123 1.63 2.496 2.75 1.6 1.307 2.204 2.49 1.684 3.299-.609.946-1.353.684-2.98-1.048zm107.946-.741c-2.243-1.868-2.491-1.881-5.22-.27-3.261 1.927-4.555 1.343-3.09-1.395.786-1.47.47-2.372-1.485-4.254-1.67-1.608-2.31-3.082-1.953-4.503.294-1.172-.563-4.471-1.926-7.412-1.835-3.962-2.205-5.768-1.464-7.154.546-1.019.992-2.782.992-3.918 0-1.136.434-2.066.965-2.066 1.633 0 3.035 3.666 3.035 7.934 0 4.906.938 5.133 3.472.844l1.904-3.223 1.41 3.455c.93 2.28 1.195 5.078.777 8.223-.612 4.615-.55 4.767 1.935 4.767 1.693 0 2.83-.714 3.342-2.096.731-1.977.93-1.894 3.484 1.453 1.489 1.953 2.97 4.862 3.29 6.465.52 2.597.23 3.037-2.665 4.046-4.101 1.43-3.995 1.444-6.803-.896zm609.054.828c-1.776-1.776-1.477-3.191 1.205-5.711l2.406-2.26.677 2.135c.414 1.303.053 3.088-.928 4.585-1.863 2.843-1.794 2.817-3.36 1.251zm-730.248-2.477c-.547-1.553-2.504-3.803-4.35-5-1.872-1.217-4.348-4.232-5.605-6.83-1.91-3.947-2.064-5-1.012-6.966 1.417-2.646.225-7.618-3.178-13.262-1.091-1.808-1.69-4.059-1.358-5.103.636-2.005 4.352-5.567 8.801-8.435 1.713-1.104 2.75-2.657 2.75-4.115 0-1.288.93-3.524 2.065-4.967 2.354-2.993 1.731-5.032-1.248-4.087-1.665.528-1.905.296-1.387-1.339.346-1.088-.057-3.995-.894-6.461-1.512-4.453-1.645-11.207-.265-13.405.838-1.336-.15-7.16-1.34-7.896-.447-.276-.356-1.81.202-3.408.704-2.022.679-3.532-.084-4.958-1.104-2.063-.465-7.091.902-7.091.404 0 1.542 1.5 2.53 3.334 1.735 3.222 1.734 5.908-.005 11.416-.533 1.69-.313 2.25.888 2.25.898 0 1.891 1.171 2.268 2.673.546 2.173.141 3.096-2.16 4.931-2.119 1.689-2.568 2.59-1.783 3.577.578.725 1.354 3.006 1.726 5.069 1.039 5.767 5.034 4.556 5.746-1.741.355-3.135 2.298-4.175 4.799-2.569 1.255.806 1.209 1.216-.33 2.916-1.31 1.447-1.536 2.47-.842 3.81 1.953 3.777 2.323 8.997.73 10.318-2.07 1.718-1.928 6.984.232 8.624 2.885 2.19 3.891 1.619 5.757-3.267 1.56-4.084 1.632-5.461.584-11.148-.693-3.763-.824-6.86-.31-7.374 1.553-1.553 4.214.303 4.354 3.038.074 1.454.267 5.343.428 8.643.162 3.3.439 6.9.615 8 .228 1.419-.31 2.09-1.856 2.31-1.197.17-2.715.958-3.372 1.75-.658.792-2.014 1.44-3.014 1.44s-2.096.45-2.436 1c-.779 1.26-4.5 1.32-4.5.073 0-1.506-3.308-1.727-6.006-.401-1.378.677-3.274 2.531-4.213 4.121-1.405 2.378-1.52 3.584-.652 6.799 1.354 5.007 2.38 6.06 4.328 4.443 1.947-1.615 1.936-1.132-.062 2.874-.882 1.768-1.445 3.321-1.25 3.45.195.13 1.605.773 3.133 1.43 1.529.657 3.682 2.725 4.786 4.595 1.103 1.87 2.89 3.632 3.971 3.915 1.08.283 1.965 1.23 1.965 2.107 0 1.661-1.64 1.932-9.75 1.611-3.611-.143-4.25.126-4.25 1.79 0 2.016 2.414 3.234 7 3.531 2.075.134 2.5.672 2.5 3.162 0 2.36-.486 3.069-2.277 3.323-1.737.247-2.512-.346-3.272-2.5zm744.057 1.188c-.752-.906-2.068-1.31-3.15-.966-2.768.878-2.376-3.385.625-6.795 3.264-3.709 4.244-3.474 5.536 1.325 1.715 6.37-.009 10.053-3.011 6.436zm-77.652-1.023c-.32-.832-.344-2.745-.054-4.25.29-1.506 1.224-6.338 2.077-10.738.852-4.4 1.566-8.113 1.585-8.25.17-1.219 1.798.317 2.847 2.686.998 2.255 1.045 3.88.205 7-.602 2.235-1.535 4.064-2.075 4.064-.548 0-.702 1.11-.348 2.52.67 2.669-1.212 8.48-2.747 8.48-.5 0-1.17-.68-1.49-1.512zm104.675.453c.017-.793.692-2.315 1.5-3.382 1.035-1.368 1.459-1.516 1.436-.5-.017.792-.692 2.314-1.5 3.382-1.035 1.368-1.459 1.516-1.436.5zm-198-3.691c.04-2.161 2.291-5.25 3.828-5.25 1.396 0 1.436 1.09.165 4.435-1.1 2.894-4.042 3.495-3.993.815zM804 763.47c0-1.192.726-3.698 1.614-5.569 2.745-5.785 5.054-3.783 3.623 3.142-.621 3.004-1.35 4.034-3.028 4.277-1.698.245-2.209-.183-2.209-1.85zm37-.363c0-2.752 2.783-4.336 3.65-2.077.592 1.544-1.222 4.47-2.772 4.47-.483 0-.878-1.077-.878-2.393zm-137.75-4.388c-2.642-5.027-2.674-5.219-.872-5.219 2.289 0 3.777 2.675 3.44 6.185L705.5 763zm-521.167-.136c-2.426-2.426-2.688-4.637-.643-5.422.984-.377 1.808.56 2.6 2.96 1.435 4.347.767 5.186-1.957 2.462zM785 758.5c0-.55.675-1 1.5-1s1.5.45 1.5 1-.675 1-1.5 1-1.5-.45-1.5-1zm67-2.232c0-.758 1.051-4.504 2.337-8.323 1.667-4.955 3.028-7.296 4.75-8.17 1.81-.92 2.413-2.045 2.413-4.5 0-2.607.446-3.339 2.189-3.586 1.203-.172 2.328-.982 2.5-1.8.269-1.288.57-1.3 2.221-.086 1.87 1.375 1.862 1.504-.378 6.13-1.258 2.6-3.217 5.07-4.352 5.49-1.335.493-3.156 3.38-5.151 8.162-1.913 4.585-3.74 7.525-4.808 7.73-.956.184-1.721-.281-1.721-1.047zm-795.921-1.351c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm758.098-2.084c.486-2.509 2.823-2.853 2.823-.416 0 1.228-.646 2.083-1.573 2.083-.932 0-1.442-.68-1.25-1.667zm-605.18-.02c0-.447-1.35-2.388-2.997-4.313-3.096-3.618-3.11-3.689-3.369-17.484-.111-5.917.136-7.035 1.619-7.323 1.259-.244 1.754.312 1.765 1.984.008 1.277.424 2.97.924 3.759 1.438 2.272 4.061-.553 4.061-4.375 0-5.31 2.084-14.959 3.595-16.648.94-1.05 1.206-2.658.788-4.748-.387-1.933-.15-3.74.607-4.653 1.508-1.817.545-9.935-1.568-13.227-.782-1.218-1.422-3.13-1.422-4.25s-.45-2.035-1-2.035-1-.675-1-1.5c0-2.255 1.688-1.803 2.322.623.484 1.85 1.027 2.034 4.217 1.436 5.867-1.101 7.511 1.098 6.768 9.053-.504 5.396-.352 6.388.977 6.388 2.437 0 4.716 2.854 4.716 5.905 0 4.16-1.228 4.557-2.956.957-.85-1.77-2.08-3.39-2.736-3.603-1.624-.527-4.308 8.858-4.308 15.061 0 2.726-1.388 9.732-3.085 15.568-2.362 8.128-2.935 11.665-2.448 15.112 1.235 8.74 1.303 8.474-2.217 8.813-1.788.173-3.251-.053-3.252-.5zm-151.961-4.73c-1.171-2.73-2.615-4.583-3.574-4.583-.964 0-1.48-.668-1.285-1.667.483-2.49 2.56-2.734 3.306-.388.963 3.037 2.222 2.498 2.79-1.195.319-2.068-.038-3.862-.98-4.933-1.03-1.17-1.268-2.656-.78-4.873 2.216-10.09.099-18.574-3.904-15.647-1.168.854-1.98 2.949-2.214 5.713-.479 5.64-1.496 6.589-5.055 4.713-1.562-.824-4.078-1.989-5.59-2.589-1.733-.688-2.75-1.839-2.75-3.113 0-2.612 2.672-2.628 3.5-.021.35 1.1 1.028 2 1.508 2 1.842 0 2.097-2.19.534-4.577-1.542-2.352-1.507-2.664.637-5.674 1.936-2.72 2.223-4.214 1.96-10.217-.169-3.868-.72-7.46-1.223-7.982-.504-.522-.916-1.76-.916-2.75 0-1.348.782-1.8 3.117-1.8 2.323 0 4.106 1.02 7 4.001 2.136 2.2 3.883 4.58 3.883 5.289 0 .708.9 3.053 2 5.21 1.1 2.158 1.745 4.728 1.433 5.712-.868 2.735 2.06 2.21 3.975-.712 1.868-2.85 3.592-3.272 3.592-.878 0 1.308.283 1.388 1.456.414 2.26-1.876 3.83-.19 3.236 3.473-.292 1.803-.026 3.757.597 4.38.834.834.703 1.548-.504 2.755-1.963 1.963-4.785 1.13-4.785-1.413 0-1.93-1.788-4.231-3.288-4.231-.488 0-.581 1.816-.206 4.035.517 3.06.176 5.11-1.412 8.489-2.568 5.462-2.57 5.647-.098 9.702 2.366 3.88 2.721 11.285.582 12.106-.783.3-1.57 1.55-1.75 2.779-.579 3.943-2.743 3.254-4.792-1.528zM57 708.47c0-2.359-2.645-3.724-4.2-2.169-1.555 1.555-.19 4.2 2.169 4.2 1.375 0 2.031-.656 2.031-2.031zM50 697.5c0-.55-.675-1-1.5-1s-1.5.45-1.5 1 .675 1 1.5 1 1.5-.45 1.5-1zm129.543 52.07c-.317-.513-.118-1.214.44-1.56.56-.345 1.017.073 1.017.931 0 1.757-.6 2.015-1.457.628zm666.144.284c-1.362-1.362-.603-6.906 1.281-9.354 1.525-1.981 2.18-2.244 3.16-1.269.98.978.934 2.2-.223 5.926-1.416 4.558-2.807 6.108-4.217 4.697zm-676.61-8.307c-1.304-7.303-.836-11.047 1.383-11.047 1.688 0 2.54 2.23 2.54 6.648 0 1.916.475 4.37 1.055 5.456 1.383 2.583.28 5.896-1.962 5.896-1.408 0-2.029-1.432-3.015-6.953zM810 746.941c0-.857.457-1.276 1.016-.93.56.345.758 1.046.441 1.558-.857 1.387-1.457 1.129-1.457-.628zm-82.411-3.518c-1.424-1.692-2.589-3.465-2.589-3.94 0-2.205 2.162-1.757 5.025 1.041 2.552 2.495 2.915 3.344 1.936 4.523-1.558 1.878-1.366 1.95-4.372-1.624zm37.05 2.383c-1.126-1.126-.685-2.306.861-2.306.825 0 1.5.423 1.5.941 0 1.261-1.562 2.164-2.36 1.365zm-676.389-1.04c-1.499-.519-1.69-4.266-.219-4.266 1.163 0 2.338 2.472 1.813 3.817-.189.486-.906.688-1.594.45zm740.394-.034c-.654-1.058 3.876-8.384 5.876-9.503 2.37-1.327 2.863-.267 1.583 3.405-1.842 5.285-5.908 8.609-7.46 6.098zM223.362 742c-.803-2.09.29-4.5 2.04-4.5 1.63 0 3.073 3.422 2.104 4.991-.937 1.516-3.49 1.213-4.144-.491zM96.2 741.3c-1.608-1.608-1.524-3.8.145-3.8 1.35 0 4.655 3.073 4.655 4.329 0 1.132-3.527.744-4.8-.529zm601.8.2c0-.55.9-1 2-1s2 .45 2 1-.9 1-2 1-2-.45-2-1zm170.188-.739c.502-2.606 3.812-2.897 3.812-.334 0 1.43-.642 2.073-2.073 2.073s-1.97-.539-1.739-1.739zm-108.163-6.187c-1.392-4.216-.803-7.497 1.226-6.829 1.43.472 2.35 10.755.961 10.755-.49 0-1.475-1.767-2.187-3.926zM768 737.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm32-2.5c-.993-1.196-.985-2.154.039-4.75.705-1.787 1.66-3.677 2.121-4.2.462-.522.84-2.162.84-3.643 0-2.931 2.124-4.32 5.14-3.362 2.232.708 2.294 1.424.446 5.124a485 485 0 00-3.658 7.581c-2.427 5.14-3.03 5.538-4.927 3.25zm41-1.378c0-3.079 2.239-5.71 3.956-4.65 1.633 1.01 1.227 4.053-.785 5.873-2.56 2.317-3.171 2.082-3.171-1.223zm-142-.563c0-.857.45-1.559 1-1.559s1 .423 1 .941-.45 1.22-1 1.559c-.55.34-1-.084-1-.941zm-611.56-.655c-.372-.603.052-1.824.942-2.714 1.49-1.491 1.745-1.491 3.236 0 1.89 1.89 1.075 3.81-1.618 3.81-1.035 0-2.187-.493-2.56-1.096zm9.2-.598c-1.196-1.195-.646-3.306.86-3.306.825 0 1.5.648 1.5 1.441 0 1.67-1.427 2.798-2.36 1.865zM811 731c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm8.21-2.75c-.935-3.584.265-12.062 1.78-12.575 2.158-.73 2.516.09 2.644 6.07.196 9.128-2.65 13.312-4.424 6.505zm-738.543 1.583c-1.377-1.376-.594-3.333 1.333-3.333 1.333 0 2 .667 2 2 0 1.927-1.957 2.71-3.333 1.333zm94.326-5.347c-1.654-3.24-1.829-4.425-.908-6.144.627-1.172.903-3.897.613-6.056-.38-2.831.133-5.417 1.84-9.277 1.768-3.997 2.161-6.07 1.554-8.19-.857-2.986.194-7.319 1.774-7.319 1.236 0 2.314 11.42 2.077 22-.19 8.442-2.445 19-4.06 19-.463 0-1.764-1.806-2.89-4.014zM101 726c-1.02-1.229-.951-1.5.378-1.5.892 0 1.622.675 1.622 1.5s-.17 1.5-.378 1.5c-.207 0-.937-.675-1.622-1.5zm737.559-.405c-.367-.594-.223-1.87.32-2.837.936-1.667 1.023-1.664 1.687.06.805 2.091-.939 4.506-2.007 2.777zM863 724.06c0-.857.45-1.559 1-1.559s1 .423 1 .941-.45 1.22-1 1.559c-.55.34-1-.084-1-.941zm9.75.752c-1.937-.506-2.348-2.824-.683-3.852.998-.617 3.831 2.135 3.901 3.791.034.791-.392.8-3.218.06zm-645.67-1.714c-1.44-1.736-1.089-5.773.55-6.312 1.287-.423 2.547 5.793 1.42 7.007-.404.436-1.29.123-1.97-.695zm-117.9-1.769c.472-3.201 2.82-3.544 2.82-.411 0 1.68-.549 2.583-1.57 2.583-1.042 0-1.462-.73-1.25-2.172zM852 721.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm-62.333-1.667c-1.151-1.15-.729-2.333.833-2.333.825 0 1.5.675 1.5 1.5 0 1.562-1.183 1.984-2.333.833zm42.74-1.716c-.293-.761.147-3.006.976-4.99 1.072-2.566 1.955-3.434 3.062-3.01 1.996.766 1.995 4.31-.001 7.16-1.778 2.539-3.266 2.848-4.037.84zM843 716c0-1.49.43-2.352 1-2 .55.34 1 1.24 1 2s-.45 1.66-1 2c-.57.352-1-.51-1-2zm-737.775-.729c-1.3-1.566.69-8.966 2.27-8.44 1.368.457 1.282 8.91-.095 9.369-.605.202-1.584-.216-2.175-.929zm91.775.17c0-.582.45-.78 1-.441.55.34 1 .816 1 1.059s-.45.441-1 .441-1-.477-1-1.059zm-85-1.382c0-.793.4-1.688.89-1.99 1.24-.768 3.071-12.01 4.843-29.74.608-6.08 1.267-8.202 3.181-10.239 2.185-2.324 2.27-2.737.903-4.33-2.616-3.044-2.886-4.041-1.056-3.897 1.398.11 1.739-.687 1.739-4.06 0-4.682 1.513-6.896 4.047-5.923 1.266.485 1.514 1.322 1.005 3.382a56.571 56.571 0 00-1.019 5.55c-.188 1.548-.824 4.023-1.413 5.5-1.417 3.56-3.391 18.053-3.568 26.188-.082 3.788-.808 7.752-1.741 9.5-.88 1.65-2.116 4.913-2.745 7.25-.852 3.167-1.643 4.25-3.105 4.25-1.078 0-1.961-.648-1.961-1.441zm609-.559c0-1.289.506-1.998 1.25-1.75.688.23 1.25 1.017 1.25 1.75 0 .733-.563 1.52-1.25 1.75-.744.248-1.25-.461-1.25-1.75zm9.173.34c.195-1.012 1.023-1.84 1.84-1.84 2.144 0 1.835 2.906-.354 3.327-1.336.257-1.743-.15-1.486-1.486zm66.525.959c-.264-.44.322-3.949 1.302-7.799.98-3.85 1.58-7.338 1.332-7.75-.92-1.532-5.354-.687-6.564 1.25-.687 1.1-1.816 2-2.509 2-1.592 0-1.615-1.244-.052-2.807.943-.943.846-1.569-.444-2.858-1.432-1.433-1.472-1.995-.302-4.243.742-1.426 2.479-3.569 3.86-4.763 2.389-2.064 2.59-2.084 4.103-.413 1.084 1.197 1.397 2.729.983 4.8-.856 4.28.836 4.763 4.051 1.154 2.869-3.22 2.862-3.08.647-12.87-.56-2.475-1.037-6.547-1.061-9.05-.044-4.5-1.325-6.95-3.636-6.95-.655 0-1.461 1.075-1.79 2.39-.795 3.162-3.31 4.055-4.605 1.634-.696-1.3-.675-3.503.067-6.963 1.255-5.849 3.167-6.556 6.92-2.561 1.292 1.375 3.17 2.5 4.174 2.5 1.004 0 1.826.603 1.826 1.34 0 .736 1.807 2.198 4.016 3.25 3.096 1.472 4.277 2.763 5.15 5.628 1.355 4.452-.182 7.229-3.432 6.198-1.823-.579-3.678.835-3.719 2.834-.008.413 2.185.75 4.874.75 5.676 0 10.525 2.928 8.412 5.078-.943.96-1.905.875-4.5-.395-3.233-1.583-3.353-1.56-5.833 1.1-3.48 3.733-6.968 8.8-6.968 10.121 0 .603.619 1.096 1.375 1.096s1.656 1.406 2 3.125c1.03 5.153.809 5.765-2.016 5.563-3.241-.23-4.265 1.89-1.357 2.813 2.924.928 2.202 4.105-.836 3.676-1.257-.178-2.893.182-3.637.799-.743.616-1.567.762-1.831.323zm-607.448-2.017c-.688-.247-1.25-1.552-1.25-2.9 0-2.142.253-2.317 2-1.382 3.08 1.648 2.42 5.419-.75 4.282zm626.191-2.763c-1.661-1.267-1.728-1.62-.464-2.45 1.033-.677 2.01-.486 3.25.637 3.434 3.107.993 4.696-2.786 1.813zm65.559-.436c0-1.228.646-2.083 1.573-2.083.932 0 1.442.68 1.25 1.667-.486 2.509-2.823 2.853-2.823.416zM36.2 707.3c-1.669-1.669-1.5-3.8.3-3.8.825 0 1.5.413 1.5.918 0 .505.273 1.63.607 2.5.716 1.866-.698 2.09-2.407.382zm157.455-.55c-1.345-2.176-.961-10.255.569-11.967.876-.98 1.747-2.903 1.935-4.273.201-1.468 1.108-2.636 2.212-2.846 1.646-.314 1.796.103 1.25 3.49a372.52 372.52 0 00-1.244 8.552c-.593 4.481-3.566 8.916-4.722 7.045zm7.739-2c.345-1.512.876-3.871 1.18-5.241.304-1.37 1.161-3.17 1.906-4 .79-.882 1.152-2.756.87-4.509l-.484-3 2.145 2.457c1.737 1.99 1.892 2.655.817 3.5-.745.585-1.178 2.361-.986 4.043.4 3.513-2.51 9.5-4.616 9.5-1.077 0-1.295-.72-.832-2.75zm534.606.785c0-1.275 3.37-3.035 5.812-3.035 1.069 0 2.503-.675 3.188-1.5 1.274-1.535 5.026-2.101 4.968-.75-.062 1.464-2.507 3.792-5.265 5.012-3.323 1.47-8.703 1.64-8.703.273zM68.59 703.6c-1.178-1.301-1.37-2.116-.611-2.586 1.357-.839 4.021 1.22 4.021 3.11 0 1.927-1.384 1.715-3.41-.524zm767.538.557c-.755-.91-2.405-1.656-3.667-1.656s-2.48-.558-2.708-1.241c-.297-.892-.903-.752-2.155.5-2.128 2.128-2.992 2.176-4.587.254-2.524-3.041 1.774-6.328 4.591-3.511.67.67 2.129-.16 4.396-2.5 4.29-4.426 7.062-4.799 4.03-.542l-2.108 2.96 2.102 2.102c1.155 1.155 1.96 2.818 1.79 3.695-.282 1.44-.445 1.434-1.684-.061zM883 702.959c0-1.541 3.218-12.492 5.215-17.747 1.177-3.1 3.125-3.134 3.581-.063.458 3.079-5.757 19.351-7.39 19.351-.774 0-1.406-.693-1.406-1.54zM28.468 698.4c-.965-3.04 1.057-4.656 2.486-1.986 1.141 2.134.69 4.087-.946 4.087-.48 0-1.173-.945-1.54-2.1zm204.405-.649c-1.429-3.65-1.616-7.677-.373-8.05.55-.164 1.363 1.186 1.806 3 .443 1.815 1.058 4.312 1.367 5.55.807 3.242-1.495 2.83-2.8-.5zm641.282-.802c.19-.98.95-1.984 1.69-2.23.861-.287 1.222.194 1 1.334-.19.98-.95 1.984-1.69 2.23-.861.287-1.221-.194-1-1.334zM66 694.059c0-2.942-1.397-3.996-3.635-2.743-1.206.674-2.818.136-5.982-2-5.327-3.595-5.885-4.435-3.743-5.634 2.7-1.511 4.068-7.04 3.014-12.182-.613-2.988-.527-7.085.254-12.191.962-6.283.918-8.755-.24-13.5-.779-3.195-1.478-10.534-1.554-16.309-.076-5.775-.384-11.695-.684-13.155-.905-4.392 2.073-4.63 4.32-.345.576 1.1 1.372 4.605 1.769 7.789.577 4.633.401 6.142-.883 7.561-1.348 1.49-1.412 2.282-.401 4.961 1.202 3.185 3.765 4.418 3.765 1.811 0-.757.668-1.931 1.483-2.608 1.23-1.02 1.653-.785 2.474 1.373.545 1.432 1.197 4.969 1.45 7.859.253 2.89 1.1 8.238 1.882 11.886 1.545 7.202.914 9.868-2.339 9.868-1.247 0-1.95-.683-1.95-1.893 0-1.041-.755-2.183-1.678-2.537-1.53-.587-1.538-.782-.094-2.227 1.23-1.23 1.366-2.208.608-4.383-1.885-5.409-5.547-4.472-4.322 1.105.383 1.742.194 3.582-.447 4.354-.774.932-.805 2.14-.105 3.982.819 2.153 1.457 2.532 3.425 2.038 1.675-.42 2.705-.097 3.347 1.05.51.912 2.016 2.211 3.347 2.888 2.28 1.159 2.4 1.657 2.104 8.658-.174 4.096-.821 7.74-1.443 8.125-.833.514-.816 1.383.065 3.315 1.84 4.04 1.489 5.525-1.307 5.525-1.984 0-2.5-.504-2.5-2.441zm-5.154-9.132c1.735-.866 3.154-2.216 3.154-3 0-1.92-3.988-1.824-6.825.163-1.801 1.261-2.028 1.882-1.1 3 1.423 1.714.977 1.73 4.771-.163zm48.924 11.01c-.31-.31-.326-2.33-.036-4.49.324-2.414.044-4.51-.726-5.437-.995-1.2-.999-1.816-.017-2.999 1.623-1.956 3.009-1.006 3.009 2.062 0 1.35.54 3.32 1.202 4.379 1.723 2.759-1.35 8.567-3.432 6.485zm638.167-1.555c-1.236-2.31-.48-3.502 2.563-4.043 1.323-.236 2.107-1.285 2.316-3.098.23-1.99.876-2.741 2.357-2.741 1.45 0 1.865.458 1.434 1.582-.334.87-.613 2.557-.62 3.75-.007 1.366-1.29 2.996-3.47 4.408l-3.458 2.24zM879 692.532c0-.533.675-.71 1.5-.394.825.317 1.5.753 1.5.969 0 .216-.675.393-1.5.393s-1.5-.436-1.5-.969zm-32.974-3.655c-3.456-3.936-2.964-6.485.856-4.44 2.313 1.238 5.402 6.446 4.411 7.436-1.16 1.161-2.073.642-5.267-2.996zM188 690.2c0-.715.462-1.762 1.026-2.326.564-.564 1.223-4.021 1.465-7.682.253-3.84 1.142-7.73 2.103-9.195 1.104-1.685 1.503-3.794 1.186-6.268-.263-2.051.021-4.923.632-6.383l1.11-2.654 2.842 2.445c2.42 2.082 2.75 2.945 2.213 5.803-.346 1.846-1.576 4.56-2.732 6.03-1.561 1.985-1.812 2.963-.974 3.801 1.708 1.708 1.379 3.279-1.371 6.547-1.375 1.634-2.5 3.818-2.5 4.854 0 2.172-2.664 6.328-4.057 6.328-.519 0-.943-.585-.943-1.3zm637.002-3.196c-1.323-3.48-1.267-4.188.383-4.822 2.202-.844 5.77 2.225 5.422 4.665-.477 3.343-4.552 3.454-5.805.157zM86.195 683.63c-.824-2.364-.823-3.851.005-5.667 1.35-2.965 2.383-3.11 3.765-.528 1.487 2.778 1.287 4.533-.809 7.122l-1.844 2.277-1.117-3.204zm95.805.312c0-.857.457-1.276 1.016-.93.56.345.758 1.046.441 1.558-.857 1.387-1.457 1.129-1.457-.628zm697.079-.024c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM837 682.03c0-.892.587-1.243 1.494-.895.822.316 1.246.976.941 1.469-.872 1.412-2.435 1.044-2.435-.574zm46 .028c0-1.743 1.64-2.9 2.956-2.086 1.331.823.133 3.527-1.563 3.527-.766 0-1.393-.648-1.393-1.441zM790.41 680c-.344-1.375-1.028-2.5-1.518-2.5-1.533 0-.973-2.755.69-3.393 2.294-.88 2.418-.81 2.418 1.393 0 1.1.45 2 1 2s1 1.125 1 2.5c0 1.541-.568 2.5-1.481 2.5-.814 0-1.763-1.125-2.108-2.5zm-761.743.833c-.92-.919-.843-5.333.092-5.333 1.218 0 3.366 3.989 2.716 5.04-.691 1.119-1.861 1.24-2.808.293zm666.95-5.083c.426-3.495 1.35-5.477 3.497-7.5 1.604-1.512 3.36-2.75 3.902-2.75 1.289 0 1.276 3.702-.016 4.5-.55.34-1 1.941-1 3.559 0 3.124-3.014 6.941-5.48 6.941-1.182 0-1.365-.961-.903-4.75zM744 677.5c0-1.1.402-2 .893-2 1.124 0 2.173 2.601 1.371 3.402-1.203 1.204-2.264.547-2.264-1.402zm149.605-.3c-1.68-1.228-1.687-1.61-.14-6.931 1.342-4.619 1.41-5.997.374-7.655-1.508-2.415-.478-3.89 1.544-2.21 1.177.976 1.642.55 2.616-2.4.65-1.972.957-4.177.68-4.898-.277-.722.357-2.049 1.409-2.95 1.052-.9 1.922-2.203 1.934-2.896.012-.693.87-2.363 1.906-3.71 1.608-2.093 2.117-2.258 3.478-1.128 1.81 1.502 2.283 11.534.594 12.578-.604.373-1-.99-1-3.441 0-2.232-.45-4.059-1-4.059s-1 .472-1 1.048c0 .577-.9 2.911-2 5.188-1.1 2.277-2 4.552-2 5.057 0 .504-1.056 3.02-2.347 5.59-2.494 4.965-4.08 11.358-3.067 12.37 1.311 1.31 3.414-.603 3.418-3.11.002-1.454.874-4.071 1.938-5.816 1.065-1.746 2.076-5.086 2.247-7.423.179-2.444.883-4.437 1.658-4.692 1.063-.35 1.116-.011.25 1.607-.603 1.127-1.097 3.43-1.097 5.119 0 1.688-.9 4.748-2 6.8-1.1 2.053-2 4.437-2 5.297 0 1.816-1.902 3.965-3.509 3.965-.61 0-1.909-.585-2.886-1.3zm-854.159-.787c-1.03-1.668 1.287-3.58 2.667-2.2 1.154 1.154.432 3.287-1.113 3.287-.485 0-1.184-.49-1.554-1.087zm6.161-.495c-1.395-3.634-.717-4.548 3.135-4.228 4.583.38 5.413 2.79 1.572 4.56-3.494 1.61-3.975 1.576-4.707-.332zM853 675c-1.088-2.861-2.22-3.145-4-1-2.41 2.904-3.104 1.542-2.42-4.75.662-6.075 1.744-8.75 3.542-8.75.483 0 .878 1.147.878 2.548 0 1.41 1.07 3.53 2.399 4.75 2.868 2.632 4.335 9.702 2.013 9.702-.804 0-1.89-1.125-2.412-2.5zm-646-.047c0-1.395 2.527-5.441 3.673-5.881 1.847-.709 2.867 2.072 1.406 3.833-1.048 1.262-5.079 2.888-5.079 2.048zm11.77-1.203c-.848-.963-1.796-3.325-2.108-5.25-1.4-8.644-1.898-10-3.669-10-2.079 0-3.494-2.899-2.097-4.296.615-.615 1.907.06 3.588 1.873 2.23 2.406 2.914 2.656 4.525 1.65 2.742-1.713 3.3-.239 3.58 9.46.25 8.736-.608 10.212-3.82 6.563zm-132.258-.23c-.406-.657-.288-1.644.262-2.194 1.303-1.303 2.34.373 1.285 2.079-.615.994-.986 1.022-1.547.115zm742.738-.051c-2.667-1.072-2.839-2.684-.623-5.847 1.208-1.724 1.478-3.588 1.047-7.223-.463-3.917-.284-4.899.898-4.899.84 0 1.735 1.286 2.074 2.978.327 1.637 1.216 3.492 1.975 4.122 1.121.93 1.379.572 1.379-1.919 0-6.438 2.884-4.218 3.661 2.819.307 2.776-.254 4.276-2.71 7.25-3.241 3.925-4.018 4.2-7.701 2.719zm40.114-1.463c-.871-2.27 1.676-4.72 3.636-3.498 1.139.71 1.242 1.349.429 2.654-1.51 2.422-3.316 2.796-4.065.844zm-838.697-1.173c-1.254-1.254-.669-4.395.934-5.01 2.102-.807 3.519 1.585 2.294 3.873-1.008 1.884-2.098 2.268-3.228 1.137zm85.916-.199c-.43-.697-.513-1.537-.183-1.867.895-.895 1.87.421 1.387 1.871-.338 1.016-.574 1.016-1.204-.004zm71.499.068c-.045-.714-1.285-2.413-2.756-3.776-2.893-2.68-2.467-3.782 1.856-4.799 3.473-.817 4.476 1.868 2.439 6.534-.802 1.836-1.495 2.755-1.54 2.041zm-13.809-2.502c-.879-1.93-.587-2.856 1.813-5.75 1.573-1.898 2.872-4.168 2.887-5.046.036-2.14 2.713-7.399 4.536-8.911 2.55-2.116 3.094 1.737.618 4.372-1.17 1.245-2.127 2.967-2.127 3.827 0 .86-.666 2.116-1.48 2.791-.813.675-1.771 3.43-2.128 6.122-.7 5.28-2.406 6.355-4.119 2.595zm-64.587.55c-.237-.412-.741-2.888-1.12-5.5-.427-2.944-1.195-4.75-2.02-4.75-2.787 0-3.418-6.697-1.141-12.111l1.405-3.341.723 4.976c.878 6.046 2.043 8.476 4.063 8.476 1.232 0 1.402-.83.88-4.307-.486-3.246-.266-4.622.891-5.583 2.174-1.803 5.158-.958 5.015 1.421-.231 3.864-2.87 11.983-4.159 12.793-.74.465-1.05 1.647-.711 2.712.993 3.132-2.379 7.728-3.826 5.214zm658.564.088c-1.518-.613-1.624-3.77-.215-6.404 1.392-2.6 2.416-2.435 3.804.613 2.392 5.248.926 7.612-3.589 5.79zM22 664c0-1.689.458-2.514 1.25-2.25.688.23 1.25 1.242 1.25 2.25s-.563 2.02-1.25 2.25c-.792.264-1.25-.561-1.25-2.25zm789.04-.952c-1.045-1.259-.99-1.976.305-3.951 1.36-2.076 1.382-2.578.162-3.591-.78-.648-1.861-.905-2.402-.571-.54.334-1.416-.169-1.947-1.117-.775-1.385-1.252-1.485-2.429-.508-1.166.967-1.724.9-2.743-.327-1.067-1.285-.88-1.994 1.117-4.262 1.318-1.497 2.534-2.933 2.701-3.192.168-.26.636.065 1.04.72 1.307 2.114 6.606-.02 6.99-2.816.185-1.338.747-2.86 1.25-3.383.504-.522.916-2.278.916-3.9 0-3.59 4.759-13.65 6.457-13.65.672 0 1.735-1.125 2.361-2.5 1.282-2.814 2.413-3.132 4.065-1.141.86 1.037.653 1.961-.878 3.907-1.103 1.402-2.005 3.24-2.005 4.083s-.45 1.811-1 2.151c-.55.34-1 1.628-1 2.863s-1.35 4.374-3 6.976c-1.65 2.602-3 4.965-3 5.252 0 .287 1.336-.267 2.97-1.232 1.632-.965 3.259-1.464 3.613-1.109.898.898-3.04 6.988-5.487 8.484-1.27.777-1.998 2.26-1.964 4 .15 7.602-3.144 12.366-6.092 8.814zM816 653.7c0-.44-.54-1.34-1.2-2-1.763-1.763-2.8-1.467-2.8.8 0 1.333.667 2 2 2 1.1 0 2-.36 2-.8zm-777.852 7.042c-.995-2.693-1.026-2.702-1.697-.492-.734 2.414-1.933 2.896-2.983 1.199-.67-1.084 3.896-5.949 5.584-5.949 1.385 0 1.158-3.684-.418-6.8-2.18-4.308-4.288-27.2-2.504-27.2.495 0 1.754 1.406 2.8 3.125 1.507 2.48 1.783 4.286 1.335 8.75-.311 3.094-1.06 5.962-1.665 6.375-.753.513-.772.987-.062 1.5.572.412 2.01 2.314 3.195 4.226 1.894 3.055 2.244 3.248 2.877 1.597.397-1.033.235-3.701-.36-5.928-.836-3.134-.784-4.473.23-5.92 1.66-2.369 2.86-.76 3.194 4.275.128 1.925.516 4.876.864 6.557.448 2.164.17 3.44-.953 4.372-.872.724-1.585 2.106-1.585 3.071 0 .965-.675 2.315-1.5 3s-1.5 2.074-1.5 3.087c0 1.014-.864 2.305-1.92 2.87-1.615.865-2.079.593-2.932-1.715zm816.519 2.091c-.367-.366-.667-1.321-.667-2.122 0-1.18.283-1.22 1.5-.211.825.685 1.5 1.64 1.5 2.122 0 1.036-1.384 1.161-2.333.211zm-73.114-2.248a1.117 1.117 0 01.362-1.532 1.117 1.117 0 011.532.362c.322.52.16 1.21-.362 1.532-.52.322-1.21.16-1.532-.362zm-753.62-.776c-.036-.445-.25-3.872-.476-7.617-.226-3.744-.904-8.639-1.507-10.877-1.265-4.7-.086-7.003 2.49-4.864 2.903 2.408 5.1 17.049 2.56 17.049-.55 0-1 1.323-1 2.941 0 2.534-1.883 5.603-2.066 3.368zm850.475-3.687c-.848-2.211 1.084-8.122 2.656-8.122.79 0 1.391.563 1.336 1.25-.055.688-.168 2.825-.25 4.75-.154 3.588-2.638 4.997-3.742 2.122zm-112.257-7.372c.017-4.263-.277-10.338-.653-13.5-.388-3.27-.293-5.75.222-5.75 1.2 0 5.725 4.897 7.235 7.829.66 1.281 2.503 2.783 4.095 3.338 1.802.628 4.397 3.21 6.874 6.839 4.425 6.482 4.202 7.313-2.23 8.302-3.783.58-3.806.564-3.5-2.612.255-2.667-.067-3.249-1.948-3.516-1.472-.209-2.48.312-2.902 1.5-1.033 2.902-3.504 5.32-5.438 5.32-1.562 0-1.781-.967-1.755-7.75zm-566.608 5.5c-.216-.688-.675-3.357-1.02-5.932-.958-7.173 2.84-11.744 5.552-6.679 2.284 4.269 2.832 7.683 1.326 8.26-.78.3-1.937 1.683-2.57 3.073-1.244 2.73-2.657 3.28-3.288 1.278zm22.686.063c.618-1.855 2.771-2.162 2.771-.396 0 .87-.713 1.583-1.583 1.583-.871 0-1.406-.534-1.188-1.188zm632.57-.998c-1.44-2.197-2.204-6.034-1.905-9.565.181-2.136 2.092-1.375 3.322 1.324.915 2.01.89 3.026-.114 4.634-1.002 1.605-1.018 2.226-.072 2.81.667.413 1.026 1.314.796 2.003-.26.782-1.021.33-2.027-1.206zm-115.44-.032c-.518-.706-1.575-2.545-2.348-4.087-1.333-2.656-1.251-2.933 1.54-5.215 3.62-2.958 4.875-3.106 4.066-.481l-1.216 3.932c-.49 1.58-.216 1.832 1.5 1.384 2.771-.725 2.663.806-.25 3.543-1.838 1.725-2.556 1.927-3.292.924zm-732.794-.678c-.305-.493.104-1.148.909-1.457 1.562-.6 2.897.648 1.832 1.713-.904.904-2.093.793-2.741-.256zm91.938-1.096c-.682-2.147.041-4.009 1.556-4.009.518 0 .941 1.35.941 3 0 3.395-1.542 4.018-2.497 1.009zm116.833-.576c-.872-2.273.983-3.642 3.933-2.902 2.52.633 2.529.671.644 2.556-2.323 2.323-3.776 2.432-4.577.346zm670.033-.914c-.348-.905-.123-2.764.5-4.13.622-1.366 1.131-3.812 1.131-5.436 0-1.985.502-2.953 1.531-2.953 2.355 0 2.657 2.104 1.148 8.001-1.422 5.555-3.198 7.417-4.31 4.518zM792.2 649.3c-1.453-1.453-1.593-4.8-.2-4.8.55 0 1.9.9 3 2s2 2.45 2 3c0 1.393-3.347 1.253-4.8-.2zm44.05.454c-1.76-.592-1.562-3.254.242-3.254.82 0 2.053-.9 2.74-2 1.384-2.216 4.768-2.729 4.768-.723 0 3.41-4.671 7.013-7.75 5.977zm-713.171-1.837c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zM17.098 643.35c-1.486-4.263-1.38-5.851.389-5.851 1.612 0 4.85 6.647 3.947 8.106-1.158 1.874-3.282.77-4.336-2.255zm779.57-.507c-.326-2.011-.358-4.036-.071-4.5 1.09-1.765 3.208-.728 4.403 2.157.991 2.392.991 3.305 0 4.5-2.079 2.504-3.707 1.693-4.331-2.157zm65.821 2.002c-1.227-1.227-1.484-2.581-.994-5.25.8-4.352 2.08-5.92 3.598-4.403.79.79.768 1.699-.08 3.283-.955 1.784-.862 2.534.505 4.044 2.901 3.206.044 5.4-3.029 2.326zM114.4 643.1c-.975-2.54.556-10.78 1.92-10.332 1.87.615 2.061 9.17.24 10.682-1.267 1.052-1.645.99-2.16-.35zm670.03-4.02c-.914-3.646-.124-6.08 1.975-6.08 2.567 0 4.026 2.646 3.223 5.845-.872 3.475-4.345 3.632-5.198.234zm126.605.486c-1.496-2.797-1.277-6.616.7-12.182 1.122-3.16 2.315-4.884 3.377-4.884 3.564 0 3.796 2.26 1.108 10.751-1.437 4.537-2.958 8.249-3.38 8.249-.424 0-1.235-.87-1.805-1.934zm3.424-5.306c.75-1.782 1.15-3.582.893-4-1.547-2.502-4.862 2.056-3.84 5.278.857 2.7 1.367 2.478 2.947-1.278zM108 638.437c0-1.872 2.502-3.768 3.567-2.704.802.802-.629 3.577-2.144 4.158-.938.36-1.423-.135-1.423-1.454zm637.412-1.108c-1.334-2.58-1.391-3.499-.34-5.465 1.729-3.228 2.928-2.968 2.928.636 0 1.65.45 3 1 3 1.583 0 1.162 3.724-.492 4.359-.98.376-2.042-.491-3.096-2.53zm154.147 2.266c-.84-1.358 2.297-13.127 3.989-14.963.693-.753 1.753-1.064 2.356-.691 1.819 1.124 1.243 5.176-1.456 10.256-3.073 5.782-4.011 6.818-4.89 5.398zM734 638.5c0-.55.675-1 1.5-1s1.5.45 1.5 1-.675 1-1.5 1-1.5-.45-1.5-1zm138.76-4.25c-.497-6.005.9-10.06 3.648-10.59 1.703-.328 1.83.092 1.264 4.214-.757 5.526-.087 7.626 2.435 7.626 1.041 0 1.893.502 1.893 1.117 0 .645-1.033.919-2.45.648-1.496-.286-2.652.058-2.969.883-.285.744-1.164 1.352-1.953 1.352-1.01 0-1.564-1.557-1.869-5.25zM70 634.7c0-2.699 1.54-5.2 3.2-5.2 1.137 0 .99 3.775-.235 6.066-1.5 2.8-2.965 2.373-2.965-.866zm31.004.304c-2.576-2.742-2.089-4.731.52-2.123.89.89 2.037 1.619 2.547 1.619.511 0 .929.675.929 1.5 0 2.177-1.326 1.846-3.996-.996zm754.246 1.35c-.688-.69-1.25-2.514-1.25-4.054 0-2.08.486-2.8 1.893-2.8 2.505 0 3.14 1.945 1.744 5.342-.91 2.216-1.386 2.517-2.387 1.512zm-50.707-.785c-.683-1.105.894-2.299 1.818-1.375.95.95.773 2.306-.302 2.306-.518 0-1.2-.419-1.516-.93zM834 634.56c0-2.409 1.813-3.646 3.245-2.214.76.76.7 1.517-.21 2.613-1.748 2.106-3.035 1.936-3.035-.399zm-769.5-.835c-3.244-.678-4.003-2.01-2.254-3.95.879-.976 1.858-3.011 2.176-4.524l1.125-5.362c.529-2.523.614-2.552 2.5-.845 2.628 2.378 2.46 3.913-.705 6.402l-2.657 2.09 2.19 2.333c1.72 1.83 1.916 2.54.908 3.303-.706.534-2.183.783-3.283.553zm-47.164-1.791c-.33-.862-.092-2.077.531-2.7.844-.844 1.133-.444 1.133 1.567 0 3.009-.749 3.518-1.664 1.133zm755.64-.998c-1.129-2.967.251-6.435 2.56-6.435 1.069 0 1.464 1.215 1.464 4.5 0 5.17-2.363 6.306-4.025 1.935zM797 632c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm46-.858c0-2.96 1.69-4.351 3.315-2.727.809.809.835 1.623.091 2.803-1.715 2.72-3.406 2.682-3.406-.076zm46.607.776c-.82-2.139-.828-2.12 1.02-2.828 2.065-.793 4.426 1.108 3.707 2.983-.738 1.922-3.97 1.816-4.727-.155zM28.699 628.99c-2.973-3.726-3.408-5.489-1.354-5.489 1.686 0 4.211 2.818 5.077 5.666 1.077 3.54-.83 3.449-3.723-.177zm15.29-1.025c-.715-2.555-1.905-4.878-2.644-5.162-1.781-.683-1.697-2.554.405-8.98 1.194-3.653 2.226-5.263 3.25-5.071 1.143.215 1.567 2.062 1.784 7.765.156 4.116.347 8.958.424 10.76.235 5.509-1.75 5.933-3.218.688zm64.45-.554c-1.873-2.09-1.877-2.202-.102-3.287 4.968-3.038 4.9-2.834 2.657-7.904-2.704-6.113-1.654-7.909 2.075-3.55 3.094 3.616 3.59 5.772 1.752 7.61-.649.649-1.212 2.868-1.25 4.932-.085 4.49-2.25 5.418-5.133 2.199zm8.593-.231c-.018-1.002.643-2.497 1.468-3.322 2.055-2.055 2.08.493.032 3.202-1.378 1.822-1.47 1.83-1.5.12zM102 624c0-2.86 1.165-3.211 3.063-.924 1.084 1.307 1.063 1.732-.127 2.485-2.292 1.45-2.936 1.108-2.936-1.561zm276.5-1.06c-5.5-.731-16.3-1.361-24-1.4-7.7-.039-14.513-.401-15.14-.805-2.346-1.513 26.077-1.194 35.901.403 6.318 1.027 12.315 1.37 17 .974 3.981-.337 11.289-.797 16.239-1.021l9-.408-8.5.831c-4.675.457-10.525 1.297-13 1.865-5.346 1.228-4.864 1.24-17.5-.44zm-357.157-.988c-.339-.884.17-2.106 1.184-2.848 1.92-1.404 1.257-3.604-1.086-3.604-1.798 0-1.862-1.406-.128-2.845 1.667-1.384 8.687-.316 8.687 1.32 0 .669-.9 2.03-2 3.025-1.1.995-2 2.592-2 3.548s-.712 2.011-1.582 2.345c-2.223.853-2.408.797-3.075-.941zm464.4.959c-.399-.4-.224-1.33.388-2.069.91-1.097-.05-1.365-5.259-1.467l-6.372-.125 4.5-.801c2.475-.44 8.55-.776 13.5-.747l9 .055-5.956 1.016c-3.74.637-6.537 1.731-7.515 2.94-.857 1.058-1.885 1.597-2.285 1.198zM801 621.434c0-1.136.496-2.993 1.103-4.127s.72-2.342.25-2.684c-.469-.343-.917-2.198-.995-4.123-.078-1.925-.468-4.737-.867-6.25-1.414-5.366 4.315-2.386 5.996 3.12.43 1.407.192 3.361-.586 4.814-.895 1.673-.975 2.663-.254 3.131 1.744 1.134 3.544 5.244 2.961 6.763-.329.858-1.946 1.422-4.077 1.422-2.902 0-3.531-.368-3.531-2.066zm-378.75.377c.963-.252 2.538-.252 3.5 0 .963.251.175.457-1.75.457s-2.712-.206-1.75-.457zM899.5 620.5c-.695-2.19.188-6 1.391-6 .417 0 .596-2.89.4-6.42-.23-4.107.055-6.676.787-7.128 1.435-.887 3.039 1.525 2.394 3.6-.265.854.181 2.43.992 3.5 1.91 2.527 1.926 4.448.036 4.448-1.042 0-1.5 1.048-1.5 3.429 0 1.885-.707 4.135-1.571 5-2.004 2.003-2.164 1.98-2.929-.429zM8 620.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm421 0c.825-.533 2.625-.945 4-.914 2.29.05 2.332.127.5.914-1.1.473-2.9.884-4 .914-1.65.046-1.738-.114-.5-.914zm11.5 0c-1.223-.525 4.22-.848 14-.83 9.47.017 14.98.356 13.5.83-3.367 1.078-24.99 1.078-27.5 0zm338-1c.34-.55 1.041-1 1.559-1s.941.45.941 1-.702 1-1.559 1-1.28-.45-.941-1zm59.9-.4c-.366-.954-.17-2.23.434-2.834.8-.8 1.282-.627 1.766.634.366.954.17 2.23-.434 2.834-.8.8-1.282.627-1.766-.634zm17.267.733c-1.218-1.218-.69-3.333.833-3.333.833 0 1.5.889 1.5 2 0 1.992-1.066 2.601-2.333 1.333zM332.5 618.5c-1.26-.542-1.445-.86-.5-.86.825 0 2.4.387 3.5.86 1.26.542 1.445.86.5.86-.825 0-2.4-.387-3.5-.86zm170.75-.69c.963-.25 2.538-.25 3.5 0 .963.252.175.458-1.75.458s-2.712-.206-1.75-.457zm314.969-6.6c.041-4.01-.44-8.256-1.072-9.435-1.638-3.06-1.454-8.943.3-9.616 1.034-.397 2.034 1.01 3.5 4.93 2.247 6.004 2.485 8.18 1.131 10.319-.53.837-.5 2.268.075 3.528 1.197 2.627-.472 7.564-2.557 7.564-1.144 0-1.437-1.547-1.377-7.29zm-509.927 5.492c-1.682-1.07 14.423-1.285 18.708-.251 2.649.639.946.865-7 .931-5.775.048-11.044-.258-11.708-.68zM510.5 616.5c1.1-.473 2.9-.86 4-.86h2l-2 .86c-1.1.473-2.9.86-4 .86h-2zm14.5-.045c-3.1-.504-1.915-.607 3.805-.333 7.464.358 8.738.144 12.588-2.112 2.355-1.38 5.369-2.51 6.696-2.51 1.328 0 7.949-1.125 14.714-2.5 10.342-2.102 15.08-2.5 29.78-2.5 13.106 0 18.36.367 20.994 1.468 3.057 1.277 4.254 1.284 9.218.052 7.381-1.83 24.919-3.844 26.891-3.087.84.322 5.103-.543 9.473-1.923 4.37-1.38 9.384-2.456 11.143-2.39 2.839.107 2.693.225-1.302 1.052-2.475.513-7.65 1.79-11.5 2.84-3.85 1.049-11.5 2.154-17 2.457-5.5.302-12.884 1.231-16.408 2.065-5.03 1.19-7.144 1.274-9.828.388-2.386-.787-8.455-.895-20.091-.356-9.17.425-18.602.706-20.96.624-2.357-.083-7.082.58-10.5 1.473-3.417.893-9.129 1.827-12.693 2.076-4.172.291-7.432 1.13-9.154 2.356-2.804 1.997-7.35 2.243-15.866.86zM297.5 614.5c-1.818-.781-1.773-.857.5-.83 1.375.016 3.625.39 5 .83 2.438.78 2.425.801-.5.83-1.65.016-3.9-.357-5-.83zm-260.745-2.208c-.896-2.36.427-7.647 2.35-9.387 1.042-.943 1.895-2.265 1.895-2.938 0-.672.718-1.818 1.596-2.546 1.193-.99 1.438-2.31.97-5.235-.692-4.328.562-6.686 3.556-6.686 1.926 0 2.246 1.1 1.894 6.5-.239 3.67-3.428 9.069-6.576 11.131-1.697 1.112-2.416 2.645-2.636 5.621-.298 4.017-2.081 6.087-3.049 3.54zm249.745.208c-2.676-.68-2.73-.763-.5-.763 1.375 0 3.85.343 5.5.763 2.676.68 2.73.763.5.763-1.375 0-3.85-.343-5.5-.763zM828 612c0-.917.484-1.505 1.075-1.308.591.197 1.075.786 1.075 1.308s-.484 1.111-1.075 1.308c-.591.197-1.075-.391-1.075-1.308zm-573.5-1.444l-6-.556 7-.743c10.605-1.125 17.525-.886 22.5.78 3.381 1.131 3.63 1.327 1 .79-4.299-.879-12.63-1.02-16-.271-1.375.305-5.2.305-8.5 0zm610.782-1.174c-.616-.616-.88-2.58-.59-4.373.594-3.656-.974-5.35-3.224-3.482-1.147.951-1.568.876-2.044-.365-.578-1.505 4-8.662 5.54-8.662 3.216 0 6.484 13.55 3.992 16.553-1.444 1.74-2.196 1.807-3.674.329zM242.5 608.5c-2.548-1.095.08-1.095 3.5 0 2.01.644 2.108.806.5.83-1.1.016-2.9-.357-4-.83zm-148.987-.98c-.333-.538-.135-1.858.44-2.934.576-1.075 1.047-3.061 1.047-4.413 0-2.034 1.599-3.673 3.582-3.673.23 0 .418 1.7.418 3.777 0 5.351-3.666 10.19-5.487 7.244zm765.495-.004c-1.177-.736-1.233-1.19-.266-2.157 1.456-1.457 2.571-.64 2.096 1.537-.24 1.105-.767 1.284-1.83.62zm19.659.318c-.834-.834-.882-13.61-.06-15.752 1.06-2.764 3.123-1.713 4.784 2.439 2.143 5.355 2.028 8.177-.464 11.345-2.12 2.696-3.086 3.142-4.26 1.968zM24 605.059c0-3.048 1.388-4.002 2.999-2.06 1.499 1.806.62 4.501-1.468 4.501-.957 0-1.531-.916-1.531-2.441zm34 .882c0-.857.45-1.28 1-.941.55.34 1 1.041 1 1.559s-.45.941-1 .941-1-.702-1-1.559zm176.5.095c-3.862-1.768-2.066-1.794 2.5-.036 1.925.741 2.825 1.362 2 1.379-.825.017-2.85-.587-4.5-1.343zm-170.921-2.409c-1.441-2.331 1.585-7.762 3.623-6.502 1.281.792.89 2.698-1.081 5.261-1.225 1.593-2.07 2.006-2.542 1.241zM228 603.5c-.825-.533-1.05-.97-.5-.97s1.675.437 2.5.97c.825.533 1.05.97.5.97s-1.675-.437-2.5-.97zm-10.813-2.683c-2.371-.839-4.11-1.728-3.862-1.975.247-.247 3.087.443 6.312 1.533 3.225 1.09 4.963 1.979 3.863 1.975-1.1-.004-3.94-.694-6.313-1.533zm-204.52-.744c-.302-.785.048-1.921.776-2.525.994-.826 1.477-.7 1.94.508.34.884.617 2.02.617 2.526 0 1.473-2.733 1.056-3.334-.509zm92.343-.061c-1.01-1.218-.896-1.595.627-2.073 1.025-.322 2.65-1.006 3.613-1.52 1.396-.747 1.75-.53 1.75 1.073 0 1.118-.665 2.008-1.5 2.008-.825 0-1.5.45-1.5 1 0 1.473-1.576 1.216-2.99-.488zM679 599.5c3.59-1.15 5.21-1.15 4.5 0-.34.55-2.054.955-3.809.9-3.047-.095-3.078-.135-.691-.9zm-655.99-2.488c-1.002-1.207-1.004-1.815-.01-3.012 1.681-2.026 2.666-1.887 3.28.463.712 2.723-1.618 4.54-3.27 2.55zm182.86-1.295c-6.965-4.087-18.86-12.608-18.865-13.515-.005-.844 8.106 4.362 11.495 7.378 1.1.978 4.674 3.386 7.941 5.35 3.268 1.963 5.518 3.555 5 3.537-.517-.018-3.025-1.256-5.571-2.75zM686.5 597.5c2.752-1.183 3.731-1.183 3 0-.34.55-1.604.968-2.809.93-2.112-.068-2.12-.101-.191-.93zm217.5-.393c0-.766.675-1.652 1.5-1.969 1.02-.391 1.5.054 1.5 1.393 0 1.084-.675 1.969-1.5 1.969s-1.5-.627-1.5-1.393zM33 595.5c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm668.5-.61c6.459-2.457 8.298-2.659 4.071-.446-2.16 1.13-4.86 2.036-6 2.012-1.311-.028-.604-.602 1.929-1.566zm-599.377-1.016c-2.772-1.942-2.68-3.503.377-6.374 1.375-1.292 2.507-3.283 2.515-4.424.008-1.142.433-2.736.943-3.542.742-1.174 1.138-.912 1.985 1.315 1.713 4.507 1.247 8.637-1.32 11.687-2.199 2.613-2.536 2.713-4.5 1.338zm613.377-1.37l-5-.748 6 .218c6.182.224 11.5-.973 11.5-2.588 0-.505 1.238-.896 2.75-.87 9.088.162 14.067-1.486 20.347-6.73 3.064-2.559 3.2-2.592 1.68-.4-2.112 3.043-9.077 7.011-14.258 8.123-2.21.474-5.819 1.383-8.019 2.02-5.558 1.608-9.189 1.844-15 .975zm-692.25-2.5c-1.571-1.784-1.62-5.157-.088-6.104 1.44-.89 4.838 3.122 4.838 5.71 0 2.241-2.911 2.482-4.75.394zm842.196-.591c-1.03-1.668 1.287-3.58 2.667-2.2 1.154 1.154.432 3.287-1.113 3.287-.485 0-1.184-.49-1.554-1.087zm-25.913-.86c-.88-1.423.242-3.053 2.1-3.053.875 0 1.377.703 1.19 1.667-.39 2.009-2.386 2.85-3.29 1.386zm65.736.131c-1.142-.722-1.414-4.529-1.364-19.034.015-4.348 1.764-7.937 3.14-6.442.4.435 1.03 5.742 1.4 11.792.51 8.363.358 11.415-.637 12.731-.777 1.03-1.807 1.416-2.539.953zm-841.716-2.099a1.117 1.117 0 01.362-1.532 1.117 1.117 0 011.532.362c.322.52.16 1.21-.362 1.532-.52.322-1.21.16-1.532-.362zm824.086.221c-.953-.953-.772-3.306.254-3.306 1.227 0 2.212 2.817 1.203 3.44-.45.278-1.105.218-1.457-.134zm-31.91-3.056c-.676-1.512-1.947-3.425-2.826-4.25-1.962-1.843-4.395-9.394-3.496-10.85 1.047-1.693 3.59-.144 3.625 2.207.04 2.716 4.608 7.995 6.342 7.33 2.87-1.102 3.924.847 2.534 4.69-1.597 4.419-4.418 4.817-6.18.873zm-817.037-3.611c-.84-2.188.357-5.639 1.956-5.639 1.896 0 2.909 2.894 1.69 4.826-1.366 2.166-2.988 2.528-3.646.813zm144.201-.136c-1.433-.78-3.356-2.561-4.273-3.96-.916-1.399-2.443-2.529-3.393-2.511-1.548.028-1.528.182.2 1.49 2.115 1.6 2.087 1.68-1.191 3.385-2.712 1.412-8.65.504-10.386-1.588-.945-1.138-.95-1.639-.025-2.21.846-.524.491-1.403-1.213-3.003-1.98-1.862-3.213-2.18-6.94-1.791-2.975.31-5.228-.016-6.56-.949-2.467-1.728-1.726-4.35 1.245-4.405 1.645-.03 1.343-.386-1.297-1.532-2.48-1.075-4.196-1.229-6.147-.548-2.2.767-3.376.489-6.282-1.486-3.044-2.068-3.49-2.846-3.011-5.243.486-2.434.118-3.03-2.725-4.406-2.908-1.409-3.413-1.42-4.38-.097-1.489 2.036-5.996.826-8.425-2.261-1.033-1.314-2.59-2.388-3.46-2.388-1.943 0-4.548-3.806-5.236-7.647-.596-3.33-3.012-7.353-4.417-7.353-1.347 0-1.228 2.349.19 3.767.89.89.8 1.309-.38 1.761-1.902.73-13.487-6.19-15.54-9.282-1.33-2.003-1.3-2.288.295-2.9 1.221-.47 2.325.07 3.562 1.737 4.02 5.42 4.949 6.118 6.463 4.861 2.305-1.913 1.684-3.435-2.317-5.675-5.291-2.961-10.837-3.828-13.923-2.176-2.4 1.284-2.717 1.11-7.01-3.874-2.474-2.87-4.976-5.219-5.561-5.219s-2.625-1.824-4.533-4.052c-2.994-3.499-3.862-3.967-6.346-3.421-2.788.612-2.877.51-2.877-3.293 0-4.312-1.476-6.104-6.75-8.19-2.338-.926-3.25-1.925-3.25-3.563 0-1.252-1.12-4.235-2.488-6.629-1.368-2.394-2.503-5.027-2.522-5.852-.019-.825-.914-2.625-1.99-4s-1.966-3.434-1.978-4.576c-.028-2.637-3.77-6.147-7.022-6.586-2.44-.33-2.492-.51-2.152-7.468.219-4.465-.062-7.384-.75-7.81-.604-.373-1.098-1.595-1.098-2.715 0-1.12-.849-3.23-1.886-4.69-1.284-1.809-2.082-5.206-2.502-10.655-1.466-19.007-1.543-19.355-4.374-19.692-3.353-.4-3.758-1.873-1.253-4.561 2.17-2.33 2.628-4.247 1.015-4.247-1.812 0-1.041-2.852.94-3.481 1.284-.407 2.045-1.7 2.25-3.817.24-2.488.834-3.276 2.66-3.535 1.897-.268 2.261-.805 1.885-2.774-.46-2.405 1.676-4.896 6.881-8.026 1.036-.623 1.659-1.306 1.384-1.518-.275-.212-2.843-2.515-5.707-5.117-4.151-3.772-5.926-4.732-8.75-4.732-3.527 0-3.543.02-3.543 4.453 0 2.45-.537 5.632-1.194 7.074-.926 2.032-.926 3.051 0 4.534 1.317 2.108 1.572 5.228.513 6.286-.374.375-1.949-.534-3.5-2.02-3.024-2.897-3.844-8.543-1.796-12.37.729-1.362.66-2.492-.24-3.934-1.697-2.716-3.225-2.547-5.727.632-1.596 2.03-1.938 3.457-1.45 6.056.495 2.643.178 3.89-1.424 5.595-1.134 1.207-2.51 3.32-3.059 4.695-.765 1.918-1.011 2.068-1.06.643-.034-1.02 1.062-3.192 2.437-4.826 2.014-2.394 2.39-3.684 1.939-6.644-.517-3.39-.11-4.176 5.277-10.174 3.21-3.575 6.379-7.737 7.04-9.25.66-1.512 1.66-2.75 2.223-2.75.561 0 .909-.346.771-.77-.377-1.158 3.388-5.508 6.5-7.508 1.512-.972 2.75-2.55 2.75-3.505 0-.955.89-2.291 1.977-2.97 1.087-.68 2.872-2.925 3.968-4.99 1.809-3.411 5.474-7.076 20.555-20.548 5.673-5.068 15.692-11.733 20.659-13.743 1.838-.744 3.566-1.615 3.841-1.935.275-.32 4.555-3.977 9.51-8.125 9.84-8.235 16.345-12.345 20.99-13.261 3.357-.662 3.545-.773-6 3.541-3.792 1.714-5.486 2.967-13.322 9.852-3.404 2.99-3.49 4.962-.217 4.962 1.168 0 2.245 1.153 2.941 3.15 1.667 4.78 1.33 7.45-1.152 9.12l-2.25 1.512 2.25 2.424c1.488 1.602 2.25 3.671 2.25 6.108 0 3.394.228 3.686 2.878 3.686 1.582 0 3.437-.675 4.122-1.5s2.202-1.506 3.372-1.514c4.555-.029 6.41-1.147 7.028-4.234.337-1.69.801-2.884 1.03-2.655.23.23.098 1.989-.291 3.91-.58 2.859-1.597 3.976-5.606 6.153-3.19 1.733-5.444 3.824-6.465 6-1.632 3.476-9.514 8.428-15.568 9.78-2.414.539-2.993 1.182-2.966 3.294.028 2.14-.527 2.732-3 3.205-2.156.412-5.493 3.217-11.534 9.698-4.675 5.016-8.823 9.962-9.218 10.991-.807 2.106-2.764 2.538-2.815.622-.019-.688-.919-.188-2 1.11-1.28 1.537-1.967 3.853-1.967 6.628 0 5.1-1.759 6.943-5.78 6.06-2.396-.526-3.3-.101-5.542 2.605-1.473 1.778-2.678 4.255-2.678 5.505s-.9 2.753-2 3.342-2 1.63-2 2.312c0 1.852-5.651 7.688-7.444 7.688-2.19 0-1.935-1.727.444-3 2.654-1.42 2.88-7.316.261-6.812-.956.184-1.879 1.23-2.051 2.323-.172 1.094-.702 2.889-1.178 3.989s-1.077 2.9-1.335 4c-.259 1.1-.794 2.788-1.19 3.75-.544 1.32-.234 1.75 1.264 1.75 3.053 0 4.61 2.418 3.225 5.007-.83 1.552-.85 2.975-.07 5.213.591 1.693 1.084 6.499 1.096 10.68.018 6 .434 8.126 1.978 10.1 1.076 1.375 1.966 3.201 1.978 4.059.012.857.683 2.432 1.491 3.5 1.104 1.457 1.318 3.498.862 8.191-.56 5.756-.452 6.25 1.362 6.25 1.083 0 4.295 2.085 7.138 4.633 4.667 4.183 5.169 5.04 5.169 8.825 0 4.353 1.838 6.919 6.785 9.471 1.927.994 2.186 1.706 1.655 4.54-.537 2.863-.253 3.608 1.926 5.035 1.406.921 2.85 2.604 3.211 3.739.742 2.338 5.052 6.711 14.652 14.867 5.515 4.686 7.44 5.721 11.683 6.284 7.865 1.043 12.856 3.685 23.196 12.28 9.282 7.715 33.063 24.334 39.675 27.727 1.806.926 6.306 2.615 10 3.752 11.314 3.484 18.853 7.423 24.416 12.76 5.628 5.398 5.837 5.842 1.694 3.59zm-26.164-14.107c-.332-.332-1.195-.368-1.917-.08-.797.32-.56.557.605.605 1.054.043 1.644-.193 1.312-.525zM140.362 558c-.317-.825-1.315-1.486-2.219-1.468-1.395.027-1.35.254.298 1.5 2.426 1.835 2.636 1.831 1.92-.032zm-19.766-13.394c-1.734-1.916-5.61-3.487-5.58-2.262.034 1.472 1.681 3.11 4.012 3.99 3.204 1.21 3.716.645 1.568-1.728zM30 392.5c0-.55-.423-1-.941-1s-1.22.45-1.559 1c-.34.55.084 1 .941 1s1.559-.45 1.559-1zm-.412-5.745c-1.092-1.092-1.841.645-1.057 2.452.744 1.713.798 1.712 1.212-.035.239-1.006.169-2.093-.155-2.417zm6.062-21.785c.339-.883-.308-2.306-1.532-3.367C32.68 360.355 32 358.589 32 356.1c0-4.393-1.948-5.52-5.508-3.188-3.742 2.452-3.282 6.177 1.258 10.19 4.068 3.594 6.973 4.281 7.9 1.867zM57 359.924c0-.8-.62-1.124-1.5-.786-.825.317-1.5 1.189-1.5 1.938 0 .8.62 1.124 1.5.786.825-.317 1.5-1.189 1.5-1.938zm-9.173-1.238c.206-1.45-.904-3.836-3.02-6.49-3.243-4.068-4.934-7.08-6.27-11.168-.54-1.65-.797-1.731-1.575-.5C35.278 343.19 35.86 349.064 38 351c1.1.995 2 2.433 2 3.195 0 2.28 4.307 7.392 5.962 7.077.846-.16 1.685-1.324 1.865-2.586zM33.693 340.77c-.254-.973-.478-.419-.498 1.231-.02 1.65.187 2.446.46 1.769.275-.677.292-2.027.038-3zM40 332.424c0-.473-.675-.602-1.5-.286-.825.317-1.5.964-1.5 1.438 0 .473.675.602 1.5.286.825-.317 1.5-.964 1.5-1.438zm53.02-1.448c.696-.838.954-1.835.575-2.215-.835-.834-3.82.916-4.369 2.56-.57 1.71 2.306 1.448 3.794-.345zM847 580.5c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm32.667.333c-1.258-1.258-.667-4.333.833-4.333.933 0 1.5.944 1.5 2.5 0 2.428-.974 3.193-2.333 1.833zM762 577.052c6.205-2.226 23.115-10.613 25.75-12.772.86-.705 1.25-.69 1.25.049 0 1.529-28.022 15.183-31.014 15.112-1.596-.037-.159-.893 4.014-2.39zm123.01-4.04c-2.14-2.578-.443-4.512 3.959-4.512 3.07 0 4.031.391 4.031 1.64 0 3.563-5.712 5.617-7.99 2.873zM20 570.942c0-.857.45-1.28 1-.941.55.34 1 1.041 1 1.559s-.45.941-1 .941-1-.702-1-1.559zm16.032-.191c.017-.963.678-2.604 1.468-3.647 1.682-2.222 1.125-3.603-1.452-3.603-3.501 0-3.147-2.812.506-4.018 3.769-1.244 4.335-2.95 1.813-5.472-1.326-1.326-1.42-2.1-.5-4.118.623-1.367 1.133-3.31 1.133-4.317 0-1.006.644-2.364 1.43-3.017 2.238-1.857 3.267 1.234 3.778 11.347.448 8.873-.45 13.771-3.112 16.979-1.81 2.181-5.105 2.094-5.064-.134zM860 566.559c0-2.168.45-4.22 1-4.559 1.643-1.015 1.16-1.974-1.904-3.784-3.844-2.271-4.566-2.176-5.914.784-1.238 2.717-4.63 3.382-5.513 1.08-.806-2.1 4.436-8.5 6.998-8.544 1.191-.02 2.346.504 2.567 1.165.22.66 1.72 1.224 3.333 1.251 2.701.047 2.933.34 2.933 3.714 0 2.015.338 4.002.75 4.416 2.1 2.103.331 8.418-2.357 8.418-1.537 0-1.893-.74-1.893-3.941zm-802.595-.446c-.852-2.221.218-4.613 2.064-4.613 1.96 0 1.989 3.375.043 4.99-1.205 1-1.606.929-2.107-.377zm-32.72-1.261c-.357-.357-.432-1.707-.167-3 .265-1.294.716-3.477 1.001-4.852.658-3.17 2.084-3.218 2.867-.098 1.265 5.038-1.238 10.413-3.701 7.95zM-5 562.5c0-1.506.522-2.046 1.75-1.81.963.186 1.75 1 1.75 1.81s-.787 1.624-1.75 1.81c-1.228.236-1.75-.304-1.75-1.81zm794-.953c0-.503 1.238-1.057 2.75-1.23 1.964-.227 2.84-.957 3.068-2.555.175-1.23 2.987-4.907 6.25-8.17s5.932-6.38 5.932-6.929c0-.548 2.984-2.45 6.63-4.227 4.507-2.195 7.15-4.197 8.25-6.248 2.786-5.193 8.005-10.414 12.54-12.546 5.02-2.36 8.58-6.388 8.58-9.71 0-1.765.64-2.373 2.75-2.616 1.986-.228 2.84-.953 3.075-2.607.179-1.26 1.641-4.793 3.25-7.851 1.609-3.059 2.925-6.202 2.925-6.984 0-.783 1.116-1.848 2.48-2.366 1.485-.565 3.314-2.718 4.56-5.37 1.145-2.435 3.626-5.833 5.515-7.552 3.61-3.285 6.445-8.806 6.445-12.553 0-1.223.9-3.038 2-4.033 1.1-.995 2-2.835 2-4.088 0-1.372.768-2.52 1.932-2.89 2.47-.785 6.59-7.876 7.507-12.922.418-2.303 1.92-5.113 3.667-6.86 2.218-2.218 2.784-3.495 2.26-5.1-1.42-4.343-.323-11.022 2.259-13.744l2.47-2.604-2.548-1.67c-1.906-1.248-2.547-2.527-2.547-5.08 0-1.876-.422-4.522-.938-5.878-.742-1.953-.534-2.832 1-4.22 2.567-2.323 2.45-4.099-.313-4.792-1.578-.396-3.58-3.102-6.687-9.033-4.442-8.483-7.707-11.574-9.902-9.379-.78.78-1.385.297-2.153-1.721-.587-1.544-2.473-4.583-4.192-6.753-2.352-2.969-3.18-5.1-3.343-8.606-.119-2.563-.02-3.423.22-1.91.239 1.512.794 2.75 1.234 2.75.887 0 7.074 12.106 7.074 13.841 0 .603.597.867 1.328.587 2.806-1.077 6.453 1.49 8.876 6.25 4.332 8.507 6.894 12.218 8.869 12.845 2.296.729 2.593 4.679.483 6.43-1.072.89-1.294 2.53-.862 6.373.747 6.656 1.695 7.91 4.882 6.457 1.333-.607 2.424-1.513 2.424-2.013s1.012-.765 2.25-.59c3.628.516 2.626 2.743-3.25 7.224-4.99 3.805-5.529 4.594-5.813 8.507-.25 3.443.104 4.604 1.754 5.76 2.484 1.74 1.57 4.183-2.353 6.282-1.626.87-3.268 3.237-4.481 6.46-2.984 7.928-6.219 13.383-8.25 13.914-1.169.306-1.857 1.39-1.857 2.924 0 1.342-.9 3.254-2 4.249-1.1.995-2 3.064-2 4.596s-.45 3.064-1 3.404c-.55.34-1 1.454-1 2.475 0 1.02-1.844 3.582-4.098 5.69-2.254 2.11-5.07 5.86-6.256 8.335-1.186 2.475-3.167 4.944-4.402 5.487-1.234.543-2.244 1.78-2.244 2.75s-.45 1.763-1 1.763-1 .455-1 1.01c0 .557-.869 2.92-1.93 5.25-1.063 2.332-2.078 5.12-2.256 6.196-.183 1.102-1.39 2.208-2.764 2.532-1.676.396-2.694 1.558-3.252 3.711-.897 3.463-5.968 8.301-8.7 8.301-1.692 0-6.098 3.873-6.098 5.36 0 .402-1.012 1.84-2.25 3.197a219.042 219.042 0 00-4.75 5.437c-1.375 1.634-3.288 2.979-4.25 2.988-.963.01-1.75.392-1.75.849 0 .457-1.233 1.47-2.74 2.25-4.531 2.348-16.26 14.996-16.26 17.536 0 1.246-.515 2.583-1.144 2.972-1.822 1.126-6.856 1.462-6.856.458zm-773.546-2.121c-.786-1.273 3.312-5.926 5.22-5.926 1.687 0 1.665.445-.2 4.05-1.546 2.99-3.809 3.835-5.02 1.876zm43.455-1.536c-1.698-2.045.773-10.598 2.94-10.18 1.586.305 3.608 7.156 2.763 9.359-.703 1.83-4.421 2.366-5.703.821zM869 554c0-.825.675-1.5 1.5-1.5s1.5.675 1.5 1.5-.675 1.5-1.5 1.5-1.5-.675-1.5-1.5zm-857.429-4.385c-.338-.547.293-2.484 1.403-4.305l2.019-3.31.003 3.25c.002 1.788.028 3.587.057 4 .082 1.174-2.795 1.476-3.482.365zm18.276-1.551c-1.172-2.574-.588-5.564 1.086-5.564 1.59 0 3.236 3.892 2.555 6.038-.844 2.658-2.3 2.469-3.64-.474zm877.778.638c-.79-1.279 1.043-3.525 2.263-2.771 1.606.992 1.368 3.569-.329 3.569-.793 0-1.663-.359-1.934-.798zM913 545c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm-437-1.393c0-.491.698-1.161 1.552-1.489.853-.327 1.298-.184.988.318-.31.502.229 1.12 1.198 1.372 1.099.287.727.504-.988.576-1.512.064-2.75-.286-2.75-.777zm16.75-.83c1.788-.222 4.713-.222 6.5 0 1.788.221.325.403-3.25.403s-5.037-.182-3.25-.403zm-90.481-2.97c.973-.254 2.323-.237 3 .037.677.274-.119.481-1.769.461-1.65-.02-2.204-.244-1.231-.498zm13 0c.973-.254 2.323-.237 3 .037.677.274-.119.481-1.769.461-1.65-.02-2.204-.244-1.231-.498zm6.315-.948c-.527-1.373-.38-1.435.893-.378 1.735 1.44 1.916 2.019.63 2.019-.491 0-1.176-.739-1.523-1.641zm-397.834-.44c-2.267-1.32-2.229-3.466.091-5.112 1.352-.96 1.84-2.578 1.834-6.09-.01-5.246 1.273-7.335 3.887-6.332 1.346.517 1.584 1.49 1.152 4.71-.3 2.234-1.226 4.813-2.059 5.733-1.112 1.229-1.245 2.154-.5 3.483 2.043 3.652-.606 5.822-4.405 3.609zm888.63-.371c-.712-1.856.327-3.548 2.179-3.548.87 0 1.441.99 1.441 2.5 0 2.748-2.671 3.52-3.62 1.048zM13.5 537.5c-.34-.55-1.75-1-3.132-1-1.866 0-2.421-.451-2.153-1.75.228-1.105 1.085-1.628 2.323-1.419 1.08.183 3.424.57 5.212.86 3.498.568 3.932 1.227 2.05 3.109-1.46 1.46-3.463 1.554-4.3.2zm893.5 0c0-.55.477-1 1.059-1s.78.45.441 1c-.34.55-.816 1-1.059 1s-.441-.45-.441-1zm-13.527-1.044c-.798-1.291 1.422-4.139 2.64-3.386.488.301.887 1.421.887 2.489 0 2.05-2.432 2.668-3.527.897zM38 534.06c0-1.343.399-2.688.887-2.989 1.36-.841 3.227 1.97 2.523 3.803-.972 2.533-3.41 1.95-3.41-.814zm810.538 1.093c-2.427-1.775-1.392-3.213 4.12-5.724 7.5-3.417 10.049-.588 3.895 4.322-3.873 3.09-5.351 3.35-8.015 1.402zm-433.03-.64c-.351-.567.05-.735.94-.394 1.732.665 2.05 1.382.611 1.382-.518 0-1.216-.445-1.552-.989zm24 0c-.351-.567.05-.735.94-.394 1.732.665 2.05 1.382.611 1.382-.518 0-1.216-.445-1.552-.989zm436.035-.943c-.317-.512-.118-1.213.44-1.559 1.194-.737 3.017.199 3.017 1.549 0 1.217-2.707 1.225-3.457.01zM3 529.622c0-1.347 2.22-2.888 5.256-3.65 3.444-.864 3.598.739.28 2.913-2.681 1.756-5.536 2.136-5.536.737zm427.872-.872c-1.27-1.619-1.222-1.64.628-.283 1.1.807 2.188 1.594 2.417 1.75.229.156-.054.283-.628.283s-1.662-.787-2.417-1.75zM912.5 527.5c.34-.55 1.068-1 1.618-1s.722.45.382 1c-.34.55-1.068 1-1.618 1s-.722-.45-.382-1zm5.5 0c0-.55.45-1 1-1s1 .45 1 1-.45 1-1 1-1-.45-1-1zm-540-2.09c-2.154-1.761-2.196-1.896-.306-.972 1.207.59 2.471 1.52 2.81 2.067.902 1.46.296 1.196-2.504-1.094zm528.579.923c-.232-.733-.345-3.352-.25-5.82.13-3.4.596-4.568 1.927-4.824 1.533-.295 1.724.391 1.499 5.404-.157 3.5-.745 5.904-1.506 6.157-.686.23-1.438-.184-1.67-.917zM-5 525.441c0-.582.45-.78 1-.441.55.34 1 .816 1 1.059s-.45.441-1 .441-1-.477-1-1.059zm890.192-.016c.197-.591.786-1.075 1.308-1.075s1.111.484 1.308 1.075c.197.591-.391 1.075-1.308 1.075s-1.505-.484-1.308-1.075zM15.35 523.97c-.748-1.949.44-3.47 2.709-3.47 1.234 0 1.941.686 1.941 1.883 0 2.274-3.878 3.597-4.65 1.587zm900.22-.97c.405-1.65 1.566-4.073 2.582-5.385 1.017-1.312 1.85-2.887 1.854-3.5.003-.613.61-2.27 1.346-3.682.736-1.411 1.617-3.674 1.957-5.027.34-1.354 1.97-3.758 3.625-5.342 2.71-2.598 3.075-2.705 3.696-1.087.378.987.193 2.521-.413 3.409-.605.888-3.161 5.223-5.68 9.634-2.518 4.412-5.731 9.362-7.14 11l-2.56 2.98zm-475.698-3.25c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM24 516.273c0-1.537 1.937-3.773 3.27-3.773.478 0 .725 1.008.55 2.24-.345 2.418-3.82 3.813-3.82 1.533zm386.86-.832l-2.36-2.06 2.75 1.675c1.512.92 2.75 1.847 2.75 2.059 0 .78-.835.335-3.14-1.674zm-376.77-2.113c-.908-2.606-1.431-2.96-3.577-2.42-1.825.457-2.513.23-2.513-.83 0-.803.457-1.743 1.016-2.088 1.52-.94.155-2.493-1.6-1.82-1.28.492-1.418-.181-.876-4.293.577-4.383.38-5.122-1.95-7.301-1.424-1.334-2.59-2.838-2.59-3.343 0-.504-.852-2-1.893-3.324-1.516-1.927-2.008-2.108-2.469-.908-.678 1.767-3.22 1.985-4.223.362-.39-.632.311-1.902 1.58-2.859l2.281-1.72-2.685-5.865c-1.476-3.226-3.355-6.606-4.174-7.511C7.735 466.444 2 454.297 2 451.58c0-2.676-3.104-12.517-4.336-13.75-.365-.365-.655-1.6-.644-2.747.01-1.146 1.81 2.071 4 7.148C3.209 447.308 5 452.338 5 453.41c0 1.07 1.641 5.016 3.648 8.768C10.654 465.93 13.6 471.7 15.196 475c1.595 3.3 3.578 7.125 4.407 8.5.828 1.375 2.117 3.85 2.864 5.5.747 1.65 2.523 4.09 3.946 5.424 1.423 1.334 2.587 3.445 2.587 4.691 0 1.247.424 2.529.941 2.849.518.32 1.944 2.59 3.17 5.043 2.173 4.353 2.322 4.447 6.059 3.85 2.271-.363 3.83-.21 3.83.377 0 .544-1.125.774-2.5.51-1.996-.38-2.5-.072-2.5 1.532 0 3.412-2.727 3.447-3.91.052zm-45.686.782c-.87-2.268.665-3.803 2.604-2.605 1.302.805 1.274 1.14-.221 2.636-1.618 1.619-1.75 1.617-2.383-.03zm439.155-2.142c-1.068-.807-1.46-1.468-.873-1.468.588 0 1.63.675 2.314 1.5 1.557 1.876 1.067 1.866-1.441-.032zm142.174.408c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm4.708-2.32c1.068-.856 2.38-1.556 2.917-1.556 1.27 0 .703.462-2.358 1.92-2.357 1.122-2.39 1.102-.559-.365zm5.292-2.68c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm-28-1c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm-156.86-1.626c-1.244-1.586-1.21-1.621.377-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm512.88.494c-.595-1.617.16-3.744 1.33-3.744 1.181 0 1.199 3.708.022 4.435-.493.305-1.101-.007-1.353-.69zM587.653 503.5c.635-.825 1.361-2.625 1.614-4l.46-2.5.136 2.628c.075 1.448-.65 3.243-1.614 4-1.523 1.194-1.6 1.177-.596-.128zm-179.782-4.75c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM9.5 498.5c-.34-.55.084-1 .941-1s1.559.45 1.559 1-.423 1-.941 1-1.22-.45-1.559-1zm889.5.122c0-.482.694-1.453 1.542-2.157 1.76-1.46 4.159.092 3.012 1.948-.8 1.295-4.554 1.468-4.554.21zm-565.559-2.677c-1.864-1.494-1.852-1.512.309-.465 1.238.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zm16.118-4.977c-1.068-.807-1.46-1.468-.873-1.468.588 0 1.63.675 2.314 1.5 1.557 1.876 1.067 1.866-1.441-.032zm18.313-4.218c-1.243-1.586-1.208-1.621.378-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm516.816 1.104c-1.415-1.415-.636-5.906 1.227-7.069 1.546-.965 2.162-.897 3.201.355 1.055 1.27 1.025 2.016-.164 4.125-1.547 2.743-3.142 3.712-4.264 2.59zm3.158-4.384c.302-2.073.144-2.206-1.25-1.05-1.887 1.566-2.145 4.428-.346 3.835.688-.226 1.406-1.48 1.596-2.785zm18.563 1.654c-.36-.94-.368-1.998-.016-2.35.352-.353 1.173-.108 1.824.543.902.902.905 1.46.016 2.35-.89.89-1.324.76-1.824-.543zM2.543 484.57c-.683-1.105.894-2.299 1.818-1.375.95.95.773 2.306-.302 2.306-.518 0-1.2-.419-1.516-.93zm-15.733-.593c-.288-.287-.308-1.649-.045-3.025.444-2.326.572-2.377 1.825-.726 1.737 2.29 1.773 4.275.077 4.275-.734 0-1.57-.236-1.857-.523zm330.422-2.476c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm272.963-1.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM358 480.5c-.901-.582-1.025-.975-.309-.985.655-.008 1.47.435 1.809.985.767 1.242.421 1.242-1.5 0zm542.752-1.25c1.155-1.238 2.399-3.455 2.764-4.928.366-1.472 1.299-2.92 2.074-3.218 2.132-.818 1.717-3.235-1.59-9.26-3.169-5.775-3.834-9.344-1.74-9.344 1.408 0 6.334 4.281 6.908 6.004 1.04 3.117 8.406-5.419 10.36-12.004.408-1.375 1.218-2.805 1.8-3.178.734-.47.689-1.49-.148-3.326-1.034-2.269-.918-3.013.807-5.207 1.107-1.407 2.013-3.533 2.013-4.724 0-1.19.439-2.604.975-3.14 1.241-1.241-.621-7.86-3.32-11.799-1.76-2.57-1.83-3.254-.661-6.485.718-1.987 1.211-6.542 1.095-10.122-.2-6.199-.398-6.679-4.15-10.074-2.937-2.658-3.939-4.337-3.939-6.6 0-1.772-.838-3.794-2.015-4.858-1.108-1.003-3.245-3.772-4.75-6.153-1.504-2.382-3.27-4.331-3.926-4.332-3.116-.005-1.542-5.36 2.575-8.762 1.316-1.087 1.083-1.426-1.695-2.475-2.404-.907-3.467-2.108-4.199-4.74-1.238-4.459-1.237-5.295.01-4.525.55.34 1 1.71 1 3.046 0 1.746 1.125 3.139 4 4.954 2.478 1.564 4 3.281 4 4.513 0 1.093-.45 1.987-1 1.987-1.583 0-1.162 6.784.636 10.263.9 1.74 2.7 4 4 5.022 1.496 1.177 2.364 2.905 2.364 4.706 0 3.774.926 6.009 2.489 6.009.7 0 2.489 1.592 3.973 3.539 2.47 3.237 2.658 4.112 2.212 10.25-.269 3.691-.802 8.15-1.187 9.908-.52 2.38-.198 3.914 1.26 6 3.732 5.345 3.594 14.82-.273 18.687-1.665 1.665-1.999 5.616-.474 5.616 1.519 0 1.195 2.594-.5 4-.825.685-1.502 2.202-1.505 3.372-.005 2.278-6.357 11.24-9.227 13.02-1.42.881-2.27.446-4.71-2.408-3.933-4.604-3.944-2.214-.027 6.423 3.01 6.641 3.166 8.99.527 7.977-.8-.307-1.642.305-2.009 1.461-.866 2.728-4.452 7.155-5.796 7.155-.606 0-.157-1.012.999-2.25zm-338.94-.433c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.605-.604zm15.346-1.317c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-22.889.307c.973-.254 2.323-.237 3 .037.677.274-.119.481-1.769.461-1.65-.02-2.204-.244-1.231-.498zm328.125-.723c-.299-.778-.397-2.69-.219-4.25.458-3.994 4.19-4.013 4.647-.024.486 4.234-3.111 7.705-4.428 4.274zM331.195 474c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm260.037-1.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-39.153.417c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm26.153-3.417c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-259.98-4.5c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm235.02-3.5c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm11.923.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-232.943-7c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm233.943 1c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-246.963-1.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm273.054-2.5c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zm338.337-.04c-.343-.893-.623-2.745-.623-4.115 0-1.835.461-2.403 1.75-2.155 1.258.243 1.75 1.294 1.75 3.74 0 3.623-1.837 5.24-2.877 2.53zm-351.465-5.46c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-24.963-3.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm39 0c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm301.386.938c-1.971-1.971-2.014-3.834-.125-5.402 2.04-1.692 3.544-.434 3.544 2.964 0 3.565-1.338 4.52-3.42 2.438zM897 440.94c0-.857-.457-1.276-1.016-.93-.56.345-.758 1.046-.441 1.558.857 1.387 1.457 1.129 1.457-.628zM320.272 438.5c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm259.923 1.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-24.943-6c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zM-13 434.559c0-.518.45-1.22 1-1.559.55-.34 1 .084 1 .941s-.45 1.559-1 1.559-1-.423-1-.941zm580.232-2.059c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zM931 432c0-.825.45-1.5 1-1.5s1 .675 1 1.5-.45 1.5-1 1.5-1-.675-1-1.5zm-935.333-.167c-.932-.932-.835-5.111.133-5.71.44-.271.8 1.052.8 2.942 0 3.772.018 3.72-.933 2.768zM594.3 424.5c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zM334.195 426c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-13-2c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm13.963-3.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zM-6.25 418.928c-2.618-1.42-2.75-1.847-2.75-8.9 0-4.076.4-7.657.887-7.958.498-.308.709 2.53.48 6.47-.38 6.57-.236 7.177 2.26 9.49 3.06 2.837 2.935 2.966-.877.898zm5.786-4.678c.926-4.331 2.208-5.75 5.195-5.75 2.212 0 2.41.303 1.8 2.75-.895 3.586-3.353 6.25-5.765 6.25-1.648 0-1.825-.468-1.23-3.25zm5.202-3.346C3.466 409.633 1 411.471 1 413.691v2.253l2.194-2.194c1.207-1.207 1.902-2.488 1.544-2.846zm317.494 2.596c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm272.963-1.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-12.943-2c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm-25.02-5.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm12-2c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm27.054-3.5c.008-2.75.202-3.756.432-2.236.23 1.52.223 3.77-.014 5-.237 1.23-.425-.014-.418-2.764zM-7 398.81c0-.55.9-1.815 2-2.81 1.1-.995 2-1.36 2-.81s-.9 1.815-2 2.81c-1.1.995-2 1.36-2 .81zM323.195 396c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm12.963-1.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm234-1c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm13.094-4.5c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm-259.02-1.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm12.847.417c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM558.252 386c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm39-3c.011-2.2.216-2.982.455-1.738.24 1.244.23 3.044-.02 4s-.446-.062-.435-2.262zm-37.98-6.5c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zm11.878-.19c-.142-3.494-.348-3.71-3.9-4.082l-3.75-.392 3.781-.168c4.199-.187 5.124.958 4.443 5.498-.363 2.422-.446 2.298-.574-.856zm27.122-5.81c0-2.475.195-3.487.434-2.25.238 1.238.238 3.263 0 4.5-.239 1.238-.434.225-.434-2.25zM325.195 367c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm13.037-1.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm246.963-.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-259.116-5.083c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM339.195 357c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm243.677-3.25c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM603 355.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm269.667-.274c-1.615-1.615-.498-3.333 2.166-3.333 3.483 0 4.502.892 3.036 2.658-1.178 1.419-4.082 1.796-5.202.675zm-265.584-1.698c.23-.2 1.542-.9 2.917-1.555 2.357-1.122 2.39-1.102.559.365-1.593 1.276-4.848 2.391-3.476 1.19zm258.033-10.733c-1.303-3.738-1.337-7.586-.09-10.402.601-1.358.699-.639.304 2.239-.342 2.49-.062 5.494.679 7.282.693 1.674 1.027 3.277.741 3.562-.285.286-1.02-.921-1.634-2.681zm-298.675.543c-1.864-1.494-1.852-1.512.309-.465 1.238.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zM897 343.5c-.901-.582-1.025-.975-.309-.985.655-.008 1.47.435 1.809.985.767 1.242.421 1.242-1.5 0zm-6-2c-.825-.533-1.05-.97-.5-.97s1.675.437 2.5.97c.825.533 1.05.97.5.97s-1.675-.437-2.5-.97zm-331.14-3.06l-2.36-2.059 2.75 1.675c1.512.92 2.75 1.847 2.75 2.059 0 .78-.835.335-3.14-1.674zm42.14 1.667c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm284-2.607c-1.175-1.65-1.753-3-1.284-3 .47 0 1.65 1.35 2.625 3 .975 1.65 1.552 3 1.284 3-.269 0-1.45-1.35-2.625-3zm-280 .607c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-316-5.696c-2.154-1.762-2.196-1.897-.306-.973 1.207.59 2.471 1.52 2.81 2.067.902 1.46.296 1.196-2.504-1.094zm591.507.1c-.35-.566.051-.734.941-.393 1.732.665 2.05 1.382.611 1.382-.518 0-1.216-.445-1.552-.989zm-9.336-6.193c-2.277-2.3-3.955-4.367-3.729-4.594.227-.226 2.393 1.656 4.814 4.182 2.42 2.527 4.098 4.594 3.728 4.594-.37 0-2.536-1.882-4.813-4.182zm-6.976.682c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM363 328.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm270-3c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-357.128-2.357c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zm-7.43-4.805c-1.865-1.494-1.853-1.512.308-.465 1.238.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zm24 0c-1.865-1.494-1.853-1.512.308-.465 1.238.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zm259.419-.504l-2.361-2.06 2.75 1.675c1.512.92 2.75 1.847 2.75 2.059 0 .78-.835.335-3.14-1.674zm286.277-1.435c-.695-1.922-.984-3.947-.642-4.5 1.018-1.647 5.504-1.204 5.504.544 0 1.42-2.69 7.45-3.325 7.45-.15 0-.842-1.572-1.537-3.494zM650 317.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm7.733-3.731c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm-139.174-2.408c-1.068-.807-1.46-1.468-.873-1.468.588 0 1.63.675 2.314 1.5 1.557 1.876 1.067 1.866-1.441-.032zm-182.698-1.527l-2.361-2.06 2.75 1.675c1.512.92 2.75 1.847 2.75 2.059 0 .78-.835.335-3.14-1.674zm204.58.504c-1.864-1.494-1.852-1.512.309-.465 1.237.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zM254 308.41c-2.154-1.762-2.196-1.897-.306-.973 1.207.59 2.471 1.52 2.81 2.067.902 1.46.296 1.196-2.504-1.094zm-140.921-.494c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zM331 306.5c-.901-.582-1.025-.975-.309-.985.655-.008 1.47.435 1.809.985.767 1.242.421 1.242-1.5 0zM114.146 303c-.095-1.65-.405-4.125-.688-5.5l-.514-2.5 1.075 2.465c.592 1.356.901 3.83.688 5.5L114.32 306zm393.726.75c-1.243-1.586-1.208-1.621.378-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zM706 305.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm-461.313-3.412c-3.326-3.471-3.341-4.47-.133-8.677 2.32-3.042 2.84-3.266 5.682-2.45 3.459.992 6.37 3.165 3.092 2.307-1.462-.382-2.693.544-4.835 3.636-2.42 3.49-2.685 4.452-1.676 6.068 1.668 2.67 1.016 2.4-2.13-.884zm81.185 1.055c-1.243-1.586-1.208-1.621.378-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm87.861.626c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM387 302.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm30.733-.731c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm82.459-3.369c-2.833-2.712-4.287-4.793-3.669-5.25.563-.416 1.81-1.995 2.773-3.507 1.962-3.084 5.214-3.588 8.263-1.282 1.909 1.444 1.907 1.469-.12 1.5-2.177.034-6.439 4.937-6.439 7.408 0 .801 1.238 2.38 2.75 3.509 1.512 1.128 2.386 2.066 1.942 2.083-.445.018-2.92-1.99-5.5-4.46zm27.315 3.504c-.35-.566.051-.734.941-.393 1.732.665 2.05 1.382.611 1.382-.518 0-1.216-.445-1.552-.989zm-206.066-1.566c-1.864-1.494-1.852-1.512.309-.465 1.238.6 2.25 1.3 2.25 1.555 0 .765-.519.544-2.559-1.09zm75.292-2.57c.679-.683 1.486-.99 1.793-.682.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zm-107.872-2.934l-2.361-2.06 2.75 1.675c1.512.92 2.75 1.847 2.75 2.059 0 .78-.835.335-3.14-1.674zm20.881-1.855c-4.11-2.635-4.679-3.562-1.055-1.72 1.752.89 3.466 2.073 3.809 2.627.801 1.297.562 1.218-2.754-.907zM404 294.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm30.008-1.248c1.631-2.612-2.21-9.345-5.357-9.39-1.687-.023-1.827-.21-.651-.864.825-.46 2.728-1.127 4.229-1.484 2.395-.57 3.041-.153 5.286 3.402 2.838 4.496 2.747 4.942-1.637 8.064-2.734 1.947-2.934 1.976-1.87.272zm295.943-3.635c.487-4.12.508-4.14.847-.847.191 1.858-.033 3.758-.5 4.224-.465.466-.621-1.054-.347-3.377zM410 291.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zm5.733-2.731c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM113.086 285.5c-.03-.825.38-2.175.914-3 1.181-1.828 1.181-.25 0 2.5-.567 1.319-.878 1.49-.914.5zm600.914.622c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm-290.267-1.746c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM115 279.789c0-.574.787-1.662 1.75-2.417 1.619-1.27 1.64-1.222.283.628-.807 1.1-1.594 2.188-1.75 2.417-.156.229-.283-.054-.283-.628zm-1.092-3.5c3.236-3.523 5.187-4.099 5.013-1.48-.051.775-.265.724-.612-.146-.381-.955-1.574-.384-4.171 2L110.5 280zm147.624-.756l-2.842-2.966 2.67-4.034c2.722-4.114 4.012-4.716 6.6-3.079 1.275.807 1.267 1.154-.062 2.735-.838.996-2.276 3.023-3.196 4.504-1.515 2.437-1.526 2.84-.116 4.25.856.856 1.159 1.557.673 1.557-.487 0-2.164-1.335-3.727-2.967zm19.329-2.092l-2.361-2.06 2.75 1.675c1.512.92 2.75 1.847 2.75 2.059 0 .78-.835.335-3.14-1.674zm436.371-1.941c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm13.963-.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm.884-8.083c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM718.195 261c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm.884-17.083c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm14.153-1.417c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm.926-6c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-14-5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm1.074-11c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm14-6c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm.963-7.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm-14-4c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm1-9c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm14.037-6.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm1-10c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-14.037-2.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm1-9c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm13.963-1.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm94.575-54.124c.679-.684 1.486-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.542-1.54.428-.56-.56zM853 101.107c0-.216.698-.661 1.552-.989.89-.341 1.291-.173.94.393-.586.95-2.492 1.406-2.492.596zM853.195 81c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm13.963-1.5c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zM854.195 65c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm14.037-.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zM855.195 53c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm14 0c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm1.037-13.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-14.074 0c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm1.074-14c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm14-1c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm.847-11.583c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM858.195 10c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm1.037-7.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm14.068-3c0-3.025.187-4.263.416-2.75.23 1.512.23 3.987 0 5.5-.229 1.512-.416.275-.416-2.75zm.858-15c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-14.079-3.583c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm15.153-6.417c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zM861.195-27c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM876-41.21c0-.575.787-1.663 1.75-2.418 1.619-1.27 1.64-1.222.283.628-.807 1.1-1.594 2.188-1.75 2.417-.156.229-.283-.054-.283-.628zM862.195-47c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769z",
      fill: "#69330c",
      transform: "matrix(.92146 0 0 .82007 29.733 153.837)"
    }), /* @__PURE__ */ React46.createElement("path", {
      d: "M211.5 1013.036c-.55-.228-11.125-.908-23.5-1.512-61.312-2.99-127.223-11.487-164-21.143-41.545-10.908-45.982-17.315-18.306-26.438 9.775-3.221 36.294-9.653 50.806-12.321 28.396-5.221 75.674-10.727 100.5-11.705 16.06-.632 37.993 1.11 44.334 3.52 1.191.453 2.506.872 2.92.932.416.06 2.383.788 4.373 1.62 1.99.83 3.99 1.511 4.446 1.511.456 0 5.013 1.974 10.128 4.386 5.114 2.413 13.349 5.818 18.299 7.568 11.276 3.985 12.041 4.29 17.345 6.904 2.389 1.178 4.892 2.142 5.56 2.142.67 0 2.115.836 3.212 1.858 1.984 1.849 5.253 2.801 12.883 3.755 4.498.563 7.2 1.708 13 5.508 2.2 1.442 5.35 2.85 7 3.129 1.65.279 8.4 1.757 15 3.286 6.6 1.528 15.375 3.083 19.5 3.455 4.125.373 7.05.782 6.5.91-.867.202 3.286 1.769 10 3.773 1.1.329 4.219.81 6.93 1.07 2.712.26 5.515 1.058 6.23 1.773.715.716 3.204 1.622 5.532 2.015 2.327.394 4.923 1.072 5.77 1.508.846.436 3.008 1.338 4.804 2.005 2.605.966 3.036 1.489 2.128 2.583-.627.755-2.096 1.377-3.266 1.383-1.17.01-4.292.667-6.938 1.47-2.645.803-6.695 1.69-9 1.974-2.304.283-7.565 1.017-11.69 1.632-7.126 1.063-138.171 2.414-140.5 1.45zM543 991.441c0-.583.45-.78 1-.441.55.34 1 .817 1 1.059 0 .243-.45.441-1 .441s-1-.477-1-1.059zm-40.872-1.857c-.754-.47-1.204-1.34-1-1.936.224-.654.916-.746 1.744-.232.754.47 1.204 1.34 1 1.936-.224.654-.916.746-1.744.232zM341.25 979.25c.63-1.892 3.75-2.161 3.75-.323 0 .927-.855 1.573-2.083 1.573-1.222 0-1.912-.517-1.667-1.25zm-60.5-19.118c-3.386-1.254-3.573-2.632-.357-2.632 1.316 0 2.677.74 3.024 1.643.817 2.13.615 2.205-2.667.99zM180 905.532c0-.533.675-.71 1.5-.394.825.317 1.5.753 1.5.969 0 .216-.675.393-1.5.393s-1.5-.436-1.5-.969zm-7.935-5.454c-.687-.828-.78-1.636-.227-1.978.515-.318 1.458.052 2.097.822.687.828.78 1.636.227 1.978-.515.318-1.458-.052-2.097-.822zM165 891.941c0-.858.457-1.276 1.016-.93.56.345.758 1.046.441 1.558-.857 1.387-1.457 1.129-1.457-.628zm-3.601-7.845c-.972-2.532.018-3.76 1.334-1.652.778 1.246.866 2.186.24 2.573-.543.335-1.251-.079-1.574-.92zM66.446 780.413c-.873-1.412 1.055-3.34 2.467-2.467.598.37 1.087 1.32 1.087 2.113 0 1.684-2.574 1.94-3.554.354zm781.107-2.828a1.117 1.117 0 01.362-1.532 1.117 1.117 0 011.532.362c.322.52.16 1.21-.362 1.532-.52.322-1.21.16-1.532-.362zm48.033-100.832c-1.012-1.012.573-7.405 3.067-12.37 1.29-2.57 2.347-5.086 2.347-5.59 0-.505.9-2.78 2-5.057 1.1-2.277 2-4.611 2-5.188 0-.576.45-1.048 1-1.048s1 1.748 1 3.883c0 3.043-.433 3.997-2 4.407-1.587.415-2 1.364-2 4.592 0 2.307-.865 5.488-1.996 7.344-1.098 1.8-1.998 4.463-2 5.917-.004 2.507-2.107 4.42-3.418 3.11zm-532.717-24.87c-1.166-3.011-1.464-3.14-8.69-3.75-12.405-1.05-15.69-.806-18.452 1.367-3.707 2.916-5.095 2.589-4.371-1.03l.606-3.03-4.731.094c-2.602.051-5.519.076-6.481.054a92.58 92.58 0 00-3.5 0c-2.635.06-12.454-2.127-14.526-3.236-1.204-.644-3.58-.592-7.022.155-3.81.827-8.413.84-17.202.053-16.79-1.505-16.747-1.496-17.588-3.768-.81-2.192-5.96-4.507-7.653-3.44-.565.356-1.192 1.445-1.393 2.418-.328 1.585-.782 1.487-4.333-.933-3.82-2.604-11.35-4.62-16.502-4.42-1.359.054-4.391-.806-6.74-1.91-2.348-1.104-5.31-2.007-6.58-2.007-1.271 0-2.739-.426-3.261-.948-2.248-2.243-10.804-6.052-13.593-6.052-1.942 0-3.693-.81-4.86-2.25-1.607-1.984-2.175-2.117-4.805-1.126-3.364 1.267-4.37.867-6.103-2.422-.837-1.588-1.781-2.117-3.055-1.713-1.324.42-2.493-.343-4.141-2.702-2.748-3.934-3.812-4.751-6.207-4.772-.998-.008-4.274-1.14-7.28-2.515-3.006-1.375-5.82-2.5-6.255-2.5-.435 0-1.434-1.463-2.22-3.25-.982-2.23-2.216-3.343-3.931-3.547-3.33-.394-8-2.26-8-3.194 0-.412-2.06-.981-4.576-1.265-3.023-.34-5.05-1.192-5.973-2.51-1.042-1.488-3.058-2.173-7.923-2.694-6.084-.652-6.489-.848-5.974-2.9.455-1.814-.063-2.422-2.955-3.468-1.929-.698-4.948-3.088-6.71-5.311-2.796-3.531-3.625-3.994-6.549-3.653-2.783.325-3.257.105-2.81-1.303.692-2.18-2.032-4.905-4.901-4.905-1.226 0-2.731-.502-3.345-1.116-.614-.614-2.166-1.64-3.45-2.28-1.284-.639-2.921-2.387-3.639-3.883C83.481 552.646 80 552.498 80 556c0 1.556-.567 2.5-1.5 2.5-1.13 0-1.5-1.213-1.5-4.92 0-4.748-.207-5.105-5.917-10.17-3.254-2.888-6.395-6.299-6.979-7.58-1.852-4.065-4.702-2.942-6.142 2.42L56.687 543l-.784-4c-.431-2.2-.562-5.35-.291-7 .434-2.64-.292-3.775-6.06-9.471-5.082-5.02-6.552-7.123-6.552-9.378 0-2.81-.128-2.886-3.83-2.294-3.737.597-3.886.503-6.06-3.85-1.225-2.454-2.651-4.723-3.169-5.043-.517-.32-.941-1.602-.941-2.849 0-1.246-1.164-3.357-2.587-4.69-1.423-1.334-3.199-3.775-3.946-5.425-.747-1.65-2.036-4.125-2.864-5.5-.829-1.375-2.812-5.2-4.407-8.5-1.596-3.3-4.542-9.07-6.548-12.823C6.64 458.425 5 454.483 5 453.418c0-1.065-1.87-6.313-4.155-11.662-4.272-9.998-4.84-12.78-3.565-17.463.603-2.216.186-3.27-2.295-5.808-2.944-3.012-3.018-3.318-2.567-10.666.346-5.653.957-8.102 2.415-9.692 1.073-1.17 2.263-3.6 2.644-5.401.38-1.8 1.828-4.623 3.215-6.272 2.015-2.394 2.397-3.666 1.899-6.32-.471-2.513-.114-3.971 1.465-5.979 2.502-3.18 4.03-3.348 5.726-.632.9 1.442.97 2.572.24 3.934-2.047 3.827-1.227 9.473 1.797 12.37 1.551 1.486 3.126 2.395 3.5 2.02 1.059-1.058.804-4.178-.513-6.286-.926-1.483-.926-2.502 0-4.534.657-1.442 1.194-4.625 1.194-7.074 0-4.433.016-4.453 3.543-4.453 2.824 0 4.599.96 8.75 4.732 2.864 2.602 5.432 4.905 5.707 5.117.275.212-.348.895-1.384 1.518-5.205 3.13-7.341 5.621-6.881 8.026.376 1.969.012 2.506-1.884 2.774-1.827.259-2.42 1.047-2.66 3.535-.206 2.118-.967 3.41-2.25 3.817-1.982.629-2.753 3.481-.941 3.481 1.613 0 1.154 1.918-1.015 4.247-2.505 2.688-2.1 4.161 1.253 4.56 2.831.338 2.908.686 4.374 19.693.42 5.449 1.218 8.846 2.502 10.654 1.037 1.46 1.886 3.571 1.886 4.691 0 1.12.494 2.342 1.098 2.716.688.425.969 3.344.75 7.809-.34 6.958-.288 7.138 2.152 7.468 3.252.439 6.994 3.949 7.022 6.586.012 1.142.902 3.201 1.978 4.576 1.076 1.375 1.971 3.175 1.99 4 .019.825 1.154 3.458 2.522 5.852C45.88 487.746 47 490.73 47 491.981c0 1.638.912 2.637 3.25 3.562 5.274 2.087 6.75 3.879 6.75 8.191 0 3.803.089 3.905 2.877 3.293 2.484-.546 3.352-.078 6.346 3.42 1.908 2.23 3.948 4.053 4.533 4.053.585 0 3.087 2.349 5.56 5.22 4.294 4.982 4.61 5.157 7.01 3.873 3.087-1.652 8.633-.785 13.924 2.176 4 2.24 4.622 3.762 2.317 5.675-1.514 1.257-2.442.56-6.463-4.86-1.237-1.669-2.34-2.207-3.562-1.738-1.595.612-1.624.897-.294 2.9 2.052 3.092 13.637 10.012 15.539 9.282 1.18-.452 1.27-.871.38-1.76-1.418-1.419-1.537-3.768-.19-3.768 1.405 0 3.821 4.022 4.417 7.353.688 3.84 3.293 7.647 5.235 7.647.87 0 2.428 1.074 3.461 2.388 2.429 3.087 6.936 4.297 8.425 2.261.967-1.323 1.472-1.312 4.38.097 2.843 1.377 3.211 1.972 2.725 4.406-.48 2.397-.033 3.175 3.011 5.243 2.906 1.975 4.081 2.253 6.282 1.486 1.951-.68 3.668-.527 6.147.548 2.64 1.146 2.942 1.502 1.297 1.532-2.971.054-3.712 2.677-1.245 4.405 1.332.933 3.585 1.259 6.56.949 3.727-.389 4.96-.07 6.94 1.79 1.704 1.601 2.06 2.48 1.213 3.003-.926.572-.92 1.073.025 2.211 1.736 2.092 7.674 3 10.386 1.588 3.278-1.705 3.306-1.786 1.191-3.386-1.728-1.307-1.748-1.46-.2-1.49.95-.017 2.48 1.117 3.398 2.52.92 1.403 2.98 3.227 4.578 4.054 1.598.826 3.893 2.357 5.101 3.402 9.262 8.01 23.456 15.971 32.245 18.083 2.723.654 7.651 2.195 10.951 3.423 9.79 3.646 18.555 5.459 26 5.377 3.85-.042 9.475-.111 12.5-.154 3.025-.043 10.675.952 17 2.21 6.325 1.26 13.75 2.724 16.5 3.256 2.75.531 10.4 1.296 17 1.699 6.963.425 13.889 1.432 16.5 2.4 3.334 1.237 7.868 1.676 17.5 1.692 7.15.013 18.288.683 24.751 1.489 9.506 1.186 12.754 1.234 17 .254 2.887-.667 11.549-1.244 19.249-1.283 8.362-.043 15.486-.574 17.69-1.32 2.844-.962 4.572-.985 7.528-.1 3.72 1.115 11.247.99 36.74-.614 8.825-.555 9.816-.454 8.702.888-.782.942-.886 1.744-.277 2.12.54.334 1.576-.244 2.303-1.283 1.37-1.956 5.84-2.886 17.314-3.604 3.3-.207 7.174-.827 8.608-1.38 1.762-.677 6.014-.65 13.11.087 9.96 1.033 10.652.982 13.412-.984 1.972-1.404 5-2.218 9.39-2.524 3.564-.249 9.276-1.183 12.694-2.075 3.417-.893 8.142-1.557 10.5-1.474 2.357.082 11.789-.199 20.959-.624 11.636-.539 17.705-.431 20.091.356 2.686.887 4.794.802 9.828-.395 3.524-.837 11.133-1.789 16.908-2.114 5.775-.324 13.2-1.392 16.5-2.371 7.723-2.292 17.14-4.042 21.751-4.042 1.997 0 3.91-.45 4.249-1 .34-.55 1.69-1 3-1s2.62-.386 2.912-.858c.292-.472 3.13-.9 6.31-.953 3.671-.061 7.354-.863 10.1-2.2 3.484-1.697 5.906-2.061 12.5-1.88 4.498.125 9.978-.328 12.178-1.005 2.2-.678 5.808-1.62 8.019-2.095 5.006-1.074 12.118-5.046 14.099-7.874.994-1.419 2.562-2.135 4.674-2.135 4.11 0 31.708-13.533 31.708-15.549 0-1.321 1.225-1.9 3.29-1.556 1.947.325 4.71-2.172 4.71-4.254 0-2.564 11.698-15.197 16.26-17.56 1.507-.78 2.74-1.793 2.74-2.25 0-.457.787-.839 1.75-.849.963-.01 2.875-1.354 4.25-2.988a219.042 219.042 0 014.75-5.437c1.238-1.356 2.25-2.858 2.25-3.337 0-1.443 4.513-5.22 6.238-5.22 2.612 0 7.683-4.917 8.56-8.3.558-2.154 1.576-3.316 3.252-3.712 1.374-.324 2.581-1.43 2.764-2.532.178-1.076 1.193-3.864 2.255-6.195 1.062-2.332 1.931-4.694 1.931-5.25s.45-1.011 1-1.011 1-.793 1-1.763c0-.97 1.01-2.207 2.244-2.75 1.235-.543 3.216-3.012 4.402-5.487 1.187-2.475 4.002-6.225 6.256-8.334 2.254-2.11 4.098-4.67 4.098-5.691s.45-2.135 1-2.475c.55-.34 1-1.872 1-3.404 0-1.532.9-3.6 2-4.596 1.1-.995 2-2.907 2-4.249 0-1.535.688-2.618 1.857-2.924 2.031-.531 5.266-5.986 8.25-13.914 1.213-3.223 2.855-5.59 4.481-6.46 3.923-2.1 4.837-4.542 2.353-6.282-1.65-1.156-2.004-2.317-1.754-5.76.284-3.913.823-4.702 5.813-8.507 5.876-4.481 6.878-6.708 3.25-7.224-1.237-.175-2.25.09-2.25.59s-1.09 1.406-2.424 2.013c-3.187 1.453-4.135.2-4.882-6.457-.432-3.843-.21-5.482.862-6.373 2.11-1.751 1.813-5.701-.483-6.43-1.975-.627-4.537-4.338-8.869-12.845-2.423-4.76-6.07-7.327-8.876-6.25-.73.28-1.334-.04-1.34-.71-.018-1.631-5.812-12.991-7.003-13.727-1.97-1.217-2.998-29.338-1.142-31.223.397-.403 2.676 1.285 5.065 3.75 2.389 2.465 5.112 4.482 6.051 4.482.94 0 2.94 1.318 4.446 2.928 1.507 1.61 3.78 4.054 5.052 5.43 1.272 1.377 4.188 3.008 6.48 3.625 2.291.617 4.346 1.66 4.565 2.32.22.658.861 3.007 1.426 5.22.815 3.192 1.692 4.273 4.254 5.24 2.784 1.05 3.018 1.39 1.702 2.477-4.117 3.403-5.69 8.757-2.575 8.762.655 0 2.422 1.95 3.926 4.332 1.505 2.381 3.642 5.15 4.75 6.153 1.177 1.064 2.015 3.086 2.015 4.858 0 2.263 1.002 3.942 3.94 6.6 3.75 3.395 3.949 3.875 4.15 10.074.115 3.58-.378 8.135-1.096 10.122-1.169 3.231-1.099 3.914.662 6.485 2.698 3.94 4.56 10.558 3.32 11.799-.537.536-.976 1.95-.976 3.14 0 1.191-.906 3.317-2.013 4.724-1.725 2.194-1.84 2.938-.807 5.207.837 1.836.882 2.855.148 3.326-.582.373-1.392 1.803-1.8 3.178-1.954 6.585-9.32 15.121-10.36 12.004-.574-1.723-5.5-6.004-6.908-6.004-2.094 0-1.429 3.569 1.74 9.343 3.32 6.048 3.722 8.443 1.561 9.272-.791.304-1.715 1.808-2.052 3.343-.65 2.962-5.066 7.818-6.137 6.748-.349-.35-1.505-.17-2.568.399-1.556.833-1.795 1.653-1.229 4.215.388 1.749.754 5.924.815 9.277.062 3.463.688 6.793 1.447 7.707 1.12 1.35 1.097 1.952-.144 3.724l-1.48 2.114-1.528-2.18c-2.101-3.001-3.458-2.234-6.618 3.741-1.492 2.822-4.045 6.63-5.673 8.463-5.311 5.983-20.116 17.913-25.85 20.83-1.932.983-3.24 2.63-3.779 4.754-.487 1.925-1.458 3.25-2.381 3.25-.858 0-3.541 2.138-5.964 4.75-4.06 4.378-4.512 4.613-5.773 3-1.768-2.262-4.077-2.314-3.217-.072.803 2.094-7.952 11.322-10.741 11.322-1.587 0-7.689 5.276-7.689 6.649 0 .24-1.852 2.89-4.116 5.889-3.223 4.268-5.014 5.693-8.25 6.567-9.152 2.469-14.634 4.191-14.634 4.598 0 .235.466 1.299 1.035 2.363.866 1.618.702 1.934-1 1.934-1.12 0-2.035-.45-2.035-1s-.405-1-.9-1c-.94 0-10.272 6.586-13.417 9.469-1.37 1.254-2.148 1.39-3.162.549-1.582-1.313-10.691 1.278-12.606 3.585-.638.768-1.913 1.397-2.834 1.397-.92 0-5.478 1.567-10.128 3.482-4.649 1.915-9.188 3.49-10.087 3.5-.899.01-3.9 2.308-6.67 5.107-5.882 5.944-8.855 6.33-8.438 1.094.29-3.65-1.275-4.772-5.26-3.772-1.722.432-2.504 1.32-2.516 2.858-.02 2.421-6.78 8.731-9.354 8.731-1.02 0-1.608-1.213-1.818-3.75-.27-3.256-.672-3.792-3.06-4.066-2.492-.287-2.75-.017-2.75 2.875 0 3.045-.144 3.162-3.143 2.562-1.843-.368-3.722-.148-4.543.533-1.06.88-1.68.88-2.556.004-2.225-2.225-6.34-1.266-10.055 2.342-3.566 3.464-6.98 4.48-8.233 2.452-.446-.721-1.074-.696-2.011.082-.75.623-2.268.844-3.375.493-1.483-.47-2.794.231-4.981 2.667-2.413 2.687-3.211 3.067-4.261 2.031-1.032-1.018-1.043-1.673-.058-3.25 1.103-1.767.972-1.975-1.246-1.975-1.594 0-3.27 1.07-4.696 3-1.22 1.65-2.572 3-3.004 3-.433 0-1.485-1.35-2.338-3-1.457-2.818-4.262-3.904-5.887-2.28-.396.396-1.705.734-2.91.75-1.49.02-2.83 1.227-4.196 3.778-2.216 4.138-3.257 4.635-4.19 2.002-1.009-2.843-3.496-5.25-5.427-5.25-.99 0-2.97 1.172-4.402 2.603-2.11 2.11-3.3 2.518-6.295 2.153-2.839-.346-4.347.093-6.52 1.897-3.19 2.65-6.464 3.057-7.288.907-.809-2.106-4.368-4.162-8.551-4.938-3.075-.571-4.105-.275-6.382 1.835-1.966 1.822-3.378 2.349-5.123 1.911-2.771-.695-6.329 1.93-6.329 4.67 0 .951-.788 1.956-1.75 2.232-.963.277-2.538.828-3.5 1.224-1.26.518-1.75.248-1.75-.964 0-.926-1.258-2.942-2.796-4.48-2.547-2.546-3.282-2.75-8.25-2.296-6.69.612-7.954 1.545-7.954 5.869 0 4.307-1.771 4.43-2.187.15-.219-2.256-1.065-3.605-2.813-4.485-3.292-1.657-11.835-1.622-15.06.06-1.627.85-3.368 1.038-4.775.518-3.41-1.262-12.27 1.066-15.373 4.04-4.096 3.924-5.15 4.69-7.31 5.304-1.09.31-2.74.876-3.667 1.259-1.382.57-1.741.007-2-3.137-.292-3.548-.565-3.856-3.692-4.154-1.858-.178-3.798.097-4.312.612-.514.514-3.945.72-7.623.46-7.131-.507-9.336.599-10.469 5.25-.383 1.574-.512 1.436-.603-.643-.185-4.221-5.906-5.131-14.116-2.246-3.096 1.089-7.65 1.54-14.596 1.448-7.762-.103-10.377.204-11.31 1.328-1.056 1.272-1.655 1.277-4.621.037-4.892-2.043-8.133-1.83-8.763.576-.353 1.352-1.364 2-3.116 2-1.427 0-2.594-.42-2.594-.933 0-.513-1.012-1.243-2.25-1.622-1.238-.38-2.848-1.169-3.578-1.755-1.92-1.538-24.96-1.86-26.236-.366-.552.647-1.646 2.076-2.431 3.176-1.383 1.938-1.465 1.903-2.636-1.118zM856.553 533.75c6.154-4.91 3.605-7.739-3.895-4.322-5.512 2.51-6.547 3.949-4.12 5.724 2.664 1.947 4.142 1.689 8.015-1.402zm32.399-48.485c1.189-2.11 1.219-2.854.164-4.125-1.83-2.205-5.116 0-5.116 3.434 0 4.723 2.483 5.07 4.952.691zm-3.002-8.205c1.905-2.295.927-7.06-1.45-7.06-1.453 0-2.089.775-2.325 2.834-.584 5.102 1.299 7.21 3.775 4.226zM898 441.5c0-3.398-1.504-4.656-3.544-2.964-1.89 1.568-1.846 3.43.125 5.402 2.081 2.081 3.419 1.127 3.419-2.438zM4.267 415.75c.867-.963 1.886-2.987 2.263-4.5.611-2.447.413-2.75-1.8-2.75-2.986 0-4.268 1.419-5.194 5.75-.595 2.782-.418 3.25 1.23 3.25 1.058 0 2.634-.787 3.501-1.75zm873.602-61.592c1.466-1.766.447-2.658-3.036-2.658-2.664 0-3.781 1.718-2.166 3.333 1.12 1.12 4.024.744 5.202-.675zm33.643 281.38c-1.022-3.222 2.293-7.78 3.84-5.278.501.811-1.928 7.24-2.736 7.24-.265 0-.761-.883-1.104-1.962zm-768.262-34.7c-1.741-.703-1.566-2.338.25-2.338.825 0 1.5.675 1.5 1.5s-.113 1.464-.25 1.421a42.475 42.475 0 01-1.5-.583zm678.829-25.921c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-667.266-9.1c.721-.289 1.584-.253 1.916.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm-16.372-7.785c-1.647-1.246-1.693-1.473-.298-1.5.904-.018 1.902.643 2.219 1.468.715 1.863.505 1.867-1.92.032zm-19.413-11.698c-3.82-1.443-5.655-5.072-2.093-4.14 1.994.52 5.706 4.024 4.976 4.696-.226.207-1.523-.043-2.883-.556zM478 543.132c0-.522 14.23-7.596 40.5-20.132 56.302-26.867 57.466-27.466 57.953-29.86.522-2.569 1.248-11.69 2.636-33.14 2.124-32.802 2.825-43.353 3.788-57 1.985-28.13 3.15-41.735 3.644-42.533 1.723-2.789-3.354-6.98-29.933-24.708-15.448-10.304-28.238-19.078-28.421-19.497-.184-.42-.876-.762-1.538-.762-.663 0-2.763-1.332-4.667-2.96-1.904-1.627-4.025-2.977-4.712-3-.688-.022-1.25-.49-1.25-1.04s-.482-1-1.07-1c-1.944 0-13.93-9.145-13.93-10.628 0-2.41 4.243-7.372 6.302-7.372 1.06 0 6.39 2.925 11.847 6.5 5.456 3.575 10.317 6.5 10.802 6.5.485 0 1.032.376 1.216.835.39.979 54.82 36.948 60.549 40.013 1.944 1.04 4.278.187 19-6.94 9.231-4.47 20.609-9.923 25.284-12.118 4.675-2.194 17.275-8.29 28-13.545 22.165-10.862 43.967-21.245 44.608-21.245.237 0 2.16-1.091 4.273-2.425l3.842-2.425 1.195-16.325c.658-8.979 1.822-24.425 2.588-34.325.765-9.9 1.87-24.75 2.457-33 .586-8.25 1.509-20 2.051-26.112.542-6.111.986-14.062.986-17.668s.292-7.317.649-8.247c.557-1.453 27.594-15.201 63.351-32.215 5.225-2.487 17.375-8.33 27-12.986 9.625-4.657 21.206-10.25 25.735-12.428 4.529-2.18 8.916-4.936 9.75-6.126.847-1.21 1.515-4.298 1.515-7.006 0-2.663.667-13.25 1.482-23.527 3.016-38.029 3.687-47 4.538-60.685 2.245-36.113 2.954-44.873 3.688-45.595 1.13-1.109 30.628-15.655 68.292-33.676 5.775-2.763 22.153-10.695 36.396-17.626 14.243-6.932 26.498-12.603 27.234-12.603 1.68 0 6.821 9.96 5.698 11.04-1.487 1.428-17.34 9.242-63.828 31.46-53.601 25.617-59.635 28.662-60.608 30.593-.655 1.299-1.533 11.45-3.929 45.407a6426.6 6426.6 0 01-2.417 32.5c-.826 10.725-1.994 27.6-2.596 37.5-.602 9.9-1.5 19.008-1.996 20.24-.575 1.428-3.538 3.47-8.178 5.635-6.872 3.206-30.563 14.684-64.276 31.14a8109.964 8109.964 0 01-33.613 16.277c-10.237 4.926-18.885 9.396-19.218 9.934-.733 1.187-2.46 18.612-3.792 38.274-.541 7.975-1.423 21.025-1.96 29-3.301 49.025-4.68 66.675-5.376 68.871-.307.966-4.659 3.684-9.796 6.119-5.085 2.41-20.72 9.975-34.745 16.811-33.363 16.263-53.289 25.917-70.651 34.227-9.14 4.375-14.338 7.429-14.678 8.623-.911 3.197-2.798 26.79-5.746 71.849-.504 7.7-1.358 20.525-1.899 28.5-.54 7.975-1.384 20.862-1.875 28.637-.491 7.775-1.203 14.638-1.582 15.251-.629 1.018-15.97 8.731-37.569 18.89-4.675 2.198-15.475 7.357-24 11.463-8.525 4.107-17.075 7.948-19 8.536-3.755 1.147-30 2.77-30 1.855zm-68.5-3.563l-10-.569-22.5-14.882a97216.44 97216.44 0 00-40.846-27L317.808 485l.57-11c.313-6.05 1.268-20.45 2.123-32l2.512-34c.527-7.15 1.404-20.339 1.95-29.308.545-8.97 1.27-16.76 1.61-17.31 1.472-2.381-1.994-6.616-9.354-11.434C285.807 329.39 246 302.16 246 301.231c0-1.756 5.138-8.731 6.432-8.731.638 0 6.764 3.665 13.614 8.144L288.5 315.33c5.5 3.597 16.015 10.52 23.366 15.382 14.017 9.272 16.134 9.812 16.134 4.116 0-1.503 1.348-3.664 3.537-5.67l3.537-3.24-2.287-2.09c-1.258-1.149-16.237-11.385-33.287-22.745-17.05-11.361-32.23-21.751-33.734-23.089l-2.735-2.432 2.037-3.451c3.92-6.644 3.182-6.85 23.63 6.587 21.177 13.917 36.457 23.816 39.055 25.303.96.55 1.972 1.243 2.247 1.54 1.18 1.27 18.33 12.133 20.317 12.866 1.637.605 4.57-.345 11.735-3.8a4173.788 4173.788 0 0121-10.031 8361.85 8361.85 0 0027.766-13.25c8.974-4.304 17.142-7.825 18.15-7.825 2.1 0 6.403 6.59 5.626 8.615-.46 1.201-14.284 8.188-61.094 30.879-8.8 4.266-19.157 9.235-23.015 11.043-11.11 5.205-10.115 2-12.547 40.463-3.14 49.64-4.528 70.752-5.787 88-.502 6.875-.702 13.477-.443 14.672.308 1.425 4.309 4.693 11.63 9.5 6.14 4.03 11.312 7.665 11.495 8.078.184.412.7.75 1.147.75.448 0 5.098 2.925 10.333 6.5 5.236 3.575 9.97 6.5 10.52 6.5.55 0 1.15.338 1.334.75.474 1.066 9.479 7.25 10.558 7.25.494 0 1.77.787 2.836 1.75 1.067.963 3.739 2.919 5.939 4.348 22.315 14.492 27.326 18.31 23.25 17.721-.688-.1-5.75-.437-11.25-.75zm24.878-9.211c-4.333-2.828-23.173-15.316-41.867-27.75s-34.423-22.789-34.954-23.01c-.531-.22-1.828-1.204-2.882-2.186-1.887-1.758-1.883-1.839.216-5.236 1.173-1.898 2.69-3.9 3.371-4.45.893-.72 10.027 4.815 32.738 19.834 17.325 11.458 31.95 21.209 32.5 21.668.55.46 2.8 1.927 5 3.261s4.15 2.782 4.333 3.218c.184.436.778.793 1.321.793.543 0 3.993 2.11 7.667 4.688l7.025 4.93c.371.258-5.722 9.382-6.266 9.382-.178 0-3.869-2.314-8.202-5.142zM555.16 477.77c-2.964-.364-3.272-.682-2.735-2.823.585-2.332 1.815-19.314 3.58-49.447.468-7.975 1.116-17.425 1.44-21 .325-3.575 1.105-12.504 1.734-19.843l1.143-13.343 2.964.593c1.631.326 4.096.593 5.477.593h2.513l-.683 12.25c-.765 13.723-2.2 36.483-3.578 56.75a2909.698 2909.698 0 00-1.592 25.25l-.674 11.75-3.124-.16a110.945 110.945 0 01-6.465-.57zM-13.75 396.385c1.512-1.129 2.75-2.914 2.75-3.968 0-1.055.45-1.917 1-1.917 1.506 0 1.227 1.042-1.25 4.681-1.238 1.818-2.925 3.294-3.75 3.28-.943-.015-.478-.787 1.25-2.076zm41.5-33.283c-4.54-4.012-5-7.737-1.258-10.189 3.56-2.332 5.508-1.205 5.508 3.188 0 2.488.68 4.254 2.118 5.502 2.396 2.077 1.906 4.92-.837 4.855-.98-.023-3.468-1.533-5.531-3.356zM54 361.076c0-.75.675-1.621 1.5-1.938.88-.338 1.5-.013 1.5.786 0 .75-.675 1.621-1.5 1.938-.88.338-1.5.013-1.5-.786zM33.195 342c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM37 333.576c0-.474.675-1.121 1.5-1.438.825-.316 1.5-.187 1.5.286 0 .474-.675 1.121-1.5 1.438-.825.316-1.5.187-1.5-.286zm55-12.762c0-2.437-.762-4.506-2.25-6.108l-2.25-2.424 2.25-1.513c2.481-1.669 2.819-4.339 1.152-9.12-.696-1.996-1.773-3.149-2.94-3.149-2.744 0-3.28-1.692-1.176-3.714 7.185-6.903 12.418-10.502 18.714-12.868 2.75-1.033 6.688-3.402 8.75-5.265 2.612-2.358 3.75-2.913 3.75-1.828 0 .856-.457 1.84-1.015 2.184-2.855 1.765-3.992 7.931-3.756 20.375.218 11.564.052 12.908-1.992 16.116-1.226 1.925-2.231 4.235-2.233 5.133-.004 1.652-2.737 2.828-6.632 2.853-1.17.008-2.687.689-3.372 1.514-.685.825-2.54 1.5-4.122 1.5-2.65 0-2.878-.292-2.878-3.686z",
      fill: "#2b1f1a",
      transform: "matrix(.92146 0 0 .82007 29.733 153.837)"
    }));
  }
  var Coconuts_default = SvgCoconuts;

  // build/lib-react-tsx/logo/Gnps.tsx
  var React47 = __toModule(require_react());
  function SvgGnps({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React47.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000.73 999.641",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React47.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React47.createElement("path", {
      d: "M186.276 748.266c2.352-.21 5.952-.208 8 .007s.124.388-4.276.385c-4.4-.004-6.076-.18-3.724-.391zm-17.526-.955c.963-.252 2.538-.252 3.5 0 .963.251.175.457-1.75.457s-2.712-.206-1.75-.457zm39 0c.963-.252 2.538-.252 3.5 0 .963.251.175.457-1.75.457s-2.712-.206-1.75-.457zm-47.5-.973c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm57.519-.031c.973-.254 2.323-.237 3 .037.677.274-.119.481-1.769.461-1.65-.02-2.204-.244-1.231-.498zm-64.457-.99c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm72 0c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm6-1c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm-93-2c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm102 0c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm-53.044-6.042c1.797-.222 4.497-.218 6 .01 1.503.229.032.41-3.268.405-3.3-.006-4.53-.192-2.732-.415zm-17.006-.982c1.244-.24 3.044-.23 4 .02s-.062.446-2.262.435c-2.2-.011-2.982-.216-1.738-.455zm36.488.018c.963-.252 2.538-.252 3.5 0 .963.251.175.457-1.75.457s-2.712-.206-1.75-.457zm-45.5-.973c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm55 0c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm-62-1c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm69 0c.688-.278 1.813-.278 2.5 0 .688.277.125.504-1.25.504s-1.938-.227-1.25-.504zm-73.938-1.021c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm80 0c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm-85-1c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm90 0c.722-.289 1.585-.253 1.917.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zM275.5 718c.825-.533 1.95-.97 2.5-.97s.325.437-.5.97c-.825.533-1.95.97-2.5.97s-.325-.437.5-.97zm45-11.378c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM53.372 702.25c-1.243-1.586-1.208-1.621.378-.378.962.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm271.128 1.372c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM330 699c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm-281.628-.75c-1.243-1.586-1.208-1.621.378-.378.962.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm264.128-.628c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM42.424 693.25L40 690.5l2.75 2.424c2.57 2.266 3.209 3.076 2.424 3.076-.179 0-1.416-1.238-2.75-2.75zM336 694c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm-274.628-.75c-1.243-1.586-1.208-1.621.378-.378.962.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm255.128 1.372c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm-205.276-4.15c-4.782-1.755-11.857-6.808-14.458-10.326-5.475-7.406-6.751-11.304-6.759-20.646-.006-7.643.387-9.83 2.606-14.5 3.165-6.663 8.675-12.314 15.387-15.783 3.983-2.058 6.83-2.67 14.003-3.009l9.004-.425 20.83-38.474c11.458-21.16 20.681-38.582 20.497-38.715-.184-.133-1.909-1.29-3.834-2.572-18.443-12.28-27.132-33.197-23.704-57.065l.796-5.544-27.043-11.855-27.043-11.854-5.5 5.202c-23.464 22.191-60.386 11.215-68.154-20.261-4.406-17.857 5.47-37.52 22.958-45.703 20.262-9.481 43.978-.332 54.005 20.835 2.907 6.135 3.183 7.57 3.163 16.419l-.022 9.695 26.325 11.555C138.759 463.8 151.047 469 151.587 469c.54 0 3.715-2.922 7.056-6.494 6.933-7.411 14.478-12.336 23.857-15.574 5.218-1.8 8.472-2.215 16.5-2.099 5.5.08 11.088.262 12.417.406 2.232.24 2.867-.851 8.25-14.192l5.833-14.453-5.02-4.995c-2.762-2.747-6.248-7.493-7.747-10.547-2.385-4.86-2.725-6.738-2.729-15.073-.004-8.747.263-10.064 3.283-16.197 5.132-10.426 14.237-17.307 26.33-19.9 15.199-3.26 32.01 5.78 39.271 21.118 2.667 5.633 3.069 7.567 3.015 14.5-.158 20.292-14.56 35.437-34.57 36.353l-7.709.353-5.562 13.901c-3.059 7.646-5.562 14.537-5.562 15.315 0 .778 1.548 2.372 3.44 3.541 9.156 5.659 19.307 21.18 21.654 33.11l1.173 5.962 23.979-.268 23.978-.267 1.867-5c2.66-7.127 7.014-11.897 14.083-15.43 18.758-9.373 40.929 2.882 42.587 23.54.74 9.21-1.882 16.543-8.224 23.003-14.575 14.85-37.681 11.237-47.75-7.465l-1.714-3.183-24.685.267-24.685.268-1.71 6.252c-.942 3.44-3.384 8.962-5.428 12.274-2.044 3.311-3.57 6.436-3.39 6.944.429 1.218 37.81 46.903 38.958 47.612.487.301 3.694-.573 7.126-1.944 29.089-11.613 60.784 9.369 60.73 40.201-.033 17.838-9.542 32.791-25.73 40.46-6.386 3.024-7.394 3.201-18.259 3.201-10.388 0-12.054-.26-17.226-2.684-24.407-11.44-33.793-39.402-20.895-62.255 3.108-5.507 3.145-5.715 1.406-7.893-10.637-13.332-36.617-44.755-37.405-45.242-.56-.347-3.576.726-6.7 2.383-9.358 4.965-15.86 6.38-27.938 6.08l-10.714-.267-3.58 6.439c-1.97 3.541-11.545 21.187-21.28 39.211l-17.699 32.773 3.927 5.227c5.558 7.399 7.464 13.941 6.9 23.684-.39 6.749-.95 8.707-3.876 13.58-6.62 11.022-16.403 16.518-29.18 16.394-3.982-.04-8.94-.695-11.016-1.457zm206.615-35.495c16.506-5.098 27.166-23.39 23.659-40.594-2.39-11.724-9.035-20.164-19.878-25.248-4.836-2.267-6.945-2.635-15.12-2.635-8.365 0-10.176.332-15.164 2.781-21.746 10.68-27.052 38.51-10.72 56.229 9.523 10.332 23.18 13.805 37.223 9.467zM70.102 463.605c10.976-5.111 17.692-15.671 17.692-27.82 0-21.784-22.772-36.606-42.39-27.589-7.667 3.524-11.341 6.99-14.846 14.004-2.61 5.221-3.057 7.233-3.048 13.71.011 9.052 2.59 15.475 8.608 21.436 6.603 6.541 11.47 8.445 21.882 8.558 5.384.059 8.178-.472 12.102-2.3zm183.623-52.65c8.82-2.45 16.944-12.276 18.3-22.137 1.49-10.834-6.091-23.574-16.368-27.505-14.052-5.376-30.124 2.039-34.775 16.044-6.7 20.172 12.064 39.368 32.843 33.597zM320.5 691.621c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM56.372 689.25c-1.243-1.586-1.208-1.621.378-.378.962.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zM349 682c3.82-3.85 7.171-7 7.446-7 .275 0-2.625 3.15-6.446 7-3.82 3.85-7.171 7-7.446 7-.275 0 2.625-3.15 6.446-7zm-318.534.25L25 676.5l5.75 5.466c5.342 5.078 6.208 6.034 5.466 6.034-.156 0-2.744-2.587-5.75-5.75zM327.5 685.5c1.292-1.375 2.574-2.5 2.849-2.5.275 0-.557 1.125-1.849 2.5-1.292 1.375-2.574 2.5-2.849 2.5-.275 0 .557-1.125 1.849-2.5zm-277.076-1.25L48 681.5l2.75 2.424c2.57 2.266 3.209 3.076 2.424 3.076-.179 0-1.416-1.238-2.75-2.75zM340 674c3.82-3.85 7.171-7 7.446-7 .275 0-2.625 3.15-6.446 7-3.82 3.85-7.171 7-7.446 7-.275 0 2.625-3.15 6.446-7zm-301.031-.25L33 667.5l6.25 5.969c3.438 3.282 6.25 6.095 6.25 6.25 0 .739-.987-.163-6.531-5.969zm-19.545-3.5L17 667.5l2.75 2.424c2.57 2.266 3.209 3.076 2.424 3.076-.179 0-1.416-1.238-2.75-2.75zm341.076-.75c1.292-1.375 2.574-2.5 2.849-2.5.275 0-.557 1.125-1.849 2.5-1.292 1.375-2.574 2.5-2.849 2.5-.275 0 .557-1.125 1.849-2.5zm-346.128-5.25c-1.243-1.586-1.208-1.621.378-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm14.052-2L26 659.5l2.75 2.424c2.57 2.266 3.209 3.076 2.424 3.076-.179 0-1.416-1.238-2.75-2.75zm336.076 2.372c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm-13-3.122c1.292-1.375 2.574-2.5 2.849-2.5.275 0-.557 1.125-1.849 2.5-1.292 1.375-2.574 2.5-2.849 2.5-.275 0 .557-1.125 1.849-2.5zm-341.128-2.25c-1.243-1.586-1.208-1.621.378-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm357.128 1.372c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM23.372 656.25c-1.243-1.586-1.208-1.621.378-.378.962.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm332.128.372c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm15 0c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM19.372 651.25c-1.243-1.586-1.208-1.621.378-.378.962.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zm342.128-2.628c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM-8.5 630c-.589-1.1-.845-2-.57-2s.981.9 1.57 2c.589 1.1.845 2 .57 2s-.981-.9-1.57-2zm-6.376-12.539c-.965-2.514-.68-3.163.498-1.136.584 1.004.85 2.036.593 2.293-.257.258-.749-.263-1.091-1.157zm-15.545-47.044c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm428-1c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-416-1c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-13-3c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm430-1c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-418-1c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm431-3c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-444-1c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm432 0c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zm-420-1c.048-1.165.285-1.402.604-.605.289.722.253 1.585-.079 1.917-.332.332-.568-.258-.525-1.312zM412.658 554c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-446-1c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm434 0c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-421.963-1.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm435.037-6.5c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-448-1c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm436 0c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-424-2c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm437.157-18.5c.002-7.15.16-9.944.353-6.208.193 3.735.192 9.585-.003 13-.194 3.414-.352.358-.35-6.792zm-12.01-.5c0-6.325.162-8.912.36-5.75.198 3.163.198 8.338 0 11.5-.198 3.163-.36.575-.36-5.75zm-438.009 0c0-5.775.165-8.137.367-5.25.202 2.888.202 7.612 0 10.5s-.367.525-.367-5.25zm11.98 0c0-4.675.172-6.588.382-4.25.21 2.337.21 6.162 0 8.5-.21 2.337-.383.425-.383-4.25zm.882-19c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm-12-1c0-1.925.206-2.712.457-1.75.252.963.252 2.538 0 3.5-.251.963-.457.175-.457-1.75zm435.963-.5c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zm12-1c.02-1.65.244-2.204.498-1.231.254.973.237 2.323-.037 3-.274.677-.481-.119-.461-1.769zM-21.342 495c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-12-1c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm434 0c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm12-1c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-433.08-4.583c.049-1.165.286-1.402.605-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zM-32.341 487c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm431.92.417c.049-1.165.286-1.402.605-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm12.08-1.417c0-1.375.227-1.938.504-1.25.278.688.278 1.813 0 2.5-.277.688-.504.125-.504-1.25zm-431.08-3.583c.049-1.165.286-1.402.605-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-12-1c.049-1.165.286-1.402.605-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm430.001 0c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm12-1c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-429-3c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm428-2c.048-1.165.285-1.402.604-.604.289.721.253 1.584-.079 1.916-.332.332-.568-.258-.525-1.312zm-26.455-40.956c-.965-2.514-.68-3.163.498-1.136.584 1.004.85 2.036.593 2.293-.257.258-.749-.263-1.091-1.157zM-1.5 429.06c0-.518.445-1.216.989-1.552.566-.35.734.051.393.941-.665 1.732-1.382 2.05-1.382.611zm392.705-5.587c-1.476-3.01-2.47-5.472-2.211-5.472.673 0 5.717 10.122 5.268 10.571-.205.205-1.58-2.09-3.057-5.099zM377.5 423c-.589-1.1-.845-2-.57-2s.981.9 1.57 2c.589 1.1.845 2 .57 2s-.981-.9-1.57-2zm-16.128-25.75c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zm-3-4c-1.243-1.586-1.208-1.621.378-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zM5.5 393.622c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm15 0c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm349.872-4.372c-1.243-1.586-1.208-1.621.378-.378.963.755 1.75 1.543 1.75 1.75 0 .823-.821.294-2.128-1.372zM25 388c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm329.372.25c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zm13-3c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zm-355.872.372c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm20.958-5.872c4.144-4.415 5.042-5.21 5.042-4.458 0 .16-2.138 2.298-4.75 4.75L28 384.5zm315.48 1L345 377.5l3.25 2.937c3.03 2.738 3.71 3.563 2.937 3.563-.172 0-1.635-1.462-3.25-3.25zm14.967-1L361 377.5l2.25 1.905c2.114 1.79 2.705 2.595 1.905 2.595-.19 0-1.202-1.012-2.25-2.25zM17 379c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm339.446-6.75L353 368.5l3.75 3.446c2.063 1.896 3.75 3.583 3.75 3.75 0 .764-.846.044-4.054-3.446zM25 370c2.709-2.75 5.15-5 5.425-5 .275 0-1.716 2.25-4.425 5-2.709 2.75-5.15 5-5.425 5-.275 0 1.716-2.25 4.425-5zm21-4c2.148-2.2 4.13-4 4.406-4 .275 0-1.258 1.8-3.406 4s-4.13 4-4.406 4c-.275 0 1.258-1.8 3.406-4zm285.446-1.75L328 360.5l3.75 3.446c2.063 1.896 3.75 3.583 3.75 3.75 0 .764-.846.044-4.054-3.446zM36 359c2.709-2.75 5.15-5 5.425-5 .275 0-1.716 2.25-4.425 5-2.709 2.75-5.15 5-5.425 5-.275 0 1.716-2.25 4.425-5zm18 0c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm269.905-1.25L322 355.5l2.25 1.905c2.114 1.79 2.705 2.595 1.905 2.595-.19 0-1.202-1.012-2.25-2.25zm16.541-1.5L337 352.5l3.75 3.446c2.063 1.896 3.75 3.583 3.75 3.75 0 .764-.846.044-4.054-3.446zM58.5 355.622c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm260.872-1.372c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM62.5 352.622c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zM46 350c.995-1.1 2.035-2 2.31-2 .275 0-.315.9-1.31 2-.995 1.1-2.035 2-2.31 2-.275 0 .315-.9 1.31-2zm286.372-.75c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM50.5 346.622c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm276.872-1.372c-1.243-1.586-1.208-1.621.378-.378 1.666 1.307 2.195 2.128 1.372 2.128-.207 0-.995-.787-1.75-1.75zM54.5 343.622c0-.207.787-.995 1.75-1.75 1.586-1.243 1.621-1.208.378.378-1.307 1.666-2.128 2.195-2.128 1.372zm31-6.052c0-.275.9-.981 2-1.57 1.1-.589 2-.845 2-.57s-.9.981-2 1.57c-1.1.589-2 .845-2 .57zm60.813-23.253c.721-.289 1.584-.253 1.916.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm86 0c.721-.289 1.584-.253 1.916.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm-81-1c.721-.289 1.584-.253 1.916.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm76 0c.721-.289 1.584-.253 1.916.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm-70.063-.98c.688-.277 1.813-.277 2.5 0 .688.278.125.505-1.25.505s-1.938-.227-1.25-.504zm63 0c.688-.277 1.813-.277 2.5 0 .688.278.125.505-1.25.505s-1.938-.227-1.25-.504zm-55.481-1.03c.973-.254 2.323-.237 3 .037.677.274-.119.481-1.769.461-1.65-.02-2.204-.244-1.231-.498zm48 0c.973-.254 2.323-.237 3 .037.677.274-.119.481-1.769.461-1.65-.02-2.204-.244-1.231-.498zm-36.519-1.03c1.788-.222 4.713-.222 6.5 0 1.788.221.325.403-3.25.403s-5.037-.182-3.25-.403zm21 0c1.788-.222 4.713-.222 6.5 0 1.788.221.325.403-3.25.403s-5.037-.182-3.25-.403zm-56.938-6.96c.722-.289 1.585-.253 1.917.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm98 0c.722-.289 1.585-.253 1.917.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm-93-1c.722-.289 1.585-.253 1.917.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm5-1c.722-.289 1.585-.253 1.917.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm78 0c.722-.289 1.585-.253 1.917.079.332.332-.258.569-1.312.525-1.165-.048-1.402-.285-.604-.604zm-72.062-.98c.688-.277 1.813-.277 2.5 0 .688.278.125.505-1.25.505s-1.938-.227-1.25-.504zm66.063-.02c.721-.289 1.584-.253 1.916.079.332.332-.258.568-1.312.525-1.165-.048-1.402-.285-.604-.604zm-58.544-1.01c.973-.254 2.323-.237 3 .037.677.274-.119.482-1.769.461-1.65-.02-2.204-.244-1.231-.498zm50 0c.973-.254 2.323-.237 3 .037.677.274-.119.482-1.769.461-1.65-.02-2.204-.244-1.231-.498zm-39.019-1.023c1.512-.23 3.987-.23 5.5 0 1.512.229.275.416-2.75.416s-4.263-.187-2.75-.416zm25 0c1.512-.23 3.987-.23 5.5 0 1.512.229.275.416-2.75.416s-4.263-.187-2.75-.416z",
      fill: "#305678",
      transform: "matrix(2.21476 0 0 2.2146 78.912 -659.084)"
    }), /* @__PURE__ */ React47.createElement("path", {
      d: "M163.16 746.472C73.347 735.61-1.87 671.052-26.37 583.801c-5.966-21.247-7.56-33.803-7.597-59.801-.035-25.12 1.09-35.426 6.015-55.078 12.897-51.474 44.342-97.595 87.798-128.775 29.98-21.512 64.16-34.785 103.654-40.253 10.925-1.513 41.879-1.498 53.5.025 34.446 4.516 69.09 17.268 96.301 35.448 34.95 23.35 59.662 51.504 78.236 89.133 17.033 34.505 23.793 65.953 22.672 105.474-.748 26.4-3.937 44.089-12.276 68.104-16.815 48.428-52.635 91.845-98.135 118.948-41.172 24.526-92.487 35.27-140.637 29.446zM216 734.89c80.447-9.258 150.38-66.566 176.396-144.553 23.078-69.18 8.404-147.384-38.06-202.837-34.09-40.687-78.075-65.853-131.379-75.17-14.054-2.457-51.86-2.457-65.914 0C117.686 319.209 82.729 335.096 54 359.16-14.077 416.186-39.87 506.89-11.925 591 5.912 644.684 45 689.412 96 714.497c37.582 18.485 77.554 25.278 120 20.393z",
      fill: "#343434",
      transform: "matrix(2.21476 0 0 2.2146 78.912 -659.084)"
    }));
  }
  var Gnps_default = SvgGnps;

  // build/lib-react-tsx/logo/Lotuses.tsx
  var React48 = __toModule(require_react());
  function SvgLotuses({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React48.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 999.99 1000.066",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React48.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React48.createElement("g", {
      strokeWidth: 2.162
    }, /* @__PURE__ */ React48.createElement("path", {
      d: "M10.695 1146.42c0-1.958.73-2.982 1.624-2.276.894.707 1.13 2.309.525 3.56-1.546 3.2-2.15 2.84-2.15-1.284zm-207.497-81.24c1.38-.706 3.03-.619 3.665.194.635.812-.494 1.39-2.51 1.284-2.227-.118-2.68-.697-1.155-1.477zm613.767 0c1.38-.706 3.029-.619 3.664.194.636.812-.494 1.39-2.51 1.284-2.227-.118-2.68-.697-1.154-1.477zm-218.571-79.104c-31.862-3.016-52.581-11.17-52.581-20.692 0-1.6-1.81-5.003-4.02-7.562-2.211-2.558-5.28-7.766-6.82-11.574-7.417-18.34-43.054-18.518-48.488-.24-1.069 3.593-4.075 8.677-6.68 11.298-2.606 2.62-4.738 6.752-4.738 9.181 0 9.659-19.506 14.362-67.783 16.344-39.683 1.628-56.892-.801-88.395-12.48-76.424-28.331-153.95-112.793-232.691-253.503-8.015-14.323-14.573-27.648-14.573-29.61 0-5.405 56.875-36.571 98.949-54.222 11.669-4.895 11.618-4.624 6.291-33.576-8.074-43.886-20.139-154.97-17.71-163.065 1.255-4.182 17.812-2.66 65.434 6.012 47.841 8.713 82.154 18.832 120.459 35.525 18.403 8.02 35.232 15.172 37.397 15.893 3.389 1.128 4.715-1.163 9.53-16.458 7.566-24.03 28.762-73.341 45.606-106.095C63.24 321.357 105.442 252.67 110.44 252.67c7.319 0 64.606 98.299 91.691 157.332 11.177 24.359 29.064 70.947 33.701 87.778 1.39 5.043 3.454 9.169 4.587 9.169 1.134 0 10.64-4.808 21.127-10.683 38.175-21.39 84.038-38.071 135.04-49.115 34.537-7.479 82.868-14.55 86.677-12.68 3.911 1.919 3.738 13.926-.89 61.69-4.267 44.022-7.456 67.616-14.769 109.263-3.05 17.376-4.355 29.606-3.29 30.844.972 1.127 12.091 6.74 24.71 12.47 36.687 16.662 74.49 38.063 75.195 42.568 1.5 9.581-55.592 103.987-92.155 152.388-61.187 80.997-121.567 126.942-185.488 141.144-17.904 3.978-53.899 4.484-88.182 1.238zm81.016-3.764c66.787-12.669 128.533-58.525 191.788-142.435 39.135-51.914 94.843-145.288 89.349-149.76-5.28-4.297-45.194-25.242-70.566-37.03-14.197-6.595-26.91-13.36-28.253-15.035-1.975-2.464-1.53-7.9 2.343-28.565 10.155-54.197 22.62-166.552 18.965-170.952-2.174-2.617-57.522 5.524-91.525 13.462-52.573 12.274-89.967 26.131-129.658 48.05-12.856 7.1-23.261 11.535-24.157 10.298-.866-1.196-5.547-14.277-10.402-29.069-10.611-32.324-27.048-70.721-46.575-108.801-15.325-29.887-48.186-86.225-61.881-106.093l-8.245-11.96-8.094 11.432c-12.883 18.196-46.967 76.544-62.443 106.895-17.935 35.174-33.244 70.484-43.396 100.09-4.357 12.71-8.627 24.035-9.488 25.17-.86 1.134-11.987-3.008-24.726-9.206-27.4-13.331-70.998-28.167-108.22-36.827-34.483-8.023-89.369-16.039-91.578-13.375-3.52 4.246 7.36 106.174 17.16 160.752 5.39 30.014 5.03 32.874-4.533 35.888-8.675 2.735-70.101 32.592-85.43 41.524-7.917 4.614-14.396 9.877-14.396 11.695 0 1.818 6.13 14.259 13.62 27.646 99.355 177.554 194.804 262.257 297.088 263.638 20.317.274 67.043-3.92 68.806-6.176.366-.467-12.816-.954-29.29-1.083-30.472-.237-52.283-4.397-75.845-14.465-34.675-14.816-83.92-54.461-75.71-60.95.956-.756 2.306-6.651 3-13.102 2.083-19.37 3.046-19.902 15.691-8.681 21.605 19.172 41.543 32.283 83.788 55.099 28.373 15.324 86.033 29.48 89.645 22.008.788-1.632-1.134-3.154-4.984-3.949-42.185-8.706-65.83-16.886-89.07-30.812-43.906-26.31-83.592-74.964-107.964-132.358-10.277-24.2-13.968-38.718-9.844-38.718 1.492 0 2.714-2.2 2.714-4.89 0-2.704 1.274-4.89 2.852-4.89 1.568 0 3.926-2.2 5.24-4.89 1.313-2.689 3.103-4.89 3.976-4.89 2.594 0 6.088-5.583 8.799-14.058 1.4-4.378 3.94-7.948 5.655-7.95 2.901-.004 69.08-83.169 69.08-86.81 0-.912 1.68-4.39 3.735-7.73l3.736-6.072-.018 31.36c-.025 44.672 4.302 72.59 20.136 129.91C-9.434 802.862.19 827.84 15.323 856.581c20.515 38.964 55.264 87.23 59.188 82.212.562-.72-5.585-10.435-13.662-21.59-52.156-72.03-77.026-138.972-80.656-217.101-1.92-41.312 4.443-92.04 16.163-128.87l5.097-16.015 66.922.312c36.807.172 84.74.832 106.519 1.466 26.39.768 40.008.301 40.83-1.4 3.344-6.92 13.86 28.124 20.02 66.717 11.058 69.271 4.34 132.881-20.772 196.699-12.007 30.513-28.14 59.472-51.094 91.71-9.916 13.927-18.038 26.186-18.047 27.242-.075 7.966 37.59-41.43 54.019-70.842 21.524-38.537 40.158-91.887 53.638-153.572 5.663-25.91 5.882-28.73 5.985-77.017.058-27.567-.507-55.073-1.257-61.125-.981-7.919-.853-9.42.458-5.356 2.628 8.146 24.658 38.966 28.855 40.37 1.954.653 4.332 3.77 5.284 6.926.953 3.156 8.277 13.619 16.276 23.252 8 9.632 14.544 18.71 14.544 20.17 0 1.462.657 2.658 1.46 2.658.802 0 5.32 4.99 10.038 11.087 19.615 25.352 23.992 30.426 26.265 30.451 1.314.015 2.39 2.227 2.39 4.917 0 2.716 1.275 4.89 2.868 4.89 1.577 0 2.868 1.178 2.868 2.62 0 3.307 4.84 9.605 7.383 9.605 1.056 0 2.466 2.2 3.133 4.89.668 2.689 2.877 4.89 4.91 4.89 2.42 0 3.694 1.686 3.694 4.89 0 2.689 1.231 4.89 2.735 4.89 3.747 0 1.316 10.278-7.725 32.67-25.43 62.976-68.06 114.978-116.026 141.53-22.68 12.555-53.92 22.592-81.66 26.238-28.191 3.705-31.05 4.463-29.434 7.805 3.106 6.426 57.367-1.968 89.36-13.824 22.836-8.462 71.832-36.683 95.323-54.905 7.04-5.462 13.709-9.93 14.818-9.93 1.11 0 2.017 2.785 2.017 6.189s1.29 6.823 2.868 7.597c1.745.856 2.868 4.556 2.868 9.45 0 9.376-6.058 17.174-24.433 31.447-47.019 36.523-99.137 52.506-150.008 46.003-12.697-1.624-23.418-2.527-23.824-2.008-1.129 1.443 27.075 6.438 37.253 6.597 4.952.078 12.446 1.051 16.652 2.164 12.696 3.358 38.464 2.813 59.984-1.27zm46.135-24.261c0-1.363 20.67-13.518 22.704-13.352 1.588.13-8.387 6.989-16.356 11.246-3.491 1.866-6.348 2.813-6.348 2.106zm-425.908-9.693c-5.521-3.287-10.039-6.592-10.039-7.344 0-1.55 9.898 3.478 18.299 9.294 8.774 6.074 2.881 4.683-8.26-1.95zm-37.37-133.952c-7.66-13.282-10.91-19.925-10.91-22.305 0-2.178 7.019 9.439 14.215 23.527 4.785 9.37 2.264 8.437-3.306-1.222zm517.897 1.222c7.356-14.401 14.215-25.683 14.215-23.38 0 2.842-15.013 30.104-16.578 30.104-.589 0 .475-3.026 2.363-6.724zm-135.528-210.03c-3.47-27.58-3.165-36.922.493-15.113 2.562 15.279 4.845 41.158 3.63 41.158-.465 0-2.321-11.72-4.123-26.044zm-271.601 9.757c1.158-16.946 5.954-44.49 6.104-35.057.053 3.362-1.53 16.015-3.519 28.118-3.336 20.303-3.536 20.84-2.585 6.94z",
      fill: "#b75189",
      transform: "matrix(1.0523 0 0 1.05997 382.646 -266.677)"
    }), /* @__PURE__ */ React48.createElement("path", {
      d: "M219.426 983.581c-4.206-1.113-11.7-2.086-16.652-2.164-10.178-.159-38.382-5.154-37.253-6.597.406-.52 11.127.384 23.824 2.008 50.871 6.503 102.99-9.48 150.008-46.003 18.375-14.273 24.433-22.07 24.433-31.447 0-4.894-1.123-8.594-2.868-9.45-1.578-.774-2.868-4.193-2.868-7.597 0-3.404-.908-6.19-2.017-6.19-1.11 0-7.778 4.47-14.818 9.931-23.49 18.222-72.487 46.443-95.322 54.905-31.994 11.856-86.255 20.25-89.361 13.824-1.616-3.342 1.243-4.1 29.434-7.805 27.74-3.646 58.98-13.683 81.66-26.238 47.966-26.552 90.597-78.554 116.026-141.53 9.041-22.392 11.472-32.67 7.725-32.67-1.504 0-2.735-2.201-2.735-4.89 0-3.204-1.274-4.89-3.695-4.89-2.032 0-4.241-2.201-4.909-4.89-.667-2.69-2.077-4.89-3.133-4.89-2.543 0-7.383-6.298-7.383-9.606 0-1.44-1.29-2.62-2.868-2.62-1.593 0-2.868-2.173-2.868-4.89 0-2.689-1.076-4.901-2.39-4.916-2.273-.025-6.65-5.1-26.265-30.45-4.719-6.099-9.236-11.088-10.039-11.088-.802 0-1.46-1.196-1.46-2.657 0-1.462-6.544-10.539-14.543-20.171-8-9.633-15.323-20.096-16.276-23.252-.952-3.156-3.33-6.273-5.284-6.926-4.197-1.404-26.227-32.224-28.855-40.37-1.31-4.064-1.44-2.563-.458 5.356.75 6.052 1.315 33.558 1.257 61.125-.103 48.287-.322 51.107-5.985 77.017-13.48 61.685-32.114 115.035-53.638 153.572-16.428 29.413-54.094 78.808-54.02 70.842.01-1.056 8.132-13.315 18.048-27.242 65.323-91.745 88.446-184.542 71.866-288.41-6.16-38.592-16.676-73.635-20.02-66.716-.822 1.701-14.44 2.168-40.83 1.4-21.779-.634-69.712-1.294-106.52-1.466l-66.92-.312-5.098 16.016c-11.72 36.83-18.083 87.557-16.163 128.869 3.63 78.129 28.5 145.071 80.655 217.102 8.077 11.154 14.225 20.87 13.662 21.589-3.924 5.018-38.673-43.248-59.188-82.212C.19 827.84-9.435 802.862-19.716 765.646c-15.834-57.318-20.161-85.237-20.136-129.91l.018-31.359-3.736 6.073c-2.053 3.34-3.734 6.817-3.734 7.728 0 3.642-66.178 86.807-69.08 86.81-1.715.003-4.255 3.573-5.655 7.95-2.71 8.476-6.205 14.06-8.799 14.06-.873 0-2.663 2.2-3.976 4.89-1.314 2.689-3.672 4.89-5.24 4.89-1.578 0-2.852 2.185-2.852 4.89 0 2.689-1.222 4.89-2.714 4.89-6.824 0 10.03 44.58 29.428 77.837 13.849 23.745 40.939 56.982 58.733 72.061 31.968 27.09 62.182 40.32 118.717 51.989 3.85.795 5.772 2.317 4.984 3.949-3.612 7.472-61.272-6.684-89.645-22.008-42.245-22.816-62.183-35.927-83.788-55.1-12.645-11.22-13.608-10.687-15.692 8.682-.693 6.45-2.043 12.346-3 13.102-8.21 6.489 41.036 46.134 75.71 60.95 23.563 10.068 45.374 14.228 75.845 14.465 16.475.129 29.657.616 29.291 1.083-1.763 2.256-48.49 6.45-68.806 6.176-48.187-.65-95.15-20.04-140.177-57.877-35.891-30.159-66.478-64.787-98.701-111.74-30.188-43.988-71.83-114.522-71.83-121.667 0-1.818 6.479-7.08 14.397-11.695 15.328-8.932 76.754-38.79 85.43-41.524 9.561-3.014 9.922-5.874 4.533-35.888-9.8-54.578-20.681-156.506-17.16-160.752 2.208-2.664 57.094 5.352 91.577 13.375 37.222 8.66 80.82 23.496 108.22 36.827 12.739 6.198 23.866 10.34 24.726 9.206.861-1.135 5.13-12.46 9.488-25.17 10.152-29.606 25.461-64.916 43.396-100.09 15.476-30.351 49.56-88.699 62.443-106.895l8.094-11.433 8.245 11.96c13.695 19.87 46.556 76.207 61.881 106.094 19.527 38.08 35.964 76.477 46.575 108.801 4.855 14.792 9.536 27.873 10.402 29.069.896 1.237 11.301-3.198 24.157-10.298 39.691-21.919 77.085-35.776 129.658-48.05 34.003-7.938 89.351-16.079 91.525-13.462 3.655 4.4-8.81 116.755-18.965 170.952-3.872 20.664-4.318 26.1-2.343 28.565 1.342 1.674 14.056 8.44 28.253 15.036 25.372 11.787 65.287 32.732 70.566 37.029 5.494 4.472-50.214 97.846-89.35 149.76-50.759 67.334-98.342 108.425-150.432 129.906-33.864 13.966-77.99 19.974-101.339 13.798zm124.417-34.906c3.082-2.133 5.064-3.922 4.406-3.976-2.035-.166-22.704 11.989-22.704 13.352 0 1.48 10.075-3.683 18.298-9.376zm-435.946 1.633c-8.4-5.816-18.299-10.843-18.299-9.294 0 1.69 19.353 13.348 21.989 13.246 1.052-.041-.609-1.82-3.69-3.952zm-42.325-134.68c-7.196-14.088-14.214-25.705-14.214-23.527 0 3.637 14.577 30.251 16.57 30.251.592 0-.468-3.026-2.356-6.724zm521.053-7.121c4.265-7.615 7.754-14.932 7.754-16.26 0-2.302-6.859 8.98-14.215 23.381-6.286 12.309-1.41 6.933 6.461-7.121zm-138.17-190.958c-1.379-16.881-5.183-40.44-6.299-39.014-.998 1.277 5.446 53.108 6.604 53.108.466 0 .33-6.342-.304-14.094zm-269.316-37.25c-.15-9.433-4.946 18.11-6.104 35.056-.95 13.9-.75 13.364 2.585-6.94 1.989-12.102 3.572-24.755 3.519-28.117z",
      fill: "#a43271",
      transform: "matrix(1.0523 0 0 1.05997 382.646 -266.677)"
    }), /* @__PURE__ */ React48.createElement("path", {
      d: "M-20.535 1190.169c-21.868-6.04-38.708-13.413-58.318-25.531-19.722-12.189-27.465-18.284-25.81-20.32.525-.644 9.558.976 20.074 3.602 15.867 3.96 25.53 4.646 56.792 4.028 26.531-.525 38.364-1.632 40.013-3.745 2.862-3.666 3.837-3.127-55.696-30.776-24.713-11.478-55.676-24.848-68.806-29.712-89.701-33.231-159.275-32.396-227.19 2.726-11.89 6.15-22.138 10.515-22.774 9.702-3.902-4.989 31.09-37.895 57.776-54.334 11.568-7.125 29.637-15.999 40.153-19.718 18.536-6.557 20.58-6.763 66.921-6.754 44.915.01 49.303.417 72.658 6.765 32.624 8.866 75.571 24.595 120.459 44.115 19.98 8.69 54.2 23.561 76.043 33.049l39.713 17.25 39.637-17.304c124.82-54.49 171.778-72.073 218.162-81.687 15.822-3.28 27.987-3.863 60.23-2.888 51.432 1.556 62.435 4.723 101.588 29.24 20.686 12.955 54.493 44.002 54.493 50.045 0 4.47-1.214 4.07-23.23-7.654-77-41.002-163.677-34.964-278.873 19.426-13.145 6.207-30.916 14.503-39.491 18.437-44.536 20.43-43.692 22.79 8.512 23.802 31.306.607 40.74-.068 55.836-3.996 9.99-2.6 18.593-4.214 19.117-3.587 2.888 3.456-29.993 25.037-53.146 34.88-28.935 12.303-42.724 14.76-82.825 14.76-29.24 0-41.117-1.05-58.37-5.162l-21.66-5.162-21.54 5.185c-17.703 4.261-28.347 5.145-59.78 4.967-25.04-.142-42.53-1.402-50.668-3.65z",
      fill: "#32ae41",
      transform: "matrix(1.0523 0 0 1.05997 382.646 -266.677)"
    })));
  }
  var Lotuses_default = SvgLotuses;

  // build/lib-react-tsx/logo/MassBank.tsx
  var React49 = __toModule(require_react());
  function SvgMassBank({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React49.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React49.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React49.createElement("defs", null, /* @__PURE__ */ React49.createElement("linearGradient", {
      id: "a",
      x1: 59.71,
      y1: 67.751,
      x2: 66.819,
      y2: 27.311,
      gradientUnits: "userSpaceOnUse"
    }, /* @__PURE__ */ React49.createElement("stop", {
      offset: 0,
      stopColor: "#0254a9"
    }), /* @__PURE__ */ React49.createElement("stop", {
      offset: 1,
      stopColor: "#62c1ed"
    })), /* @__PURE__ */ React49.createElement("linearGradient", {
      id: "b",
      x1: 45.026,
      y1: 64.422,
      x2: 49.636,
      y2: 38.647,
      gradientUnits: "userSpaceOnUse"
    }, /* @__PURE__ */ React49.createElement("stop", {
      offset: 0,
      stopColor: "#93a742"
    }), /* @__PURE__ */ React49.createElement("stop", {
      offset: 1,
      stopColor: "#b9d389"
    })), /* @__PURE__ */ React49.createElement("linearGradient", {
      id: "c",
      x1: 34.392,
      y1: 61.654,
      x2: 37.139,
      y2: 45.916,
      gradientUnits: "userSpaceOnUse"
    }, /* @__PURE__ */ React49.createElement("stop", {
      offset: 0,
      stopColor: "#b7512e"
    }), /* @__PURE__ */ React49.createElement("stop", {
      offset: 1,
      stopColor: "#ec896c"
    }))), /* @__PURE__ */ React49.createElement("g", {
      strokeWidth: 0.5,
      strokeLinejoin: "round",
      stroke: "#fffffa",
      paintOrder: "fill markers stroke"
    }, /* @__PURE__ */ React49.createElement("path", {
      d: "M51.63 27.31l-6.54 37.16a34.96 34.96 0 0011.67 3.17c.99.07 1.98.07 2.96.04l7.1-40.37z",
      fill: "url(#a)",
      transform: "matrix(25.51054 0 2.524 24.45643 -779.953 -661.791)"
    }), /* @__PURE__ */ React49.createElement("path", {
      d: "M38.46 38.65l-4.05 23.06c1.82.06 3.64.33 5.4.76 1.8.45 3.54 1.23 5.28 2l4.54-25.82z",
      fill: "url(#b)",
      transform: "matrix(25.51054 0 2.524 24.45643 -779.953 -661.791)"
    }), /* @__PURE__ */ React49.createElement("path", {
      d: "M27.68 45.91l-3.2 18.22a17.38 17.38 0 019.88-2.42l2.77-15.8z",
      fill: "url(#c)",
      transform: "matrix(25.51054 0 2.524 24.45643 -779.953 -661.791)"
    })));
  }
  var MassBank_default = SvgMassBank;

  // build/lib-react-tsx/logo/Nmrium.tsx
  var React50 = __toModule(require_react());
  function SvgNmrium({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React50.createElement("svg", {
      "data-name": "Layer 1",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 120 120",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React50.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React50.createElement("path", {
      d: "M24.1 10.06v68.17A13.36 13.36 0 0028 87.7a13.39 13.39 0 0022.85-9.47V55.42h-.06A31.61 31.61 0 0160.1 33a31.64 31.64 0 0144.79 0 31.61 31.61 0 019.31 22.4v18.7H95.9V55.42A13.36 13.36 0 0092 46a13.44 13.44 0 00-18.93 0 13.26 13.26 0 00-3.82 8.19v24.04a31.7 31.7 0 01-54.12 22.42 31.61 31.61 0 01-9.31-22.4V10.06z",
      fill: "#ea580c",
      fillRule: "evenodd"
    }));
  }
  var Nmrium_default = SvgNmrium;

  // build/lib-react-tsx/logo/Npass.tsx
  var React51 = __toModule(require_react());
  function SvgNpass({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React51.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 999.973 1000.014",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React51.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React51.createElement("g", {
      strokeWidth: 0.64
    }, /* @__PURE__ */ React51.createElement("path", {
      d: "M-207.767 586.199c-.708-.782-1.791-2.213-2.406-3.18-.785-1.237-1.653-1.76-2.913-1.76-1.602 0-1.912-.364-2.879-3.36-.596-1.849-1.555-3.735-2.131-4.193-.936-.742-1.036-3.007-.932-21.12.064-11.158.45-28.064.859-37.568.452-10.507.564-23.445.286-33.01-.252-8.65-.259-16.355-.016-17.12.242-.764.964-1.39 1.603-1.39 1.19 0 1.927-1.657 1.943-4.373.005-.881.326-1.388.783-1.235.433.144 1.108 2.591 1.53 5.552.75 5.244 1.598 7.268 2.461 5.872.237-.383.99-.696 1.672-.696.89 0 1.243-.442 1.243-1.562 0-1.901 1.02-2.65 2.234-1.642.597.495 1.262.542 1.983.139.597-.334 1.616-.468 2.266-.298 1.271.332 1.516-.107 2.136-3.837.248-1.49.751-2.4 1.33-2.4.733 0 .933 1.051.94 4.96.006 2.728.265 5.362.576 5.854.68 1.074 2.615.479 2.615-.805 0-1.47 1.965-1.805 3.77-.643 2.22 1.429 9.783 9.277 13.176 13.674 3.683 4.772 6.774 9.918 13.458 22.4 3.11 5.808 7.073 12.864 8.807 15.68 3.952 6.418 13.457 20.114 13.978 20.14.514.027 1.258-27.375 1.598-58.817.15-13.88.413-25.376.583-25.546.706-.707 1.206.792 1.467 4.397.152 2.104.53 3.826.84 3.826.31 0 .563-.288.563-.64 0-.352.411-.64.914-.64.782 0 .863 2.963.554 20.32-.199 11.176-.186 20.16.027 19.965.214-.196.819-5.25 1.344-11.233.526-5.982 1.83-17.442 2.898-25.466 1.068-8.024 1.943-14.85 1.943-15.168 0-.318.455-.578 1.012-.578.866 0 .985.9.827 6.24l-.185 6.24 1.732.203c1.378.16 1.865-.145 2.377-1.492.658-1.731 2.14-1.893 2.357-.258.067.5.303 2.563.526 4.587.223 2.024.659 3.68.968 3.68.309 0 .648-1.653.754-3.673.151-2.898.428-3.72 1.312-3.887 1.052-.2 1.12 1.44 1.131 27.193.006 15.074.295 33.311.642 40.527.347 7.216 1.057 21.867 1.579 32.557.522 10.69.783 19.704.581 20.031-.612.99-2.173-.781-2.173-2.467 0-1.373-.249-1.538-2.051-1.362-1.87.184-2.138-.026-3.04-2.37-.544-1.414-1.501-3.286-2.127-4.16-1.41-1.968-2.06-1.175-2.644 3.226-.556 4.191-1.642 4.979-4.524 3.279l-2.246-1.326-.98 1.896c-1.298 2.508-4.23 2.672-5.312.296-.4-.88-1.245-1.6-1.875-1.6-.738 0-2.154-1.656-3.967-4.64-5.026-8.27-13.404-20.306-25.278-36.32-6.396-8.624-14.492-19.712-17.992-24.64-5.191-7.308-6.39-8.665-6.503-7.36-.076.88-.579 13.12-1.116 27.2-.538 14.08-1.143 27.472-1.345 29.76-.44 4.965-1.473 9.26-2.082 8.652-.241-.241-.49-8.982-.552-19.425-.062-10.443-.388-20.427-.724-22.187-.337-1.76-.646-2.729-.687-2.153-.041.576-.97 8.064-2.062 16.64-1.812 14.232-1.955 16.672-1.635 27.955.267 9.423.169 12.302-.414 12.112-.42-.137-1.029-1.596-1.352-3.241-.874-4.456-1.652-3.623-1.652 1.77 0 2.619-.246 4.914-.547 5.1-.301.186-1.127-.301-1.836-1.082zm-1.217-10.78c.22-1.1.4-5.673.4-10.16 0-8.502-.41-12.16-1.36-12.16-.308 0-.56 5.471-.56 12.16 0 11.28.554 14.986 1.52 10.16zm92.607-40.24c-.715-33.857-1.208-43.603-2.022-40-.62 2.747-.607 64.274.016 70.4.286 2.815.91 5.983 1.384 7.04l.863 1.92.227-3.2c.125-1.76-.086-18.033-.468-36.16zm-22.058 36.32c-.623-3.151-8.714-14.13-9.693-13.15-.431.431 8.838 15.222 9.544 15.226.308.002.375-.933.149-2.077zm10.201-3.425c-.225-1.196-.683-2.176-1.02-2.176-.868 0-.757 3.659.162 5.322.707 1.28.793 1.298 1.019.214.136-.65.063-2.163-.161-3.36zm4.398-8.107c.527-9.896-.29-29.753-.993-24.149-.727 5.8-1.428 30.346-.924 32.355.815 3.245 1.454.51 1.917-8.206zm-89.989 1.771c.022-2.33-.119-2.852-.52-1.92-.302.704-.535 3.008-.519 5.12.025 3.055.131 3.448.52 1.92.268-1.056.502-3.36.519-5.12zm75-8.334c0-1.55-4.925-7.753-5.61-7.068-.407.407 4.457 8.682 5.104 8.682.279 0 .507-.726.507-1.614zm9.995-29.159c.08-30.784-.602-29.598-1.502 2.613-.567 20.286-.406 26.425.684 26.062.549-.183.763-7.704.818-28.675zm-23.449 13.973c-.015-.839-2.422-4.443-13.297-19.907-3.625-5.155-6.875-9.373-7.222-9.373-.94 0 .106 1.749 8.184 13.681 10.913 16.121 12.378 17.974 12.335 15.6zm-60.849-11.802c.035-1.827-.224-3.5-.576-3.718-.414-.256-.608 2.158-.55 6.843.077 6.195.16 6.73.577 3.717.267-1.936.515-5.015.55-6.842zm13.113-7.893c1.794-22.658 1.788-22.459.739-25.96-.537-1.79-1.597-3.806-2.357-4.48l-1.382-1.225.416 4.094c.228 2.252.433 12.908.455 23.68.023 10.88.274 19.01.566 18.29.29-.712.992-7.192 1.563-14.4zm42.564.815c-4.257-7.04-7.613-11.422-7.613-9.939 0 1.043 7.643 12.34 8.348 12.34.397 0 .07-1.07-.735-2.4zm-37.119-8c-.057-4.02-.14-4.34-.63-2.4-.514 2.035-.206 7.04.432 7.04.145 0 .234-2.088.198-4.64zm70.377-24.457c.367-11.252.532-20.593.367-20.758-1.193-1.192-1.589 3.213-1.953 21.72-.282 14.352-.203 20.577.256 20.135.403-.388.926-8.691 1.33-21.097zm-66.1 11.917c-1.003-1.941-2.293-3.19-2.289-2.217.004.888 2.609 4.84 2.96 4.489.182-.183-.12-1.205-.67-2.272zm17.795-7.94c-3.245-5.532-10.985-15.554-11.566-14.974-.436.436 10.632 15.774 11.382 15.774.36 0 .442-.36.184-.8zm-28.017-9.28c1.208-1.591 1.086-2.984-.376-4.308-1.158-1.047-1.301-1.055-1.67-.094-.442 1.151.203 5.522.815 5.522.21 0 .763-.504 1.23-1.12zm-8.033-6.78c-.816-.815-.923 2.15-.196 5.42.446 2.009.493 1.918.676-1.291.108-1.898-.108-3.756-.48-4.128zm91.287-2.808c-.162-.622-.305-.268-.319.788-.013 1.056.12 1.566.296 1.132.175-.433.185-1.297.023-1.92z",
      fill: "#fefefe",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-118.81 559.498c0-1.584.125-2.232.277-1.44.153.792.153 2.088 0 2.88-.152.792-.277.144-.277-1.44zm-5.055-8.64c.001-3.872.107-5.373.234-3.336.128 2.037.127 5.205-.003 7.04-.128 1.835-.233.168-.231-3.704zm7.615.96c0-1.584.125-2.232.277-1.44.153.792.153 2.088 0 2.88-.152.792-.277.144-.277-1.44zm-9.673-1.92c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-93.417-5.44c.013-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm22.326.587c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm83.2-24.96c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-78.67-.907c0-.88.146-1.24.324-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm75.568-1.92c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-78.42-3.68c-.194-.968-.115-2.768.174-4 .468-1.988.534-1.791.592 1.76.07 4.287-.2 5.075-.766 2.24zm56.562-.533c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm19.89-14.347c0-.88.146-1.24.324-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-79.952-1.28c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm74.216-5.44c.014-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.295-1.132zm-1.243-7.68c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-7.1-9.28c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-5.06-9.28c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448z",
      fill: "#dff2ec",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-116.276 556.938c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-2.525-3.52c.005-1.76.129-2.404.276-1.43.147.972.143 2.412-.009 3.2-.152.786-.272-.01-.267-1.77zm-78.139.64c.013-1.056.157-1.41.32-.788.162.623.15 1.487-.024 1.92-.176.434-.309-.076-.295-1.132zm71.064-.32c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-93.487-12.8c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm26.83-18.933c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm75.52-1.28c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-101.76-1.28c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm104.96-1.92c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-12.028-13.387c.005-1.76.129-2.404.276-1.43.147.972.143 2.412-.009 3.2-.152.786-.272-.01-.268-1.77zm6.981-1.92c.014-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.295-1.132zm-7.016-13.12c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm1.256-.96c.014-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.295-1.132zm-8.394-10.293c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-5.12-8.32c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm24.431-5.067c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-81.957-3.2c.013-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm75.225-1.04c.434-.436.95-.633 1.148-.436.197.197-.159.555-.79.795-.912.347-.985.274-.358-.358z",
      fill: "#c0e6d9",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-125.81 560.778c0-2.64.114-3.72.252-2.4.138 1.32.138 3.48 0 4.8-.138 1.32-.251.24-.251-2.4zm9.534.64c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-77.538-7.413c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-3.126-3.787c.013-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm78.154-3.84c.004-2.112.123-2.899.266-1.748.142 1.15.139 2.878-.007 3.84-.146.961-.263.02-.26-2.092zm-100.554-8.96c.013-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm5.686-12.213c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm96.714-1.227c.013-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm3.177-9.28c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-5.06-8c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm1.17-3.253c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-8.156-7.307c0-2.64.113-3.72.25-2.4.139 1.32.139 3.48 0 4.8-.137 1.32-.25.24-.25-2.4zm1.166-11.52c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-8.32-3.84c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-5.17-8.693c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm24.43-2.507c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-81.92-3.84c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448z",
      fill: "#a1dac7",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-184.005 472.298l-1.22-1.44 1.44 1.22c.793.67 1.44 1.318 1.44 1.44 0 .512-.514.134-1.66-1.22z",
      fill: "#92d4be",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-205.283 585.098c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm89.007-19.2c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-81.378-1.013c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-11.52-3.84c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm90.423-24.267c.002-3.52.11-4.878.24-3.018.129 1.86.128 4.74-.004 6.4-.13 1.66-.237.138-.235-3.382zm-20.565.96c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-80.024-3.52c.013-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm17.156-5.44c0-1.877.144-3.269.32-3.093.495.496.583 5.603.105 6.082-.234.233-.425-1.111-.425-2.989zm85.268-.64c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-1.835-12.48c.002-3.52.11-4.878.24-3.018.129 1.86.128 4.74-.004 6.4-.131 1.66-.237.138-.236-3.382zm4.937-3.893c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-3.84-6.4c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-15.286-21.067c.014-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.295-1.132zm19.237-9.6c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-104.916-3.52c0-2.288.116-3.224.258-2.08.142 1.144.142 3.016 0 4.16-.142 1.144-.258.208-.258-2.08zm94.036-16.96c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448z",
      fill: "#83cfb5",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-143.386 547.498c-.796-1.015-.773-1.037.242-.241.616.483 1.12.987 1.12 1.12 0 .526-.526.187-1.362-.879z",
      fill: "#73c9ac",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-205.223 580.938c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-5.107-9.28c0-1.584.125-2.232.277-1.44.153.792.153 2.088 0 2.88-.152.792-.277.144-.277-1.44zm94.054-1.92c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-92.743-3.2c0-2.288.116-3.224.258-2.08.142 1.144.142 3.016 0 4.16-.142 1.144-.258.208-.258-2.08zm15.845-25.333c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm53.92-10.187c.003-2.464.118-3.393.257-2.065.138 1.327.136 3.343-.005 4.48-.142 1.136-.255.05-.252-2.415zm22.351 1.92c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-102.51-1.973c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm89.01-.907c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm11.624-3.84c0-2.288.116-3.224.258-2.08.142 1.144.142 3.016 0 4.16-.142 1.144-.258.208-.258-2.08zm-83.207-4.8c.004-2.112.123-2.899.266-1.748.142 1.15.139 2.878-.007 3.84-.146.961-.263.02-.26-2.092zm88.27-13.12c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm-11.618-6.133c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-7.582-13.707c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12zm19.213-8.64c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-105.02-2.88c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm94.03-19.573c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84z",
      fill: "#64c3a3",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-210.277 563.018c-.002-3.168.106-4.544.24-3.059.135 1.485.136 4.077.004 5.76-.132 1.683-.242.467-.244-2.7zm93.337-25.6c.013-1.056.157-1.41.32-.788.162.623.15 1.487-.024 1.92-.176.434-.309-.076-.295-1.132zm-13.463-4.16c0-.88.145-1.24.323-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-89.01-4.853c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm80.132-5.067c.005-1.76.129-2.404.276-1.43.147.972.143 2.412-.009 3.2-.152.786-.272-.01-.267-1.77zm-62.661-13.12c0-4.048.104-5.704.23-3.68.128 2.024.128 5.336 0 7.36-.126 2.024-.23.368-.23-3.68zm72.941-1.28c0-2.992.11-4.216.245-2.72s.135 3.944 0 5.44c-.134 1.496-.245.272-.245-2.72zm-89.773 2.187c.031-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm101.12-1.28c.031-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm3.964-6.667c0-1.584.125-2.232.277-1.44.153.792.153 2.088 0 2.88-.152.792-.277.144-.277-1.44zm-11.644-3.573c.031-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-7.73-4.107c0-2.581.191-4.502.425-4.268.455.455.326 8.21-.144 8.68-.155.155-.281-1.83-.281-4.412zm19.361-10.56c.007-1.408.138-1.908.291-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm-105.07-5.813c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm80.64-.64c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm12.8-4.48c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-10.24-14.08c.03-.746.182-.897.386-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84z",
      fill: "#45b791",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-110.54 580.938c.014-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm-91.453-12.48c0-1.936.12-2.728.267-1.76.147.968.147 2.552 0 3.52s-.267.176-.267-1.76zm-17.892-4.8c.002-2.816.115-3.888.25-2.383.135 1.506.133 3.81-.004 5.12s-.248.08-.246-2.737zm26.711-17.973c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm64.141-2.827c0-1.936.12-2.728.267-1.76.147.968.147 2.552 0 3.52s-.267.176-.267-1.76zm12.093-1.6c.013-1.056.157-1.41.32-.788.161.623.15 1.487-.024 1.92-.176.434-.309-.076-.296-1.132zm-80.714-.693c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm67.25-4.107c0-.88.146-1.24.324-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm1.058-12.64c-.112-3.784-.005-7.456.238-8.16.244-.704.46 2.392.483 6.88.022 4.488-.085 8.16-.238 8.16-.153 0-.37-3.096-.483-6.88zm-90.068 2.027c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm5.12 0c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm74.93-7.307c0-.88.146-1.24.324-.8.177.44.177 1.16 0 1.6-.178.44-.323.08-.323-.8zm-52.36-9.28c.001-2.816.114-3.888.25-2.383.134 1.506.132 3.81-.005 5.12s-.248.08-.246-2.737zm-10.262-10.24c.004-2.112.123-2.899.266-1.748.142 1.15.139 2.878-.007 3.84-.146.961-.263.02-.26-2.092zm88.355-5.12c.002-3.52.11-4.878.24-3.018.129 1.86.128 4.74-.004 6.4-.13 1.66-.237.138-.235-3.382zm-11.703 3.787c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm-92.652-5.067c.004-2.112.123-2.899.266-1.748.142 1.15.139 2.878-.007 3.84-.146.961-.263.02-.26-2.092zm79.852-11.573c.03-.746.183-.897.387-.387.185.462.162 1.014-.05 1.227-.213.213-.365-.165-.337-.84zm12.76-3.909c-.005-.771.278-1.58.63-1.798.815-.503.815.98 0 2.24-.505.78-.623.698-.63-.442zm8.458-11.718c0-1.232.132-1.736.293-1.12.16.616.16 1.624 0 2.24-.161.616-.293.112-.293-1.12z",
      fill: "#26ab7e",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    }), /* @__PURE__ */ React51.createElement("path", {
      d: "M-222.664 520.458v-69.76h47.68c26.224 0 47.68.237 47.68.527 0 .29-.745 6.121-1.655 12.96-.91 6.838-2.053 15.745-2.54 19.793l-.888 7.36.299-14.56.298-14.56h-1.597c-1.34 0-1.597-.302-1.597-1.878 0-2.742-1.09-5.162-2.325-5.162-.991 0-1.047 1.468-.717 18.72.198 10.296.111 21.312-.192 24.48-.303 3.168-.753 13.453-1 22.856-.246 9.402-.673 16.956-.95 16.785-1.508-.932-15.997-23.864-20.8-32.92-9.868-18.612-13.682-24.162-22.571-32.85-6.145-6.005-8.048-6.775-9.358-3.788-1.174 2.675-1.926 1.045-2.113-4.576-.178-5.354-.245-5.58-1.6-5.388-1.088.155-1.576.866-2.117 3.081l-.702 2.88h-3.778c-3.61 0-3.786.076-3.973 1.695-.215 1.855-2.602 2.994-3.438 1.641-.264-.427-.668-2.685-.898-5.02-.23-2.334-.644-4.608-.919-5.053-.926-1.499-2.461-.132-2.669 2.376-.151 1.836-.514 2.49-1.48 2.67-.704.132-1.51.566-1.79.965-.281.4-.328 8.79-.104 18.646.228 10.031.105 24.823-.28 33.6-.377 8.624-.763 25.132-.856 36.685-.155 19.124-.074 21.058.907 21.607.592.332 1.536 2.184 2.097 4.116.963 3.31 1.14 3.513 3.084 3.533 1.747.017 2.327.456 3.797 2.88 1.323 2.18 2.122 2.86 3.36 2.86 1.542 0 1.629-.187 1.7-3.68.057-2.77.177-3.205.485-1.76.28 1.32.842 1.981 1.798 2.118l1.39.198-.341-12.998c-.306-11.609-.164-14.327 1.325-25.422.917-6.833 1.712-13.457 1.766-14.72.054-1.263.342 1.447.64 6.023.297 4.576.366 14.032.153 21.014l-.387 12.693 1.484-.213c1.105-.16 1.613-.786 1.987-2.454.276-1.232.938-12.176 1.47-24.32.533-12.144 1.181-25.762 1.442-30.262l.473-8.182 6.03 8.502c3.317 4.676 11.371 15.702 17.898 24.502 11.15 15.036 21.153 29.49 25.216 36.44.981 1.68 2.336 3.197 3.01 3.373.674.177 1.678 1.01 2.23 1.854 1.435 2.19 5.087 2.158 6.246-.052.79-1.508.92-1.54 2.653-.64 3.476 1.803 4.133 1.285 5.219-4.117.788-3.923 1.228-3.777 3.683 1.222 1.19 2.425 1.687 2.862 3.137 2.765 1.426-.095 1.755.179 1.92 1.6.154 1.34.587 1.76 1.974 1.92l1.776.203-.361-5.964c-1.778-29.37-2.871-62.698-2.871-87.516v-28.208h-1.588c-1.129 0-1.677.416-1.895 1.44-.17.792-.43 2.016-.578 2.72-.149.704-.304.08-.345-1.387-.04-1.468-.25-3.124-.463-3.68-.593-1.546-2.517-1.207-3.335.587-.824 1.81-3.749 2.37-3.065.588.214-.557.389-3.293.389-6.08v-5.068h17.28v139.52h-115.84zm13.059 44.48c0-5.632.098-7.85.217-4.93.12 2.921.119 7.53 0 10.24-.12 2.712-.218.322-.217-5.31zm92.187 5.28c-.277-.792-.563-17.424-.636-36.96-.085-22.713.043-31.943.354-25.6.646 13.182 1.53 64 1.113 64-.18 0-.554-.648-.831-1.44zm-24.815-3.231c-1.755-2.894-1.956-3.449-.745-2.049 1.799 2.08 3.748 5.419 3.38 5.788-.127.126-1.312-1.557-2.635-3.74zm17.032-8.769c-.014-5.808.183-12.576.436-15.04.357-3.481.463-2.198.476 5.76.01 5.632-.186 12.4-.435 15.04-.358 3.792-.458 2.582-.477-5.76zm-16.053-7.083c-.797-1.384-1.32-2.517-1.162-2.517.441 0 3.13 4.515 2.854 4.791-.134.134-.895-.89-1.692-2.274zm11.242-1.518c-.248-1.387-.25-9.019-.002-16.96l.449-14.439.429 8.48c.5 9.873-.153 26.956-.876 22.919zm-84.17-20.519c.006-1.408.137-1.908.29-1.112.153.796.148 1.948-.013 2.56-.16.612-.285-.04-.278-1.448zm12.56-21.12c-.178-10.208-.255-18.658-.17-18.78.084-.12.679.744 1.32 1.92.989 1.812 1.139 3.368.978 10.14-.104 4.4-.552 11.888-.996 16.64l-.806 8.64zm76.492-20.8c0-5.104.1-7.192.22-4.64.122 2.552.122 6.728 0 9.28-.12 2.552-.22.464-.22-4.64zm-77.054-8.137c0-1.6.081-1.656 1.035-.701.57.57.841 1.351.603 1.737-.786 1.27-1.638.732-1.638-1.036zm77.638-8.183c.004-2.112.123-2.899.266-1.748.142 1.15.139 2.878-.007 3.84-.146.961-.263.02-.26-2.092z",
      fill: "#079f6c",
      transform: "matrix(8.58493 0 0 7.1348 1914.306 -3213.36)"
    })));
  }
  var Npass_default = SvgNpass;

  // build/lib-react-tsx/logo/Npatlases.tsx
  var React52 = __toModule(require_react());
  function SvgNpatlases({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React52.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1002.151 1000.083",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React52.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React52.createElement("g", {
      strokeWidth: 0.563
    }, /* @__PURE__ */ React52.createElement("path", {
      d: "M71.122 1206.659c-.46-.262-4.018-.642-7.908-.845-37.452-1.95-80.044-9.91-114.5-21.398-4.699-1.566-9.335-2.818-10.303-2.78-2.135.082-10.954-3.67-23.572-10.028-26.927-13.569-47.914-26.246-69.143-41.765-20.15-14.73-27.241-21.414-30.782-29.011-7.563-16.227 2.474-33.128 29.176-49.127 2.68-1.605 4.863-2.731 4.852-2.502-.01.23-2.328 1.776-5.15 3.436-24.113 14.19-34.373 29.972-29.409 45.238 2.4 7.383 8.117 13.68 22.307 24.578 18.646 14.32 40.722 28.642 61.27 39.749 19.97 10.795 34.707 17.616 38.06 17.616.685 0 4.24 1.039 7.9 2.308 35.684 12.378 80.174 20.993 119.34 23.109 4.647.25 7.674.67 8.288 1.146 1.085.844.844 1-.426.276zm173.44-15.402c.613-.292 6.126-1.599 12.25-2.905 21.213-4.522 49.025-11.98 69.321-18.587 7.872-2.562 12.044-4.36 21.715-9.358 35.156-18.17 75.648-48.55 107.376-80.56 16.151-16.297 22.584-25.194 26.443-36.578 4.65-13.711 3.909-25.174-2.636-40.794-1.41-3.366-2.557-6.443-2.549-6.838.033-1.59 6.265 14.402 7.268 18.652 3.864 16.366.47 30.782-11.068 47.012-4.347 6.114-27.493 29.541-39.923 40.407-28.115 24.576-59.019 46.106-86.032 59.936-10.454 5.351-13.467 6.602-23.664 9.825-20.644 6.523-38.656 11.34-61.796 16.528-15.914 3.568-18.344 4.042-16.704 3.26zM68.06 1167.466c-54.136-.748-107.218-6.498-152.005-16.464-10.48-2.333-11.414-2.68-11.414-4.237 0-1.748 2.626-6.742 5.224-9.934 2.882-3.541 12.584-11.488 18.44-15.102 28.406-17.535 88.929-31.935 161.748-38.485 31.215-2.807 83.436-3.999 114.427-2.61 50.237 2.251 94.693 8.477 126.772 17.755 4.238 1.226 8.036 2.229 8.442 2.229 2.13 0 26.022-18.917 39.449-31.235 4.503-4.132 8.453-7.512 8.779-7.512.853 0 8.207 11.546 10.343 16.24 3.618 7.95 4.427 11.698 4.427 20.512 0 5.99-.243 8.78-.974 11.2l-.975 3.222-7.934 3.445c-30.295 13.154-63.113 22.692-111.776 32.487-22.008 4.43-24.07 4.765-54.566 8.887-51.429 6.95-106.908 10.313-158.407 9.602zm56.236-1.359c38.306-1.447 74.64-4.82 116.648-10.825 35.951-5.14 78.121-14.357 109.41-23.913 15.318-4.678 35.189-12.05 46.604-17.29 2.99-1.372 3.227-1.631 4.096-4.468 1.334-4.36 1.655-14.047.63-18.99-1.48-7.129-4.337-13.84-9.024-21.195-2.444-3.836-4.662-6.977-4.929-6.98-.266-.01-2.897 2.247-5.846 4.999-16.637 15.524-39.494 33.742-42.335 33.742-.633 0-4.617-1.002-8.855-2.228-31.516-9.115-75.14-15.302-124.83-17.703-15.261-.737-59.958-.74-76.28-.01-66.922 3.015-126.667 12.61-170.935 27.45-18.64 6.25-29.497 11.984-41.58 21.96-5.448 4.497-8.885 8.572-10.718 12.707-1.8 4.06-1.672 4.298 2.882 5.373 62.226 14.69 133.53 20.447 215.062 17.367zm290.228-143.645c-2.68-.941-4.872-1.906-4.872-2.144 0-.238 2.355.407 5.234 1.434 4.124 1.47 5.403 1.723 6.028 1.192 1.493-1.268 5.999-7.064 5.999-7.715 0-.359.259-.651.576-.651.85 0-.045 1.435-3.643 5.84-1.728 2.115-3.437 3.826-3.796 3.801-.36-.024-2.847-.815-5.526-1.757zM20.454 813.054c-31.113-.683-70.822-2.988-101.893-5.914-15.742-1.482-41.31-4.393-44.822-5.102-1.531-.31-10.176-1.609-19.21-2.887-23.123-3.272-54.917-8.82-51.678-9.018.515-.031 2.665.315 4.777.77 2.112.454 4.32.818 4.908.807.588-.011 2.447.146 4.132.348l3.062.369 4.52-7.016c6.257-9.713 12.536-17.614 21.362-26.887 11.507-12.088 18.343-17.137 34.808-25.715 21.034-10.956 48.92-21.556 82.366-31.307l16.107-4.697-7.755-.395c-9.773-.5-35.358-2.514-40.885-3.22-2.296-.293-9.813-1.182-16.703-1.975-57.987-6.676-107.943-16.189-152.005-28.947-12.6-3.648-36.09-13.996-50.748-22.357-7.436-4.241-8.84-5.265-8.495-6.188.738-1.968 29.722-15.13 47.55-21.593 45.584-16.524 117.27-33.29 183.185-42.84 3.522-.51 9.41-1.416 13.085-2.013 18.743-3.041 60.616-7.545 95.211-10.24 8.269-.644 17.79-1.429 21.159-1.744 3.368-.315 11.079-.914 17.134-1.331 6.055-.418 11.085-.86 11.177-.984.092-.123 1.746-4.326 3.675-9.34 1.93-5.015 3.665-9.288 3.856-9.497.192-.208 3.284-.508 6.871-.666 6.687-.293 7.966-.578 7.33-1.63-.23-.381-1.569-.475-3.628-.255-1.795.192-3.264.122-3.264-.155 0-1.547 12.256-11.43 19.917-16.061 9.182-5.55 28.76-14.973 41.523-19.986 34.043-13.37 75.106-13.253 112.406.319 7.157 2.603 16.485 6.659 18.728 8.14 1.527 1.01 1.96.953 11.212-1.446 17.218-4.464 33.725-9.376 44.544-13.255 11.126-3.99 31.096-12.031 39.182-15.779l3.27-1.515 1.955 2.274c11.69 13.596 21.938 29.33 29.934 45.959 7.963 16.556 12.12 30.116 14.9 48.598l.68 4.533 8.91 2.074c4.9 1.141 12.416 2.893 16.703 3.893 9.47 2.21 32.547 8.227 37.723 9.836 2.266.704 3.758 1.48 3.758 1.952 0 1.844-19.087 15.612-32.294 23.295-13.108 7.626-34.35 17.872-48.72 23.5-5.834 2.286-22.652 8.32-36.19 12.987-5.207 1.795-9.524 3.317-9.596 3.382-.07.065-.519 3.161-.995 6.88-2.053 16.027-6.625 31.345-13.945 46.725-4.551 9.563-8.415 16.192-15.404 26.427-14.41 21.104-24.008 33.081-32.826 40.966-6.301 5.634-14.816 12.066-15.997 12.083-.434.006-.658.144-.5.307.266.272 5.572-.643 21.81-3.761 3.326-.639 6.186-1.018 6.358-.842.17.175.171.319 0 .319s-9.045 1.78-19.72 3.957c-36.571 7.456-78.1 13.914-119.074 18.516-.919.104-3.8.464-6.403.8-11.511 1.492-45.132 4.08-67.65 5.208-28.763 1.441-69.568 1.989-99.388 1.334zM6.674 697.936c-.69-.136-1.817-.136-2.506 0-.69.136-.126.247 1.252.247 1.378 0 1.942-.111 1.253-.247zm-16.137-.541c-.377-.156-1.129-.166-1.67-.021-.542.144-.234.272.685.283.918.012 1.362-.106.985-.262zm121.51-1.564c67.543-3.731 118.7-9.678 179.008-20.81 15.68-2.894 47.336-9.967 62.49-13.962 60.595-15.975 104.44-33.593 136.486-54.844 6.544-4.34 19.844-14.405 19.844-15.018 0-.488.843-.22-12.278-3.899-44.626-12.51-104.915-22.733-168.402-28.557-14.195-1.302-39.763-3.437-45.378-3.79-7.38-.462-14.925-.821-20.88-.993a2077.71 2077.71 0 01-15.59-.538c-113.433-4.341-229.521 2.565-333.52 19.841-87.562 14.546-157.097 33.702-200.503 55.236-5.238 2.598-9.69 5.002-9.896 5.341-1.042 1.726 35.815 20.189 50.17 25.13 11.745 4.043 42.04 11.618 66.41 16.605 58.53 11.978 112.537 18.358 178.174 21.049 18.708.767 95.291.235 113.864-.791zM99.667 552.665c-.377-.156-1.128-.165-1.67-.02-.542.144-.234.272.685.283.919.012 1.362-.106.985-.263zm-334.89 229.703c-.162-.165-4.651-1.56-9.976-3.1-32.706-9.456-58.274-21.235-75.922-34.976-17.213-13.403-27.892-30.709-30.947-50.155-.696-4.428-.716-4.466-1.519-2.898-2.39 4.668-1.745-4.648 2.382-34.417 1.804-13.01 7.211-39.944 10.655-53.07 2.613-9.963 7.464-24.74 8.505-25.91.566-.636 2.448-3.52 4.181-6.41 9.383-15.64 20.035-26.659 36.791-38.058 4.287-2.917 10.426-6.784 13.642-8.594 16.615-9.352 40.408-19.245 62.917-26.16 3.828-1.176 7.156-2.318 7.395-2.538.24-.22-2.517-1.872-6.125-3.67-8.396-4.187-18.132-10.812-23.371-15.905-15.559-15.125-18.79-31.66-10.135-51.862a2724.03 2724.03 0 002.567-6.003c.263-.624.098-.652-.833-.142-2.972 1.627-2.084.341 8.018-11.615 8.817-10.434 29.77-32.007 40.19-41.378 7.627-6.857 24.217-20.575 28.414-23.493 1.42-.987 3.964-2.438 5.653-3.224 1.69-.785 6.425-3.32 10.524-5.633 27.33-15.42 58.446-27.441 94.44-36.484 19.747-4.961 22.55-5.59 22.55-5.054 0 .621.625.45-13.084 3.592-42.058 9.64-82.316 25.11-110.524 42.47-4.134 2.544-8.28 4.954-9.215 5.357-2.087.899-19.004 14.674-28.143 22.917-15.885 14.326-46.872 47.553-45.88 49.196.202.335-.751 2.843-2.119 5.573-6.992 13.962-8.257 27.364-3.651 38.687 4.915 12.083 16.959 23.226 34.575 31.989 7.76 3.86 8.894 4.964 5.992 5.84-10.381 3.13-31.9 10.65-39.776 13.899-18.206 7.51-30.336 13.874-43.464 22.805-17.062 11.607-30.032 25.205-37.753 39.58-1.255 2.335-2.732 4.706-3.283 5.27-1.022 1.046-5.333 14.065-7.887 23.818-2.477 9.459-8.627 38.743-9.805 46.69-1.55 10.457-4.468 34.233-4.468 36.405 0 1.298.211 1.686.794 1.457.595-.233.885.38 1.153 2.44 1.434 11.039 2.988 16.613 6.99 25.085 4.552 9.632 12.722 19.72 22.311 27.547 16.385 13.374 45.352 26.996 75.656 35.577 9.045 2.562 14.477 4.294 14.477 4.617 0 .348-2.546.293-2.892-.062zM451.16 748.54c.29-.28 5.039-2.24 10.551-4.354 24.04-9.222 44.311-18.592 54.317-25.108 32.291-21.03 53.004-41.692 62.594-62.442 5.871-12.704 8.176-28.016 6.4-42.513-1.266-10.332-16.35-57.522-23.804-74.474-8.91-20.263-18.345-39.734-23.467-48.433-5.067-8.606-15.21-20.622-24.258-28.736-6.434-5.77-15.913-13.29-16.28-12.914-.137.14 2.376 5.34 5.585 11.551 8.176 15.827 17.533 37.18 16.815 38.37-.518.856-1.004.732-6.543-1.673-16.03-6.959-55.377-18.66-77.528-23.054-7.29-1.447-20.247-3.816-25.613-4.683-7.638-1.235-8.073-1.365-8.073-2.41 0-.55 1.183-1.632 2.795-2.558 1.536-.883 5.858-3.674 9.604-6.2 19.739-13.317 31.41-26.843 36.037-41.767 1.717-5.538 2.15-16.002.915-22.113-2.222-10.996-8.206-21.803-18.932-34.19-4.43-5.119-9.738-9.661-24.851-21.271-22.064-16.949-44.211-31.222-65.717-42.352-6.68-3.457-12.468-6.285-12.863-6.285-.394 0 2.286 2.02 5.956 4.489 6.639 4.465 8.499 6.053 7.86 6.708-.185.189-3.792-.573-8.015-1.693-27.54-7.303-77.997-15.54-113.145-18.469-2.885-.24-5.332-.708-5.44-1.04-.22-.682 1.153-.566 24.326 2.06 33.201 3.762 67.673 9.707 90.868 15.67 4.195 1.08 8.078 1.962 8.629 1.962 1.317 0-2.6-2.849-11.941-8.684-6.21-3.88-8.372-5.561-7.149-5.561 1.68 0 27.101 12.895 37.645 19.095 9.871 5.804 25.248 15.741 34.198 22.1 12.312 8.746 32.006 24.378 36.756 29.175 11.078 11.185 18.721 23.57 22.33 36.182.805 2.813 1.058 5.487 1.052 11.111-.01 8.66-.782 12.164-4.418 20.055-3.062 6.646-6.55 11.67-12.518 18.03-7.504 7.997-13.759 12.868-30.275 23.577-1.176.763-2.01 1.518-1.854 1.678.156.16 4.877 1.154 10.49 2.207 29.36 5.512 50.494 10.71 74.506 18.326 7.92 2.512 21.886 7.648 26.265 9.66 1.803.828 3.406 1.376 3.56 1.217.795-.813-10.1-25.048-18.426-40.982-2.95-5.646-5.216-10.417-5.035-10.602.89-.911 16.283 11.633 24.292 19.797 13.162 13.418 18.625 21.451 28.482 41.88 13.897 28.804 18.023 38.91 26.633 65.243 11.273 34.473 13.09 43.184 11.804 56.606-.644 6.732-2.672 15.93-4.638 21.04-8.558 22.244-27.775 42.678-62.024 65.953-10.87 7.386-28.61 15.88-54.01 25.858-6.124 2.407-11.57 4.622-12.102 4.923-1.238.702-3.065.732-2.346.038zm85.495-192.51c-2.63-10.321-2.714-10.968-1.423-10.968 1.263 0 6.379 5.104 6.379 6.365 0 1.68-2.708 6.74-3.607 6.74-.462 0-1.037-.91-1.35-2.136zm3.425-2.181l1.239-2.609-2.67-2.581c-1.469-1.42-2.813-2.436-2.988-2.257-.292.3.084 2.223 1.547 7.92.301 1.174.792 2.136 1.09 2.136.3 0 1.1-1.174 1.782-2.609zM29.641 436.777c-98.29-4.299-170.519-21.692-197.928-47.662-4.88-4.623-8.73-10.31-7.69-11.357.944-.952 15.05-5.69 29.671-9.968 58.957-17.248 138.906-30 219.098-34.946 61.3-3.782 132.23-3.243 187.083 1.42 14.648 1.245 16.155 1.403 34.8 3.658 22.563 2.728 51.76 7.318 66.258 10.414 2.927.626 3.103 1.972.828 6.339-9.792 18.8-36.576 36.324-79.745 52.172-3.9 1.431-7.289 2.602-7.532 2.602-.243 0-3.692 1.043-7.665 2.316-10.207 3.273-28.675 8.006-43.023 11.026-32.314 6.8-61.82 10.692-102.284 13.49-11.333.784-77.167 1.14-91.871.496zm80.456-1.116c16.15-.714 27.044-1.479 41.203-2.893 6.278-.627 12.667-1.252 14.198-1.39 3.451-.31 7.186-.744 9.744-1.133 1.072-.162 2.951-.421 4.176-.575 1.225-.154 2.979-.395 3.898-.536.918-.14 3.048-.422 4.732-.624 1.685-.202 3.193-.45 3.353-.55.16-.1 1.412-.345 2.784-.543 1.371-.198 4.749-.758 7.505-1.244a947.017 947.017 0 016.681-1.16c13.497-2.226 41.264-9.014 57.907-14.156 50.586-15.628 82.95-34.937 94.75-56.529 1.832-3.353 1.946-3.799 1.132-4.408-1.105-.827-22.163-4.727-39.925-7.394-54.946-8.25-109.266-11.611-177.06-10.957-41.067.396-65.17 1.448-100.78 4.399-68.786 5.698-138.443 17.553-189.309 32.218-15.465 4.459-30.128 9.424-30.462 10.316-.157.42.79 2.19 2.105 3.934 18.007 23.886 70.623 41.276 149.738 49.49 15.608 1.62 40.526 3.283 58.742 3.92 12.262.427 63.907.3 74.888-.185z",
      fill: "#d88d69",
      transform: "matrix(1.05173 0 0 1.02477 373.638 -247.113)"
    }), /* @__PURE__ */ React52.createElement("path", {
      d: "M117.893 1216.523c-21.571-1.841-34.219-4.23-41.76-7.886-3.316-1.607-3.08-1.55 3.62.863 5.674 2.045 16.294 4.24 26.52 5.48 9.946 1.206 41.501 1.376 52.544.282 33.185-3.286 55.721-8.884 75.167-18.671 3.98-2.004 6.737-3.241 6.125-2.75-2.654 2.13-15.342 7.85-23.737 10.703-15.482 5.26-33.114 8.826-53.936 10.908-8.54.853-38.619 1.577-44.543 1.071zM16.556 1067.541c-32.426-.746-66.475-3.139-89.365-6.278-29.221-4.008-45.063-6.62-63.572-10.478-6.745-1.406-12.99-2.521-13.878-2.477-3.21.157-29.907-7.372-45.88-12.94-13.301-4.637-23.394-8.84-34.983-14.571-22.32-11.036-36.687-20.928-50.345-34.662-3.292-3.31-6.398-6.021-6.903-6.024-1.897-.012-17.927-30.93-27.18-52.421-8.97-20.836-19.005-48.71-18.147-50.406.246-.486.583-3.96.75-7.72.347-7.831 1.579-12.935 4.846-20.073 5.845-12.772 18.936-26.778 35.432-37.909 12.54-8.462 32.04-18.41 50.5-25.765 7.032-2.802 8.457-3.197 9.605-2.661 3.661 1.707 27.112 6.807 47.283 10.283 14.969 2.58 19.737 3.324 24.383 3.804 4.992.517 35.214 4.734 36.04 5.029 1.06.378 35.82 4.28 60.22 6.76l5.942.603.376 4.893c.991 12.89 4.803 25.86 10.597 36.053l1.841 3.24-1.492.302c-.821.166-2.495.461-3.72.656s-5.61 1-9.744 1.788c-4.134.788-8.08 1.535-8.77 1.66-1.72.31-2.329.428-14.323 2.775-24.792 4.85-40.652 8.549-67.386 15.713-56.214 15.065-86.36 27.97-112.75 48.267-2.603 2.002-4.733 3.941-4.733 4.31 0 1.19 17.34 8.287 28.045 11.478 19.691 5.869 42.548 11.605 63.715 15.99 6.676 1.384 12.332 2.638 12.569 2.788.236.15 1.914.528 3.73.842 1.814.314 8.31 1.47 14.435 2.57 14.627 2.627 50.67 7.922 62.361 9.162 1.531.162 4.789.551 7.238.864 7.669.98 36.658 3.355 52.06 4.266 23.675 1.4 39.949 1.726 74.332 1.491 39.343-.269 47.555-.576 93.542-3.5 138.704-8.821 270.355-36.824 347.429-73.902 17.734-8.531 35.023-18.605 47.058-27.42 7.655-5.605 18.224-14.246 18.577-15.186.373-.996-4.294-8.614-8.725-14.243-4.568-5.804-18.192-20.327-18.855-20.1-.277.094-2.466 6.194-4.866 13.554-6.35 19.476-14.84 42.069-16.454 43.779-.602.637-2.101.242-9.002-2.375-37.152-14.089-90.937-25.41-154.717-32.566-7.043-.79-15.061-1.69-17.817-2.001-19.919-2.245-56.615-4.452-95.769-5.76-22.321-.746-107.817-.972-117.55-.311l-6.749.458 1.852-5.437c2.144-6.298 3.572-13.408 3.572-17.783 0-2.714.142-3.09 1.253-3.328 1.371-.293 10.885-1.009 31.041-2.335 15.065-.99 37.084-2.88 43.987-3.774 2.603-.337 5.484-.697 6.403-.8 12.532-1.408 40.97-5.067 50.946-6.555 4.134-.616 9.844-1.373 12.687-1.68 13.515-1.463 61.721-10.536 85.866-16.161 18.338-4.273 41.119-10.212 56.98-14.856 16.66-4.878 47.102-14.946 50.202-16.604 1.931-1.032 1.787-1.054 19.766 2.952 22.518 5.016 45.802 11.625 61.435 17.437 4.238 1.576 7.904 2.643 8.146 2.373.485-.54 2.028-8.788 4.194-22.429 1.208-7.6 3.22-24.642 4.458-37.743.2-2.112.587-3.982.86-4.155.521-.33 9.316 7.658 14.233 12.924 11.256 12.056 22.406 28.903 26.909 40.655 7.05 18.401 6.347 35.224-3.289 78.775-3.13 14.148-10.932 42.156-11.563 41.51-.126-.129.778-3.528 2.01-7.553 5.174-16.914 8.835-31.872 12.814-52.359 6.95-35.783 5.378-52.002-7.054-72.808-8.249-13.805-14.582-21.779-26.11-32.876l-7.143-6.876-.404 2.732c-.222 1.502-.919 7.731-1.549 13.843-1.436 13.94-5.079 37.721-7.042 45.98-.45 1.893-1.659 1.847-7.43-.282-11.262-4.155-31.44-10.112-47.65-14.068l-8.396-2.05-25.29 25.83c-13.91 14.205-33.183 33.509-42.829 42.896-26.582 25.868-26.528 25.814-25.604 26.091.455.137 5.838 1.073 11.963 2.08 41.29 6.794 78.92 16.46 106.31 27.31 2.43.962 4.49 1.675 4.577 1.585.088-.09 1.538-3.56 3.221-7.71 4.439-10.944 10.273-27.24 14.259-39.828 2.073-6.547 3.756-10.968 4.174-10.968.968 0 15.229 15.233 19.469 20.797 3.838 5.038 9.181 13.425 9.181 14.414 0 2.087-21.946 18.744-36.191 27.47-7.787 4.769-27.22 14.947-37.584 19.684-43.356 19.817-109.198 38.849-177.339 51.259-14.328 2.61-23.017 4.143-27.004 4.765-2.144.335-6.498 1.035-9.677 1.556l-5.78.946-11.202 11.215c-14.937 14.953-57.667 57.14-64.655 63.834-4.699 4.5-23.054 21.324-25.958 23.791-.997.848-12.58 1.828-38.63 3.27-33.442 1.852-67.836 2.308-106.626 1.415zm-306.284-96.41c-8.358-16.836-16.282-38.09-20.322-54.508-1.887-7.665-2.219-9.738-1.559-9.738.19 0 1.504.87 2.924 1.93 5.548 4.152 21.269 12.744 32.382 17.699l5.304 2.364 4.718-3.864c3.604-2.95 9.254-7.217 11.51-8.69.061-.04-.993-3.611-2.342-7.937-6.347-20.352-12.009-48.364-13.605-67.314-1.007-11.954-.637-28.5.873-38.975l.361-2.508-2.999 1.74c-1.65.957-5.462 3.044-8.472 4.637-3.011 1.594-8.707 5.085-12.66 7.76-16.55 11.199-27.687 23.066-33.685 35.893-3.521 7.532-4.688 12.385-5.205 21.653l-.445 7.977 2.21 6.553c2.667 7.907 12.4 32.77 16.84 43.02 4.057 9.363 15.049 32.083 17.67 36.52 1.092 1.852 2.95 5.37 4.129 7.82 1.853 3.853 2.312 4.422 3.392 4.21.687-.133 1.532.106 1.878.532.345.426.678.775.74.775.06 0-1.576-3.397-3.637-7.55zm699.493 48.27c.472-.484 15.016-4.965 16.87-5.198.918-.116-2.34 1.074-7.24 2.644-8.63 2.765-10.259 3.197-9.63 2.553zm66.702-24.418c0-.122 1.817-1.105 4.037-2.184 5.236-2.545 18.223-10.192 27.099-15.956 14.423-9.367 29.378-21.957 37.156-31.281 6.26-7.503 7.183-8.471 4.284-4.489-4.018 5.52-15.761 17.236-23.319 23.264-11.558 9.22-30.743 21.65-43.68 28.299-4.88 2.508-5.577 2.801-5.577 2.347zm77.75-61.887c1.425-2.194 2.695-3.988 2.821-3.988.296 0-.118.71-2.738 4.7-1.183 1.802-2.268 3.277-2.413 3.277-.144 0 .905-1.795 2.33-3.989zm3.82-6.268c.475-.94.99-1.709 1.142-1.709.154 0-.11.77-.585 1.71s-.989 1.709-1.142 1.709c-.153 0 .11-.77.585-1.71zm4.75-9.401c0-.314.243-.955.54-1.425.297-.47.54-.598.54-.285 0 .314-.243.955-.54 1.425-.297.47-.54.598-.54.285zm1.114-2.85c0-.313.243-.954.54-1.424.296-.47.54-.598.54-.285 0 .314-.244.955-.54 1.425-.297.47-.54.598-.54.285zm1.113-2.848c0-.314.243-.955.54-1.425.297-.47.54-.598.54-.285 0 .314-.243.955-.54 1.425-.297.47-.54.598-.54.285zm1.114-2.85c0-.313.243-.954.54-1.424.296-.47.54-.598.54-.285 0 .314-.244.955-.54 1.425-.297.47-.54.598-.54.285zm1.416-3.703c.204-.784.604-1.81.888-2.28.359-.593.402-.42.144.57-.205.784-.605 1.81-.889 2.28-.358.594-.402.42-.143-.57zm1.71-4.556c.197-.782.825-2.449 1.393-3.704.568-1.255.871-1.641.673-.86-.198.783-.825 2.45-1.394 3.704-.568 1.255-.871 1.642-.673.86zm2.658-7.224c1.146-3.82 3.587-10.64 3.622-10.122.055.789-3.18 10.58-3.64 11.022-.195.186-.186-.219.018-.9zm-607.9-603.747c-.661-2.524-.31-7.019.733-9.368 2.191-4.94 8.196-10.061 17.208-14.677 2.252-1.153 4.174-2.015 4.271-1.915.098.1-2.446 1.57-5.651 3.267-7.398 3.915-12.701 8.409-14.85 12.583-1.453 2.82-1.588 3.538-1.364 7.26.137 2.273.19 4.132.118 4.132-.071 0-.28-.577-.465-1.282zm250.57-11.025c-3.149-6.757-15.005-14.95-27.472-18.982-2.507-.811-4.511-1.731-4.454-2.044.226-1.25 23.078-.264 40.665 1.755 4.241.487 7.85.743 8.02.57.631-.647-11.484-6.025-17.356-7.706-12.838-3.675-29.434-6.473-49.043-8.268-14.201-1.3-14.427-1.332-7.517-1.074 16.69.62 42.474 4.62 56.754 8.801 9.176 2.687 19.54 7.65 18.74 8.975-.152.251-2.73.135-5.73-.26-7.266-.953-24.166-2.36-33.99-2.828-8.581-.41-10.198.133-5.011 1.68 7.422 2.215 19.673 9.643 23.781 14.42 2.07 2.406 4.248 6.295 3.788 6.766-.124.127-.653-.685-1.175-1.805zm-122.024-7.05c-12.485-1.835-19.209-5.256-19.209-9.774 0-4.102 7.523-7.28 23.664-9.993 8.707-1.464 29.22-1.491 33.788-.045 3.249 1.029 6.58 3.387 6.58 4.658 0 1.848-3.454 3.374-9.128 4.033l-3.281.38 1.471 1.397c1.761 1.671 1.827 2.444.369 4.341-2.393 3.114-9.893 4.878-22.283 5.242-4.746.139-10.133.032-11.97-.238zm23.721-1.38c4.948-.968 8.063-2.203 9.819-3.891 1.74-1.672 1.583-2.566-.689-3.938-1.072-.647-1.949-1.366-1.949-1.598 0-.232 2.2-.699 4.887-1.038 7.687-.968 10.01-2.64 7.04-5.063-2.741-2.237-7.13-3.158-16.523-3.468-9.946-.328-18.116.38-28.106 2.436-11.314 2.33-16.852 4.987-16.852 8.089 0 4.661 6.079 7.359 21.436 9.512 3.22.451 16.752-.221 20.937-1.04zm-128.12-7.468c.766-.448 1.643-.815 1.95-.815.306 0-.07.367-.836.815-.765.448-1.642.814-1.948.814-.307 0 .07-.366.835-.814zm3.342-1.329c.459-.29 1.461-.7 2.227-.909.967-.265 1.137-.22.556.147-.459.29-1.461.7-2.227.91-.967.264-1.137.22-.556-.148zm14.372-5.043c.402-.165.882-.145 1.067.045.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm2.61-.75c.612-.27 1.49-.49 1.948-.49.527 0 .424.18-.278.49-.612.269-1.49.489-1.949.489-.526 0-.423-.181.279-.49zm3.514-.96c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.228-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm2.227-.57c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm4.28-1.048c1.531-.402 3.285-.726 3.898-.719.612.007-.14.343-1.67.745-1.532.403-3.286.727-3.898.72-.613-.007.139-.343 1.67-.746zm5.707-1.219c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.079-.13-.696-.288zm2.784-.57c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.287zm2.784-.57c.383-.157 1.01-.157 1.392 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.287zm3.759-.762c.918-.239 2.296-.434 3.062-.434 1.242 0 1.212.047-.278.434-.92.24-2.297.435-3.063.435-1.241 0-1.211-.047.279-.435zm6.403-1.107c6.419-1.708 41.05-5.831 47.262-5.627l3.127.102-2.784.187c-7.844.526-27.747 2.7-35.615 3.89-4.91.743-10.055 1.489-11.434 1.658-2.302.283-2.347.266-.556-.21z",
      fill: "#079cd2",
      transform: "matrix(1.05173 0 0 1.02477 373.638 -247.113)"
    }), /* @__PURE__ */ React52.createElement("path", {
      d: "M-185.93 791.746c-.562-.205-1.286-.271-1.61-.148-1.632.624-40.998-8.709-43.398-10.288-1.255-.826-6.41-2.244-6.78-1.865-.132.136 1.026.557 2.574.937 1.547.38 2.814.95 2.814 1.265 0 .316-.313.451-.696.301-1.077-.421-6.213-1.956-12.946-3.867-7.828-2.223-26.591-8.56-26.281-8.877.13-.133 4.843 1.314 10.475 3.215 5.63 1.902 13.035 4.217 16.452 5.144 6.295 1.71 8.999 2.17 4.922.84-1.225-.399-2.165-1.01-2.09-1.356.255-1.177 11.962-19.689 18.725-29.61 7.483-10.978 12.62-17.153 25.386-30.515 9.728-10.182 18.52-18.02 31.231-27.843 6.894-5.327 9.055-6.71 10.58-6.773 1.528-.062 1.633-.13.522-.337-17.47-3.258-50.32-10.388-49.889-10.828.117-.12 6.567 1.194 14.333 2.92 32.875 7.309 64.626 12.488 105.156 17.154 6.89.793 14.407 1.682 16.703 1.975 5.527.706 31.112 2.72 40.885 3.22l7.755.395-16.107 4.697c-33.446 9.751-61.332 20.35-82.366 31.307-16.472 8.58-23.31 13.634-34.801 25.715-8.837 9.291-14.637 16.561-21.062 26.4l-4.667 7.147-2.399.024c-1.32.013-2.86-.143-3.421-.349zm40.32-108.045c-.536-.144-1.413-.144-1.948 0-.536.143-.098.26.974.26s1.51-.117.974-.26zm-3.608-.551c-.377-.156-1.129-.166-1.67-.021-.542.144-.234.272.685.283.918.012 1.362-.106.985-.262zm-3.352-.574c-.382-.158-1.009-.158-1.392 0-.382.158-.07.288.696.288s1.08-.13.696-.288zm457.823 104.68c2.03-.856 10.123-7.08 15.764-12.123 8.818-7.884 18.416-19.861 32.827-40.966 6.989-10.235 10.853-16.864 15.404-26.427 7.32-15.38 11.892-30.698 13.945-46.725.476-3.719.924-6.815.995-6.88.072-.065 4.39-1.587 9.595-3.382 13.54-4.666 30.357-10.701 36.192-12.987 14.369-5.628 35.61-15.874 48.72-23.5 13.206-7.683 32.293-21.45 32.293-23.295 0-.472-1.492-1.248-3.758-1.952-5.176-1.609-28.253-7.626-37.723-9.836l-16.704-3.893-8.908-2.074-.682-4.533c-2.78-18.482-6.936-32.042-14.899-48.598-7.996-16.629-18.245-32.363-29.934-45.959l-1.956-2.274-3.269 1.515c-8.086 3.748-28.056 11.79-39.182 15.78-10.819 3.878-27.326 8.79-44.544 13.254-9.252 2.4-9.685 2.455-11.212 1.446-2.243-1.481-11.571-5.537-18.728-8.14-37.3-13.572-78.363-13.688-112.406-.319-12.764 5.013-32.341 14.436-41.523 19.986-7.661 4.63-19.917 14.514-19.917 16.061 0 .277 1.469.347 3.264.155 2.06-.22 3.398-.126 3.628.254.636 1.053-.643 1.338-7.33 1.631-3.587.158-6.679.458-6.87.666-.192.209-1.928 4.482-3.857 9.496-1.93 5.015-3.583 9.218-3.675 9.341-.092.124-5.122.566-11.177.984-6.055.417-13.766 1.016-17.134 1.331-3.369.315-12.89 1.1-21.159 1.744-34.595 2.695-76.468 7.199-95.211 10.24a944.963 944.963 0 01-13.085 2.013c-18.04 2.614-47.127 7.759-69.519 12.297-7.764 1.573-14.226 2.75-14.358 2.614-.521-.533 45.484-9.372 68.844-13.228 5.053-.834 9.481-1.684 9.84-1.89.36-.206 9.214-8.936 19.676-19.4l19.022-19.027 4.339.342c2.387.188 11.87.762 21.075 1.275 16.619.927 16.757.925 19.905-.233l3.17-1.167.977 1.236c.92 1.162 1.142 1.193 3.705.52 1.5-.393 4.347-.929 6.327-1.191 3.394-.45 3.217-.482-3.08-.576l-6.682-.1 5.568-5.468c10.135-9.955 51.661-45.868 67.513-58.388 10.764-8.503 24.234-17.628 36.656-24.835 8.486-4.924 10.446-5.84 12.48-5.84 1.326 0 2.274-.142 2.105-.314-.168-.173-6.537.107-14.152.621-16.093 1.087-73.297 1.722-90.404 1.003-7.674-.322 1.468-.456 31.18-.456 47.42 0 60.725-.607 94.098-4.294 37.04-4.092 78.388-12.333 105.497-21.025 3.973-1.274 7.422-2.317 7.665-2.317.243 0 3.633-1.17 7.532-2.602 35.142-12.901 59.368-26.84 72.534-41.735 2.317-2.621 2.48-2.736.85-.599-6.497 8.52-21.022 19.326-36.984 27.517-6.214 3.189-19.086 9.107-23.615 10.859-1.461.565-2.555 1.132-2.43 1.26.126.129 1.79-.415 3.697-1.208l3.467-1.442 4.808 1.097c28.677 6.544 56.109 20.74 81.028 41.932 6.931 5.895 19.27 17.712 19.27 18.455 0 .23-2.421 1.79-5.38 3.468-2.96 1.678-5.108 3.144-4.775 3.257.705.24 4.95-1.873 5.232-2.604.104-.273 2.445-1.727 5.201-3.233 5.744-3.138 14.49-9.051 19.766-13.366 4.885-3.993 14.772-13.993 16.792-16.981.9-1.332 1.761-2.422 1.914-2.422.154 0-.496 1.153-1.444 2.562-2.695 4.008-10.796 12.445-16.077 16.741-4.91 3.995-16.205 11.822-21.218 14.704-1.612.926-2.794 2.008-2.795 2.557 0 1.046.435 1.176 8.073 2.41 5.366.868 18.323 3.238 25.613 4.684 22.15 4.395 61.499 16.095 77.528 23.054 5.54 2.405 6.025 2.529 6.543 1.672.718-1.19-8.64-22.542-16.815-38.369-3.21-6.212-5.722-11.41-5.584-11.551.365-.374 9.826 7.127 16.279 12.907 8.62 7.721 19.054 19.965 23.688 27.796 3.58 6.05 3.44 5.79 3.114 5.79-.148 0-1.587-2.2-3.198-4.889-1.611-2.69-5.317-7.753-8.234-11.254-5.328-6.393-13.39-14.847-13.78-14.449-.115.118 2.154 4.934 5.042 10.702 9.677 19.324 16.454 37.633 20.949 56.587l2.227 9.392-1.083 2.916c-.849 2.287-.96 3.275-.516 4.579.311.914.438 1.989.282 2.387-.157.398-.305.182-.33-.48-.05-1.372-5.114-6.488-6.422-6.488-1.293 0-1.207.655 1.438 11.025.476 1.866.741 2.147 1.776 1.88 1.19-.306 1.192-.294.119.526-.604.462-1.394.723-1.755.581-.361-.142-1.582 1.276-2.713 3.151-2.894 4.8-7.926 11.19-14.302 18.165-7.94 8.684-8.25 9.074-8.25 10.343 0 1.358-.456 1.781-9.092 8.466-10.668 8.256-27.71 18.831-40.881 25.368-3.445 1.71-6.264 3.23-6.264 3.379 0 .148 2.443-.9 5.429-2.33 2.986-1.429 5.742-2.73 6.124-2.89 2.202-.926-.877 24.107-5.162 41.963-6.259 26.087-20.452 59.067-36.85 85.63-2.269 3.675-4.342 6.819-4.608 6.987-.265.168-3.822 1.356-7.903 2.641-4.08 1.285-8.297 2.79-9.369 3.345-1.071.554-4.83 1.829-8.351 2.832-3.522 1.003-8.408 2.465-10.858 3.249-10.681 3.416-54.802 14.33-61.804 15.288-1.531.21-5.98 1-9.887 1.758-7.517 1.458-8.61 1.593-6.817.836zM146.436 435.258c-.685-.135-1.938-.139-2.784-.008-.847.131-.286.242 1.245.246 1.531.004 2.224-.103 1.539-.238zm5.56-.57c-.689-.136-1.816-.136-2.505 0-.69.135-.126.246 1.252.246 1.378 0 1.942-.11 1.253-.247zm5.296-.56c-.532-.142-1.534-.148-2.227-.011-.693.136-.257.253.968.259 1.225.006 1.791-.105 1.26-.248zm3.88-.522c-.185-.19-.666-.21-1.068-.045-.444.182-.312.317.337.344.587.025.916-.11.73-.3zm112.623-22.733c1.071-.422 1.572-.768 1.113-.768-.46 0-1.712.346-2.784.768-1.072.422-1.573.768-1.113.768.459 0 1.712-.346 2.784-.768zm14.93-5.103c1.627-.548 2.861-1.096 2.741-1.219-.282-.289-7.092 2.06-7.092 2.447 0 .161.313.175.696.03a193.07 193.07 0 013.655-1.258zm-567.433 361.131c-2.693-1.12-4.804-2.131-4.69-2.247.197-.203 9.9 3.64 10.376 4.11.601.593-1.198.005-5.686-1.863zm-7.631-3.322c-.766-.447-1.142-.814-.835-.814.306 0 1.183.367 1.948.815.766.447 1.142.814.836.814-.307 0-1.184-.367-1.95-.815zm-5.011-2.279c-1.378-.755-2.255-1.373-1.949-1.373.306 0 1.684.618 3.062 1.373s2.255 1.373 1.95 1.373c-.307 0-1.685-.618-3.063-1.373zm-11.275-5.735c-1.455-.775-2.645-1.537-2.645-1.693 0-.156 1.253.366 2.784 1.16 1.531.795 2.784 1.568 2.784 1.72 0 .376.05.397-2.923-1.187zm-4.627-2.843c-1.037-.851-1.03-.862.172-.265.69.342 1.253.74 1.253.886 0 .436-.289.31-1.425-.621zm-2.784-1.71c-1.037-.85-1.03-.861.172-.264.69.341 1.253.74 1.253.886 0 .436-.289.31-1.425-.622zm761.716-3.44c1.14-.863 6.45-2.663 6.8-2.305.108.111-1.625.863-3.853 1.672-2.293.832-3.572 1.107-2.947.633zm-770.94-2.938c-.693-.904-.674-.924.21-.216.927.745 1.222 1.213.763 1.213-.115 0-.554-.449-.974-.997zm780.418-.629c1.226-.582 2.854-1.223 3.619-1.426.764-.203.386.107-.84.689s-2.855 1.223-3.62 1.426c-.764.203-.386-.107.84-.689zm-782.646-1.08c-.693-.905-.673-.925.21-.216.928.744 1.223 1.212.764 1.212-.115 0-.554-.448-.974-.997zm-3.026-2.565l-1.636-1.852 1.81 1.674c.995.92 1.81 1.754 1.81 1.852 0 .44-.46.052-1.984-1.674zm791.005 1.622c.472-.468 15.752-6.585 15.948-6.384.112.114-3.317 1.65-7.62 3.41-7.248 2.969-8.928 3.569-8.328 2.974zm-797.374-7.462c-2.281-2.35-4.022-4.274-3.87-4.274.154 0 2.146 1.923 4.427 4.274 2.282 2.35 4.023 4.273 3.87 4.273-.153 0-2.145-1.923-4.427-4.273zm815.145 0c.766-.448 1.643-.815 1.949-.815.306 0-.07.367-.835.815-.766.448-1.643.814-1.949.814-.306 0 .07-.366.835-.814zm3.898-1.71c.765-.448 1.642-.814 1.949-.814.306 0-.07.366-.836.814-.765.448-1.642.815-1.948.815-.307 0 .07-.367.835-.815zm4.454-1.994c1.072-.6 2.2-1.092 2.506-1.092.306 0-.32.491-1.392 1.092-1.072.6-2.2 1.092-2.506 1.092-.306 0 .32-.492 1.392-1.092zm-828.839-2.422l-1.06-1.282 1.252 1.086c1.177 1.02 1.506 1.478 1.06 1.478-.105 0-.669-.577-1.252-1.282zm834.407-.142c1.378-.755 2.756-1.373 3.062-1.373.307 0-.57.618-1.948 1.373-1.378.755-2.756 1.373-3.063 1.373-.306 0 .571-.618 1.949-1.373zm-836.374-2.422c-.692-.904-.673-.924.21-.215.928.744 1.223 1.212.765 1.212-.116 0-.555-.448-.975-.997zm840.318.78c.567-.534 8.305-4.326 8.305-4.07 0 .318-7.547 4.287-8.152 4.287-.212 0-.28-.098-.153-.218zm-841.988-3.059c-.693-.904-.673-.924.21-.215.927.744 1.222 1.212.764 1.212-.115 0-.554-.449-.974-.997zm850.85-1.527c0-.157.501-.56 1.114-.895.612-.335 1.113-.481 1.113-.325 0 .157-.5.56-1.113.895-.613.336-1.114.482-1.114.325zm4.733-3.015c.873-.908 12.528-8.765 12.528-8.446 0 .156-2.568 2.039-5.707 4.183-6.25 4.27-7.699 5.175-6.821 4.263zm14.755-10.06c0-.119.439-.568.974-.998.884-.708.903-.688.21.215-.727.95-1.184 1.251-1.184.782zm2.227-1.71c0-.118.439-.567.975-.997.883-.709.902-.689.21.215-.728.95-1.185 1.251-1.185.782zm2.227-1.71c0-.118.439-.566.975-.997.883-.708.903-.688.21.216-.727.949-1.185 1.25-1.185.782zm2.228-1.709c0-.118.438-.567.974-.997.883-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm3.062-2.634c.554-.626 1.133-1.14 1.286-1.14.153 0-.175.514-.73 1.14-.554.627-1.132 1.14-1.285 1.14-.154 0 .175-.513.729-1.14zm2.784-2.279c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.554.627-1.132 1.14-1.286 1.14-.153 0 .176-.513.73-1.14zm-538.836-.972c.689-.136 1.816-.136 2.505 0 .69.136.125.247-1.253.247s-1.941-.111-1.252-.247zm-15.302-.562c.542-.145 1.294-.135 1.67.02.378.157-.066.275-.984.263-.919-.011-1.227-.139-.686-.283zm557.2-1.03c.72-.783 1.433-1.424 1.586-1.424.153 0-.31.64-1.029 1.424-.72.784-1.433 1.425-1.586 1.425-.153 0 .31-.641 1.03-1.425zm3.898-3.419c1.039-1.097 2.014-1.994 2.167-1.994.153 0-.572.897-1.61 1.994-1.04 1.097-2.015 1.995-2.168 1.995-.153 0 .572-.898 1.61-1.995zm3.34-2.72c0-.087 1.942-2.074 4.316-4.417l4.315-4.259-4.162 4.416c-3.866 4.102-4.468 4.676-4.468 4.26zm-905.3-1.886c.026-.663.158-.798.336-.344.16.411.14.903-.044 1.092-.185.19-.317-.147-.293-.748zm914.21-7.823c0-.098.814-.931 1.809-1.852l1.81-1.673-1.636 1.852c-1.524 1.726-1.984 2.113-1.984 1.673zm4.454-5.235c.719-.783 1.433-1.424 1.586-1.424.153 0-.31.64-1.03 1.424-.719.784-1.433 1.425-1.586 1.425-.153 0 .31-.641 1.03-1.425zm1.67-2.209c0-.118.438-.567.974-.997.883-.709.903-.689.21.215-.727.95-1.184 1.25-1.184.782zm-784.787-4.211c-4.28-1.122-7.538-2.116-7.238-2.21.299-.093 4.302.826 8.896 2.042 4.593 1.216 7.85 2.21 7.238 2.21-.612-.002-4.616-.92-8.896-2.042zm-9.304-2.8c.402-.165.882-.145 1.067.044.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-6.125-1.71c.402-.165.882-.144 1.067.045.185.19-.143.324-.73.299-.649-.027-.781-.162-.337-.344zm-2.227-.57c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-3.898-1.14c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm-3.897-1.14c.402-.164.882-.143 1.067.046.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-3.898-1.139c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm830.884-29.573c.026-.663.158-.798.336-.344.16.412.141.903-.044 1.092-.185.19-.317-.147-.292-.748zm-819.191-24.558c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm7.238-2.279c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm21.158-6.268c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm6.125-1.71c.402-.164.882-.144 1.067.046.185.19-.143.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.569c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.228-.57c.401-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm2.227-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm3.897-1.14c.402-.164.882-.144 1.067.046.185.189-.143.324-.73.299-.649-.027-.78-.162-.337-.344zm2.227-.569c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.228-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm2.227-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.57c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.028-.781-.162-.337-.344zm5.394-1.358c2.144-.591 4.273-1.058 4.733-1.037.459.021-.92.523-3.063 1.114-2.143.591-4.273 1.058-4.732 1.037-.46-.022.918-.523 3.062-1.114zm6.96-1.671c.765-.25 1.893-.456 2.505-.456.882 0 .824.095-.278.456-.766.25-1.893.456-2.506.456-.881 0-.823-.095.279-.456zm6.403-1.437c1.531-.403 3.285-.727 3.897-.72.613.007-.139.343-1.67.746-1.531.402-3.285.726-3.897.719-.613-.007.139-.343 1.67-.745zm6.403-1.412c.766-.25 1.893-.456 2.506-.456.881 0 .823.095-.279.456-.765.25-1.893.456-2.505.456-.882 0-.824-.095.278-.456zm252.934-32.304c.542-.144 1.293-.135 1.67.021.377.157-.066.275-.985.263-.919-.012-1.227-.14-.685-.284zm443.614-53.736c-.328-.627-.47-1.14-.318-1.14.153 0 .547.513.875 1.14.327.627.47 1.14.317 1.14-.153 0-.546-.513-.874-1.14zm-747.459-2.446c.21-.562.52-.878.692-.703.172.176 0 .635-.38 1.022-.55.558-.614.493-.312-.32zm222.84-60.083c1.617-.115 4.123-.114 5.567.003 1.445.117.12.212-2.941.21-3.063-.002-4.245-.097-2.627-.213zm-9.47-.567c1.31-.12 3.314-.119 4.454.004 1.14.123.07.221-2.38.219-2.45-.002-3.384-.102-2.074-.223zm-8.379-.563c.988-.126 2.742-.128 3.898-.005 1.155.123.346.226-1.798.229-2.143.002-3.088-.099-2.1-.224zm-4.72-.551c.536-.144 1.413-.144 1.948 0 .536.143.098.26-.974.26s-1.51-.117-.974-.26zm-11.937-1.136c.402-.165.883-.145 1.068.045.185.189-.144.324-.731.299-.649-.028-.78-.163-.337-.344zm463.635-7.588c.776-1.567 1.536-2.85 1.689-2.85.153 0-.356 1.283-1.132 2.85-.776 1.567-1.536 2.849-1.69 2.849-.153 0 .357-1.282 1.133-2.85zm1.966-3.704c0-.313.243-.954.54-1.425.296-.47.54-.598.54-.284 0 .313-.244.954-.54 1.424-.297.47-.54.598-.54.285zm-690.192-7.172c-.206-.34-.149-.85.126-1.132.296-.302.5-.05.5.62 0 1.295-.103 1.379-.626.512zm17.569-21.248c0-.119.438-.567.974-.997.883-.71.903-.69.21.215-.727.949-1.184 1.25-1.184.782zm659.172-29.842c-.693-.904-.673-.924.21-.215.927.744 1.222 1.212.764 1.212-.116 0-.554-.449-.974-.997zm-77.324-2.637c0-.118.439-.567.975-.997.883-.709.903-.689.21.215-.727.95-1.185 1.251-1.185.782zm71.527-3.916l-2.763-2.991 2.924 2.827c1.607 1.555 2.923 2.902 2.923 2.992 0 .425-.516-.048-3.084-2.828zm-69.015.498c.527-.822 1.063-1.495 1.191-1.495.403 0-.893 2.196-1.536 2.603-.336.212-.181-.286.345-1.108zm3.513-7.882c-.204-1.44.454-1.26-15.212-4.188-16.589-3.102-43.081-6.86-70.156-9.951-41.644-4.756-106.702-6.583-174.276-4.894l-8.908.223 7.516-.526c4.134-.289 29.315-.604 55.958-.7l48.441-.175 3.898-2.014c22.553-11.658 48.826-20.287 70.99-23.317 7.781-1.064 25.056-.917 33.036.28 12.092 1.815 25.626 5.781 37.426 10.97 4.468 1.963 4.54 2.028 7.083 6.374 4.54 7.76 5.379 12.031 4.86 24.76-.186 4.555-.348 5.336-.656 3.158zM1.975 338.975c.402-.165.882-.145 1.067.045.185.19-.143.324-.73.299-.649-.027-.781-.162-.337-.344zm10.022-1.14c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm27.255-2.863c.693-.136 1.695-.13 2.227.012.533.142-.034.254-1.26.248-1.224-.006-1.66-.123-.967-.26zm6.682-.57c.692-.136 1.694-.13 2.227.012.532.143-.035.254-1.26.248-1.225-.006-1.66-.123-.967-.26zm7.238-.57c.692-.136 1.695-.13 2.227.012.532.143-.034.254-1.26.248-1.224-.006-1.66-.123-.967-.26zm6.128-.579c1-.127 2.504-.124 3.34.006.837.13.019.234-1.819.23-1.837-.002-2.522-.109-1.521-.236zm7.507-.572c1.148-.123 3.027-.123 4.176 0 1.148.123.209.224-2.088.224s-3.237-.101-2.088-.224zm8.63-.572c1.302-.12 3.431-.12 4.733 0 1.301.12.236.218-2.367.218-2.603 0-3.667-.098-2.366-.218zm10.022-.573c1.608-.115 4.239-.115 5.847 0 1.607.116.292.21-2.924.21-3.215 0-4.53-.094-2.923-.21zm249.304-30.381c-25.7-6.875-63.273-13.268-105.234-17.905-7.043-.778-10.425-1.278-7.516-1.11 7.574.436 31.911 3.313 48.162 5.692 23.112 3.384 49.964 8.656 65.58 12.877 3.607.976 6.712 1.616 6.9 1.425.187-.192-.008-.804-.435-1.36-.705-.92-.687-.94.2-.23 1.374 1.104 1.222 2.363-.28 2.301-.688-.028-4.008-.789-7.377-1.69zm-5.541-9.42c-.759-.568-.839-.802-.272-.795 1.122.012 2.413.925 1.83 1.294-.266.168-.967-.057-1.558-.499z",
      fill: "#c6592f",
      transform: "matrix(1.05173 0 0 1.02477 373.638 -247.113)"
    }), /* @__PURE__ */ React52.createElement("path", {
      d: "M75.02 1207.74c-.46-.304-.585-.552-.279-.552.306 0 .933.248 1.392.552.46.304.585.552.278.552-.306 0-.932-.248-1.392-.552zm-30.763-139.458a654.29 654.29 0 0119.209 0c5.283.094.96.17-9.605.17-10.565 0-14.887-.076-9.604-.17zm-27.283-.568c3.139-.102 8.275-.102 11.414 0 3.139.102.57.185-5.707.185-6.278 0-8.846-.083-5.707-.185zm62.67 0c3.308-.102 8.57-.101 11.692 0 3.122.1.415.183-6.016.183-6.43 0-8.985-.083-5.677-.184zm-80.21-.56c1.15-.123 3.028-.123 4.177 0 1.148.123.209.223-2.088.223s-3.237-.1-2.088-.223zm101.337-.01c2.067-.11 5.45-.11 7.517 0s.376.2-3.759.2c-4.134 0-5.825-.09-3.758-.2zm-112.184-.56c1.001-.127 2.504-.124 3.341.01.837.13.018.234-1.82.23-1.837-.01-2.521-.11-1.52-.236zm131.533-.163c18.685-1.162 35.548-2.323 38.245-2.633 2.764-.318 3.26-.667 11.415-8.036 14.459-13.066 44.434-42.272 82.645-80.524l11.202-11.215 5.78-.946c3.179-.52 7.533-1.22 9.677-1.555 3.987-.623 12.676-2.156 27.005-4.766 68.048-12.393 134.392-31.564 177.152-51.189 4.491-2.06 11.945-5.684 16.565-8.052 4.619-2.367 8.398-4.176 8.398-4.02 0 .655-21.277 11.147-33.535 16.538-7.266 3.196-13.074 5.951-12.906 6.123.472.484-26.343 31.565-47.049 54.535-12.885 14.293-35.136 38.005-47.264 50.367l-11.661 11.886-14.689 3.325c-8.079 1.829-15.941 3.712-17.473 4.186-7.286 2.254-55.434 10.845-79.9 14.257-45.189 6.302-95.276 11.184-122.772 11.968l-8.909.254zm335.746-148.14c.46-.303.584-.552.278-.552-.306 0-.932.249-1.392.552-.46.304-.584.553-.278.553.306 0 .932-.249 1.392-.553zm-477.033 147.74c.843-.13 2.22-.13 3.063 0 .842.131.153.238-1.531.238-1.685 0-2.374-.107-1.532-.238zm-9.187-.539c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.078-.13-.696-.288zm-45.924-4.576c.541-.144 1.293-.135 1.67.021.377.157-.066.275-.985.263-.919-.01-1.227-.14-.685-.284zm-4.455-.57c.542-.144 1.294-.134 1.67.022.378.156-.066.274-.984.262-.92-.01-1.227-.139-.686-.283zm-4.186-.552c.383-.158 1.009-.158 1.392 0 .382.158.07.288-.696.288s-1.08-.13-.696-.288zm-4.166-.587c.542-.144 1.294-.135 1.67.021.378.156-.066.274-.984.263-.919-.011-1.227-.14-.686-.284zm-3.897-.57c.542-.144 1.293-.135 1.67.021s-.066.275-.985.263c-.919-.011-1.227-.14-.685-.284zm-3.898-.57c.542-.144 1.294-.135 1.67.021.378.157-.066.275-.984.263-.92-.01-1.227-.14-.686-.284zm-3.897-.57c.541-.144 1.293-.134 1.67.022s-.066.274-.985.262c-.919-.01-1.227-.139-.685-.283zm-3.63-.552c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-3.34-.57c.382-.157 1.008-.157 1.391 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.287zm-3.342-.57c.383-.157 1.01-.157 1.392 0 .383.159.07.288-.696.288-.765 0-1.078-.13-.696-.287zm-3.34-.57c.382-.157 1.009-.157 1.392 0 .382.159.07.288-.696.288s-1.08-.129-.696-.287zm-3.341-.569c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-3.34-.57c.382-.158 1.008-.158 1.391 0s.07.288-.696.288c-.765 0-1.079-.13-.696-.288zm-2.75-.581c.402-.165.882-.145 1.067.045.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm-2.784-.57c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-2.784-.57c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-2.784-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.027-.781-.163-.337-.345zm-2.784-.57c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.027-.781-.163-.337-.344zm-2.784-.57c.402-.164.882-.144 1.067.046.185.189-.143.324-.73.299-.65-.027-.781-.162-.337-.344zm-2.784-.57c.402-.164.882-.143 1.067.046.185.19-.143.324-.73.3-.649-.028-.781-.163-.337-.345zm-2.784-.569c.402-.165.882-.144 1.067.045.185.19-.143.324-.73.3-.649-.028-.78-.163-.337-.345zm-5.01-1.14c.401-.164.881-.144 1.066.046.185.189-.144.324-.73.299-.65-.027-.781-.163-.337-.344zm557.453-28.614c0-.592 1.06-1.448 1.373-1.11.102.11-.165.53-.594.934-.428.404-.779.483-.779.176zm4.35-2.155c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.027-.781-.163-.337-.345zm12.772-3.976c.382-.159 1.009-.159 1.392 0 .382.158.07.287-.696.287s-1.08-.13-.696-.287zm-713.048-35.726c-.346-.426-1.19-.665-1.878-.531-1.08.21-1.539-.358-3.392-4.21-1.179-2.45-3.037-5.97-4.13-7.82-2.62-4.438-13.612-27.158-17.669-36.521-4.522-10.438-14.217-35.23-16.821-43.02l-2.191-6.553.388-6.838.388-6.837-.057 7.506-.058 7.506 2.772 4.154c3.746 5.613 9.067 11.801 11.05 12.85 1.524.807 1.607.795 1.332-.193-.16-.58-1.33-4.516-2.599-8.746-1.268-4.231-3.458-12.564-4.865-18.519-1.408-5.954-2.868-11.98-3.246-13.39l-.686-2.564-.716 1.71c-.394.94-1.163 3.503-1.71 5.697-.548 2.194-1.014 3.47-1.036 2.838-.156-4.377 5.128-17.161 9.98-24.145 8.312-11.964 24.702-25.675 41.02-34.312 3.01-1.593 6.823-3.68 8.472-4.637l3-1.74-.362 2.508c-1.51 10.475-1.88 27.021-.873 38.975 1.596 18.95 7.257 46.962 13.605 67.314 1.349 4.326 2.403 7.897 2.343 7.937-2.257 1.473-7.907 5.74-11.51 8.69l-4.72 3.864-5.303-2.364c-11.113-4.955-26.834-13.547-32.382-17.698-1.42-1.062-2.735-1.93-2.924-1.93-.66 0-.328 2.072 1.559 9.737 4.04 16.418 11.964 37.672 20.322 54.507 2.061 4.153 3.698 7.55 3.636 7.55-.06 0-.394-.349-.74-.775zm811.74-13.685c0-.118.438-.567.973-.997.884-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm2.783-2.28c0-.117.439-.566.974-.996.884-.709.903-.689.21.215-.727.949-1.184 1.25-1.184.782zm4.454-4.058c.72-.783 1.433-1.424 1.586-1.424.154 0-.31.641-1.029 1.425-.719.783-1.433 1.424-1.586 1.424-.153 0 .31-.641 1.03-1.425zm6.96-6.552c1.819-1.88 3.431-3.419 3.585-3.419.153 0-1.21 1.538-3.028 3.419-1.818 1.88-3.431 3.419-3.584 3.419-.153 0 1.21-1.539 3.027-3.42zm-30.345-58.382c0-.156 1.002-.808 2.227-1.447 1.225-.64 2.227-1.035 2.227-.878 0 .157-1.002.808-2.227 1.448-1.225.64-2.227 1.034-2.227.877zm7.238-3.971c0-.157.502-.56 1.114-.895.612-.336 1.114-.482 1.114-.325 0 .157-.502.56-1.114.895-.612.335-1.114.481-1.114.325zm2.784-1.71c0-.156.501-.559 1.114-.894.612-.336 1.114-.482 1.114-.325 0 .156-.502.559-1.114.894-.613.336-1.114.482-1.114.325zm5.568-3.418c0-.157.501-.56 1.114-.895.612-.336 1.113-.482 1.113-.325 0 .156-.5.56-1.113.895-.613.335-1.114.481-1.114.325zm-21.436-3.532c-5.56-2.325-22.34-8.103-30.337-10.446-23.919-7.01-48.597-12.532-76.567-17.134-6.125-1.008-11.508-1.944-11.963-2.08-.924-.278-.978-.224 25.604-26.092 9.646-9.387 28.92-28.69 42.829-42.897l25.29-25.828 8.396 2.049c16.21 3.956 36.388 9.913 47.65 14.068 5.771 2.13 6.98 2.175 7.43.282 1.963-8.259 5.606-32.04 7.042-45.98.63-6.112 1.327-12.34 1.55-13.843l.403-2.732 7.143 6.876c8.045 7.744 13.532 13.985 18.548 21.096 5.755 8.158 11.59 18.416 13.991 24.599 2.53 6.513 4.631 15.966 4.494 20.218-.069 2.126-.132 2.302-.275.766-.71-7.63-2.524-15.524-3.143-13.676-.157.47-1.243 3.804-2.414 7.408-5.976 18.407-17.31 36.062-35.175 54.8-8.455 8.867-8.146 7.637-3.473 13.837 2.665 3.535 7.27 10.892 7.258 11.595-.006.217-1.465-1.913-3.246-4.734-1.782-2.82-4.741-7.05-6.576-9.401-4.312-5.524-17.925-19.943-18.828-19.943-.41 0-2.116 4.486-4.17 10.968-5.592 17.644-16.836 47.806-17.772 47.67-.192-.027-1.852-.678-3.69-1.446zm4.975-2.546c.514-1.606.856-3 .76-3.098-.264-.27-4.9 4.266-4.9 4.795 0 .55 2.351 1.725 2.856 1.43.193-.114.771-1.52 1.284-3.127zm21.194 3.105c.88-.913 9.744-7.095 9.744-6.796 0 .296-5.985 4.689-8.63 6.334-.92.572-1.42.78-1.114.462zm11.971-8.394c0-.118.439-.567.974-.997.884-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm2.227-1.71c0-.118.439-.566.975-.996.883-.71.902-.689.21.215-.727.949-1.185 1.25-1.185.782zm2.227-1.709c0-.118.439-.567.975-.997.883-.709.903-.688.21.215-.727.95-1.185 1.251-1.185.782zm3.063-2.633c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.554.626-1.132 1.14-1.286 1.14-.153 0 .176-.514.73-1.14zm3.062-2.565c.72-.783 1.433-1.424 1.586-1.424.153 0-.31.64-1.03 1.424-.718.784-1.432 1.425-1.585 1.425-.153 0 .31-.641 1.03-1.425zm2.227-1.602c0-.098.815-.932 1.81-1.852l1.81-1.674-1.636 1.852c-1.524 1.726-1.984 2.114-1.984 1.674zm39.02-55.995c.026-.664.158-.799.336-.344.161.411.141.903-.044 1.092-.185.19-.316-.147-.292-.748zm.653-5.08c.006-1.254.12-1.7.253-.991.134.709.129 1.734-.01 2.279-.14.545-.249-.035-.243-1.289zm.576-5.129c.006-1.567.112-2.14.24-1.274.128.866.125 2.148-.008 2.849-.132.7-.237-.008-.233-1.575zm-755.832 1.035c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm420.344.012c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-423.72-.57c.383-.158 1.01-.158 1.393 0 .382.159.07.288-.696.288s-1.08-.13-.696-.288zm426.782-.015c.536-.143 1.413-.143 1.949 0s.097.26-.974.26c-1.072 0-1.51-.117-.975-.26zm-430.957-.57c.535-.143 1.412-.143 1.948 0 .536.144.098.26-.974.26s-1.51-.116-.974-.26zm435.133.016c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.079-.13-.696-.287zm-438.464-.588c.542-.144 1.294-.135 1.67.021.378.157-.065.275-.984.263-.919-.011-1.227-.14-.686-.284zm441.805.018c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.129-.696-.287zm-445.145-.587c.541-.145 1.293-.135 1.67.02.377.157-.066.275-.985.263-.919-.011-1.227-.139-.685-.283zm448.486.017c.383-.158 1.009-.158 1.392 0s.07.287-.696.287-1.08-.129-.696-.287zm-452.394-.585c.535-.143 1.412-.143 1.948 0s.098.26-.974.26-1.51-.117-.974-.26zm456.023-.002c.542-.145 1.294-.135 1.67.021.378.156-.065.274-.984.263-.919-.012-1.227-.14-.686-.284zm-458.494-.564c.402-.165.882-.145 1.067.045.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm461.835-.006c.542-.145 1.294-.135 1.67.02.378.157-.066.275-.984.263-.92-.011-1.227-.139-.686-.283zm-465.479-.57c.542-.145 1.294-.135 1.67.021.378.156-.066.274-.984.263-.919-.012-1.227-.14-.686-.284zm468.82 0c.542-.145 1.293-.135 1.67.021s-.066.274-.985.263c-.918-.012-1.227-.14-.685-.284zm-472.415-.564c.402-.165.883-.145 1.068.045.185.19-.144.324-.731.299-.649-.027-.78-.162-.337-.344zm475.756-.006c.541-.145 1.293-.135 1.67.02.377.157-.066.275-.985.264-.919-.012-1.227-.14-.685-.284zm308.496-3.309c0-2.193.103-3.021.224-1.839.12 1.182.118 2.977-.006 3.989-.123 1.011-.222.044-.22-2.15zm-305.444 2.757c.382-.158 1.009-.158 1.391 0 .383.158.07.287-.695.287-.766 0-1.08-.13-.696-.287zm3.072-.588c.542-.144 1.294-.134 1.67.022.378.156-.065.274-.984.262-.919-.011-1.227-.14-.686-.284zm-490.788-.564c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm493.84.012c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.079-.13-.696-.288zm-496.624-.581c.402-.165.882-.145 1.067.044.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm499.408.011c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.079-.13-.696-.288zm-502.784-.57c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.287zm505.857-.017c.542-.144 1.294-.135 1.67.021.378.156-.066.274-.984.263-.92-.012-1.228-.14-.686-.284zm-508.606-.564c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm511.658.012c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.13-.696-.287zm-515.033-.57c.382-.158 1.009-.158 1.391 0 .383.158.07.287-.695.287-.766 0-1.08-.129-.696-.287zm518.408-.012c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.784-.57c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm-526.204-.558c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.078-.13-.696-.288zm528.988-.011c.402-.165.883-.145 1.068.045.185.189-.144.324-.731.299-.649-.027-.78-.163-.337-.344zm-531.18-.57c.402-.165.882-.145 1.067.045.185.19-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm533.964 0c.402-.165.883-.145 1.068.045.185.19-.144.324-.731.299-.649-.027-.78-.162-.337-.344zm-536.783-.558c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.079-.129-.696-.287zm539.567-.012c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm-541.76-.57c.403-.164.883-.144 1.068.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm544.544 0c.402-.164.882-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm-546.77-.57c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.028-.781-.162-.337-.344zm-2.227-.57c.401-.164.882-.144 1.067.046.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm-2.228-.569c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm600.223-9.687c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.57c.402-.164.882-.144 1.067.046.185.189-.143.324-.73.299-.649-.027-.78-.162-.337-.344zm2.227-.57c.402-.164.883-.144 1.068.046.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.228-.569c.402-.165.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm2.61-.75c.612-.27 1.489-.49 1.948-.49.527 0 .424.18-.278.49-.613.269-1.49.49-1.949.49-.526 0-.423-.182.279-.49zm3.514-.96c.402-.164.883-.144 1.068.046.185.189-.144.324-.731.299-.649-.027-.78-.163-.337-.344zm2.889-.75c.459-.304 1.21-.538 1.67-.52.55.02.456.197-.278.52-1.531.673-2.41.673-1.392 0zm3.236-.959c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.61-.75c.612-.27 1.49-.49 1.949-.49.526 0 .423.181-.279.49-.612.27-1.489.49-1.948.49-.527 0-.424-.182.278-.49zm4.176-1.14c.46-.304 1.211-.538 1.67-.52.551.02.456.197-.278.52-1.53.673-2.41.673-1.392 0zm3.898-1.14c.459-.303 1.21-.538 1.67-.52.55.02.456.198-.279.52-1.53.674-2.41.674-1.391 0zm3.236-.958c.402-.165.882-.145 1.067.045.185.189-.144.324-.73.299-.65-.028-.781-.163-.337-.344zm3.897-1.14c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm5.568-1.71c.402-.164.883-.144 1.068.046.185.189-.144.324-.731.299-.649-.027-.78-.163-.337-.344zm7.239-2.279c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.782-.163-.337-.345zm25.717-8.727c.459-.304 1.085-.553 1.392-.553.306 0 .18.249-.279.553-.46.304-1.086.552-1.392.552-.306 0-.18-.248.279-.552zm3.897-1.364c0-.123.389-.376.864-.563.496-.195.72-.1.524.224-.327.541-1.388.8-1.388.34zM66.668 319.962c-1.378-.251-4.385-.48-6.682-.508-6.548-.08-6.475-.58.646-4.437 28.897-15.647 61.555-26.894 93.061-32.048 16.869-2.76 40.56-4.347 53.348-3.574l7.022.425-.582-1.71c-1.179-3.458-7.493-8.907-15.495-13.37-4.28-2.388-4.921-3.187-.868-1.081 4.888 2.538 10.924 6.879 13.613 9.788 3.172 3.432 5.01 6.617 4.136 7.169-.313.198-.465 1.463-.338 2.81.314 3.333-1.099 5.976-5.341 9.995-5.719 5.418-20.695 12.324-36.09 16.642-17.861 5.01-40.213 8.393-65.506 9.917-10.98.66-37.258.65-40.924-.018zm34.382-47.682c1.301-.12 3.43-.12 4.732 0s.237.218-2.366.218-3.668-.098-2.366-.218zm-8.346-.555c.693-.137 1.695-.132 2.227.011.533.143-.034.254-1.259.248-1.225-.006-1.66-.123-.968-.26zm18.785-.11c1.838-.25 4.469-.615 5.847-.813 2.123-.305 2.25-.274.835.202-.919.31-3.55.675-5.846.813-4.013.24-4.046.232-.836-.203zM88.8 271.18c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-2.784-.57c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.287zm-2.192-.581c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-6.332-2.206c-1.019-.836-1.001-.848.311-.208 1.705.83 2.02 1.094 1.313 1.094-.299 0-1.03-.399-1.624-.886zm49.092-.796c.34-.485.896-1.395 1.236-2.022.34-.627.625-.833.635-.46.009.375-.547 1.285-1.236 2.023-.69.738-.975.945-.635.46zm-52.12-1.45c-.717-.782-1.2-1.518-1.07-1.634.128-.117.816.523 1.529 1.422 1.594 2.012 1.313 2.142-.458.212zm-1.584-3.706c0-.783.127-1.104.281-.712.155.392.155 1.033 0 1.424-.154.392-.28.072-.28-.712zm52.808-.285c-.57-.702-.526-.854.243-.854.515 0 .794.234.621.52-.173.287 0 .652.385.81.436.18.463.306.072.334-.346.025-.94-.34-1.321-.81zm2.923-1.247c.536-.144 1.413-.144 1.949 0 .535.143.097.26-.975.26s-1.51-.117-.974-.26zm99.527-.396c0-.483 2.83-.734 3.108-.275.164.272-.468.494-1.405.494s-1.704-.099-1.704-.219zm-42.978-.74c.402-.165.882-.145 1.067.045.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm38.947-.014c.693-.136 1.695-.131 2.227.011.533.143-.034.254-1.259.248-1.225-.006-1.66-.123-.968-.26zm-88.397-.382c0-.118.438-.567.974-.997.883-.709.903-.689.21.215-.727.95-1.184 1.25-1.184.782zm46.353-.162c-1.141-.472-.79-1.856.559-2.203.69-.177 3.258-.233 5.707-.125l4.452.197-5.117.114c-5.15.116-6.91.813-4.523 1.793.708.29.912.525.453.52-.46-.005-1.148-.138-1.531-.296zm37.027-.025c.689-.136 1.816-.136 2.505 0 .69.136.125.247-1.253.247s-1.941-.111-1.252-.247zm-5.84-.577c.847-.13 2.1-.127 2.785.008.685.136-.008.243-1.539.238-1.531-.004-2.091-.114-1.245-.245zm-6.957-.574c1.001-.126 2.504-.124 3.341.006.837.13.018.234-1.82.231-1.837-.003-2.521-.11-1.52-.236zm-9.737-.576c1.464-.118 3.72-.116 5.011.003 1.293.12.095.216-2.661.214-2.756-.002-3.814-.1-2.35-.217zm-60.62-2.572l-1.061-1.282 1.252 1.086c.69.597 1.253 1.174 1.253 1.282 0 .456-.448.119-1.445-1.086zm-10.353-3.665c.402-.165.882-.145 1.067.045.185.189-.143.324-.73.299-.649-.027-.781-.163-.337-.344zm-41.202-7.408c.401-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm65.144-.57c.402-.164.882-.144 1.067.045.186.19-.143.324-.73.3-.649-.028-.78-.163-.337-.345zm-14.222-1.145c.542-.144 1.293-.135 1.67.021s-.066.275-.985.263c-.918-.012-1.227-.14-.685-.284z",
      fill: "#0086b7",
      transform: "matrix(1.05173 0 0 1.02477 373.638 -247.113)"
    }), /* @__PURE__ */ React52.createElement("path", {
      d: "M63.76 1205.043c1.309-.12 3.313-.119 4.453.01 1.14.122.07.22-2.38.219-2.45 0-3.383-.102-2.074-.223zm-8.38-.563c.989-.126 2.742-.128 3.898-.01 1.155.123.346.226-1.798.229-2.143 0-3.088-.098-2.1-.225zm-6.39-.567c.842-.13 2.22-.13 3.062 0 .842.13.153.237-1.531.237-1.685 0-2.374-.106-1.532-.237zm-6.118-.57c.847-.131 2.1-.128 2.784.01.685.135-.007.242-1.539.238-1.53-.01-2.091-.115-1.245-.246zm-5.297-.564c.69-.135 1.817-.135 2.506 0 .689.136.125.247-1.253.247s-1.942-.11-1.253-.247zm-4.733-.56c.536-.143 1.413-.143 1.95 0 .535.143.097.26-.975.26s-1.51-.117-.975-.26zm-4.454-.57c.536-.143 1.413-.143 1.949 0 .536.144.097.26-.975.26-1.071 0-1.51-.116-.974-.26zm-4.454-.57c.536-.143 1.413-.143 1.948 0 .536.144.098.261-.974.261s-1.51-.117-.974-.26zm-3.898-.57c.536-.143 1.413-.143 1.949 0 .536.144.097.261-.974.261-1.072 0-1.51-.117-.975-.26zm-3.33-.571c.542-.145 1.293-.135 1.67.02.377.157-.066.275-.985.263-.918-.01-1.227-.139-.685-.283zm-3.63-.553c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.079-.13-.696-.288zm-3.34-.57c.382-.157 1.009-.157 1.391 0 .383.159.07.288-.696.288-.765 0-1.078-.13-.696-.287zm-3.341-.57c.383-.157 1.009-.157 1.392 0 .383.159.07.288-.696.288s-1.08-.13-.696-.287zm-3.341-.569c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.129-.696-.287zm-2.784-.57c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-2.75-.581c.403-.165.883-.145 1.068.045.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm-2.783-.57c.402-.165.882-.145 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-2.784-.57c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-5.011-1.14c.402-.164.882-.144 1.067.045.185.19-.144.325-.73.3-.65-.027-.781-.163-.337-.344zm-5.011-1.14c.402-.164.882-.144 1.067.046.185.19-.144.324-.73.3-.65-.028-.782-.163-.337-.345zm-2.228-.569c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm-8.908-2.28c.402-.164.882-.144 1.067.046.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm275.612 0c.402-.164.882-.144 1.067.046.186.19-.143.324-.73.3-.649-.028-.78-.163-.337-.345zm2.784-.569c.402-.165.882-.144 1.067.045.185.19-.143.324-.73.3-.649-.028-.78-.163-.337-.345zm2.193-.558c.382-.158 1.009-.158 1.392 0 .382.158.07.288-.696.288s-1.08-.13-.696-.288zm2.784-.57c.382-.158 1.009-.158 1.392 0 .382.158.07.288-.696.288s-1.08-.13-.696-.288zm2.818-.581c.402-.165.883-.145 1.068.045.185.189-.144.324-.731.299-.649-.027-.78-.162-.337-.344zm2.784-.57c.402-.165.882-.145 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.227-.57c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.784-.57c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.027-.78-.163-.337-.345zm2.228-.57c.402-.164.882-.144 1.067.045.185.19-.144.325-.731.3-.649-.027-.78-.163-.336-.344zm2.784-.57c.402-.164.882-.144 1.067.046.185.189-.144.324-.731.299-.649-.027-.78-.162-.336-.344zm2.227-.57c.402-.164.882-.144 1.067.046.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.569c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-342.602-5.355c-2.487-.98-2.572-1.066-.795-.803 1.094.16 3.098.65 4.454 1.085 2.193.704 2.281.793.796.803-.92.01-2.924-.481-4.455-1.085zm362.646.227c.402-.165.883-.145 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm-369.049-2.745c-.765-.448-1.141-.814-.835-.814.306 0 1.183.366 1.949.814.765.448 1.141.814.835.814-.306 0-1.183-.366-1.949-.814zm381.299-.674c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-395.358-6.197c-5.13-2.649-9.326-4.945-9.326-5.101 0-.255 18.875 9.218 19.441 9.757.921.876-2.053-.492-10.115-4.656zm169.56-1.24c1.464-.119 3.72-.117 5.012.01 1.292.119.094.215-2.662.213-2.756 0-3.813-.1-2.35-.217zm-23.959-.577a342.876 342.876 0 0114.199 0c3.904.098.71.178-7.1.178-7.808 0-11.003-.08-7.099-.178zm38.943 0c3.887-.098 10.401-.098 14.477 0 4.075.098.896.178-7.066.178-7.963 0-11.297-.079-7.41-.177zm-55.903-.566c1.926-.112 4.933-.11 6.682 0 1.749.112.173.204-3.502.203-3.675 0-5.106-.093-3.18-.205zm81.27 0c1.914-.112 5.046-.112 6.96 0 1.914.111.348.202-3.48.202s-5.394-.091-3.48-.202zm-92.428-.565c1.302-.12 3.432-.12 4.733 0 1.302.12.237.218-2.366.218s-3.668-.098-2.367-.218zm106.07 0c1.454-.118 3.834-.118 5.289 0 1.455.117.265.213-2.645.213-2.909 0-4.1-.096-2.644-.213zm202.533-1.007c1.378-.755 2.756-1.373 3.062-1.373.307 0-.57.618-1.949 1.373-1.378.755-2.756 1.373-3.062 1.373-.306 0 .57-.618 1.949-1.373zm-317.79.44c1.149-.123 3.028-.123 4.176 0 1.149.122.21.223-2.088.223-2.296 0-3.236-.1-2.088-.224zm126.129-.01c1.31-.12 3.314-.12 4.454.01 1.14.122.069.22-2.381.218-2.45 0-3.383-.102-2.073-.222zm-133.645-.562c.995-.126 2.624-.126 3.619 0 .995.127.18.23-1.81.23s-2.805-.103-1.81-.23zm141.97 0c.988-.126 2.742-.128 3.897-.01 1.155.124.346.227-1.797.23-2.144 0-3.089-.099-2.1-.225zm-148.93-.561c.842-.13 2.22-.13 3.062 0 .842.13.153.237-1.531.237s-2.373-.107-1.531-.237zm157.294-.01c.995-.126 2.624-.126 3.619 0 .995.126.18.23-1.81.23s-2.805-.104-1.81-.23zm-163.411-.567c.846-.13 2.099-.127 2.784.01.684.136-.008.243-1.54.239-1.53-.01-2.09-.115-1.244-.246zm170.659-.01c1-.126 2.504-.124 3.34.01.837.13.019.234-1.819.23-1.837-.01-2.522-.109-1.521-.235zm-176.513-.555c.689-.136 1.816-.136 2.505 0 .69.136.126.247-1.253.247-1.378 0-1.941-.111-1.252-.247zm183.463-.01c.842-.13 2.22-.13 3.062 0 .842.13.153.237-1.53.237-1.685 0-2.374-.107-1.532-.237zm-189.031-.564c.689-.136 1.816-.136 2.505 0 .69.136.126.247-1.252.247-1.378 0-1.942-.111-1.253-.247zm195.156-.01c.842-.13 2.22-.13 3.062 0 .842.13.153.237-1.531.237s-2.373-.106-1.531-.237zm-287.584-2.192c-2.067-1.086-3.758-2.102-3.758-2.258 0-.156 1.754.62 3.897 1.724 2.144 1.105 3.898 2.134 3.898 2.287 0 .382.156.45-4.037-1.753zm87.417 1.628c.689-.136 1.816-.136 2.505 0 .69.136.125.247-1.253.247s-1.941-.111-1.252-.247zm206.299-.01c.846-.13 2.1-.127 2.784.01.685.135-.008.243-1.539.238-1.531-.01-2.091-.115-1.245-.246zm-210.747-.564c.692-.136 1.695-.13 2.227.011.532.143-.034.254-1.26.248-1.224-.01-1.66-.123-.967-.26zm216.029 0c.689-.136 1.816-.136 2.506 0 .689.136.125.247-1.253.247s-1.942-.11-1.253-.247zm-220.768-.56c.535-.143 1.412-.143 1.948 0s.098.26-.974.26-1.51-.117-.974-.26zm226.336-.01c.689-.136 1.816-.136 2.505 0 .69.136.126.247-1.252.247-1.378 0-1.942-.111-1.253-.247zm-230.79-.56c.535-.144 1.412-.144 1.948 0 .536.143.097.26-.974.26-1.072 0-1.51-.117-.975-.26zm235.801-.01c.689-.137 1.817-.137 2.506 0 .689.135.125.246-1.253.246s-1.942-.11-1.253-.247zm-239.7-.561c.537-.143 1.414-.143 1.95 0 .535.143.097.26-.975.26s-1.51-.117-.974-.26zm244.718-.01c.692-.136 1.694-.131 2.227.01.532.144-.035.255-1.26.249-1.224-.01-1.66-.123-.967-.26zm-248.604-.562c.541-.144 1.293-.135 1.67.021s-.066.275-.985.263c-.919-.011-1.227-.14-.685-.284zm253.33 0c.536-.143 1.413-.143 1.949 0 .536.144.097.26-.975.26s-1.51-.116-.974-.26zm-257.228-.572c.542-.144 1.294-.135 1.67.021.378.156-.066.275-.984.263-.92-.011-1.228-.14-.686-.284zm261.682 0c.536-.143 1.413-.143 1.949 0 .536.144.097.26-.974.26-1.072 0-1.51-.116-.975-.26zm-265.023-.572c.542-.144 1.294-.134 1.67.021.378.157-.065.275-.984.263-.919-.01-1.227-.14-.686-.284zm269.478 0c.535-.143 1.412-.143 1.948 0 .536.144.098.261-.974.261s-1.51-.117-.974-.26zm-273.107-.554c.382-.158 1.009-.158 1.392 0 .382.158.07.287-.696.287s-1.08-.129-.696-.287zm277.289-.026c.693-.136 1.695-.131 2.227.011.532.143-.034.254-1.26.248-1.224-.01-1.66-.123-.967-.26zm-340.207-1.338c-1.148-.62-2.088-1.255-2.088-1.41 0-.156 1.002.24 2.227.88 1.225.639 2.227 1.285 2.227 1.435 0 .373-.004.371-2.366-.905zm59.577.801c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.129-.696-.287zm284.8-.015c.535-.143 1.412-.143 1.948 0s.098.26-.974.26-1.51-.117-.975-.26zm-288.14-.554c.382-.158 1.008-.158 1.391 0s.07.287-.696.287c-.765 0-1.079-.13-.696-.287zm292.604-.018c.542-.145 1.294-.135 1.67.02.378.157-.066.275-.984.263-.919-.01-1.227-.139-.686-.283zm118.447.133c0-.157 1.003-.808 2.228-1.448 1.225-.64 2.227-1.034 2.227-.878 0 .157-1.002.808-2.227 1.448-1.225.64-2.228 1.035-2.228.878zm-414.393-.686c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.078-.13-.696-.288zm299.844-.018c.542-.144 1.293-.135 1.67.021s-.066.274-.985.263c-.918-.011-1.227-.14-.685-.284zm-303.184-.552c.382-.158 1.009-.158 1.392 0 .382.158.07.287-.696.287s-1.08-.129-.696-.287zm306.514-.015c.536-.143 1.413-.143 1.949 0s.097.26-.974.26c-1.072 0-1.51-.117-.975-.26zm-309.298-.554c.382-.159 1.009-.159 1.392 0 .382.158.07.287-.696.287s-1.08-.13-.696-.287zm313.763-.018c.542-.145 1.293-.135 1.67.02.377.157-.066.275-.985.263-.918-.01-1.227-.139-.685-.284zm-364.603-1.062c-1.038-.85-1.032-.86.172-.264.689.341 1.252.74 1.252.886 0 .436-.288.31-1.424-.622zm48.09.497c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.027-.78-.163-.336-.345zm320.678.012c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.078-.13-.696-.288zm-323.461-.581c.401-.165.882-.145 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm326.802.012c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.079-.13-.696-.287zm104.26.122c0-.157.751-.683 1.67-1.17.919-.485 1.67-.755 1.67-.598 0 .156-.751.682-1.67 1.168-.919.487-1.67.756-1.67.6zm-433.846-.704c.402-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm332.927.012c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-378.234-1.078c-1.038-.851-1.031-.862.172-.265.689.341 1.252.74 1.252.886 0 .436-.288.31-1.424-.621zm42.523.497c.402-.165.882-.145 1.067.045.185.189-.144.324-.731.299-.649-.027-.78-.163-.336-.344zm339.052.012c.382-.159 1.009-.159 1.392 0 .382.158.07.287-.696.287s-1.08-.13-.696-.287zm-341.836-.582c.402-.165.882-.145 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm345.176.012c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.078-.13-.696-.287zm3.376-.582c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-391.075-1.067c-1.038-.85-1.031-.86.172-.264.689.341 1.252.74 1.252.886 0 .436-.288.31-1.424-.622zm37.512.497c.401-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.027-.78-.163-.336-.345zm355.755.012c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.078-.13-.696-.288zm2.784-.57c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.078-.13-.696-.287zm-363.55-.581c.401-.165.882-.145 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm366.891.012c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.129-.696-.287zm-402.176-1.079c-1.038-.85-1.031-.861.172-.265.689.342 1.252.74 1.252.887 0 .436-.288.31-1.424-.622zm33.057.497c.402-.164.882-.144 1.067.045.185.19-.143.324-.73.3-.649-.028-.781-.163-.337-.345zm371.903.012c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-375.124-1.028c-.372-.46-.548-1.164-.39-1.567.185-.47.303-.386.33.238.025.533.483 1.23 1.02 1.55.535.319.691.588.346.597-.345.01-.933-.358-1.306-.818zm377.908.458c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm2.784-.57c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288s-1.079-.13-.696-.287zm-413.312-1.078c-1.038-.85-1.031-.861.172-.265.689.342 1.252.74 1.252.886 0 .436-.288.31-1.424-.621zm416.096.509c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.13-.696-.287zm2.784-.57c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.129-.696-.287zm79.76.133c0-.157.502-.56 1.114-.895.613-.336 1.114-.482 1.114-.325 0 .156-.501.56-1.114.895-.612.335-1.114.481-1.114.325zm-76.976-.703c.383-.158 1.009-.158 1.392 0s.07.288-.696.288-1.079-.13-.696-.288zm2.819-.581c.402-.165.882-.145 1.067.045.185.189-.144.324-.731.299-.649-.027-.78-.163-.336-.344zm2.784-.57c.402-.165.882-.145 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm74.993-.476c.612-.51 1.614-1.18 2.227-1.487l1.113-.56-1.113.928c-.613.51-1.615 1.18-2.227 1.487l-1.114.56zm-506.715-.591c-1.038-.85-1.03-.861.172-.265.69.342 1.253.74 1.253.886 0 .436-.289.31-1.425-.621zm433.914.509c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.13-.696-.287zm2.819-.582c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-399.116-.4c0-.61 1.656-3.77 1.977-3.77.153 0-.136.834-.642 1.852-1.033 2.08-1.335 2.514-1.335 1.919zm401.308-.137c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.079-.129-.696-.287zm2.819-.582c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.027-.781-.163-.337-.345zm2.192-.558c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.288zm66.398.133c0-.157.5-.56 1.113-.895.613-.335 1.114-.482 1.114-.325 0 .157-.501.56-1.114.895-.612.335-1.113.482-1.113.325zm-514.788-1.211c-1.038-.851-1.031-.862.172-.265.689.342 1.253.74 1.253.886 0 .436-.289.31-1.425-.621zm451.209.497c.402-.165.882-.145 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.57c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.57c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.228-.57c.401-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.027-.78-.163-.336-.345zm2.227-.57c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.027-.781-.163-.337-.344zm59.124.147c0-.156 1.503-1.33 3.34-2.606 1.838-1.277 3.342-2.194 3.342-2.037 0 .157-1.504 1.33-3.341 2.607-1.838 1.277-3.34 2.193-3.34 2.036zm-474.109-1.467c.554-.626 1.133-1.14 1.286-1.14.153 0-.175.514-.73 1.14-.553.627-1.132 1.14-1.285 1.14-.154 0 .175-.513.729-1.14zm417.212.75c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm2.227-.57c.402-.164.882-.143 1.067.046.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.569c.402-.164.882-.144 1.067.045.185.19-.143.324-.73.3-.649-.028-.78-.163-.337-.345zm-418.325-3.6c1.196-1.253 2.3-2.278 2.453-2.278.153 0-.7 1.025-1.896 2.279-1.197 1.253-2.3 2.279-2.454 2.279-.153 0 .7-1.026 1.897-2.28zm430.575.181c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.027-.782-.163-.337-.345zm-491.615-1.747c-.693-.904-.673-.924.21-.215.536.43.975.879.975.997 0 .469-.458.167-1.185-.782zm64.937-1.852c.555-.627 1.133-1.14 1.286-1.14.154 0-.175.513-.729 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm479.12.355c0-.119.439-.567.975-.997.883-.71.903-.69.21.215-.727.949-1.184 1.25-1.184.782zm-548.719-1.83l-1.67-1.468 1.81 1.225c.995.674 1.809 1.337 1.809 1.472 0 .426-.236.278-1.949-1.228zm72.383-.804c.555-.627 1.133-1.14 1.286-1.14.154 0-.175.513-.729 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm-75.516-1.567c-.693-.904-.673-.924.21-.215.928.744 1.222 1.212.764 1.212-.115 0-.554-.449-.974-.997zm77.465.212c0-.118.439-.567.974-.997.884-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm479.956 0c0-.118.438-.567.974-.997.883-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm-560.413-2.399l-1.67-1.469 1.81 1.226c.995.674 1.81 1.336 1.81 1.472 0 .426-.237.277-1.95-1.229zm82.684.69c0-.119.439-.567.975-.997.883-.71.902-.69.21.215-.728.949-1.185 1.25-1.185.782zm481.626-1.14c0-.118.439-.567.974-.997.884-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm-567.443-1.922c-.692-.903-.673-.923.21-.215.536.43.975.88.975.997 0 .47-.458.168-1.185-.782zm89.715.183c0-.157.5-.56 1.113-.895.613-.335 1.114-.481 1.114-.325 0 .157-.501.56-1.114.895-.612.335-1.113.482-1.113.325zm479.955.03c0-.118.439-.567.975-.997.883-.709.902-.689.21.215-.728.95-1.185 1.251-1.185.782zm-571.897-1.922c-.693-.903-.673-.923.21-.215.536.43.975.88.975.997 0 .47-.458.168-1.185-.782zm94.726.183c0-.157.5-.56 1.113-.895.613-.335 1.114-.482 1.114-.325 0 .157-.501.56-1.114.895-.612.335-1.113.482-1.113.325zm480.234-.895c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm-577.187-.997c-.693-.904-.673-.924.21-.215.536.43.974.879.974.997 0 .469-.457.167-1.184-.782zm555.193-.142c.46-.304 1.086-.553 1.392-.553.306 0 .181.249-.278.553-.46.303-1.086.552-1.392.552-.306 0-.181-.249.278-.552zm23.942-.216c0-.118.439-.567.975-.997.883-.708.903-.688.21.215-.727.95-1.185 1.251-1.185.782zM-170.3 1117l-1.06-1.282 1.252 1.085c.69.597 1.253 1.174 1.253 1.282 0 .456-.448.12-1.445-1.085zM-65.849 1118c0-.386 4.522-2.688 4.774-2.43.117.119-.91.775-2.28 1.456-1.372.682-2.494 1.12-2.494.974zm457.127-.859c.46-.304 1.086-.552 1.392-.552.306 0 .18.248-.279.552-.459.304-1.085.553-1.392.553-.306 0-.18-.249.279-.553zm22.272-.215c0-.118.438-.567.974-.997.883-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm-18.931-1.21c.765-.447 1.642-.814 1.948-.814.307 0-.07.367-.835.815-.765.448-1.642.814-1.949.814-.306 0 .07-.366.836-.814zm-569.043-2.278c-1.352-1.41-2.333-2.565-2.18-2.565.153 0 1.385 1.154 2.737 2.565 1.353 1.41 2.334 2.564 2.18 2.564-.152 0-1.384-1.154-2.737-2.564zm591.036.854c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.554.627-1.132 1.14-1.286 1.14-.153 0 .176-.513.73-1.14zm-474.666-.285c.766-.448 1.643-.814 1.949-.814.306 0-.07.366-.835.814-.766.448-1.643.815-1.95.815-.305 0 .07-.367.836-.815zm456.57.061c0-.123.389-.376.864-.563.496-.195.72-.099.524.224-.327.541-1.388.8-1.388.34zm-453.23-1.485c.46-.304 1.086-.552 1.393-.552.306 0 .18.248-.279.552-.459.304-1.085.552-1.392.552-.306 0-.18-.248.279-.552zm474.11-.57c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.554.627-1.132 1.14-1.286 1.14-.153 0 .176-.513.73-1.14zm-471.325-.57c.459-.304 1.085-.552 1.392-.552.306 0 .18.248-.279.552-.46.304-1.085.553-1.392.553-.306 0-.18-.249.279-.553zm474.387-1.994c.72-.783 1.433-1.425 1.586-1.425.153 0-.31.642-1.029 1.425-.72.783-1.433 1.424-1.586 1.424-.153 0 .31-.64 1.03-1.424zm-602.206-1.567l-1.636-1.852 1.81 1.674c.995.92 1.81 1.754 1.81 1.852 0 .44-.46.052-1.984-1.674zm605.547-1.282c.72-.783 1.433-1.425 1.586-1.425.153 0-.31.642-1.03 1.425-.718.783-1.432 1.424-1.585 1.424-.153 0 .31-.64 1.029-1.424zm-23.341-.617c.026-.664.158-.8.336-.345.16.412.141.903-.044 1.093-.185.189-.317-.148-.292-.748zm-584.748-1.235c-.692-.904-.673-.924.21-.215.928.744 1.223 1.212.765 1.212-.116 0-.555-.448-.975-.997zm610.316.25c0-.099.814-.932 1.81-1.853l1.81-1.673-1.636 1.852c-1.524 1.726-1.984 2.113-1.984 1.673zm-24.855-6.09c0-2.978.094-4.195.209-2.707.114 1.489.114 3.925 0 5.413-.115 1.489-.209.27-.209-2.706zm-587.365 2.796c-.49-.97-.792-1.864-.671-1.987.12-.124.636.669 1.145 1.762 1.145 2.457.749 2.645-.474.225zm159.443.803c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm456.675-.929c0-.098.814-.931 1.81-1.851l1.809-1.674-1.636 1.852c-1.524 1.726-1.983 2.114-1.983 1.673zm-450.55-.78c.402-.165.882-.145 1.067.045.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm2.227-.57c.402-.165.882-.145 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm354.677 0c.402-.165.882-.145 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm-352.45-.57c.402-.165.882-.144 1.067.045.185.19-.143.324-.73.3-.649-.028-.781-.163-.337-.345zm2.227-.57c.402-.164.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.027-.78-.163-.337-.345zm2.228-.57c.401-.164.882-.144 1.067.045.185.19-.144.325-.731.3-.649-.027-.78-.163-.336-.344zm352.554.175c0-.119.438-.567.974-.998.883-.708.903-.688.21.216-.727.949-1.184 1.25-1.184.782zm-349.77-.744c.401-.165.882-.145 1.067.045.185.189-.144.324-.731.299-.649-.027-.78-.162-.336-.344zm442.754.21c0-.098.815-.931 1.81-1.852l1.81-1.673-1.636 1.852c-1.524 1.726-1.984 2.113-1.984 1.673zm-440.527-.78c.402-.165.882-.145 1.067.044.185.19-.144.324-.73.3-.65-.027-.781-.163-.337-.345zm2.192-.559c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm2.819-.581c.402-.165.882-.145 1.067.045.185.19-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm2.192-.558c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.079-.13-.696-.287zm-189.062-1.617c.012-.94.136-1.256.278-.702.14.555.132 1.324-.02 1.71-.153.386-.269-.068-.258-1.008zM5.316 1095.1c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.784-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.027-.781-.163-.337-.345zm309.02 0c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.027-.781-.163-.337-.345zm31.285.174c0-.118.438-.567.974-.997.883-.709.903-.688.21.215-.727.95-1.184 1.251-1.184.782zm93.263-2.064c1.196-1.253 2.3-2.279 2.453-2.279.153 0-.7 1.026-1.897 2.28-1.196 1.253-2.3 2.278-2.453 2.278-.153 0 .7-1.025 1.897-2.279zm-430.784 1.32c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.027-.781-.163-.337-.344zm2.749-.557c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.13-.696-.287zm298.476-.012c.402-.165.882-.145 1.067.045.185.189-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm-295.692-.558c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.13-.696-.287zm334.215.162c0-.118.438-.567.974-.997.883-.709.903-.689.21.215-.727.95-1.184 1.251-1.184.782zm-331.431-.732c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287s-1.079-.129-.696-.287zm287.897-.012c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm95.404-.75c0-.784.126-1.104.28-.712.155.391.155 1.032 0 1.424-.154.392-.28.071-.28-.712zm-379.96.192c.383-.158 1.009-.158 1.392 0s.07.288-.696.288-1.08-.13-.696-.288zm281.772-.012c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.027-.781-.163-.337-.345zm-491.435-1.605c.01-.94.136-1.256.277-.701.141.554.132 1.324-.02 1.71-.153.385-.269-.069-.257-1.009zm212.736 1.03c.541-.145 1.293-.135 1.67.02.377.157-.066.275-.985.264-.919-.011-1.227-.14-.685-.284zm275.915.01c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm51.33.174c0-.118.438-.567.973-.997.884-.709.903-.689.21.215-.727.95-1.184 1.25-1.184.782zm-323.905-.75c.542-.144 1.294-.135 1.67.021.378.157-.065.275-.984.263-.919-.01-1.227-.14-.686-.284zm269.2.018c.382-.158 1.008-.158 1.391 0s.07.288-.696.288c-.765 0-1.079-.13-.696-.288zm-265.859-.587c.542-.144 1.294-.135 1.67.021.378.156-.066.274-.984.263-.92-.011-1.228-.14-.686-.284zm263.074.018c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.079-.13-.696-.288zm160.774-11.589c6.426-6.58 11.808-11.965 11.961-11.965.153 0-4.979 5.384-11.404 11.965-6.426 6.582-11.808 11.966-11.961 11.966-.153 0 4.979-5.384 11.404-11.966zm-420.518 11.004c.536-.144 1.413-.144 1.95 0 .535.143.097.26-.975.26s-1.51-.117-.975-.26zm256.403.015c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.078-.13-.696-.287zm63.057.162c0-.118.439-.567.975-.997.883-.709.902-.689.21.215-.727.949-1.185 1.25-1.185.782zm-315.551-.75c.541-.144 1.293-.135 1.67.021.377.157-.066.275-.985.263-.919-.01-1.227-.14-.685-.284zm249.154.018c.383-.158 1.009-.158 1.392 0 .383.159.07.288-.696.288s-1.08-.13-.696-.288zm-245.824-.585c.536-.143 1.413-.143 1.948 0 .536.144.098.26-.974.26s-1.51-.116-.974-.26zm242.483.015c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288s-1.079-.13-.696-.288zm-238.586-.585c.536-.143 1.413-.143 1.949 0s.097.26-.974.26c-1.072 0-1.51-.117-.975-.26zm234.977 0c.542-.144 1.294-.135 1.67.021.378.156-.065.274-.984.263-.919-.011-1.227-.14-.686-.284zm76.41-.747c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm-544.734-.57c0-.783.126-1.104.28-.712.155.392.155 1.033 0 1.425-.154.391-.28.07-.28-.713zm237.53.737c.692-.137 1.694-.131 2.227.01.532.143-.035.255-1.26.249-1.224-.01-1.66-.123-.967-.26zm227.454.01c.541-.145 1.293-.135 1.67.02.377.157-.066.275-.985.263-.919-.01-1.227-.139-.685-.283zm-223-.578c.693-.137 1.695-.131 2.227.01.533.143-.034.255-1.26.249-1.224-.01-1.66-.123-.967-.26zm218.535.01c.536-.144 1.413-.144 1.948 0 .536.143.098.26-.974.26s-1.51-.117-.974-.26zm-214.08-.58c.692-.137 1.694-.131 2.227.01.532.143-.035.255-1.26.248-1.225-.01-1.66-.122-.968-.259zm210.182.01c.536-.144 1.413-.144 1.949 0 .536.143.097.26-.974.26-1.072 0-1.51-.117-.975-.26zm-205.728-.58c.692-.137 1.695-.131 2.227.01.532.143-.034.255-1.26.248-1.224-.01-1.66-.123-.967-.259zm201.274.01c.536-.144 1.413-.144 1.949 0 .536.143.097.26-.975.26s-1.51-.117-.974-.26zm95.35-.747c.555-.627 1.134-1.14 1.287-1.14.153 0-.175.513-.73 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm-291.62.168c.69-.136 1.817-.136 2.506 0 .689.135.125.247-1.253.247s-1.942-.112-1.253-.247zm191.815.01c.536-.144 1.413-.144 1.95 0 .535.143.097.26-.975.26s-1.51-.117-.975-.26zm-186.804-.58c.69-.135 1.817-.135 2.506 0 .69.136.125.247-1.253.247s-1.942-.11-1.253-.246zm182.078 0c.693-.136 1.695-.13 2.227.012.533.142-.034.254-1.259.247-1.225-.01-1.66-.123-.968-.259zm-176.788-.574c.842-.131 2.22-.131 3.062 0 .843.13.153.237-1.53.237-1.685 0-2.374-.107-1.532-.237zm171.214.01c.689-.136 1.816-.136 2.505 0 .69.135.126.247-1.252.247-1.378 0-1.942-.112-1.253-.247zm-165.09-.576c.843-.13 2.22-.13 3.063 0 .842.13.153.237-1.531.237s-2.373-.107-1.531-.237zm159.251 0c.846-.131 2.1-.128 2.784.01.685.135-.008.242-1.539.238-1.53-.01-2.091-.115-1.245-.246zm118.729-.733c.554-.626 1.133-1.14 1.286-1.14.153 0-.175.514-.73 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm-271.566.157c1-.127 2.504-.124 3.34.01.837.13.018.234-1.819.23-1.837-.01-2.522-.109-1.521-.236zm146.705.01c.842-.13 2.22-.13 3.062 0 .842.13.153.238-1.531.238s-2.373-.107-1.531-.238zm-140.034-.574c.996-.126 2.624-.126 3.62 0 .995.127.18.23-1.81.23s-2.805-.103-1.81-.23zm133.084 0c1-.126 2.504-.124 3.34.01.837.13.018.234-1.819.231-1.837-.01-2.522-.11-1.521-.236zm-125.01-.573c1.148-.123 3.027-.123 4.176 0 1.148.123.209.223-2.088.223s-3.237-.1-2.088-.223zm116.636.01c.988-.126 2.742-.128 3.897-.01 1.155.123.347.226-1.797.229-2.144 0-3.089-.098-2.1-.225zm-107.71-.578c1.463-.118 3.718-.117 5.01.01 1.293.12.095.215-2.661.214-2.756 0-3.814-.1-2.35-.218zm98.256 0c1.302-.12 3.432-.12 4.733 0 1.302.12.237.218-2.366.218s-3.668-.098-2.367-.218zm152.423-.722c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm-551.504.351c0-.611 1.657-3.77 1.978-3.77.153 0-.136.833-.642 1.852-1.034 2.08-1.336 2.513-1.336 1.918zm312.244-.204c1.926-.111 4.932-.11 6.681 0 1.749.113.173.204-3.502.203-3.674 0-5.105-.093-3.18-.205zm74.31 0c1.76-.113 4.642-.113 6.403 0 1.76.113.32.206-3.202.206s-4.962-.092-3.201-.206zm-48.959-.576c8.52-.089 22.3-.088 30.624 0 8.323.09 1.352.162-15.49.161-16.844 0-23.653-.073-15.134-.16zm215.857-.89c0-.097.815-.93 1.81-1.85l1.81-1.675-1.636 1.852c-1.524 1.727-1.984 2.114-1.984 1.674zm29.034-2.527c-.608-1.453-.594-1.487.189-.461.464.608.844 1.313.844 1.567 0 .866-.378.461-1.033-1.106zm-23.466-2.707c1.04-1.097 2.014-1.994 2.167-1.994.154 0-.571.897-1.61 1.994-1.039 1.097-2.014 1.994-2.167 1.994-.153 0 .571-.897 1.61-1.994zm21.715-.285c-.328-.627-.47-1.14-.317-1.14.153 0 .546.513.874 1.14.328.627.47 1.14.318 1.14-.154 0-.547-.513-.875-1.14zm-574.61-2.564c1.039-1.097 2.014-1.994 2.167-1.994.153 0-.571.897-1.61 1.994-1.04 1.097-2.014 1.994-2.168 1.994-.153 0 .572-.897 1.61-1.994zm557.883-1.567c2.307-2.516 2.807-2.968 2.807-2.54 0 .09-1.19 1.31-2.644 2.706l-2.645 2.54zm-552.037-4.416c1.196-1.253 2.3-2.279 2.453-2.279.154 0-.7 1.026-1.896 2.28-1.196 1.253-2.3 2.278-2.453 2.278-.153 0 .7-1.025 1.896-2.279zm557.605-.712c2.694-2.938 3.383-3.204 4.549-1.76.698.865.658.878-.478.155-1.152-.735-1.432-.609-3.897 1.76l-2.656 2.551zm84.377.712c.555-.627 1.133-1.14 1.287-1.14.153 0-.175.513-.73 1.14-.554.627-1.133 1.14-1.286 1.14-.153 0 .175-.513.73-1.14zm1.392-1.924c0-.119.439-.567.975-.998.883-.708.903-.688.21.216-.727.949-1.185 1.25-1.185.782zm-640.311-.57c0-.118.438-.567.974-.997.883-.709.903-.689.21.215-.727.949-1.184 1.25-1.184.782zm2.227-1.71c0-.118.438-.567.974-.997.883-.708.903-.688.21.215-.727.95-1.184 1.251-1.184.782zm640.868-1.709c0-.118.439-.567.975-.997.883-.709.903-.689.21.215-.727.95-1.185 1.251-1.185.782zm2.228-3.204c.327-.626.72-1.14.874-1.14.153 0 .01.514-.318 1.14-.327.627-.72 1.14-.874 1.14-.153 0-.01-.513.318-1.14zm1.67-2.849c.328-.626.721-1.14.874-1.14.153 0 .01.514-.317 1.14-.328.627-.722 1.14-.875 1.14-.153 0-.01-.513.318-1.14zm-631.96-.825c0-.157.752-.683 1.67-1.169.92-.486 1.67-.756 1.67-.599 0 .157-.75.683-1.67 1.169-.918.486-1.67.756-1.67.599zm633.675-2.024c.812-1.744 1.069-2.067 1.069-1.343 0 .306-.39 1.054-.866 1.662-.816 1.043-.828 1.025-.203-.319zm4.454-12.868c.026-.663.158-.798.336-.344.16.411.141.903-.044 1.092-.185.19-.317-.147-.293-.748zm.621-3.37c.011-.941.136-1.257.277-.702.141.554.132 1.323-.02 1.709-.153.386-.268-.068-.257-1.008zm.64-6.839c0-2.507.1-3.461.217-2.121.117 1.34.116 3.391-.006 4.558-.12 1.167-.216.07-.214-2.437zm-62.831-3.703c.554-.627 1.133-1.14 1.286-1.14.153 0-.175.513-.73 1.14-.553.626-1.132 1.14-1.285 1.14-.153 0 .175-.514.729-1.14zm2.506-3.134c.719-.784 1.433-1.425 1.586-1.425.153 0-.31.641-1.03 1.425-.719.783-1.433 1.424-1.586 1.424-.153 0 .31-.64 1.03-1.424zm59.685 0c.011-.94.136-1.256.277-.702.141.555.132 1.324-.02 1.71-.153.386-.268-.068-.257-1.008zm-57.12-3.22c.58-.832 1.165-1.402 1.301-1.267.136.135-.338.815-1.054 1.511l-1.302 1.266zm56.499-.246c.026-.664.158-.8.336-.345.16.412.141.903-.044 1.092-.185.19-.317-.147-.293-.747zm-4.965-14.792c-.933-2.095-.755-2.542.254-.638.47.89.752 1.724.625 1.855-.128.13-.523-.418-.88-1.217zm-2.003-4.652c-.303-.812-.239-.878.311-.319.38.387.552.846.38 1.022-.171.175-.482-.141-.691-.703zM-199.62 789.699c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.078-.13-.696-.287zm-2.784-.57c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.078-.129-.696-.287zm-6.542-1.078c-12.583-2.764-23.385-5.666-23.385-6.283 0-.382-1.267-1.006-2.814-1.386-1.548-.38-2.7-.807-2.562-.949.37-.378 4.749.873 7.325 2.092 1.893.896 5.998 2 25.055 6.74 3.447.857.451.68-3.619-.214zm544.961-6.33c.383-.157 1.01-.157 1.392 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.287zm2.819-.581c.402-.165.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.888-.75c.766-.251 1.893-.457 2.506-.457.882 0 .824.095-.279.457-.765.25-1.893.456-2.505.456-.882 0-.824-.095.278-.456zm3.944-.783c.128-.117 6.997-1.937 15.266-4.045 8.268-2.107 17.79-4.678 21.158-5.712a836.135 836.135 0 0112.528-3.716c3.521-1.009 7.28-2.288 8.351-2.842 1.072-.555 5.288-2.06 9.37-3.345 4.08-1.285 7.637-2.473 7.902-2.641.836-.53 8.54-13.315 13.385-22.216 5.618-10.318 14.442-29.365 18.557-40.052 7.557-19.626 12.407-39.257 14.529-58.808 1.053-9.7 1.1-13.904.15-13.505-.383.161-3.14 1.462-6.125 2.892-2.986 1.43-5.429 2.477-5.429 2.329 0-.149 2.819-1.669 6.264-3.379 13.172-6.537 30.213-17.112 40.88-25.368 8.637-6.685 9.092-7.108 9.092-8.466 0-1.272.417-1.798 7.974-10.058 6.701-7.326 10.483-12.06 13.878-17.372 1.5-2.347 3.022-4.295 3.383-4.33a54.77 54.77 0 001.344-.149c.378-.048 1.47-1.674 2.427-3.613 1.51-3.06 1.665-3.776 1.175-5.411-.45-1.5-.346-2.475.505-4.769l1.071-2.883-2.227-9.392c-4.495-18.954-11.272-37.263-20.949-56.587-2.888-5.768-5.147-10.594-5.02-10.724.39-.4 9.821 9.604 14.675 15.568 5.869 7.21 10.561 14.94 17.088 28.152 13.2 26.716 18.788 40.66 28.89 72.08 9.345 29.067 10.653 35.92 9.432 49.425-2.466 27.267-16.82 48.737-49.528 74.084-7.756 6.01-23.573 16.654-28.54 19.204-11.052 5.675-43.973 19.684-51.563 21.942-1.693.504-3.567 1.416-4.164 2.026-2.977 3.047-53.05 18.726-89.149 27.915-14.631 3.724-17.16 4.299-16.58 3.766zm-591.36-2.091c-9.322-2.602-28.552-9.288-37.007-12.868-35.25-14.924-56.864-34.028-65.046-57.49-1.647-4.722-3.738-14.247-3.738-17.025 0-2.394-.502-3.862-1.176-3.436-.276.175-.647-.068-.823-.539-.354-.943 1.18-14.212 3.73-32.264 1.55-10.982 7.25-39.037 10.245-50.427 2.518-9.576 7.02-23.358 8.006-24.502.54-.627 2.038-3.063 3.33-5.413 8.343-15.184 20.136-27.498 37.935-39.61 13.862-9.433 22.324-13.906 41.203-21.777 8.6-3.586 34.789-12.841 41.76-14.758 2.283-.628 2.524-1.867.556-2.865-.765-.388-4.023-2.022-7.238-3.63-12.96-6.484-24.286-15.673-29.721-24.115-9.032-14.026-9.161-27.907-.427-45.816 1.488-3.052 2.604-5.843 2.48-6.204-.768-2.218 29.132-34.127 46.978-50.136 9.278-8.322 24.247-20.315 27.142-21.744 1.514-.747 5.275-2.924 8.356-4.837 7.836-4.864 26.244-14.322 36.506-18.757 22.907-9.9 48.506-18.096 76.816-24.594l10.835-2.488 1.892 2.536c3.796 5.088 12.808 10.506 23.913 14.377 12.106 4.219 33.786 8.615 51.911 10.526 28.438 2.998 64.571 2.568 92.706-1.102 24.414-3.185 47.02-9.207 61.882-16.485 12.272-6.01 17.872-11.289 18.891-17.807l.348-2.226 7.602.736c38.361 3.712 77.234 10.075 107.797 17.643 5.975 1.48 11.025 2.526 11.222 2.324.838-.858-.616-2.268-6.392-6.195-3.37-2.292-6.002-4.294-5.85-4.45.504-.515 20.86 10.4 31.37 16.82 19.508 11.916 31.257 20.025 49.015 33.829 12.466 9.691 19.81 16.542 25.192 23.5 11.078 14.323 15.99 27.178 15.303 40.045-.355 6.64-1.727 11.672-4.978 18.257-3.249 6.582-6.26 10.636-12.771 17.197-9.04 9.107-18.603 16.368-29.143 22.125-2.756 1.506-5.097 2.96-5.201 3.233-.282.731-4.527 2.845-5.232 2.604-.333-.113 1.816-1.579 4.775-3.257 2.959-1.677 5.38-3.238 5.38-3.468 0-.743-12.339-12.56-19.27-18.455-24.92-21.192-52.351-35.388-81.028-41.932l-4.808-1.097-3.467 1.442c-1.908.793-3.57 1.337-3.696 1.208-.126-.128.968-.695 2.429-1.26 4.53-1.752 17.401-7.67 23.615-10.86 17.332-8.893 30.592-19.052 38.62-29.588 5.148-6.756 6.557-9.902 6.892-15.385.74-12.096-.222-17.09-4.794-24.903-2.543-4.346-2.615-4.41-7.083-6.375-11.8-5.188-25.334-9.154-37.426-10.969-7.98-1.197-25.255-1.344-33.035-.28-22.286 3.046-48.005 11.51-71.306 23.464l-4.212 2.16-33.371-.312c-48.708-.456-86.17.917-127.192 4.662-85.681 7.821-157.104 21.07-211.223 39.18-5.775 1.933-10.63 3.862-10.79 4.287-.45 1.203 3.439 6.53 8.022 10.985 12.14 11.8 36.14 23.086 64.673 30.41 24.536 6.296 55.618 11.455 86.122 14.294 5.206.484 11.345 1.13 13.642 1.434 21.796 2.892 96.639 3.719 130.493 1.441 7.615-.512 13.984-.79 14.152-.617.169.172-.779.313-2.106.313-2.033 0-3.993.917-12.479 5.84-12.422 7.208-25.892 16.333-36.656 24.836-15.852 12.52-57.378 48.433-67.513 58.388l-5.568 5.468 6.681.1c6.298.094 6.475.127 3.081.576-1.98.262-4.827.798-6.327 1.192-2.563.672-2.786.64-3.705-.52l-.978-1.237-3.17 1.167c-3.147 1.158-3.285 1.16-19.904.233-9.205-.513-18.688-1.087-21.075-1.275l-4.34-.342-19.02 19.026c-10.463 10.465-19.317 19.195-19.676 19.4-.36.207-4.788 1.058-9.841 1.892-62.91 10.387-117.88 23.458-160.797 38.235-23.695 8.158-54.637 22.09-55.129 24.822-.218 1.214 6.42 5.228 19.656 11.883 9.79 4.922 27.076 12.69 32.208 14.473 12.55 4.36 50.209 13.695 74.697 18.515 17.93 3.53 17.093 3.336 14.788 3.416-1.533.053-3.644 1.402-10.579 6.761-12.712 9.823-21.503 17.661-31.231 27.843-12.766 13.362-17.903 19.537-25.386 30.514-6.763 9.922-18.47 28.434-18.725 29.61-.075.348.865.958 2.09 1.358 4.134 1.349.601.755-5.29-.888zm98.135-93.815c.535-.144 1.412-.144 1.948 0 .536.143.098.26-.974.26s-1.51-.117-.974-.26zm-3.33-.572c.541-.145 1.293-.135 1.67.02.377.157-.067.275-.985.263-.919-.011-1.227-.139-.686-.283zm-3.074-.553c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.078-.13-.696-.288zm297.614-247.325c.846-.13 2.099-.127 2.784.008.685.136-.008.243-1.539.239-1.531-.005-2.092-.115-1.245-.246zm5.839-.563c.689-.135 1.816-.135 2.505 0 .69.136.125.247-1.253.247s-1.942-.11-1.252-.247zm5.574-.57c.693-.137 1.695-.131 2.227.011.532.143-.034.254-1.26.248-1.224-.006-1.66-.123-.967-.26zm5.04-.556c.401-.165.882-.145 1.067.045.185.189-.144.324-.731.299-.649-.028-.78-.163-.337-.344zm112.02-22.688c1.071-.422 2.324-.768 2.783-.768.46 0-.042.346-1.113.768-1.072.422-2.325.768-2.784.768-.46 0 .041-.346 1.113-.768zm12.249-3.875c0-.387 6.81-2.736 7.092-2.447.12.123-1.114.671-2.741 1.219a193.044 193.044 0 00-3.655 1.258c-.383.145-.696.131-.696-.03z",
      fill: "#ae4b24",
      transform: "matrix(1.05173 0 0 1.02477 373.638 -247.113)"
    }), /* @__PURE__ */ React52.createElement("path", {
      d: "M118.17 1215.886c-12.338-.686-28.727-3.426-36.578-6.114-7.899-2.705-11.09-3.865-10.92-3.969.094-.058 6.31.123 13.813.402 23.53.873 63.734-1.005 89.087-4.163 25.738-3.206 33.37-4.283 48.86-6.898 9.263-1.564 17.97-3.19 19.348-3.615 1.377-.424 2.504-.69 2.504-.589 0 .448-17.481 8.965-21.993 10.716-27.067 10.503-68.734 16.197-104.12 14.23zm-91.035-146.951c-61.969-1.538-115.798-7.166-163.181-17.061-6.868-1.434-13.074-2.495-13.792-2.357-1.077.207-1.174.123-.557-.482.612-.6 2.879-.28 12.441 1.758 78.864 16.805 177.518 21.819 284.243 14.446 17.801-1.23 24.108-1.804 45.778-4.17 33.466-3.653 58.032-7.004 84.227-11.49 21.37-3.659 43.347-7.899 47.333-9.132 1.532-.473 9.394-2.357 17.473-4.186l14.689-3.324 11.661-11.886c12.128-12.362 34.379-36.074 47.264-50.368 20.706-22.97 47.521-54.05 47.049-54.534-.168-.172 5.64-2.927 12.906-6.123 32.254-14.185 57.788-29.413 77.661-46.316 3.667-3.119 4.872-4.485 4.872-5.522 0-1.563-3.406-7.462-7.264-12.58-4.673-6.2-4.982-4.97 3.473-13.837 17.865-18.738 29.199-36.393 35.175-54.8 1.17-3.604 2.255-6.938 2.41-7.408.725-2.197 2.655 7.017 3.223 15.385.35 5.149-.592 18.204-1.954 27.094-1.51 9.858-7.159 35.694-10.273 46.98-7.02 25.444-15.96 51.452-21.743 63.248-10.653 21.735-29.712 40.282-61.51 59.859-4.747 2.922-11.762 6.954-15.59 8.959-4.327 2.266-6.901 3.937-6.804 4.417.088.436-.275.742-.835.705-.546-.037-4.79 1.514-9.434 3.444-10.055 4.181-19.57 7.834-29.361 11.272-3.95 1.386-7.512 2.967-7.917 3.513-.7.944-.737.944-.754-.01-.024-1.342-.304-1.304-7.743 1.062l-8.7 2.768c-1.533.488-2.201 1.013-2.144 1.684.053.61-.202.863-.68.675-.42-.165-4.09.724-8.157 1.976-78.648 24.21-187.613 41.063-294.42 45.538-14.245.597-66.071 1.12-79.065.797zM454.752 918.28c.46-.303 1.086-.552 1.392-.552.306 0 .181.249-.278.552-.46.304-1.086.553-1.392.553-.306 0-.181-.249.278-.553zm-773.403-20.8c-1.802-.97-7.253-7.382-10.83-12.744l-2.775-4.158.164-7.217c.09-3.97.554-8.987 1.03-11.15.892-4.062 2.3-8.047 2.699-7.64.124.128 1.113 4.194 2.196 9.037 2.187 9.773 5.108 20.853 7.63 28.94.912 2.928 1.577 5.405 1.477 5.506-.1.1-.816-.158-1.591-.575zm823.654-16.964c-.69-.323-1.253-.794-1.253-1.049 0-.529 4.636-5.066 4.9-4.795.252.258-1.627 5.98-2.044 6.224-.193.113-.914-.058-1.603-.38zm-696.27-88.539c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.079-.129-.696-.287zm-2.784-.57c.383-.158 1.01-.158 1.392 0 .383.158.07.288-.696.288-.765 0-1.078-.13-.696-.288zm-2.784-.57c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.078-.13-.696-.288zm-2.784-.57c.383-.157 1.01-.157 1.392 0 .383.159.07.288-.696.288-.765 0-1.078-.13-.696-.287zm-2.784-.57c.383-.157 1.01-.157 1.392 0 .383.159.07.288-.696.288-.765 0-1.078-.13-.696-.287zm-8.212-1.361c-11.42-2.59-21.775-5.228-21.526-5.482.15-.152 5.617 1.006 12.151 2.573 6.534 1.568 13.008 3.1 14.386 3.404 1.378.304 1.879.558 1.113.565-.765.007-3.521-.47-6.124-1.06zm533.86-3.208c.402-.165.882-.145 1.067.044.185.19-.144.325-.73.3-.65-.028-.781-.163-.337-.344zm5.01-1.14c.403-.165.883-.144 1.068.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm3.446-.75c.766-.251 1.893-.457 2.506-.457.881 0 .823.095-.279.457-.765.25-1.893.456-2.505.456-.882 0-.824-.095.278-.456zm4.315-.948c.383-.158 1.01-.158 1.392 0 .383.159.07.288-.696.288-.765 0-1.079-.13-.696-.288zm2.819-.581c.402-.165.882-.145 1.067.045.185.19-.144.324-.73.299-.65-.027-.781-.162-.337-.344zm2.192-.558c.383-.158 1.01-.158 1.392 0 .383.158.07.287-.696.287-.765 0-1.079-.13-.696-.287zm2.819-.582c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.57c.402-.164.882-.144 1.067.045.185.19-.143.324-.73.3-.65-.028-.781-.163-.337-.345zm4.28-1.075c1.532-.436 3.16-.775 3.62-.753.459.022-.418.397-1.95.833-1.53.436-3.159.775-3.618.753-.46-.022.417-.397 1.949-.833zm5.186-1.204c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm2.227-.57c.402-.164.882-.144 1.067.046.185.189-.144.324-.73.299-.65-.027-.781-.163-.337-.344zm2.227-.57c.402-.164.882-.144 1.067.046.185.19-.143.324-.73.299-.65-.027-.781-.162-.337-.344zm2.227-.569c.402-.165.883-.144 1.068.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.337-.345zm2.228-.57c.401-.164.882-.144 1.067.045.185.19-.144.324-.731.3-.649-.028-.78-.163-.336-.345zm2.227-.57c.402-.164.882-.144 1.067.045.185.19-.144.324-.73.3-.65-.028-.781-.163-.337-.345zm1.82-.394c.128-.117 5.996-1.804 13.04-3.749 16.866-4.656 38.785-11.459 54.215-16.826 6.852-2.383 12.563-4.224 12.693-4.091.654.668-37.763 13.48-52.432 17.485-.919.251-4.05 1.128-6.96 1.948-8.43 2.376-19.911 5.447-20.368 5.447-.23 0-.315-.096-.187-.214zM59.43 321.112c-25.962-1.724-52.472-6.352-68.615-11.978-10.892-3.797-19.897-9.155-23.747-14.13-1.851-2.392-2.075-3.103-2.658-8.436-1.007-9.223 9.628-18.131 31.12-26.068 11.392-4.206 22.293-7 42.185-10.812 16-3.066 44.406-6.61 53.035-6.618 1.454-.001 2.645-.229 2.645-.505 0-.277 5.786-.692 12.86-.924 14.518-.474 43.526.147 43.058.922-.168.277 1.041.505 2.686.505 4.477 0 19.959 1.564 31.596 3.192 19.129 2.676 35.408 6.94 43.43 11.377l3.62 2.001-2.855-.318c-18.293-2.04-42.336-3.605-44.97-2.928-2.24.575-1.769 1.933.914 2.64 7.143 1.88 12.775 4.452 19.56 8.93 4.609 3.042 9.389 7.803 10.188 10.148l.582 1.71-7.022-.425c-8.117-.49-28.121.325-39.037 1.59-32.644 3.787-62.979 12.558-93.541 27.05-9.924 4.705-20.19 10.287-19.75 10.74.592.61 10.415 1.203 25.81 1.559 32.25.745 67.076-3.12 92.576-10.271 15.394-4.318 30.37-11.224 36.089-16.642 4.336-4.108 5.667-6.658 5.318-10.19-.225-2.27-.128-2.607.7-2.433.756.159.943.755.877 2.806-.209 6.538-5.959 12.196-18.77 18.47-18.23 8.927-44.251 15.03-77.75 18.235-10.879 1.04-48.904 1.548-60.134.803zm57.536-49.836c4.895-1.053 9.498-3.218 10.643-5.008.742-1.158.784-1.673.237-2.902-.366-.822-.89-1.495-1.166-1.495-.275 0-.368-.22-.205-.488.162-.269 1.687-.636 3.388-.815 1.702-.18 4.027-.794 5.167-1.364 3.996-1.998 2.17-5.769-3.708-7.653-2.99-.96-21.415-1.31-28.648-.546-14.18 1.499-25.778 4.824-28.539 8.182-4.83 5.874 5.09 11.656 22.6 13.172 4.491.388 16.336-.246 20.231-1.083z",
      fill: "#0076a2",
      transform: "matrix(1.05173 0 0 1.02477 373.638 -247.113)"
    }), /* @__PURE__ */ React52.createElement("path", {
      d: "M80.03 1205.984c-16.598-.747-41.003-3.045-57.627-5.426-27.643-3.958-52.006-9.752-77.525-18.435-6.418-2.184-12.702-4.14-13.965-4.347-2.369-.387-22.649-10.378-36.851-18.155-28.974-15.864-64.229-40.854-73.957-52.422-9.076-10.793-8.666-24.525 1.074-35.947 5.807-6.81 16.015-14.777 25.935-20.24l3.441-1.896 14.376 2.946c57.502 11.785 114.357 16.847 189.209 16.846 42.301 0 68.6-1.017 109.131-4.221 83.772-6.622 174.23-22.658 237.261-42.06l7.305-2.25 5.78 1.943c3.178 1.069 6.184 1.943 6.678 1.944.822 0 6.485-6.482 8.336-9.542.52-.858 2.246-1.775 5.235-2.778 6.605-2.216 26.872-9.984 34.528-13.234 5.106-2.167 6.839-2.68 7.351-2.174 1.216 1.203 6.129 13.688 7.1 18.042 3.743 16.793.143 31.097-11.974 47.578-7.296 9.923-33.434 35.13-52.756 50.877-33.575 27.362-70.44 49.707-94.598 57.339-19.566 6.181-44.248 12.737-64.477 17.125-5.207 1.13-12.473 2.803-16.147 3.72-8.042 2.004-32.982 6.214-48.72 8.222-25.802 3.294-29.844 3.742-43.708 4.85-25.694 2.052-49.68 2.63-70.434 1.695zm43.709-38.738c38.834-1.47 75.172-4.843 116.648-10.829 43.286-6.247 90.11-17.032 123.672-28.485 15.73-5.368 34.426-12.959 36.26-14.722.533-.512 1.506-3.103 2.162-5.758 1.828-7.399 1.335-14.053-1.743-23.525-2.04-6.281-3.042-8.335-7.286-14.954-2.706-4.22-5.21-7.672-5.562-7.672-.354 0-3.056 2.252-6.005 5.004-17.336 16.177-39.956 34.103-42.736 33.868-.68-.058-4.72-1.112-8.976-2.343-26.165-7.568-62.958-13.487-101.2-16.28-36.73-2.684-82.284-2.791-119.99-.283-66.626 4.433-130.426 16.904-166.48 32.543-12.192 5.287-27.245 15.817-33.233 23.244-3.251 4.034-5.62 9.444-4.754 10.857.58.946 3.615 1.742 19.613 5.147 57.25 12.186 125.089 17.008 199.61 14.188z",
      fill: "#080605",
      transform: "matrix(1.05173 0 0 1.02477 373.638 -247.113)"
    })));
  }
  var Npatlases_default = SvgNpatlases;

  // build/lib-react-tsx/logo/PubchemColor.tsx
  var React53 = __toModule(require_react());
  function SvgPubchemColor({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React53.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1002.151 1000.083",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React53.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React53.createElement("path", {
      d: "M230.916 798.04c-1.563-.69-3.138-1.666-3.5-2.169-.363-.502-2.46-1.905-4.66-3.117l-7.75-4.27c-2.063-1.137-3.75-2.455-3.75-2.93 0-.474-.807-1.073-1.792-1.331-2.329-.609-33.605-19.84-34.042-20.931-.183-.459-.725-.834-1.205-.834-.48 0-5.955-3.169-12.167-7.043-13.691-8.537-12.947-8.076-24.742-15.34-5.254-3.236-10.772-6.723-12.262-7.75-1.49-1.027-3.108-1.867-3.595-1.867-.487 0-1.69-.888-2.672-1.974-.983-1.086-2.74-2.263-3.905-2.616-1.165-.353-3.55-1.715-5.302-3.026-1.75-1.31-3.563-2.384-4.027-2.384-.464 0-2.322-1.35-4.128-3-1.807-1.65-3.694-3-4.194-3-1.983 0-16.66-9.368-19.717-12.585l-3.25-3.42V607.7c0-55.549.375-92.064.968-94.131 1.144-3.99 4.55-6.65 15.532-12.128 2.2-1.098 5.8-3.026 8-4.285 2.2-1.26 6.925-3.912 10.5-5.894 3.575-1.983 10.1-5.672 14.5-8.197 4.4-2.525 8.493-4.594 9.097-4.598.603-.004 2.134-.908 3.403-2.008 1.268-1.1 2.93-2 3.695-2 .763 0 2.234-.787 3.268-1.75 1.034-.962 6.528-4.158 12.208-7.101 5.681-2.943 11.679-6.18 13.329-7.194 1.65-1.013 4.125-2.47 5.5-3.237l7-3.906c2.475-1.382 7.65-4.21 11.5-6.286 3.85-2.076 7.45-4.107 8-4.513.55-.407 4.6-2.674 9-5.038 9.533-5.124 14.68-7.942 19.78-10.832 2.08-1.179 4.802-2.143 6.05-2.143 2.61 0 7.65 2.138 7.662 3.25.004.413.669.75 1.477.75.809 0 2.946.83 4.75 1.843 4.82 2.707 46.195 28.443 46.78 29.098.647.723 4.076 2.876 6 3.767 2.07.958 34.03 20.747 42.849 26.532 1.458.956 3.664 2.266 4.902 2.91 1.237.644 2.25 1.55 2.25 2.01 0 .463.586.84 1.303.84 1.245 0 18.657 10.507 19.697 11.886.275.365 2.637 1.776 5.25 3.137 2.612 1.36 4.75 2.812 4.75 3.226 0 .413.558.751 1.241.751 2.035 0 11.759 7.13 11.759 8.622 0 .758.467 1.378 1.039 1.378.713 0 .948 29.134.75 92.935l-.29 92.935-2.936 3.065c-1.616 1.686-3.73 3.065-4.7 3.065-.97 0-2.124.566-2.564 1.258-.44.692-3.274 2.574-6.3 4.182a458.374 458.374 0 00-10.5 5.79c-2.75 1.576-6.35 3.532-8 4.346-1.65.814-4.8 2.6-7 3.97-2.2 1.369-4.9 2.884-6 3.367-1.1.483-4.924 2.551-8.5 4.596-7.414 4.242-22.57 12.737-28.5 15.974-7.28 3.976-13.955 7.738-17.25 9.722-1.787 1.077-3.256 1.584-3.265 1.127-.008-.457-.346-.334-.75.274-.701 1.057-9.174 6.026-23.234 13.628-15.843 8.565-18.556 10.086-19.45 10.9-.523.477-1.985.866-3.25.866s-2.3.417-2.3.927c0 1.176-5.788 4.1-7.904 3.992-.878-.045-2.874-.646-4.436-1.337zm20.84-31.807c5.5-3.015 14.05-7.645 19-10.29 4.95-2.645 10.678-5.86 12.73-7.147 2.051-1.286 4.376-2.338 5.165-2.338.79 0 2.486-.93 3.77-2.067 1.284-1.138 5.485-3.766 9.335-5.842 8.558-4.615 14.935-8.112 28.173-15.45 5.595-3.103 10.603-5.64 11.127-5.64.525 0 1.44-.586 2.035-1.302.594-.716 4.362-3 8.372-5.077 4.011-2.077 10.668-5.751 14.793-8.166 4.125-2.414 8.062-4.405 8.75-4.423.99-.026 1.25-17.283 1.25-82.864v-82.83l-2.5-1.339c-1.375-.736-2.5-1.712-2.5-2.169 0-.457-.514-.83-1.14-.83-.932 0-9.938-5.429-34.86-21.01-.825-.516-6.45-3.946-12.5-7.623-6.05-3.676-12.125-7.447-13.5-8.38-1.375-.931-8.575-5.46-16-10.064-7.425-4.603-13.95-8.737-14.5-9.185-.55-.448-4.249-2.73-8.219-5.069-3.97-2.34-8.36-5.248-9.757-6.462-1.397-1.214-2.962-2.208-3.478-2.208-.837 0-3.303-1.412-16.931-9.697-1.989-1.21-4.439-1.955-5.446-1.657-1.007.297-6.127 2.973-11.378 5.947s-10.165 5.407-10.92 5.407c-.754 0-1.371.365-1.371.81 0 .806-25.19 15.19-26.602 15.19-.407 0-1.451.614-2.32 1.364-.868.75-5.178 3.284-9.578 5.63-4.4 2.347-8.428 4.658-8.95 5.137-.523.478-1.705.87-2.628.87s-2.238.674-2.922 1.5c-.685.824-2.09 1.5-3.123 1.5-1.032 0-1.877.439-1.877.976 0 .537-1.688 1.828-3.75 2.868-2.063 1.04-13.556 7.35-25.54 14.023s-22.24 12.132-22.792 12.132c-.55 0-1.878.816-2.949 1.814-1.897 1.768-1.947 3.855-1.97 82.75-.012 44.515-.017 81.465-.01 82.112.006.646 7.773 6.002 17.26 11.9 9.488 5.9 17.476 11.048 17.75 11.44.276.393 1.513 1.03 2.75 1.417 1.238.386 2.25 1.122 2.25 1.635 0 .513.476.932 1.056.932.58 0 4.518 2.188 8.75 4.861 7.407 4.68 34.551 21.569 38.013 23.651 3.691 2.222 7.751 5.029 9.003 6.225.727.695 1.744 1.263 2.261 1.263 1.285 0 17.336 10.076 17.751 11.144.183.47.755.856 1.27.856s2.84 1.223 5.167 2.717c2.326 1.495 5.805 3.573 7.73 4.62 1.925 1.045 4.625 2.713 6 3.706 2.406 1.737 2.613 1.737 5.5.01 1.65-.987 7.5-4.262 13-7.277z",
      fill: "#0471bd",
      transform: "matrix(3.07798 0 0 2.64604 -227.02 -1116.52)"
    }), /* @__PURE__ */ React53.createElement("path", {
      d: "M243.256 795.427c0-.533.675-.969 1.5-.969s1.5.177 1.5.393c0 .216-.675.652-1.5.969-.825.317-1.5.14-1.5-.393zm-50-45.969c-.902-.582-1.025-.975-.31-.984.656-.008 1.47.434 1.81.984.767 1.242.42 1.242-1.5 0zm95-3.393c0-.216.675-.652 1.5-.968.825-.317 1.5-.14 1.5.393 0 .532-.675.968-1.5.968s-1.5-.177-1.5-.393zm-69.781-28.183c-38.686-8.474-65.646-36.847-74.862-78.785-2.111-9.604-2.91-34.892-1.45-45.864 5.39-40.509 28.032-72.319 60.384-84.838 24.106-9.327 52.322-9.323 76.447.012 26.459 10.238 45.937 34.833 49.736 62.801l.713 5.25h-43.045l-1.562-5.372c-1.965-6.758-8.206-16.188-13.562-20.493-7.625-6.128-21.577-11.16-30.818-11.117-2.035.01-6.842.683-10.683 1.496-20.159 4.27-34.162 19.057-40.707 42.986-3.033 11.088-3.306 42.222-.465 53 3.139 11.91 9.164 23.195 16.075 30.106 10.196 10.196 20.677 14.37 36.08 14.37 15.288 0 24.016-3.383 32.405-12.563 7.71-8.436 10.954-15.507 14.525-31.663l.608-2.75H331.4l-.656 5.75c-2.519 22.068-14.843 46.804-29.46 59.13-10.754 9.067-24.387 15.668-38.3 18.541-9.598 1.983-35.462 1.984-44.51.003zm121.78-.817c0-.216.7-.66 1.553-.988.89-.342 1.291-.174.94.393-.587.95-2.492 1.405-2.492.595zm-243-1.607c-1.281-.828-1.245-.971.25-.984.963-.008 1.75.434 1.75.984 0 1.22-.112 1.22-2 0zm290.734-.124c.678-.683 1.485-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.543-1.54.428-.56-.56zm5.267-2.253c0-.208.787-.995 1.75-1.75 1.586-1.244 1.621-1.209.377.377-1.306 1.666-2.127 2.196-2.127 1.373zm4.195-9.123c.02-1.65.244-2.204.498-1.23.253.972.237 2.322-.037 3-.274.676-.482-.12-.461-1.77zM76.763 702.47c-.35-.567.05-.735.94-.393 1.733.665 2.05 1.381.612 1.381-.518 0-1.216-.445-1.552-.988zm76.493-211.012c0-.55.476-1 1.059-1 .582 0 .78.45.44 1s-.816 1-1.058 1c-.243 0-.441-.45-.441-1zm5.733-3.124c.678-.683 1.485-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.543-1.54.428-.56-.56zm-25-11c.678-.683 1.485-.99 1.793-.683.308.308-.247.867-1.233 1.243-1.425.543-1.54.428-.56-.56zm29.267-16.269c0-.216.698-.66 1.552-.988.89-.342 1.291-.174.94.393-.587.95-2.492 1.405-2.492.595zm94-1.607c-1.282-.828-1.246-.971.25-.984.962-.008 1.75.434 1.75.984 0 1.22-.113 1.22-2 0zm-14-34c0-.55-.649-1-1.441-1-.793 0-1.716-.445-2.052-.988-.743-1.202 2.182-.228 4.965 1.654 1.724 1.166 1.755 1.334.25 1.334-.947 0-1.722-.45-1.722-1z",
      fill: "#595f6a",
      transform: "matrix(3.07798 0 0 2.64604 -227.02 -1116.52)"
    }));
  }
  var PubchemColor_default = SvgPubchemColor;

  // build/lib-react-tsx/logo/Pubmed.tsx
  var React54 = __toModule(require_react());
  function SvgPubmed({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React54.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1002.151 1000.083",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React54.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React54.createElement("g", {
      strokeWidth: 3.993
    }, /* @__PURE__ */ React54.createElement("path", {
      d: "M539.446 1200.51c-88.645-67.64-184.275-124.027-256.624-151.314-96.021-36.214-186.792-39.204-250.611-8.254-31.795 15.42-59.974 39.236-78.735 66.545-13.032 18.97-19.965 25.596-26.78 25.596-10.605 0-14.532-6.08-21.449-33.203-7.348-28.817-28.031-63.25-50.978-84.868-36.64-34.516-104.447-57.71-168.719-57.71-16.279 0-29.97-1.955-32.825-4.687-7.706-7.375-7.03-656.726.69-662.857 6.936-5.509 48.181 2.164 90.888 16.907 15.95 5.507 30.09 10.012 31.421 10.012 1.33 0 2.945-16.783 3.588-37.296l1.168-37.295 24.96 11.946c42.253 20.224 77.833 62.397 98.407 116.64 11.631 30.668 21.474 89.53 21.507 128.622.013 15.576 1.402 28.307 3.085 28.29 1.684-.016 7.477-7.487 12.874-16.601 36.64-61.88 97.665-107.806 168.065-126.48 33.86-8.982 121.532-8.923 154.776.103 12.743 3.46 16.272 5.234 8.163 4.103-7.857-1.096-28.061-3.88-44.898-6.187-121.32-16.62-234.284 38.571-287.849 140.635l-10.11 19.264.062 286.542c.035 157.598 1.54 288.77 3.347 291.495 2.287 3.447 7.263-.924 16.376-14.383 7.2-10.634 22.61-27.526 34.245-37.537 69.483-59.787 167.152-68.93 288.827-27.04 79.927 27.518 193.753 95.232 293.771 174.761 12.289 9.772 23.769 16.923 25.51 15.893 1.743-1.03 3.168-156.34 3.168-345.13V543.763l-56.123-35.651c-63.593-40.398-160.786-88.035-215.306-105.528-20.204-6.483-30.306-10.693-22.449-9.357 46.76 7.95 162.104 62.078 242.858 113.965l53.06 34.093 1.043 346.254c.85 282.398.057 346.616-4.3 348.216-2.937 1.079-27.284-14.782-54.103-35.246zm-620.967-186.567c-7.571-73.445-54.43-148.324-110.82-177.089-13.349-6.81-25.384-15.157-26.745-18.551-1.361-3.394-2.475-115.674-2.475-249.511v-243.34l-19.573-8.059c-25.577-10.53-77.225-24.153-91.57-24.153h-11.306v655.42l37.756 2.82c117.967 8.81 177.46 48.312 217.625 144.494 4.655 11.147 10.162-52.407 7.108-82.031zm65.65-27.014c-1.22-3.041-1.437-10.512-.483-16.602 1.458-9.31 1.83-8.742 2.345 3.577l.612 14.648H41.43c48.732 0 55.05-.76 56.829-6.836 1.1-3.76 8.878-53.857 17.283-111.327 8.405-57.47 16.104-103.703 17.109-102.742 2.603 2.492-27.369 205.434-31.904 216.022-3.644 8.505-5.553 8.79-59.083 8.79-43.939 0-55.774-1.138-57.535-5.53zm260.645.823c-2.397-2.783-24.9-54.255-50.006-114.383-25.106-60.128-47.605-112.823-49.997-117.1-4.326-7.736-4.365-7.737-7.502-.052-2.993 7.331-3.168 7.289-3.44-.833-.344-10.229 5.968-15.037 10.655-8.117 1.839 2.715 25.47 57.675 52.514 122.134l49.172 117.198 20.579 1.159c13.284.748 22.045-.637 24.715-3.907 2.275-2.785 26.664-56.92 54.199-120.299 27.534-63.379 51.76-116.978 53.834-119.108 2.473-2.54 4.826-2.242 6.832.865 3.638 5.633 22.773 153.091 20.187 155.566-.982.94-6.232-31.75-11.666-72.645-5.434-40.894-11.521-74.39-13.527-74.437-2.006-.046-26.836 53.196-55.177 118.314l-51.53 118.398-22.742 1.153c-14.943.758-24.236-.582-27.1-3.906zm193.392 1.64c-1.089-1.685-2.98-14.43-4.202-28.32l-2.223-25.254 4.982 25.39 4.982 25.39h110.204l-.29-9.765c-.16-5.37-1.43-21.191-2.821-35.156-2.287-22.954-1.953-22.225 3.484 7.594 3.309 18.14 5.095 35.28 3.97 38.086-1.549 3.86-15.912 5.101-59.076 5.101-31.367 0-57.921-1.38-59.01-3.065zm-451.32-34.043c-.777-7.56 29.884-179.126 31.29-175.089 1.35 3.876-25.91 166.839-29.29 175.089-1.066 2.604-1.733 2.604-2 0zm441.602-35.156c.046-8.594.881-11.65 1.858-6.79.976 4.858.939 11.89-.083 15.624-1.021 3.735-1.82-.24-1.775-8.834zm89.02-170.164c-14.208-90.244-25.027-164.85-24.043-165.792.983-.942 13.412 72.125 27.619 162.37 14.207 90.244 25.026 164.85 24.043 165.792-.984.94-13.413-72.125-27.62-162.37zM265.57 776.834c-2.202-2.793-21.975-50.782-43.939-106.641-21.964-55.86-42.547-105.518-45.74-110.352-5.534-8.38-8.278-8.789-58.903-8.789-51.25 0-53.227.306-56.79 8.79-2.264 5.39-3.791 6.448-3.95 2.734-.56-13.095 8.678-15.431 60.762-15.37 28.173.032 53.872 1.663 57.108 3.622 3.237 1.96 25.277 52.23 48.98 111.713 23.703 59.483 44.932 108.39 47.177 108.682 2.245.293 24.734-48.576 49.976-108.598 25.241-60.021 48.2-110.531 51.02-112.245 2.82-1.713 28.414-3.141 56.876-3.174 56.946-.066 65.077 2.814 64.021 22.68l-.556 10.463-1.876-9.766c-3.54-18.427-7.063-19.53-62.318-19.53-36.688 0-53.302 1.44-56.262 4.882-2.31 2.685-23.916 52.344-48.013 110.351-24.098 58.008-46.009 107.755-48.692 110.548-4.002 4.168-5.596 4.168-8.881 0zM20.05 763.943c.084-6.446.998-8.61 2.033-4.809 1.035 3.8.967 9.074-.151 11.719-1.118 2.645-1.965-.465-1.882-6.91zm3.53-15.625c-.777-7.56 29.884-179.126 31.29-175.09 1.35 3.877-25.91 166.84-29.29 175.09-1.066 2.604-1.733 2.604-2 0z",
      fill: "#a7a7a7",
      transform: "matrix(1.04736 0 0 1.00109 371.522 -239.223)"
    }), /* @__PURE__ */ React54.createElement("path", {
      d: "M566.088 1216.26c-71.923-57.19-164.864-117.063-230.895-148.743-94.044-45.12-192.894-62.534-260.006-45.804-50.833 12.671-99.453 45.239-125.942 84.362-9.113 13.46-14.09 17.83-16.376 14.383-1.806-2.724-3.312-133.897-3.347-291.495l-.062-286.542 10.11-19.264c34.396-65.539 97.742-115.86 169.482-134.632 32.019-8.378 112.124-9.53 148.98-2.141 82.304 16.5 187.538 62.285 282.677 122.987l54.057 34.49V887.07c0 188.765-1.425 344.051-3.167 345.082-1.742 1.03-13.222-6.121-25.51-15.893zm23.598-331.88l-1.043-338.549-44.897-28.839c-91.906-59.033-179.805-99.418-259.184-119.08-57.994-14.366-127.757-16.537-171.429-5.335-64.689 16.594-125.202 60.31-159.122 114.952l-16.441 26.485 1.047 287.54 1.047 287.542 18.367-21.96c21.117-25.246 58.755-51.246 90.789-62.717 117.636-42.122 276.77 9.077 472.998 152.18 26.103 19.036 49.746 37.247 52.54 40.47 2.795 3.222 7.621 5.858 10.726 5.858 4.77 0 5.484-52.46 4.602-338.548zM-23.718 991.481c-2.954-7.585 74.487-436.362 79.948-442.66 6.55-7.552 119.128-8.182 125.12-.7 2.152 2.686 21.906 50.586 43.899 106.446 21.992 55.86 41.307 103.954 42.921 106.877 1.78 3.224 20.95-37.755 48.735-104.183 25.816-61.72 48.488-110.485 51.96-111.76 12.793-4.698 118.63-2.44 122.861 2.62 5.62 6.723 72.487 433.465 69.203 441.655-2.315 5.773-10.194 6.588-63.753 6.588-33.612 0-62.088-1.512-63.28-3.359-2.095-3.242-30.967-211.019-30.967-222.845 0-13.254-9.886 6.63-56.145 112.922l-48.45 111.328-27.081 1.15c-24.501 1.042-27.634.297-32.884-7.812-3.192-4.93-25.682-56.877-49.977-115.439-24.295-58.562-45.364-105.144-46.82-103.516-1.455 1.629-9.62 50.422-18.145 108.43-8.525 58.008-17.148 108.545-19.163 112.305-3.242 6.05-10.694 6.836-64.872 6.836-45.232 0-61.705-1.275-63.11-4.883zm124.465-7.813c2.07-4.834 10.433-55.37 18.584-112.304 8.15-56.934 16.21-107.906 17.912-113.271 2.988-9.423 3.244-9.488 7.486-1.902 2.415 4.319 24.933 57.049 50.039 117.177 25.106 60.128 47.609 111.6 50.006 114.383 2.864 3.324 12.157 4.664 27.1 3.906l22.742-1.153 51.853-119.14c28.52-65.528 53.35-119.141 55.177-119.141 1.828 0 10.253 51.855 18.72 115.234 8.47 63.38 16.218 117.432 17.22 120.118 2.662 7.135 115.784 6.967 118.648-.177 1.116-2.782-12.717-98.288-30.74-212.234-18.023-113.946-32.769-209.103-32.769-211.459 0-2.356-2.886-7.046-6.414-10.422-5.164-4.942-16.501-6.127-58.163-6.078-28.462.032-54.056 1.461-56.876 3.174-2.82 1.714-25.779 52.224-51.02 112.245-25.242 60.022-47.731 109.121-49.976 109.11-2.245-.011-23.474-48.918-47.177-108.682s-45.743-110.265-48.98-112.225c-3.236-1.96-29.077-3.59-57.425-3.622-38.833-.045-52.69 1.265-56.202 5.315-6.101 7.036-80.097 425.093-76.729 433.495 2.225 5.547 10.27 6.442 57.901 6.442 53.53 0 55.44-.284 59.083-8.789zm-182.42 51.758c0-9.668.796-13.623 1.768-8.789.973 4.834.973 12.744 0 17.578-.972 4.834-1.768.879-1.768-8.789zm-60.684-24.414l-7.775-8.79 9.184 7.442c8.63 6.993 11.041 10.137 7.775 10.137-.774 0-4.907-3.955-9.184-8.789zm-161.602-60.286c2.947-1.128 6.467-.99 7.824.309 1.356 1.298-1.055 2.22-5.358 2.051-4.754-.187-5.722-1.113-2.466-2.36zm84.271-126.497c-1.48-2.292-1.815-5.004-.745-6.028 1.07-1.024 3.033.85 4.362 4.166 2.76 6.883.408 8.094-3.617 1.862z",
      fill: "#5e90bb",
      transform: "matrix(1.04736 0 0 1.00109 371.522 -239.223)"
    }), /* @__PURE__ */ React54.createElement("path", {
      d: "M574.358 1217.068c-2.794-3.222-26.437-21.433-52.54-40.47-196.227-143.102-355.362-194.3-472.998-152.179-32.034 11.47-69.672 37.471-90.789 62.717l-18.367 21.96-1.047-287.541-1.047-287.541 16.44-26.485c33.92-54.642 94.434-98.358 159.123-114.952 43.672-11.202 113.435-9.031 171.429 5.334 79.379 19.663 167.278 60.048 259.184 119.081l44.897 28.84 1.043 338.547c.882 286.089.169 338.548-4.602 338.548-3.105 0-7.931-2.636-10.726-5.859zm-470.094-227.54c2.015-3.76 10.638-54.296 19.163-112.304s16.69-106.801 18.146-108.43c1.455-1.628 22.524 44.954 46.819 103.516 24.295 58.562 46.785 110.51 49.977 115.44 5.25 8.108 8.383 8.853 32.884 7.812l27.08-1.15 48.45-111.329c46.26-106.293 56.146-126.176 56.146-112.922 0 11.826 28.872 219.603 30.966 222.845 1.193 1.847 29.67 3.359 63.28 3.359 53.56 0 61.439-.815 63.754-6.588 3.284-8.19-63.583-434.932-69.203-441.655-4.231-5.06-110.068-7.318-122.86-2.62-3.473 1.275-26.145 50.04-51.96 111.76-27.786 66.428-46.955 107.407-48.736 104.183-1.614-2.923-20.929-51.018-42.921-106.877-21.993-55.86-41.747-103.76-43.898-106.446-5.993-7.482-118.571-6.852-125.121.7-5.46 6.298-82.902 435.075-79.948 442.66 1.405 3.608 17.878 4.883 63.11 4.883 54.178 0 61.63-.786 64.872-6.836zm-193.172 104.493c-1.387-2.149-.577-3.906 1.8-3.906 2.378 0 4.323 1.757 4.323 3.906 0 2.148-.81 3.906-1.8 3.906s-2.935-1.758-4.323-3.906zm-39.296-69.336c-5.077-6.196-4.932-6.334 1.541-1.475 3.929 2.949 7.143 6.025 7.143 6.836 0 3.215-3.352 1.146-8.684-5.361zm-163.51-73.958c2.947-1.128 6.467-.99 7.823.309 1.357 1.298-1.054 2.22-5.357 2.051-4.755-.187-5.722-1.113-2.466-2.36zm155.347-62.76c-5.077-6.196-4.933-6.335 1.541-1.476 3.929 2.949 7.143 6.025 7.143 6.836 0 3.215-3.352 1.146-8.684-5.36zm-20.196-23.438l-9.896-10.743 11.225 9.47c10.49 8.852 13.096 12.015 9.895 12.015-.731 0-5.782-4.834-11.224-10.742z",
      fill: "#3877ac",
      transform: "matrix(1.04736 0 0 1.00109 371.522 -239.223)"
    }), /* @__PURE__ */ React54.createElement("path", {
      d: "M-100.788 1064.456c-31.4-67.262-101.931-107.441-200.364-114.141l-40.817-2.779-1.044-324c-.605-187.657.498-325.477 2.62-327.507 4.599-4.402 68.224 10.537 97.374 22.863l21.398 9.048 1.05 249.02 1.051 249.02 20.408 9.857c26.988 13.035 66.213 51.408 82.407 80.615 22.063 39.792 33.92 86.314 33.92 133.084 0 22.318-1.378 40.531-3.061 40.474-1.684-.058-8.408-11.557-14.942-25.554z",
      fill: "#292525",
      transform: "matrix(1.04736 0 0 1.00109 371.522 -239.223)"
    })));
  }
  var Pubmed_default = SvgPubmed;

  // build/lib-react-tsx/logo/Wikipedia.tsx
  var React55 = __toModule(require_react());
  function SvgWikipedia({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React55.createElement("svg", {
      strokeMiterlimit: 10,
      xmlns: "http://www.w3.org/2000/svg",
      fillRule: "evenodd",
      shapeRendering: "geometricPrecision",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React55.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React55.createElement("path", {
      d: "M959.383 225.814c0 3.326-1.054 6.327-3.082 9.085-2.109 2.677-4.299 4.055-6.813 4.055-20.197 1.947-36.825 8.436-49.64 19.548-12.897 11.031-26.118 32.201-39.826 63.348L650.756 793.43c-1.38 4.38-5.192 6.57-11.518 6.57-4.948 0-8.76-2.19-11.518-6.57L510.352 547.988 375.383 793.43c-2.757 4.38-6.57 6.57-11.517 6.57-6.003 0-9.977-2.19-11.924-6.57L146.326 321.85c-12.816-29.281-26.362-49.721-40.637-61.32-14.195-11.599-34.067-18.818-59.455-21.576-2.19 0-4.298-1.135-6.164-3.487-1.947-2.271-2.92-4.948-2.92-7.95 0-7.705 2.19-11.517 6.57-11.517 18.331 0 37.473.811 57.508 2.433 18.574 1.704 36.094 2.515 52.479 2.515 16.709 0 36.419-.811 59.13-2.515 23.765-1.622 44.854-2.433 63.185-2.433 4.38 0 6.57 3.812 6.57 11.518 0 7.624-1.379 11.436-4.055 11.436-18.331 1.38-32.77 6.084-43.314 13.952-10.544 7.948-15.816 18.33-15.816 31.227 0 6.57 2.19 14.763 6.57 24.577l169.927 383.737 96.442-182.176-89.872-188.421c-16.14-33.58-29.443-55.318-39.825-65.051-10.382-9.652-26.118-15.655-47.207-17.845-1.946 0-3.73-1.135-5.515-3.487-1.785-2.271-2.677-4.948-2.677-7.95 0-7.705 1.866-11.517 5.759-11.517 18.331 0 35.121.811 50.451 2.433 14.762 1.704 30.498 2.515 47.207 2.515 16.384 0 33.742-.811 52.073-2.515 18.899-1.622 37.473-2.433 55.804-2.433 4.38 0 6.57 3.812 6.57 11.518 0 7.624-1.297 11.436-4.055 11.436-36.662 2.515-54.993 12.897-54.993 31.228 0 8.192 4.217 20.927 12.734 38.122l59.454 120.694 59.13-110.392c8.193-15.574 12.33-28.714 12.33-39.42 0-25.145-18.332-38.528-54.994-40.232-3.326 0-4.948-3.812-4.948-11.436 0-2.758.811-5.354 2.434-7.787 1.703-2.514 3.325-3.731 4.947-3.731 13.14 0 29.281.811 48.424 2.433 18.33 1.704 33.417 2.515 45.179 2.515 8.435 0 20.926-.73 37.31-2.11 20.765-1.865 38.204-2.838 52.155-2.838 3.245 0 4.867 3.244 4.867 9.814 0 8.76-3.001 13.14-9.004 13.14-21.332 2.19-38.527 8.112-51.505 17.683-12.978 9.57-29.2 31.309-48.586 65.213l-78.84 145.757 106.743 217.459 157.598-366.46c5.435-13.384 8.193-25.713 8.193-36.906 0-26.848-18.331-41.042-54.994-42.746-3.325 0-4.947-3.812-4.947-11.436 0-7.706 2.433-11.518 7.38-11.518 13.384 0 29.282.811 47.613 2.433 16.952 1.704 31.228 2.515 42.664 2.515 12.086 0 26.037-.811 41.854-2.515 16.465-1.622 31.227-2.433 44.367-2.433 3.813 0 5.76 3.244 5.76 9.814z"
    }));
  }
  var Wikipedia_default = SvgWikipedia;

  // build/lib-react-tsx/logo/Zakodium.tsx
  var React56 = __toModule(require_react());
  function SvgZakodium({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React56.createElement("svg", {
      id: "Layer_1",
      "data-name": "Layer 1",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 588.44 588.44",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React56.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React56.createElement("defs", null, /* @__PURE__ */ React56.createElement("style", null, ".cls-1{fill:#2b143e}")), /* @__PURE__ */ React56.createElement("circle", {
      className: "cls-1",
      cx: 93.23,
      cy: 398.47,
      r: 56.95
    }), /* @__PURE__ */ React56.createElement("path", {
      className: "cls-1",
      d: "M528.16 397.39V455H279l-.46.46h-72.77l.47-.46 44.21-57.57 79.21-102.71 36.39-47 44.21-57.11H205.31V133h321.47l-44.67 57.6L402 294.68l-36.38 47-43.3 55.73z"
    }));
  }
  var Zakodium_default = SvgZakodium;

  // build/lib-react-tsx/mass/Impurities.tsx
  var React57 = __toModule(require_react());
  function SvgImpurities({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React57.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React57.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React57.createElement("path", {
      d: "M42.643 722.441h889.73M946.433 722.441l-51.622 39.223M894.811 683.405l51.622 39.036",
      fill: "none",
      strokeWidth: 45.698,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React57.createElement("path", {
      d: "M285.195 53.989c0-8.88-7.216-16.096-16.096-16.096-8.696 0-15.912 7.215-15.912 16.096zm0 0v658.279h-32.008V53.989zm-32.008 658.279c0 8.879 7.216 16.096 15.912 16.096 8.88 0 16.096-7.217 16.096-16.096zM674.83 421.24c0-8.88-7.03-16.096-15.909-16.096-8.879 0-15.91 7.215-15.91 16.096zm0 0v291.028h-31.819V421.24zm-31.819 291.028c0 8.879 7.031 16.096 15.91 16.096 8.879 0 15.91-7.217 15.91-16.096z",
      stroke: "none"
    }), /* @__PURE__ */ React57.createElement("g", {
      style: {
        lineHeight: "125%"
      },
      fontWeight: 400,
      fontSize: 180,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React57.createElement("path", {
      d: "M605.225 953.334h-26.807v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.932-5.362-5.097 0-8.525 2.11-3.34 2.11-5.362 6.24-2.021 4.13-2.9 10.195t-.879 13.887v46.23H520.85v-98.261h20.478l3.604 12.568h1.494q2.11-3.78 5.01-6.504 2.988-2.724 6.503-4.482 3.516-1.758 7.471-2.55 3.955-.878 7.998-.878 10.108 0 17.139 3.516 7.119 3.427 10.898 10.898h2.198q2.109-3.78 5.097-6.504 2.988-2.724 6.592-4.482 3.603-1.758 7.559-2.55 4.043-.878 8.085-.878 15.82 0 23.819 8.613 8.086 8.526 8.086 27.422v64.072h-26.895v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.931-5.362-9.58 0-13.623 7.647-4.043 7.558-4.043 21.709zM749.717 824.838l-47.9 128.496H677.47l47.9-128.496zM827.851 953.334h-72.246v-15.82l40.166-61.963H758.33v-20.478h67.852v17.402l-38.848 60.38h40.517z"
    })), /* @__PURE__ */ React57.createElement("path", {
      d: "M834.83 640c0-2.266-7.03-4.107-15.909-4.107-8.879 0-15.91 1.841-15.91 4.107zm0 0v74.257h-31.819V640zm-31.819 74.257c0 2.265 7.031 4.107 15.91 4.107 8.879 0 15.91-1.842 15.91-4.107zM764.83 632c0-2.266-7.03-4.107-15.909-4.107-8.879 0-15.91 1.841-15.91 4.107zm0 0v74.257h-31.819V632zm-31.819 74.257c0 2.265 7.031 4.107 15.91 4.107 8.879 0 15.91-1.842 15.91-4.107zM581.82 650c0-2.266-7.032-4.107-15.91-4.107-8.88 0-15.91 1.841-15.91 4.107zm0 0v74.257H550V650zM550 724.257c0 2.265 7.03 4.107 15.91 4.107 8.878 0 15.91-1.842 15.91-4.107zM441.82 650c0-2.266-7.031-4.107-15.91-4.107-8.88 0-15.91 1.841-15.91 4.107zm0 0v74.257H410V650zM410 724.257c0 2.265 7.03 4.107 15.91 4.107 8.878 0 15.91-1.842 15.91-4.107zM161.82 650c0-2.266-7.031-4.107-15.91-4.107-8.88 0-15.91 1.841-15.91 4.107zm0 0v74.257H130V650zM130 724.257c0 2.265 7.03 4.107 15.91 4.107 8.879 0 15.91-1.842 15.91-4.107z",
      stroke: "none",
      strokeWidth: 0.505
    }));
  }
  var Impurities_default = SvgImpurities;

  // build/lib-react-tsx/mass/Monoisotopic.tsx
  var React58 = __toModule(require_react());
  function SvgMonoisotopic({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React58.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React58.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React58.createElement("path", {
      d: "M49.263 749.728v49.904h762.035v49.905l138.552-71.668-138.552-78.045v49.904z",
      fillRule: "evenodd",
      strokeWidth: 1.176
    }), /* @__PURE__ */ React58.createElement("path", {
      d: "M100 585v30h600v-30H100z"
    }), /* @__PURE__ */ React58.createElement("path", {
      d: "M298.738 243.77v350h30v-350h-30zM700 585v30h150v-30H700z"
    }), /* @__PURE__ */ React58.createElement("g", {
      style: {
        lineHeight: "125%"
      },
      fontWeight: 400,
      fontSize: 180,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React58.createElement("path", {
      d: "M115.334 112.207q0 6.68-2.197 12.04-2.11 5.274-5.889 9.317-3.691 3.955-8.79 6.68-5.009 2.637-10.898 4.043v.527q15.557 1.934 23.555 9.492 7.998 7.471 7.998 20.215 0 8.438-3.076 15.645-2.988 7.119-9.316 12.392-6.24 5.274-15.82 8.262-9.493 2.9-22.413 2.9-10.37 0-19.511-1.757-9.141-1.67-17.051-5.186v-23.115q3.955 2.11 8.35 3.691 4.394 1.582 8.788 2.725 4.395 1.054 8.614 1.582 4.306.527 8.086.527 7.558 0 12.568-1.406t7.998-3.955q2.988-2.549 4.219-6.065 1.318-3.603 1.318-7.822 0-3.955-1.67-7.119-1.582-3.252-5.273-5.45-3.604-2.284-9.492-3.515-5.89-1.23-14.502-1.23h-9.141v-19.073h8.965q8.086 0 13.447-1.406 5.361-1.494 8.526-3.955 3.251-2.549 4.57-5.889 1.318-3.34 1.318-7.119 0-6.855-4.306-10.722-4.22-3.868-13.448-3.868-4.218 0-7.91.88-3.603.79-6.767 2.109-3.077 1.23-5.713 2.812-2.55 1.494-4.659 2.988l-13.71-18.105q3.69-2.725 7.998-5.01 4.394-2.285 9.492-3.955 5.097-1.758 10.986-2.724 5.889-.967 12.568-.967 9.493 0 17.227 2.11 7.822 2.02 13.36 5.976 5.536 3.867 8.525 9.58 3.076 5.625 3.076 12.92zM219.66 147.715q0 15.556-2.46 27.773-2.374 12.217-7.735 20.742-5.274 8.526-13.711 13.008-8.35 4.482-20.215 4.482-11.162 0-19.424-4.482-8.262-4.482-13.71-13.008-5.45-8.525-8.175-20.742-2.636-12.217-2.636-27.773 0-15.557 2.373-27.862 2.46-12.305 7.734-20.83 5.274-8.525 13.623-13.008 8.35-4.57 20.215-4.57 11.074 0 19.336 4.482 8.262 4.483 13.799 13.008 5.537 8.526 8.261 20.83 2.725 12.305 2.725 27.95zm-60.996 0q0 21.972 3.78 33.046 3.779 11.075 13.095 11.075 9.14 0 13.096-10.987 4.043-10.986 4.043-33.134 0-22.061-4.043-33.135-3.955-11.162-13.096-11.162-4.658 0-7.91 2.812-3.164 2.813-5.186 8.35-2.021 5.537-2.9 13.886-.879 8.262-.879 19.249zM318.8 147.715q0 15.556-2.46 27.773-2.373 12.217-7.735 20.742-5.273 8.526-13.71 13.008-8.35 4.482-20.215 4.482-11.162 0-19.424-4.482-8.262-4.482-13.711-13.008-5.45-8.525-8.174-20.742-2.637-12.217-2.637-27.773 0-15.557 2.373-27.862 2.461-12.305 7.735-20.83 5.273-8.525 13.623-13.008 8.35-4.57 20.215-4.57 11.074 0 19.336 4.482 8.261 4.483 13.798 13.008 5.537 8.526 8.262 20.83 2.725 12.305 2.725 27.95zm-60.995 0q0 21.972 3.779 33.046 3.78 11.075 13.096 11.075 9.14 0 13.095-10.987 4.043-10.986 4.043-33.134 0-22.061-4.043-33.135-3.955-11.162-13.095-11.162-4.659 0-7.91 2.812-3.165 2.813-5.186 8.35-2.022 5.537-2.9 13.886-.88 8.262-.88 19.249zM334.621 199.394q0-4.13 1.143-6.943 1.23-2.9 3.34-4.658 2.109-1.758 4.921-2.55 2.813-.79 6.065-.79 3.076 0 5.8.79 2.813.792 4.922 2.55 2.11 1.757 3.34 4.658 1.23 2.812 1.23 6.943 0 3.955-1.23 6.768-1.23 2.812-3.34 4.658-2.109 1.846-4.921 2.637-2.725.879-5.801.879-3.252 0-6.065-.88-2.812-.79-4.922-2.636-2.109-1.846-3.34-4.658-1.142-2.813-1.142-6.768zM447.473 211.963h-27.159v-74.356-5.45q.088-3.251.176-6.679.176-3.515.264-7.031.176-3.516.264-6.416-.44.527-1.495 1.582l-2.373 2.373q-1.318 1.23-2.724 2.549-1.407 1.318-2.725 2.373l-14.766 11.865-13.183-16.348 41.396-32.959h22.325v128.497zM568.234 211.963h-86.22v-18.897l30.234-32.607q5.713-6.153 10.371-11.338 4.658-5.186 7.998-10.108 3.34-4.922 5.186-10.02 1.845-5.097 1.845-10.986 0-6.503-3.955-10.107-3.867-3.603-10.459-3.603-6.943 0-13.36 3.427-6.415 3.428-13.446 9.756l-14.766-17.49q3.955-3.604 8.262-6.856 4.306-3.34 9.492-5.888 5.186-2.55 11.426-4.043 6.24-1.582 13.974-1.582 9.229 0 16.524 2.549 7.383 2.548 12.568 7.295 5.186 4.658 7.91 11.337 2.813 6.68 2.813 15.03 0 7.558-2.637 14.502-2.637 6.855-7.207 13.535-4.57 6.592-10.635 13.183-5.976 6.504-12.832 13.272l-15.468 15.557v1.23h52.382v22.852zM662.365 112.207q0 6.68-2.197 12.04-2.11 5.274-5.889 9.317-3.691 3.955-8.789 6.68-5.01 2.637-10.898 4.043v.527q15.556 1.934 23.554 9.492 7.998 7.471 7.998 20.215 0 8.438-3.076 15.645-2.988 7.119-9.316 12.392-6.24 5.274-15.82 8.262-9.493 2.9-22.413 2.9-10.37 0-19.511-1.757-9.14-1.67-17.051-5.186v-23.115q3.955 2.11 8.35 3.691 4.394 1.582 8.789 2.725 4.394 1.054 8.613 1.582 4.307.527 8.086.527 7.558 0 12.568-1.406t7.998-3.955q2.989-2.549 4.219-6.065 1.318-3.603 1.318-7.822 0-3.955-1.67-7.119-1.582-3.252-5.273-5.45-3.604-2.284-9.492-3.515-5.889-1.23-14.502-1.23h-9.14v-19.073h8.964q8.086 0 13.447-1.406 5.362-1.494 8.526-3.955 3.252-2.549 4.57-5.889 1.318-3.34 1.318-7.119 0-6.855-4.306-10.722-4.219-3.868-13.447-3.868-4.22 0-7.91.88-3.604.79-6.768 2.109-3.076 1.23-5.713 2.812-2.549 1.494-4.658 2.988l-13.711-18.105q3.691-2.725 7.998-5.01 4.394-2.285 9.492-3.955 5.098-1.758 10.986-2.724 5.889-.967 12.569-.967 9.492 0 17.226 2.11 7.822 2.02 13.36 5.976 5.537 3.867 8.525 9.58 3.076 5.625 3.076 12.92z"
    })), /* @__PURE__ */ React58.createElement("g", {
      style: {
        lineHeight: "125%"
      },
      fontWeight: 400,
      fontSize: 180,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React58.createElement("path", {
      d: "M555.225 953.334h-26.807v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.932-5.362-5.097 0-8.525 2.11-3.34 2.11-5.362 6.24-2.021 4.13-2.9 10.195t-.879 13.887v46.23H470.85v-98.261h20.478l3.604 12.568h1.494q2.11-3.78 5.01-6.504 2.988-2.724 6.503-4.482 3.516-1.758 7.471-2.55 3.955-.878 7.998-.878 10.108 0 17.139 3.516 7.119 3.427 10.898 10.898h2.197q2.11-3.78 5.098-6.504 2.988-2.724 6.592-4.482 3.603-1.758 7.559-2.55 4.043-.878 8.085-.878 15.82 0 23.819 8.613 8.086 8.526 8.086 27.422v64.072h-26.895v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.931-5.362-9.58 0-13.624 7.647-4.042 7.558-4.042 21.709v49.306zM699.717 824.838l-47.9 128.496H627.47l47.9-128.496h24.346zM777.851 953.334h-72.246v-15.82l40.166-61.963H708.33v-20.478h67.852v17.402l-38.848 60.38h40.517v20.48z"
    })), /* @__PURE__ */ React58.createElement("path", {
      d: "M734.84 433.785v177.117h30V433.785h-30z"
    }));
  }
  var Monoisotopic_default = SvgMonoisotopic;

  // build/lib-react-tsx/mass/Overlay.tsx
  var React59 = __toModule(require_react());
  function SvgOverlay2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React59.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React59.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React59.createElement("path", {
      d: "M354.945 655.836c0-8.88-6.846-16.096-15.171-16.096-8.51 0-15.357 7.217-15.357 16.096zm0 0v56.432h-30.528v-56.432zm-30.528 56.432c0 8.879 6.846 16.096 15.357 16.096 8.325 0 15.171-7.217 15.171-16.096zM354.945 558.706c0-8.882-6.846-16.097-15.171-16.097-8.51 0-15.357 7.215-15.357 16.097zm0 0v56.426h-30.528v-56.426zm-30.528 56.426c0 8.885 6.846 16.096 15.357 16.096 8.325 0 15.171-7.211 15.171-16.096zM354.945 461.573c0-8.88-6.846-16.096-15.171-16.096-8.51 0-15.357 7.215-15.357 16.096zm0 0v56.429h-30.528v-56.429zm-30.528 56.429c0 8.88 6.846 16.096 15.357 16.096 8.325 0 15.171-7.216 15.171-16.096zM354.945 364.44c0-8.88-6.846-16.095-15.171-16.095-8.51 0-15.357 7.216-15.357 16.096zm0 0v56.43h-30.528v-56.43zm-30.528 56.43c0 8.88 6.846 16.096 15.357 16.096 8.325 0 15.171-7.215 15.171-16.096zM354.945 267.309c0-8.88-6.846-16.096-15.171-16.096-8.51 0-15.357 7.215-15.357 16.096zm0 0v56.614h-30.528v-56.614zm-30.528 56.614c0 8.696 6.846 15.911 15.357 15.911 8.325 0 15.171-7.215 15.171-15.911zM840.973 655.836c0-8.88-6.844-16.096-15.17-16.096-8.51 0-15.168 7.217-15.168 16.096zm0 0v56.432h-30.338v-56.432zm-30.338 56.432c0 8.879 6.658 16.096 15.169 16.096 8.325 0 15.17-7.217 15.17-16.096zM840.973 558.706c0-8.882-6.844-16.097-15.17-16.097-8.51 0-15.168 7.215-15.168 16.097zm0 0v56.426h-30.338v-56.426zm-30.338 56.426c0 8.885 6.658 16.096 15.169 16.096 8.325 0 15.17-7.211 15.17-16.096zM840.973 461.573c0-8.88-6.844-16.096-15.17-16.096-8.51 0-15.168 7.215-15.168 16.096zm0 0v56.429h-30.338v-56.429zm-30.338 56.429c0 8.88 6.658 16.096 15.169 16.096 8.325 0 15.17-7.216 15.17-16.096z",
      stroke: "none"
    }), /* @__PURE__ */ React59.createElement("path", {
      d: "M42.643 722.441h889.73M946.433 722.441l-51.622 39.223M894.811 683.405l51.622 39.036",
      fill: "none",
      strokeWidth: 45.698,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React59.createElement("path", {
      d: "M285.195 53.989c0-8.88-7.216-16.096-16.096-16.096-8.696 0-15.912 7.215-15.912 16.096zm0 0v658.279h-32.008V53.989zm-32.008 658.279c0 8.879 7.216 16.096 15.912 16.096 8.88 0 16.096-7.217 16.096-16.096zM674.83 421.24c0-8.88-7.03-16.096-15.909-16.096-8.879 0-15.91 7.215-15.91 16.096zm0 0v291.028h-31.819V421.24zm-31.819 291.028c0 8.879 7.031 16.096 15.91 16.096 8.879 0 15.91-7.217 15.91-16.096z",
      stroke: "none"
    }), /* @__PURE__ */ React59.createElement("g", {
      style: {
        lineHeight: "125%"
      },
      fontWeight: 400,
      fontSize: 180,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React59.createElement("path", {
      d: "M605.225 953.334h-26.807v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.932-5.362-5.097 0-8.525 2.11-3.34 2.11-5.362 6.24-2.021 4.13-2.9 10.195t-.879 13.887v46.23H520.85v-98.261h20.478l3.604 12.568h1.494q2.11-3.78 5.01-6.504 2.988-2.724 6.503-4.482 3.516-1.758 7.471-2.55 3.955-.878 7.998-.878 10.108 0 17.139 3.516 7.119 3.427 10.898 10.898h2.198q2.109-3.78 5.097-6.504 2.988-2.724 6.592-4.482 3.603-1.758 7.559-2.55 4.043-.878 8.085-.878 15.82 0 23.819 8.613 8.086 8.526 8.086 27.422v64.072h-26.895v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.931-5.362-9.58 0-13.623 7.647-4.043 7.558-4.043 21.709zM749.717 824.838l-47.9 128.496H677.47l47.9-128.496zM827.851 953.334h-72.246v-15.82l40.166-61.963H758.33v-20.478h67.852v17.402l-38.848 60.38h40.517z"
    })));
  }
  var Overlay_default2 = SvgOverlay2;

  // build/lib-react-tsx/mass/RequestProtein.tsx
  var React60 = __toModule(require_react());
  function SvgRequestProtein({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React60.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React60.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React60.createElement("path", {
      d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235l-217.03 251.696-37.674-32.266 217.03-251.899zM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008l53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89l-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38V153.654l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307z",
      stroke: "none"
    }), /* @__PURE__ */ React60.createElement("path", {
      className: "fil0",
      d: "M15.49 11.851l.456.587-.014.013-.014.012-.014.011-.015.01-.015.01-.016.008-.015.007-.016.007-.016.005-.016.005-.017.004-.016.003-.017.002h-.049l-.017-.002-.016-.002-.017-.004-.016-.004-.016-.005-.015-.006-.016-.007-.015-.008-.015-.008-.015-.01-.014-.01-.014-.012-.014-.012-.013-.013-.012-.014-.012-.015-.012-.015-.01-.016-.01-.016-.01-.017-.007-.017-.008-.017-.006-.018-.006-.018-.005-.018-.004-.019-.003-.018-.003-.019-.001-.018-.001-.02v-.037l.002-.018.002-.019.003-.018.004-.019.004-.018.006-.018.006-.017.007-.018.007-.017.009-.016.009-.016.01-.016.01-.016.012-.014.013-.015zm.697.346l-.241.241-.457-.587.242-.24zm1.615-7.582l.398-.639v0l.147.138.125.16.106.18.086.194.068.206.052.218.037.229.023.238.01.248-.001.256-.014.264-.026.271-.036.278-.048.284-.058.288-.069.293-.08.296-.089.298-.099.3-.11.3-.118.3-.129.298-.138.295-.147.293-.157.288-.166.282-.174.276-.184.27-.193.26-.202.25-.21.241-.219.23-.456-.588.196-.204.189-.216.182-.227.175-.237.168-.246.16-.253.153-.26.144-.265.136-.27.128-.274.119-.276.11-.277.1-.277.092-.276.082-.274.073-.271.063-.267.052-.26.043-.255.032-.246.023-.237.012-.227.001-.214-.008-.2-.018-.187-.028-.17-.036-.152-.044-.133-.05-.114-.055-.094-.06-.076-.063-.06v0zm-4.785 4.568l-.669.193v0l-.059-.342-.024-.34.01-.334.039-.328.069-.32.095-.311.118-.301.14-.291.16-.28.177-.27.193-.258.207-.247.219-.235.23-.224.238-.21.245-.199.252-.185.256-.171.258-.157.26-.143.26-.127.258-.111.255-.095.251-.078.246-.06.24-.04.232-.021h.225l.217.025.207.052.197.083.181.118-.398.639-.075-.049-.098-.04-.121-.03-.144-.017h-.163l-.18.016-.195.033-.207.05-.216.067-.223.083-.23.1-.231.113-.234.128-.233.142-.231.154-.227.167-.221.179-.214.189-.204.199-.194.208-.18.216-.167.223-.15.229-.134.234-.115.238-.095.241-.075.244-.053.246-.03.248-.007.249.018.252.044.256zm-.097 4.508l.005-.782v0l.188-.006.156-.02.123-.03.091-.035.063-.038.04-.035.024-.033.017-.036.013-.047.008-.063v-.083l-.01-.1-.022-.115-.032-.128-.043-.138-.053-.147-.062-.152-.068-.158-.075-.161-.079-.164-.082-.165-.085-.165-.085-.164-.085-.163-.084-.16-.08-.158-.076-.153-.07-.15-.065-.145-.058-.142-.048-.14-.038-.14.67-.192.02.073.032.093.044.11.054.122.064.134.07.143.078.15.081.158.085.162.087.167.088.171.086.173.085.175.082.177.077.177.07.178.065.177.055.178.045.177.033.18.018.18v.182l-.024.184-.052.182-.084.172-.115.153-.142.127-.163.098-.181.071-.199.049-.218.027-.239.008v0zm-.85-9.64l.667.199v0l-.048.155-.067.164-.085.191-.103.22-.118.249-.132.276-.142.3-.15.322-.156.342-.157.357-.156.372-.153.381-.147.39-.137.393-.126.395-.11.393-.093.388-.073.379-.05.366-.025.35.002.33.03.307.057.281.087.254.118.228.151.204.192.182.238.16.293.134.352.103.415.067.481.026-.005.782-.54-.03-.485-.078-.432-.127-.382-.175-.332-.222-.281-.267-.229-.307-.175-.34-.125-.363-.08-.38-.037-.395-.002-.404.029-.412.057-.417.08-.422.102-.423.119-.423.133-.42.144-.414.154-.407.159-.397.162-.384.161-.368.16-.35.152-.328.144-.304.132-.277.117-.246.1-.211.077-.172.05-.124.018-.053v0zm-8.958.816l-.521-.512v0l.276-.328.304-.302.327-.274.347-.249.366-.223.382-.2.396-.177.406-.155.416-.134.422-.113.427-.093.429-.074.429-.055.427-.037.422-.019.416-.002.407.015.396.03.384.048.367.062.351.077.332.093.31.108.288.124.264.14.238.159.21.18.179.206.14.236.093.268.03.29-.035.294-.667-.199.012-.104-.01-.09-.032-.092-.063-.105-.1-.115-.14-.118-.176-.118-.211-.112-.243-.104-.27-.094-.297-.083-.32-.07-.338-.058-.356-.043-.37-.03-.382-.013-.391.002-.398.018-.402.035-.403.051-.403.07-.4.087-.392.105-.385.124-.374.142-.36.161-.346.18-.326.2-.306.22-.284.237-.259.257-.233.276v0zm3.164 2.509l.095.774v0l-.249.032-.246.016-.242.001-.239-.012-.234-.025-.229-.038-.223-.05-.217-.062-.211-.072-.204-.083-.196-.093-.189-.102-.18-.11-.171-.12-.162-.126-.152-.135-.141-.142-.13-.148-.12-.156-.106-.162-.093-.169-.08-.174-.064-.181-.047-.186-.03-.19-.01-.194.01-.195.033-.194.053-.191.076-.186.096-.178.117-.17.521.512-.07.104-.056.101-.04.1-.028.099-.016.098-.005.1.005.102.016.105.028.108.04.11.05.113.064.114.075.114.086.114.099.112.109.11.12.105.13.102.138.097.148.09.157.085.164.078.171.07.178.06.185.052.19.043.194.032.2.022.203.01h.207l.21-.015.212-.026v0zm10.683.146l-.575.432v0l-.032-.038-.078-.06-.127-.069-.172-.066-.211-.06-.247-.052-.277-.043-.304-.034-.33-.025-.35-.016-.368-.008-.384-.001-.398.006-.408.012-.416.019-.422.023-.424.028-.426.033-.423.035-.42.04-.412.04-.403.043-.391.044-.377.044-.36.044-.342.044-.32.042-.296.04-.27.038-.24.035-.21.031-.175.027-.095-.774.179-.028.212-.031.243-.035.272-.039.299-.04.322-.043.345-.044.363-.045.38-.044.395-.044.407-.044.416-.04.424-.04.428-.036.431-.033.431-.029.429-.024.424-.018.416-.013.408-.006h.396l.382.01.366.017.348.026.328.037.306.047.284.06.26.074.235.091.211.114.188.149.155.197v0zm-11.171 2.81l-.381-.651v0l.271-.17.308-.136.34-.11.372-.089.401-.07.428-.056.453-.043.473-.03.49-.022.504-.014.515-.007.521-.003h1.048l.519.002.51-.001.499-.005.482-.01.462-.015.438-.025.41-.033.375-.045.339-.056.294-.07.245-.08.188-.087.124-.086.061-.069.02-.043.003-.056-.028-.115-.088-.183.575-.432.151.317.076.33-.021.336-.125.3-.197.23-.24.169-.273.129-.307.1-.34.08-.37.062-.402.047-.428.036-.452.025-.473.016-.49.01-.504.005H11.53l-.523-.002h-.522l-.517.003-.508.008-.495.013-.48.021-.457.03-.433.04-.404.053-.37.065-.33.08-.287.092-.236.104-.18.112v0zm1.156-2.797l.293-.708v0l1.06.587.9.549.748.51.608.477.478.447.358.424.248.413.134.42.004.424-.135.382-.235.3-.297.226-.345.172-.387.131-.421.096-.45.065-.472.036-.484.009-.49-.018-.485-.042-.474-.067-.454-.09-.426-.114-.39-.138-.35-.165-.301-.197-.25-.247-.175-.326-.041-.397.118-.383.237-.33.339-.3.38.652-.244.216-.119.16-.026.08.005.036.046.077.125.12.21.137.28.131.337.12.383.102.418.083.44.062.455.04.458.016.45-.008.433-.033.406-.059.367-.083.316-.107.253-.125.177-.133.1-.122.039-.106-.002-.131-.067-.205-.17-.283-.292-.345-.426-.397-.567-.445-.716-.488-.873-.533-1.039-.575v0zm-2.14-3.4l.643.282-.027.094-.018.09-.009.088-.001.087.006.086.014.087.021.088.03.09.035.09.043.09.05.091.057.091.063.091.069.09.073.089.078.087.082.085.085.083.087.08.09.078.09.075.09.072.09.068.09.065.088.061.086.058.082.054.08.049.074.045.07.04.065.037.057.03-.293.709-.067-.037-.073-.04-.079-.046-.083-.05-.088-.056-.093-.06-.095-.063-.098-.069-.1-.073-.103-.077-.103-.082-.103-.085-.103-.09-.102-.094-.1-.099-.099-.102-.096-.107-.092-.112-.088-.116-.084-.12-.079-.126-.072-.131-.064-.137-.057-.141-.047-.147-.037-.153-.025-.158-.012-.161.002-.166.017-.167.033-.168zm.643.282l-.644-.282.007-.018.008-.018.008-.018.009-.016.01-.017.01-.015.01-.015.012-.014.012-.013.012-.013.013-.012.014-.01.014-.011.014-.01.014-.008.015-.008.016-.008.015-.006.016-.005.016-.005.017-.004.016-.003.017-.002h.016l.017-.001h.017l.017.003.017.002.017.004.017.005.017.005.017.007.016.008.016.009.015.009.015.01.014.01.014.012.013.013.012.013.012.013.011.014.01.015.01.015.01.016.008.016.008.017.007.017.006.017.006.018.005.018.004.018.003.018.003.019.001.019.001.019v.038l-.002.02-.002.018-.004.02-.004.019-.005.019z",
      fillRule: "nonzero",
      transform: "matrix(45.35208 0 0 46.1966 11.084 23.48)",
      clipRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }));
  }
  var RequestProtein_default = SvgRequestProtein;

  // build/lib-react-tsx/mass/Request.tsx
  var React61 = __toModule(require_react());
  function SvgRequest3({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React61.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React61.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React61.createElement("path", {
      d: "M160.44 546.832c-13.627.2-24.85 11.222-25.05 25.049 0 13.627 11.022 24.849 24.649 24.647zm0 0h679.747l-.202 49.696H160.039zm679.545 49.696c13.627 0 24.848-11.02 25.05-24.848 0-13.626-11.02-24.848-24.848-24.848z",
      stroke: "none"
    }), /* @__PURE__ */ React61.createElement("path", {
      d: "M469.05 568.274c0 13.627 11.022 24.648 24.65 24.648 13.827-.203 25.05-11.422 25.05-25.05zm0 0v-438.87l49.7-.4v438.868zm49.7-439.27c0-13.827-11.023-24.85-24.85-24.649-13.627 0-24.85 11.223-24.85 25.05zM663.437 568.274c0 13.627 11.02 24.648 24.848 24.648 13.627-.203 24.848-11.422 24.848-25.05zm0 0v-181.36l49.696-.4v181.358zm49.696-181.76c0-13.828-11.02-24.85-24.848-24.649-13.627 0-24.848 11.222-24.848 25.05zM973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235l-217.03 251.696-37.674-32.266 217.03-251.899zM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008l53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89l-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38V153.654l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307z",
      stroke: "none"
    }));
  }
  var Request_default3 = SvgRequest3;

  // build/lib-react-tsx/mass/Sum.tsx
  var React62 = __toModule(require_react());
  function SvgSum({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React62.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React62.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React62.createElement("path", {
      d: "M97.315 689.637h785.854",
      fillRule: "nonzero",
      strokeWidth: 28.395291959999998,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      clipRule: "evenodd",
      fill: "#c8c8c8",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React62.createElement("path", {
      d: "M895.679 689.633L850 724.226",
      fillRule: "nonzero",
      strokeWidth: 28.395291959999998,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      clipRule: "evenodd",
      fill: "#80afaf",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React62.createElement("path", {
      d: "M850.002 655.041l45.677 34.59",
      fillRule: "nonzero",
      strokeWidth: 28.395291959999998,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      clipRule: "evenodd",
      fill: "#c8c8c8",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React62.createElement("path", {
      d: "M313.538 413.339h-25.406l.017-.656.049-.647.081-.639.112-.627.142-.616.171-.605.2-.593.227-.579.255-.563.28-.551.307-.533.33-.518.353-.5.377-.48.4-.463.42-.443.442-.421.46-.402.481-.378.497-.356.516-.332.532-.306.547-.282.564-.255.577-.229.59-.198.603-.173.614-.141.624-.114.636-.08.646-.049.653-.016.654.016.646.048.635.081.625.114.614.141.603.173.59.198.577.229.564.255.547.282.531.306.516.332.497.356.48.378.462.402.44.421.42.443.401.463.378.48.353.5.33.518.307.533.28.55.255.564.227.579.198.593.173.605.141.616.112.627.08.64.048.646.017.656zm-25.406 84.767v-84.767h25.406v84.767zm0 0h25.406l-.016.655-.048.647-.08.639-.112.627-.142.617-.172.604-.199.594-.227.578-.255.564-.28.55-.306.533-.33.518-.354.5-.377.48-.4.463-.42.443-.442.422-.46.402-.481.377-.497.357-.516.331-.531.306-.548.283-.564.255-.576.228-.59.199-.603.172-.615.142-.624.113-.636.081-.645.048-.654.016-.654-.016-.645-.048-.636-.08-.624-.114-.615-.142-.603-.172-.59-.199-.577-.228-.564-.255-.547-.283-.531-.306-.517-.331-.496-.357-.48-.377-.462-.402-.44-.422-.42-.443-.401-.462-.378-.48-.353-.5-.33-.519-.307-.532-.28-.551-.255-.564-.227-.578-.2-.594-.17-.604-.143-.617-.111-.627-.082-.639-.049-.647-.016-.655z",
      className: "fil1",
      clipRule: "evenodd",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      stroke: "none"
    }), /* @__PURE__ */ React62.createElement("path", {
      d: "M639.493 830.17v30.925c0 4.886-1.106 8.552-3.317 10.996-2.24 2.444-5.148 3.666-8.786 3.666-3.548 0-6.4-1.222-8.582-3.666-2.181-2.444-3.288-6.11-3.288-10.996V824.03c0-5.875-.202-10.414-.61-13.643-.378-3.23-1.455-5.906-3.228-7.972-1.747-2.066-4.539-3.113-8.35-3.113-7.622 0-12.626 2.618-15.041 7.856-2.414 5.206-3.637 12.713-3.637 22.487v31.45c0 4.829-1.104 8.494-3.288 10.967-2.181 2.473-5.061 3.695-8.64 3.695-3.52 0-6.4-1.222-8.64-3.695s-3.375-6.138-3.375-10.968v-66.562c0-4.365 1.018-7.71 3.027-9.979 2.006-2.27 4.683-3.404 7.97-3.404 3.172 0 5.82 1.077 7.972 3.2 2.123 2.124 3.2 5.063 3.2 8.815v2.211c4.015-4.83 8.349-8.379 12.946-10.647 4.596-2.27 9.716-3.404 15.36-3.404 5.848 0 10.881 1.163 15.1 3.49 4.188 2.328 7.65 5.848 10.385 10.561 3.927-4.77 8.117-8.29 12.626-10.59 4.48-2.298 9.454-3.461 14.894-3.461 6.372 0 11.84 1.25 16.438 3.752 4.597 2.502 8.029 6.081 10.299 10.735 2.007 4.189 2.995 10.822 2.995 19.87v45.414c0 4.886-1.104 8.552-3.316 10.996-2.21 2.444-5.15 3.666-8.785 3.666-3.52 0-6.4-1.222-8.64-3.695-2.241-2.473-3.375-6.138-3.375-10.967v-39.13c0-5.003-.205-8.99-.64-12.014-.437-2.997-1.571-5.529-3.433-7.595-1.89-2.036-4.713-3.054-8.524-3.054-3.084 0-5.993.902-8.728 2.736-2.764 1.802-4.887 4.247-6.43 7.33-1.715 3.899-2.559 10.85-2.559 20.802zm110.026-66.302l-23.855 98.245c-.816 3.257-1.514 5.788-2.096 7.679-.61 1.861-1.513 3.345-2.734 4.393-1.222 1.047-2.997 1.572-5.324 1.572-5.79 0-8.7-2.502-8.7-7.506 0-1.31.583-4.568 1.719-9.804l23.766-98.244c1.252-5.236 2.445-8.815 3.58-10.736 1.163-1.95 3.374-2.909 6.662-2.909 2.85 0 5.032.669 6.516 2.037 1.513 1.368 2.27 3.258 2.27 5.644 0 1.746-.611 4.975-1.804 9.63zm79.275 43.958l-42.62 47.653h45.588c3.695 0 6.488.873 8.35 2.589 1.89 1.745 2.822 3.986 2.822 6.692 0 2.618-.932 4.741-2.764 6.4-1.861 1.659-4.654 2.473-8.408 2.473h-63.07c-4.423 0-7.74-.96-9.922-2.91-2.182-1.92-3.286-4.567-3.286-7.912 0-1.98.756-3.986 2.297-6.023 1.542-2.006 4.714-5.701 9.543-11.112 5.12-5.675 9.774-10.822 13.935-15.42 4.189-4.597 8.059-8.901 11.636-12.917 3.579-4.015 6.547-7.388 8.903-10.181 2.357-2.793 4.248-5.179 5.673-7.158h-34.59c-4.771 0-8.38-.436-10.823-1.28-2.443-.843-3.665-3.083-3.665-6.72 0-2.676.902-4.8 2.763-6.4 1.832-1.6 4.48-2.385 7.884-2.385h53.443c4.945 0 8.727.727 11.374 2.181 2.648 1.425 3.957 4.044 3.957 7.797 0 1.25-.262 2.532-.757 3.869-.523 1.338-1.077 2.415-1.716 3.288-.61.843-1.483 1.89-2.56 3.113a219.29 219.29 0 01-3.986 4.363z",
      className: "fil1",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 21.809,
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      stroke: "none"
    }), /* @__PURE__ */ React62.createElement("path", {
      d: "M97.315 498.106h785.854M97.315 306.573h785.854M97.315 115.041h785.854",
      fillRule: "nonzero",
      strokeWidth: 28.395291959999998,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      clipRule: "evenodd",
      fill: "#c8c8c8",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React62.createElement("path", {
      d: "M600.771 413.339h-25.406l.017-.656.048-.647.08-.639.112-.627.141-.616.173-.605.198-.593.227-.579.255-.563.28-.551.307-.533.33-.518.353-.5.378-.48.4-.463.42-.443.441-.421.461-.402.48-.378.497-.356.517-.332.53-.306.548-.282.564-.255.577-.229.59-.198.603-.173.614-.141.625-.114.635-.08.646-.049.654-.016.653.016.646.048.635.081.625.114.614.141.603.173.59.198.577.229.564.255.547.282.531.306.517.332.496.356.48.378.462.402.44.421.42.443.401.463.378.48.353.5.33.518.307.533.28.55.255.564.227.579.198.593.173.605.142.616.11.627.081.64.048.646.017.656zm-25.406 84.767v-84.767h25.406v84.767zm0 0h25.406l-.016.655-.048.647-.08.639-.112.627-.142.617-.172.604-.199.594-.227.578-.255.564-.28.55-.306.533-.33.518-.354.5-.377.48-.4.463-.42.443-.442.422-.46.402-.481.377-.497.357-.516.331-.531.306-.548.283-.564.255-.576.228-.59.199-.603.172-.615.142-.624.113-.636.081-.646.048-.653.016-.654-.016-.645-.048-.636-.08-.624-.114-.615-.142-.603-.172-.59-.199-.577-.228-.563-.255-.548-.283-.53-.306-.517-.331-.497-.357-.48-.377-.461-.402-.442-.422-.42-.443-.4-.462-.378-.48-.353-.5-.33-.519-.307-.532-.28-.551-.254-.564-.228-.578-.198-.594-.172-.604-.142-.617-.111-.627-.081-.639-.048-.647-.016-.655zM600.771 221.807h-25.406l.017-.656.048-.647.08-.639.112-.627.141-.616.173-.605.198-.593.227-.579.255-.564.28-.55.307-.533.33-.518.353-.5.378-.48.4-.463.42-.443.441-.422.461-.402.48-.377.497-.357.517-.331.53-.306.548-.283.564-.255.577-.228.59-.2.603-.171.614-.143.625-.112.635-.082.646-.05.654-.016.653.017.646.049.635.082.625.112.614.143.603.171.59.2.577.228.564.255.547.283.531.306.517.331.496.357.48.377.462.402.44.422.42.443.401.462.378.48.353.5.33.519.307.533.28.55.255.564.227.579.198.593.173.605.142.616.11.627.081.64.048.646.017.656zm-25.406 84.766v-84.766h25.406v84.766zm0 0h25.406l-.016.656-.048.647-.08.639-.112.627-.142.616-.172.605-.199.593-.227.579-.255.564-.28.55-.306.533-.33.518-.354.5-.377.48-.4.463-.42.443-.442.422-.46.402-.481.377-.497.357-.516.331-.531.306-.548.282-.564.255-.576.23-.59.198-.603.172-.615.142-.624.113-.636.08-.646.049-.653.016-.654-.016-.645-.048-.636-.08-.624-.114-.615-.142-.603-.172-.59-.199-.577-.229-.563-.255-.548-.282-.53-.306-.517-.331-.497-.357-.48-.377-.461-.402-.442-.422-.42-.443-.4-.462-.378-.48-.353-.5-.33-.519-.307-.533-.28-.55-.254-.564-.228-.579-.198-.593-.172-.605-.142-.616-.111-.627-.081-.64-.048-.646-.016-.656zM313.538 30.275h-25.406l.017-.656.049-.647.081-.639.112-.627.142-.616.171-.605.2-.593.227-.579.255-.564.28-.55.307-.533.33-.518.353-.5.377-.48.4-.463.42-.443.442-.422.46-.402.481-.377.497-.357.516-.331.532-.306.547-.283.564-.255.577-.228.59-.2.603-.171.614-.143.624-.112.636-.082.646-.05.653-.015.654.016.646.049.635.082.625.112.614.143.603.171.59.2.577.228.564.255.547.283.531.306.516.331.497.357.48.377.462.402.44.422.42.443.401.462.378.48.353.5.33.519.307.533.28.55.255.564.227.579.198.593.173.605.141.616.112.627.08.64.048.646.017.656zm-25.406 84.766V30.275h25.406v84.766zm0 0h25.406l-.016.656-.048.647-.08.639-.112.627-.142.617-.172.604-.199.593-.227.579-.255.564-.28.55-.306.533-.33.518-.354.5-.377.48-.4.463-.42.443-.442.422-.46.402-.481.377-.497.357-.516.331-.531.306-.548.283-.564.255-.576.229-.59.199-.603.172-.615.142-.624.112-.636.082-.645.05-.654.016-.654-.017-.645-.049-.636-.082-.624-.112-.615-.142-.603-.172-.59-.2-.577-.228-.564-.255-.547-.283-.531-.306-.517-.331-.496-.357-.48-.377-.462-.402-.44-.422-.42-.443-.401-.462-.378-.48-.353-.5-.33-.519-.307-.532-.28-.551-.255-.564-.227-.579-.2-.593-.17-.604-.143-.617-.111-.627-.082-.64-.049-.646-.016-.656zM459.135 168.148h-25.406l.016-.655.048-.648.081-.639.111-.627.142-.616.172-.605.199-.593.227-.579.255-.564.28-.55.307-.533.33-.518.353-.5.377-.48.4-.463.42-.443.442-.422.46-.402.481-.377.497-.356.517-.332.53-.306.548-.283.564-.254.577-.23.59-.199.603-.171.614-.142.625-.113.635-.082.646-.05.653-.015.654.016.646.049.635.082.625.113.614.142.603.171.59.2.577.229.564.254.547.283.531.306.517.332.497.356.48.377.46.402.442.422.42.443.4.462.378.48.353.5.33.519.308.533.279.55.255.564.227.579.199.593.172.605.142.616.11.627.082.64.048.647.016.655zm-25.406 84.767v-84.767h25.406v84.767zm0 0h25.406l-.016.655-.048.647-.081.639-.111.627-.142.617-.172.604-.199.594-.227.578-.255.564-.28.55-.307.533-.33.518-.353.5-.377.48-.4.463-.42.443-.442.422-.46.402-.481.377-.497.357-.517.331-.53.306-.548.283-.564.255-.577.228-.59.199-.603.172-.614.142-.625.113-.635.081-.646.048-.653.016-.654-.016-.646-.048-.635-.08-.625-.114-.614-.142-.603-.172-.59-.199-.577-.228-.564-.255-.547-.283-.531-.306-.517-.331-.496-.357-.48-.377-.462-.402-.44-.422-.42-.443-.401-.462-.378-.48-.353-.5-.33-.519-.307-.532-.28-.551-.255-.564-.227-.578-.198-.594-.173-.604-.141-.617-.112-.627-.08-.639-.048-.647-.017-.655z",
      className: "fil1",
      clipRule: "evenodd",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      stroke: "none"
    }), /* @__PURE__ */ React62.createElement("path", {
      d: "M488.817 223.235v-25.406l.655.016.647.05.64.081.627.111.616.143.605.171.593.2.579.227.563.255.551.28.533.306.518.33.5.354.48.377.463.4.443.42.421.442.402.46.378.481.356.497.332.516.305.531.283.548.255.564.229.577.198.59.173.603.141.614.114.624.08.636.048.646.017.653-.017.654-.048.645-.08.636-.114.624-.141.615-.173.603-.198.59-.229.577-.255.564-.283.547-.305.531-.332.517-.356.496-.378.48-.402.462-.421.441-.443.42-.463.4-.48.378-.5.353-.518.33-.533.307-.55.28-.564.255-.58.227-.592.2-.605.17-.616.143-.628.111-.639.082-.647.05-.655.015zm-84.767-25.406h84.767v25.406H404.05zm0 0v25.406l-.655-.016-.647-.05-.64-.081-.627-.111-.616-.143-.604-.171-.594-.2-.578-.227-.564-.255-.55-.28-.534-.306-.517-.33-.5-.354-.481-.377-.463-.4-.443-.42-.421-.442-.402-.46-.378-.481-.356-.497-.332-.516-.305-.531-.283-.548-.255-.564-.229-.577-.198-.59-.172-.603-.142-.614-.113-.624-.081-.636-.048-.646-.016-.653.016-.654.048-.645.08-.636.114-.625.142-.614.172-.603.198-.59.23-.577.254-.564.283-.547.305-.531.332-.517.356-.497.378-.48.402-.46.421-.442.443-.42.463-.4.48-.378.5-.353.518-.33.533-.307.551-.28.564-.255.578-.227.594-.2.604-.17.616-.143.628-.111.639-.082.647-.05.655-.015zM488.817 395.654v-25.406l.655.016.647.048.64.081.627.111.616.142.605.172.593.199.579.227.563.255.551.28.533.307.518.33.5.353.48.377.463.4.443.42.421.442.402.46.378.481.356.497.332.517.305.53.283.548.255.564.229.577.198.59.173.603.141.614.114.624.08.636.048.646.017.653-.017.654-.048.645-.08.636-.114.624-.141.615-.173.603-.198.59-.229.577-.255.563-.283.548-.305.53-.332.517-.356.497-.378.48-.402.461-.421.442-.443.42-.463.4-.48.378-.5.353-.518.33-.533.307-.55.28-.564.254-.58.228-.592.198-.605.172-.616.142-.628.111-.639.081-.647.048-.655.016zm-84.767-25.406h84.767v25.406H404.05zm0 0v25.406l-.655-.016-.647-.048-.64-.081-.627-.111-.616-.142-.604-.172-.594-.199-.578-.227-.564-.255-.55-.28-.534-.307-.517-.33-.5-.353-.481-.377-.463-.4-.443-.42-.421-.442-.402-.46-.378-.481-.356-.497-.332-.517-.305-.53-.283-.548-.255-.564-.229-.577-.198-.59-.172-.603-.142-.614-.113-.624-.081-.636-.048-.646-.016-.653.016-.654.048-.645.08-.636.114-.624.142-.615.172-.603.198-.59.23-.577.254-.563.283-.548.305-.53.332-.517.356-.497.378-.48.402-.461.421-.442.443-.42.463-.4.48-.378.5-.353.518-.33.533-.307.551-.28.564-.255.578-.227.594-.198.604-.173.616-.141.628-.111.639-.081.647-.048.655-.016zM488.817 438.011v-25.406l.655.017.647.048.64.08.627.112.616.141.605.173.593.198.579.227.563.255.551.28.533.307.518.33.5.353.48.378.463.4.443.42.421.441.402.461.378.48.356.498.332.516.305.531.283.547.255.564.229.577.198.59.173.603.141.615.114.624.08.636.048.645.017.654-.017.653-.048.646-.08.636-.114.624-.141.615-.173.603-.198.59-.229.576-.255.564-.283.547-.305.532-.332.516-.356.497-.378.48-.402.461-.421.441-.443.42-.463.4-.48.378-.5.353-.518.33-.533.308-.55.28-.564.254-.58.227-.592.199-.605.172-.616.142-.628.111-.639.08-.647.049-.655.016zm-84.767-25.406h84.767v25.406H404.05zm0 0v25.406l-.655-.016-.647-.048-.64-.08-.627-.112-.616-.142-.604-.172-.594-.198-.578-.228-.564-.255-.55-.279-.534-.307-.517-.33-.5-.354-.481-.377-.463-.4-.443-.42-.421-.442-.402-.46-.378-.481-.356-.497-.332-.516-.305-.531-.283-.548-.255-.563-.229-.577-.198-.59-.172-.603-.142-.615-.113-.624-.081-.636-.048-.645-.016-.654.016-.653.048-.646.08-.636.114-.624.142-.615.172-.603.198-.59.23-.576.254-.564.283-.547.305-.532.332-.516.356-.497.378-.48.402-.461.421-.441.443-.42.463-.4.48-.378.5-.353.518-.33.533-.308.551-.28.564-.254.578-.227.594-.199.604-.172.616-.142.628-.111.639-.08.647-.049.655-.016z",
      className: "fil1",
      clipRule: "evenodd",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      stroke: "none"
    }));
  }
  var Sum_default = SvgSum;

  // build/lib-react-tsx/mass/Upload.tsx
  var React63 = __toModule(require_react());
  function SvgUpload({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React63.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React63.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React63.createElement("path", {
      d: "M60.27 750H950M964.061 750l-51.622 39.223M912.44 710.964L964.06 750",
      fill: "none",
      strokeWidth: 45.698,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React63.createElement("path", {
      d: "M302.823 289.827c0-6.138-7.216-11.125-16.096-11.125-8.696 0-15.912 4.987-15.912 11.125zm0 0v454.97h-32.008v-454.97zm-32.008 454.97c0 6.138 7.216 11.126 15.912 11.126 8.88 0 16.096-4.988 16.096-11.125z",
      stroke: "none",
      strokeWidth: 0.831
    }), /* @__PURE__ */ React63.createElement("path", {
      d: "M692.459 139.827c0-17.815-7.031-32.29-15.91-32.29-8.879 0-15.91 14.475-15.91 32.29zm0 0v583.807h-31.82V139.827zm-31.82 583.807c0 17.811 7.031 32.289 15.91 32.289 8.879 0 15.91-14.478 15.91-32.29z",
      stroke: "none",
      strokeWidth: 1.416
    }), /* @__PURE__ */ React63.createElement("path", {
      transform: "rotate(.457) skewX(.026)",
      d: "M965.061 524.058a274 282 0 01-274 282 274 282 0 01-274-282 274 282 0 01274-282 274 282 0 01274 282z",
      fill: "#fff",
      strokeWidth: 0.794
    }), /* @__PURE__ */ React63.createElement("path", {
      d: "M687.088 306.072c-123.42 0-223.488 100.084-223.488 223.488 0 123.436 100.067 223.48 223.488 223.48 123.42 0 223.495-100.044 223.495-223.488-.008-123.396-100.075-223.48-223.495-223.48zM800 550a24.21 24.21 0 01-17.456 7.39c-6.102 0-12.197-2.282-16.887-6.861l-53.985-52.382v138.152c0 13.421-10.918 24.308-24.316 24.308-13.413 0-24.285-10.887-24.285-24.308V498.147l-53.985 52.382c-9.623 9.324-24.995 9.11-34.358-.521-9.332-9.624-9.11-25.003.521-34.35l95.204-92.339c9.419-9.15 24.38-9.15 33.83 0l95.172 92.338c9.664 9.356 9.892 24.72.545 34.343z",
      strokeWidth: 7.895
    }), /* @__PURE__ */ React63.createElement("path", {
      className: "fil1",
      d: "M656.432 877.294v33.598c0 5.308-1.202 9.29-3.604 11.947-2.432 2.654-5.593 3.982-9.545 3.982-3.855 0-6.953-1.328-9.323-3.982-2.37-2.656-3.572-6.639-3.572-11.947v-40.269c0-6.383-.22-11.313-.663-14.822-.412-3.508-1.582-6.417-3.508-8.66-1.898-2.245-4.93-3.383-9.071-3.383-8.281 0-13.718 2.844-16.342 8.535-2.622 5.657-3.95 13.811-3.95 24.43v34.169c0 5.246-1.2 9.229-3.573 11.915-2.37 2.686-5.499 4.014-9.387 4.014-3.824 0-6.953-1.328-9.387-4.014-2.432-2.686-3.666-6.669-3.666-11.915v-72.317c0-4.742 1.106-8.377 3.288-10.84 2.18-2.467 5.088-3.7 8.659-3.7 3.446 0 6.322 1.17 8.66 3.477 2.307 2.308 3.477 5.5 3.477 9.577v2.402c4.363-5.246 9.071-9.103 14.066-11.567 4.993-2.466 10.555-3.698 16.688-3.698 6.353 0 11.821 1.264 16.404 3.792 4.55 2.528 8.312 6.353 11.283 11.473 4.266-5.182 8.819-9.007 13.717-11.505 4.867-2.496 10.272-3.76 16.182-3.76 6.923 0 12.864 1.358 17.858 4.076 4.995 2.718 8.723 6.607 11.19 11.663 2.18 4.551 3.254 11.758 3.254 21.587v49.34c0 5.308-1.2 9.29-3.602 11.947-2.403 2.654-5.595 3.982-9.546 3.982-3.824 0-6.952-1.328-9.387-4.014-2.434-2.686-3.666-6.669-3.666-11.915V868.38c0-5.437-.222-9.767-.696-13.054-.475-3.256-1.707-6.006-3.729-8.25-2.054-2.213-5.12-3.319-9.261-3.319-3.35 0-6.51.98-9.483 2.972-3.002 1.959-5.309 4.615-6.985 7.963-1.864 4.237-2.78 11.79-2.78 22.6zm119.536-72.032l-25.917 106.736c-.886 3.539-1.644 6.289-2.276 8.343-.664 2.022-1.644 3.635-2.97 4.773-1.328 1.138-3.257 1.708-5.785 1.708-6.29 0-9.45-2.719-9.45-8.155 0-1.422.631-4.963 1.865-10.651l25.821-106.737c1.36-5.689 2.657-9.577 3.889-11.663 1.264-2.119 3.666-3.16 7.238-3.16 3.097 0 5.467.726 7.08 2.212 1.643 1.486 2.465 3.54 2.465 6.132 0 1.896-.664 5.405-1.96 10.461zm86.128 47.757l-46.303 51.772h49.527c4.015 0 7.05.948 9.071 2.812 2.055 1.897 3.067 4.33 3.067 7.271 0 2.844-1.012 5.15-3.003 6.953-2.022 1.802-5.056 2.686-9.135 2.686h-68.522c-4.804 0-8.408-1.042-10.779-3.16-2.37-2.086-3.57-4.963-3.57-8.597 0-2.15.822-4.33 2.496-6.543 1.675-2.18 5.12-6.195 10.367-12.073 5.563-6.165 10.62-11.758 15.14-16.752 4.55-4.995 8.755-9.671 12.642-14.034 3.888-4.362 7.112-8.027 9.672-11.061 2.56-3.035 4.615-5.627 6.163-7.777h-37.58c-5.183 0-9.103-.474-11.757-1.39-2.655-.917-3.983-3.35-3.983-7.301 0-2.908.98-5.215 3.002-6.953 1.99-1.738 4.867-2.592 8.565-2.592h58.063c5.373 0 9.481.79 12.357 2.37 2.877 1.548 4.299 4.393 4.299 8.471 0 1.358-.284 2.75-.822 4.203-.568 1.454-1.17 2.624-1.864 3.572-.665.917-1.612 2.054-2.783 3.382a238.487 238.487 0 01-4.33 4.741z",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 91.745,
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }));
  }
  var Upload_default = SvgUpload;

  // build/lib-react-tsx/misc/Chromatography.tsx
  var React64 = __toModule(require_react());
  function SvgChromatography({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React64.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React64.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React64.createElement("path", {
      d: "M49.941 850.47h883.662M947.568 850.47l-51.27 38.956M896.298 811.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React64.createElement("path", {
      d: "M48.778 730.872c10.983 2.796 44.153 4.518 55.796-25.61 14.843-38.405 7.204-118.945 9.394-210.846 2.852-119.688-3.897-252.065 23.641-273.178C173.235 229.121 150 639.35 180.1 694.107c27.336 49.632 62.365 34.56 106.272 24.677C400 693.205 400.605 521.04 400 477.784c-1.019-79.373 13.328-371.297 11.429-370.944 0 0 5.496 245.006 11.95 360.616C430.392 593.107 450 756.182 520.344 750c79.132-.038 90.787-82.775 90.222-167.836-.753-93.527-5.052-203.405 24.743-207.362 37.396-1.067 33.21 90.955 45.112 195.07 10.722 93.797-4.404 184.937 109.12 174.586 35.53-3.218 113.251 2.089 145.224.307",
      fill: "none",
      strokeWidth: 33.181,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Chromatography_default = SvgChromatography;

  // build/lib-react-tsx/misc/Cristal.tsx
  var React65 = __toModule(require_react());
  function SvgCristal({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React65.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React65.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React65.createElement("path", {
      d: "M984.712 452.914L830.281 808.322l-43.442-18.375L941.51 434.296zM808.56 799.25l21.72 9.311c-5.25 11.936-19.336 17.667-31.265 12.41-11.936-5.01-17.426-19.096-12.176-31.025zm7.4 22.202l-359.946 121.49-14.798-44.631 359.943-121.496zm-367.345 99.054l7.4 22.676c-12.412 4.061-26.018-2.625-30.075-15.035-4.058-12.417 2.864-25.782 15.276-30.077zm-4.296 23.391L69.098 879.931l8.354-46.782 375.22 64.208zM73.155 856.54l-4.296 23.39c-12.89-2.15-21.482-14.32-19.095-27.451 2.387-12.885 14.798-21.48 27.688-19.33zm-23.391 3.58l-31.03-214.105 47.022-7.161 30.791 214.105zm-7.4-217.686l-23.63 3.58c-1.91-12.888 7.16-25.062 20.05-27.21 13.128-1.91 25.063 6.922 26.972 20.05zm-23.391-4.774L94.16 275.568l46.306 9.308L65.517 646.97zm98.34-357.319l-23.153-4.773c2.626-12.89 15.276-21.244 27.927-18.618 12.889 2.625 21.243 15.037 18.618 27.926zM98.218 266.26L240.478 74.35l37.951 27.927-142.02 191.907zM259.573 88.434l-19.096-14.083c7.877-10.502 22.676-12.889 33.178-5.251 10.503 7.877 12.65 22.676 4.774 33.178zm4.773-23.392l430.84 85.69-9.79 46.545-430.836-85.69zM690.17 174.124l5.017-23.392c12.65 2.626 21 15.037 18.374 27.927-2.865 12.889-15.275 21.244-28.164 18.618zm16.712-16.947l273.056 269.481-33.65 33.894-272.825-269.72zm256.11 286.428l16.946-16.947c9.31 9.07 9.31 24.108 0 33.656-9.305 9.309-24.346 9.547-33.65.239z",
      stroke: "none"
    }), /* @__PURE__ */ React65.createElement("path", {
      d: "M282.248 94.64c-.954-12.89-12.412-22.437-25.54-21.244-13.128 1.193-22.676 12.651-21.72 25.779zm0 0l22.198 265.185-47.26 4.296-22.199-264.946zm-1.432 267.334l23.63-2.15c.956 12.89-8.593 24.586-21.72 25.78-13.128 1.192-24.585-8.355-25.54-21.483zm-9.07-21.722L684.68 165.77l17.9 43.442-412.932 174.483zm430.834-131.04c12.176-5.013 17.907-18.857 12.89-31.03-4.775-11.935-18.614-17.664-30.79-12.413zM55.254 841.264c-8.593 9.785-7.639 24.82 2.386 33.417 9.787 8.355 24.824 7.16 33.417-2.625zm0 0l110.513-128.177 35.804 30.793L91.057 872.056zm128.415-112.663l-17.902-15.514c8.593-10.025 23.63-11.219 33.417-2.626 9.786 8.354 10.98 23.394 2.387 33.42zm14.083-19.334l260.411 190-28.166 38.185-260.41-189.758zm232.245 228.185c10.503 7.882 25.301 5.49 33.178-5.25 7.877-10.5 5.49-25.3-5.012-32.935z",
      stroke: "none"
    }), /* @__PURE__ */ React65.createElement("path", {
      d: "M160.277 727.647c-3.342 12.653 4.297 25.537 16.948 28.643 12.412 3.34 25.539-4.295 28.88-16.945zm0 0l98.34-373.55 45.83 11.695-98.341 373.553zm144.17-361.855c3.34-12.65-4.059-25.54-16.71-28.881-12.65-3.104-25.778 4.535-29.12 17.185z",
      stroke: "none"
    }));
  }
  var Cristal_default = SvgCristal;

  // build/lib-react-tsx/misc/Cristal2.tsx
  var React66 = __toModule(require_react());
  function SvgCristal2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React66.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React66.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React66.createElement("path", {
      d: "M284.74 723.59c-6.913 2.359-10.453 9.775-8.093 16.522 2.192 6.912 9.779 10.45 16.523 8.261zm0 0l181.074-61.54 8.43 24.783-181.074 61.54zm189.504-36.757c6.913-2.36 10.453-9.776 8.093-16.522-2.36-6.912-9.779-10.455-16.523-8.261zM616.54 537.96c-1.348 6.916 3.204 13.828 10.286 15.177 7.081 1.515 13.823-3.038 15.342-10.12zm0 0l39.287-200.967 25.457 5.057-39.116 200.967zm64.744-195.91c1.35-6.912-3.203-13.825-10.285-15.174-7.081-1.517-13.828 3.036-15.172 10.117z",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M634.752 74.317c34.393-29.168 82.44-35.069 132.176-21.075l-7.077 25.29c-41.475-11.802-80.93-7.419-108.242 15.679zm132.176-21.075c48.222 13.656 98.128 46.027 138.758 93.909l-19.895 16.86c-37.257-43.836-82.61-73.34-125.94-85.48zm138.758 93.909l-19.895 16.86zm-9.945 8.43l9.27-9.273c5.058 5.058 5.058 13.488 0 18.546-5.057 5.058-13.488 5.058-18.545 0zm9.945-8.43c40.635 47.882 64.404 102.508 69.801 152.075l-25.967 2.866c-5.058-44.678-26.637-94.246-63.73-138.081zm69.801 152.075c5.733 51.591-7.926 97.956-42.32 127.123l-16.856-20.063c27.312-23.098 37.932-61.2 33.21-104.194zm-42.32 127.123c-34.223 29.168-82.274 35.07-132.18 20.907l7.081-25.29c41.475 11.802 80.926 7.587 108.243-15.68zm-132.18 20.906c-48.052-13.656-98.123-45.858-138.758-93.74l20.065-17.028c37.092 43.835 82.445 73.34 125.774 85.48zm-138.758-93.74c-40.46-47.882-64.234-102.676-69.797-152.244l26.133-2.866c4.887 44.679 26.637 94.246 63.73 138.082zm-69.797-152.244c-5.732-51.422 7.922-97.787 42.32-126.954l16.857 19.894c-27.142 23.098-37.932 61.201-33.044 104.194z",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M874.496 134c4.048 2.36 7.587 5.396 10.62 9.105 28.326 33.382 1.184 102.845-60.526 155.11-61.705 52.265-134.54 67.608-162.866 34.225-3.034-3.54-5.562-7.586-7.247-11.97 33.214 20.569 97.278 3.203 152.242-43.33 54.963-46.701 82.445-107.06 67.777-143.14z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M608.11 118.995c2.364-5.058 5.567-9.442 9.61-12.982 37.432-32.877 132.181 14.837 211.593 106.554 79.407 91.718 113.465 192.708 76.038 225.584a39.01 39.01 0 01-14.163 7.924c19.895-41.643-14.838-130.832-85.648-212.602-70.811-81.939-153.761-128.64-197.43-114.478z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M451.99 485.022c26.469-19.558 61.536-21.58 96.943-8.936l-8.765 24.615c-27.317-9.61-53.616-8.598-72.668 5.564zm96.943-8.936c33.55 11.802 67.608 37.26 94.245 73.173l-21.075 15.508c-23.434-31.525-52.94-53.781-81.935-64.066zm83.625 80.93l10.62-7.757c4.383 5.732 3.038 13.993-2.694 18.376-5.902 4.213-13.998 3.034-18.38-2.868zm8.43-10.12l-16.691 20.234zm-8.26 10.12l9.27-9.276c5.058 5.227 5.058 13.488 0 18.546-5.227 5.227-13.488 5.227-18.546 0zm10.45-7.757c26.642 35.908 40.97 76.038 42.49 111.611l-26.133 1.01c-1.35-30.685-13.993-65.414-37.432-97.113zm42.49 111.611c1.684 37.427-10.456 70.306-36.923 90.032l-15.682-21.075c19.05-14.163 27.651-38.946 26.472-67.947zm-44.68 79.407l7.757 10.625c-5.732 4.213-13.993 3.033-18.38-2.869-4.214-5.732-3.034-13.993 2.698-18.206zm7.757 10.625l-15.682-21.075zm0 0c-26.472 19.555-61.54 21.58-96.948 9.105l8.77-24.788c27.143 9.61 53.615 8.601 72.496-5.392zm-96.948 9.105c-33.549-11.974-67.774-37.431-94.244-73.344l21.075-15.508c23.433 31.525 52.939 53.784 81.94 64.064zm-94.244-73.344c-26.639-35.908-40.97-75.868-42.487-111.441l26.133-1.18c1.349 30.685 13.994 65.413 37.429 97.112zm-42.487-111.441c-1.686-37.597 10.453-70.474 36.923-90.032l15.511 20.906c-18.883 14.162-27.65 38.945-26.301 67.946zm44.679-79.578l-7.756-10.622c5.732-4.215 13.994-3.035 18.377 2.866 4.215 5.732 3.035 13.994-2.866 18.377z",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M606.93 524.98c3.204 2.695 6.238 5.733 8.766 9.271 23.774 32.035 6.242 85.48-39.111 119.033-45.523 33.719-101.666 34.898-125.439 2.699-2.529-3.374-4.72-7.082-6.238-10.96 26.976 22.084 76.039 17.871 116.5-12.14 40.635-30.01 58.841-75.703 45.522-107.902z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M433.612 518.234a36.307 36.307 0 018.261-9.271c30.516-23.267 96.775 12.645 148.03 80.252 51.251 67.607 68.113 141.287 37.597 164.55-3.203 2.53-6.911 4.383-11.129 5.568 18.211-30.01-.167-95.09-45.858-155.45-45.688-60.191-103.35-95.258-136.9-85.649z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M141.431 563.082c38.272-4.552 75.026 13.824 103.857 47.208l-19.895 17.196c-23.098-26.807-51.928-41.644-80.758-38.271zm103.857 47.208c27.481 32.034 47.713 78.062 53.952 130.497l-26.133 3.203c-5.564-47.207-23.436-88.347-47.714-116.504zm53.952 130.497c6.237 52.6-2.53 102.17-21.75 139.767l-23.266-12.139c16.86-33.044 24.615-77.218 18.883-124.425zm-21.75 139.767c-20.063 39.111-51.591 65.584-89.694 70.136l-3.204-26.132c29-3.373 53.446-24.618 69.632-56.143zm-89.694 70.136c-38.272 4.553-75.195-13.823-103.857-47.037l19.895-17.197c23.098 26.807 51.76 41.64 80.758 38.102zM83.939 903.653c-27.481-32.035-47.713-78.062-53.951-130.667l25.964-3.033c5.732 47.207 23.604 88.347 47.882 116.503zM29.988 772.986c-6.238-52.6 2.529-102 21.75-139.597l23.266 11.969c-17.029 33.214-24.616 77.218-19.052 124.595zm21.75-139.597c20.062-39.117 51.59-65.754 89.693-70.307l3.204 26.133c-29 3.543-53.446 24.618-69.631 56.143z",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M280.02 706.393c1.685 4.213 2.865 8.596 3.371 12.98 5.058 41.644-45.353 81.77-112.624 89.696-67.102 8.09-125.605-19.051-130.495-60.696-.504-4.383-.504-8.936.17-13.319 14.33 34.054 67.27 54.964 127.29 47.712 59.853-7.081 106.386-39.79 112.287-76.373z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React66.createElement("path", {
      d: "M102.485 584.157c4.384-2.359 9.105-4.048 13.994-4.722 45.521-6.067 93.066 70.306 106.216 170.962 13.152 100.651-12.981 187.14-58.503 193.382-4.89.675-9.779.334-14.668-.845 36.586-20.4 56.143-98.797 44.341-188.659-11.633-89.696-50.748-160.172-91.38-170.117z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Cristal2_default = SvgCristal2;

  // build/lib-react-tsx/misc/CyclicVoltammetry.tsx
  var React67 = __toModule(require_react());
  function SvgCyclicVoltammetry({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React67.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React67.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React67.createElement("path", {
      d: "M50 474.653c421.86 20.506 370.03-347.871 472.43-355.986 76.377 1.839-34.996 293.312 402.439 293.312 54.679 0 0 62.674-218.717 62.674-109.359 0-164.038 376.041-273.397 376.041C323.396 850.694 378.075 550 50 550",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 46.832
    }));
  }
  var CyclicVoltammetry_default = SvgCyclicVoltammetry;

  // build/lib-react-tsx/misc/Edit.tsx
  var React68 = __toModule(require_react());
  function SvgEdit({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React68.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React68.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React68.createElement("g", {
      transform: "translate(162 62) scale(3.32556)"
    }, /* @__PURE__ */ React68.createElement("path", {
      d: "M49.627 5.775h103.35c12.963 0 23.57 10.608 23.57 23.57v145.87c0 12.961-10.609 23.57-23.57 23.57H49.626c-12.962 0-23.57-10.606-23.57-23.57V29.344c0-12.964 10.605-23.57 23.57-23.57z",
      className: "fil0 str0",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 11.55,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React68.createElement("path", {
      d: "M151.591 33.47l.187.007.183.023.181.037.179.05.175.066.171.078.168.091.165.104.16.116.156.128.152.14.147.151.141.162.137.172.132.183.125.192.12.201.114.211.107.22.101.227.094.236.087.243.08.25.073.257.065.264.057.27.048.275.04.28.032.286.023.29.014.296.005.298-.005.3-.014.294-.023.29-.031.286-.04.281-.05.275-.056.27-.065.264-.073.257-.08.25-.087.243-.094.236-.1.227-.108.22-.114.21-.12.202-.125.192-.132.182-.137.173-.141.162-.147.15-.152.14-.156.128-.16.117-.165.104-.168.09-.171.08-.175.064-.179.051-.18.037-.184.023-.187.007v-11.61zM51.011 45.08V33.47h100.58v11.61H51.011zm0 0l-.186-.008-.184-.023-.18-.036-.179-.051-.175-.065-.172-.079-.168-.09-.164-.105-.16-.116-.157-.128-.151-.14-.147-.15-.142-.163-.136-.172-.132-.183-.126-.192-.12-.201-.113-.211-.108-.22-.1-.227-.094-.235-.088-.244-.08-.25-.072-.257-.065-.264-.057-.27-.048-.275-.04-.28-.033-.286-.023-.29-.014-.295-.004-.3.004-.298.014-.295.023-.29.032-.286.04-.28.05-.276.056-.27.065-.263.072-.258.08-.25.088-.243.093-.235.101-.228.108-.22.113-.21.12-.202.126-.192.132-.182.136-.172.142-.162.147-.151.151-.14.156-.128.16-.117.165-.104.168-.09.172-.079.175-.065.178-.05.181-.038.184-.022.186-.008v11.61zM151.591 59.72l.187.008.183.022.181.037.179.051.175.065.171.078.168.091.165.104.16.117.156.128.152.14.147.15.141.162.137.173.132.182.125.192.12.202.114.21.107.22.101.227.094.236.087.243.08.25.073.257.065.264.057.27.048.275.04.281.032.286.023.29.014.295.005.299-.005.298-.014.295-.023.29-.031.286-.04.281-.05.276-.056.27-.065.263-.073.257-.08.25-.087.243-.094.236-.1.227-.108.22-.114.21-.12.202-.125.192-.132.183-.137.172-.141.162-.147.15-.152.14-.156.129-.16.116-.165.104-.168.091-.171.078-.175.065-.179.051-.18.037-.184.023-.187.007v-11.61zM51.011 71.33V59.72h100.58v11.61H51.011zm0 0l-.186-.008-.184-.022-.18-.037-.179-.051-.175-.065-.172-.078-.168-.091-.164-.104-.16-.117-.157-.128-.151-.14-.147-.15-.142-.163-.136-.172-.132-.182-.126-.192-.12-.202-.113-.21-.108-.22-.1-.228-.094-.235-.088-.243-.08-.25-.072-.258-.065-.263-.057-.27-.048-.275-.04-.281-.033-.286-.023-.29-.014-.295-.004-.299.004-.299.014-.294.023-.291.032-.286.04-.28.05-.276.056-.27.065-.263.072-.257.08-.25.088-.244.093-.235.101-.228.108-.22.113-.21.12-.201.126-.193.132-.182.136-.172.142-.162.147-.151.151-.14.156-.128.16-.117.165-.103.168-.091.172-.079.175-.065.178-.05.181-.037.184-.023.186-.007V71.33zM151.591 85.97l.187.008.183.022.181.037.179.051.175.065.171.078.168.091.165.104.16.117.156.128.152.14.147.15.141.163.137.172.132.182.125.192.12.202.114.21.107.22.101.228.094.235.087.243.08.25.073.258.065.263.057.27.048.275.04.281.032.286.023.29.014.295.005.299-.005.299-.014.294-.023.29-.031.287-.04.28-.05.276-.056.27-.065.263-.073.257-.08.25-.087.244-.094.235-.1.228-.108.219-.114.21-.12.202-.125.192-.132.183-.137.172-.141.162-.147.151-.152.14-.156.128-.16.116-.165.104-.168.091-.171.079-.175.065-.179.05-.18.037-.184.023-.187.007V85.97zM51.011 97.58V85.97h100.58v11.61H51.011zm0 0l-.186-.008-.184-.022-.18-.037-.179-.051-.175-.065-.172-.078-.168-.091-.164-.104-.16-.117-.157-.128-.151-.14-.147-.15-.142-.162-.136-.173-.132-.182-.126-.192-.12-.202-.113-.21-.108-.22-.1-.227-.094-.236-.088-.243-.08-.25-.072-.257-.065-.264-.057-.27-.048-.275-.04-.281-.033-.286-.023-.29-.014-.295-.004-.299.004-.298.014-.295.023-.29.032-.286.04-.281.05-.276.056-.27.065-.263.072-.257.08-.25.088-.243.093-.236.101-.227.108-.22.113-.21.12-.202.126-.192.132-.183.136-.172.142-.162.147-.15.151-.14.156-.129.16-.116.165-.104.168-.091.172-.078.175-.065.178-.051.181-.037.184-.023.186-.007v11.61z",
      className: "fil1",
      clipRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React68.createElement("rect", {
      className: "fil2",
      transform: "rotate(-36.303)",
      width: 44.549,
      height: 90.161,
      rx: 6.733,
      ry: 13.627,
      x: -55.056,
      y: 79.964,
      clipRule: "evenodd",
      fill: "#fefefe",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React68.createElement("path", {
      className: "fil0 str0",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 11.55,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      d: "M89.143 176.707l.493-33.873M56.671 167.051l32.472 9.656"
    }), /* @__PURE__ */ React68.createElement("path", {
      d: "M36.644 79.409L11.988 97.523l-6.782-9.23 24.657-18.115h0l6.781 9.23zm11.017-6.543l-9.308 6.839h0l-.042-.054-.042-.049-.044-.046-.046-.044-.045-.038-.045-.036-.051-.035-.053-.033-.052-.029-.056-.028-.056-.024-.055-.022-.06-.02-.064-.017-.06-.014-.06-.01-.062-.008-.064-.005-.061-.003-.056.001-.063.004-.06.007-.05.008-.058.012-.055.014-.051.017-.051.019-.05.021-.048.024-.05.027-.049.03-.05.036-6.781-9.232.537-.374.552-.343.565-.314.577-.282.586-.252.593-.22.601-.19.604-.158.606-.128.617-.099.61-.067.61-.039.615-.009.61.02.606.05.603.077.6.107.593.135.583.16.58.192.573.22.56.246.55.274.54.302.524.33.51.356.498.385.48.411.46.437.44.462.42.488.395.512h0zm35.811 68.254L38.353 79.705l9.308-6.839 45.12 61.415-9.309 6.839zm6.553 10.95l-6.781-9.232h0l.048-.037.043-.037.041-.04.038-.039.034-.04.034-.044.032-.046.03-.046.025-.047.026-.05.024-.056.022-.058.018-.056.016-.057.014-.062.01-.06.009-.062.005-.064.002-.06-.001-.064-.004-.063-.007-.06-.01-.062-.011-.058-.016-.057-.019-.06-.02-.057-.024-.055-.026-.053-.031-.055-.035-.057-.04-.056 9.31-6.839.37.532.338.544.31.559.28.572.25.58.218.587.187.593.158.601.127.605.097.608.068.61.038.609.01.607-.021.611-.05.605-.076.603-.107.6-.134.592-.164.59-.192.582-.218.57-.248.563-.275.554-.307.546-.332.53-.36.515-.387.5-.415.484-.442.466-.467.445-.495.425-.516.4h0zm-31.438 8.883l24.656-18.115 6.782 9.231-24.656 18.115-6.782-9.231zm-11.017 6.543l9.308-6.839h0l.042.054.042.049.044.046.046.043.045.039.046.035.05.035.053.033.052.03.056.028.056.024.056.022.059.019.064.018.061.013.06.011.062.008.06.005.062.002h.061l.06-.005.057-.006.057-.009.054-.011.055-.014.052-.016.048-.018.052-.023.048-.023.05-.027.049-.031.05-.035 6.782 9.231-.538.374-.551.344-.566.313-.576.283-.584.25-.596.222-.6.19-.604.158-.61.128-.61.098-.614.068-.612.038-.61.01-.61-.02-.608-.05-.604-.077-.6-.107-.593-.135-.583-.16-.579-.192-.573-.22-.561-.246-.55-.274-.54-.302-.524-.33-.51-.356-.498-.385-.48-.412-.459-.436-.44-.462-.42-.488-.396-.512h0zM11.76 99.242l45.119 61.415-9.309 6.839L2.45 106.08l9.31-6.838zm-6.554-10.95l6.782 9.231h0l-.049.038-.044.038-.04.038-.037.04-.036.041-.033.043-.031.044-.028.046-.029.05-.026.053-.023.052-.021.056-.019.057-.016.057-.013.06-.011.063-.009.062-.004.064-.003.063.002.061.003.063.007.06.01.061.012.059.015.057.019.06.02.057.024.055.026.053.031.055.035.057.04.056-9.31 6.839-.37-.532-.338-.544-.31-.559-.28-.572-.25-.58-.217-.587-.188-.593-.158-.601-.127-.606-.097-.606-.068-.61-.038-.61-.009-.61.02-.608.05-.605.077-.603.106-.597.134-.595.164-.59.192-.581.22-.573.247-.565.276-.553.304-.541.333-.531.36-.517.388-.5.414-.483.443-.466.468-.446.493-.424.518-.4h0z",
      className: "fil1",
      clipRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    })));
  }
  var Edit_default = SvgEdit;

  // build/lib-react-tsx/misc/ElectronMicroscopy.tsx
  var React69 = __toModule(require_react());
  function SvgElectronMicroscopy({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React69.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React69.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React69.createElement("path", {
      d: "M957.549 841.063c-66.235 43.629-139.481 78.247-217.722 101.458l-13.81-47.425c73.644-22.013 142.281-54.234 204.518-95.455zM739.827 942.521c-75.643 22.612-155.892 34.82-238.94 34.82l.4-49.626c78.246 0 153.887-11.407 224.73-32.619zm-238.94 34.82c-83.048 0-163.495-12.208-239.138-34.82l14.808-47.425c71.041 21.212 146.485 32.62 224.73 32.62zm-239.138-34.82c-78.045-23.211-151.288-57.83-217.526-101.458l27.816-41.422c62.036 41.025 130.876 73.442 204.518 95.455zM58.03 820.451l-13.808 20.814c-11.407-7.605-14.408-23.016-6.804-34.618 7.604-11.407 23.214-14.61 34.62-7.006zm-13.408-20.81c66.238-43.628 139.481-78.247 217.726-101.458l13.808 47.425c-73.642 22.013-142.282 54.43-204.518 95.455zM262.35 698.183c75.644-22.612 155.89-34.82 238.938-34.82l-.4 49.626c-78.246 0-153.89 11.407-224.73 32.62zm238.938-34.82c83.048 0 163.496 12.208 239.139 34.82l-14.812 47.425c-71.04-21.212-146.482-32.619-224.727-32.619zm239.139 34.82c78.045 23.211 151.285 57.83 217.526 101.458l-27.815 41.422c-62.04-41.024-130.88-73.442-204.523-95.455zM943.94 820.45l14.01-20.809c11.408 7.403 14.41 22.814 6.805 34.417-7.605 11.407-23.212 14.61-34.619 7.207zM511.493 62.814C511.493 49.006 500.487 38 486.68 38c-13.608.2-24.815 11.407-24.815 25.014zm0 0v500.09l-49.629.399V63.012zm-49.629 500.49c0 13.608 11.007 24.614 24.815 24.614 13.607-.2 24.814-11.407 24.814-25.014z",
      stroke: "none"
    }), /* @__PURE__ */ React69.createElement("path", {
      d: "M467.068 589.52c-8.405 11.007-6.404 26.413 4.602 34.616 10.806 8.21 26.415 6.009 34.82-5zm0 0l72.041-95.456 39.423 29.817-72.042 95.255zm111.464-65.639c8.405-11.007 6.403-26.416-4.603-34.82-10.806-8.205-26.415-5.803-34.82 5.003z",
      stroke: "none"
    }), /* @__PURE__ */ React69.createElement("path", {
      d: "M434.249 493.864c-8.205-10.807-23.814-12.808-34.62-4.403-11.007 8.205-13.208 23.814-4.803 34.82zm0 0l72.241 95.255-39.623 30.42-72.041-95.258zm32.618 125.675c8.405 10.802 23.814 12.807 34.82 4.401 11.007-8.405 13.008-23.816 4.803-34.821zM736.024 202.896h-104.66c.202 12.207 2.598 23.013 7.402 32.218 4.805 9.405 11.205 16.21 19.012 21.012 7.806 4.603 16.609 7.004 26.212 7.004 6.407 0 12.208-.801 17.41-2.201 5.404-1.601 10.41-3.802 15.411-7.004 5.006-3.202 9.604-6.604 13.81-10.406 4.2-3.602 9.603-8.605 16.205-14.809 2.806-2.4 6.608-3.602 11.81-3.602 5.404 0 10.008 1.601 13.407 4.603 3.203 3.002 5.006 7.204 5.006 12.607 0 4.803-2.005 10.606-5.606 17.01-3.802 6.404-9.603 12.608-17.208 18.61-7.605 6.004-17.214 10.807-28.817 14.81-11.608 4.002-24.818 5.803-39.826 5.803-34.417 0-61.234-9.806-80.246-29.217-19.01-19.611-28.615-46.227-28.615-79.846 0-15.81 2.401-30.618 7.004-44.026 4.803-13.608 11.604-25.014 20.615-34.82 9.004-9.605 20.21-17.01 33.414-22.213 13.21-5.203 27.82-7.804 43.83-7.804 21.01 0 38.818 4.402 53.831 13.207 15.008 9.005 26.012 20.212 33.616 34.22 7.403 14.008 11.205 28.217 11.205 42.825 0 13.407-3.998 22.013-11.602 26.215-7.807 3.802-18.614 5.804-32.62 5.804zm-104.66-30.218h97.056c-1.205-18.411-6.205-32.019-14.812-41.024-8.601-9.205-19.812-13.808-33.817-13.808-13.406 0-24.214 4.803-32.821 13.808-8.601 9.205-13.81 23.013-15.607 41.024z",
      stroke: "none"
    }), /* @__PURE__ */ React69.createElement("path", {
      d: "M789.856 66.216h100.058",
      fill: "none",
      strokeWidth: 55.632,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var ElectronMicroscopy_default = SvgElectronMicroscopy;

  // build/lib-react-tsx/misc/Octochemdb.tsx
  var React70 = __toModule(require_react());
  function SvgOctochemdb({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React70.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React70.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React70.createElement("path", {
      fill: "#000",
      d: "M288.36 27.616C59.4 26.468 8.418 397.516 329.488 451.864c-59 1.068-110.764 16.22-183.5 51.94C-50.54 600.302-10.81 913.608 189.609 879.676c68.96-11.676 102.42-100.65 1.75-130.75 33.03 59.22-55.936 94.2-83.812 3.876-22.524-72.98 42.29-149.828 104.936-170 61-19.64 110.488-21.72 164.94-11.688-73.17 68.494-113.094 160.93-84.752 247.248 89.044 271.19 384.292 165.04 325.688-13.44-20.692-63.012-82.816-93.01-136-20.31 70.328-17.708 100.9 77.5 36.376 98.684-52.71 17.31-120.424-27.054-132.064-82.686-15.64-74.78 39.54-154.39 109.56-190.5 44.352 70.74 77.624 97.36 166.44 144.372 171.686 90.872 425.914-73.08 287.812-221.06-45.252-48.488-109.148-60.04-135 26.248 60.376-40.18 121.496 53.6 67.75 95.126-43.9 33.92-123.006 38.27-172.874 11-61.594-33.684-107.58-75.596-140.376-133.064 114.14 27.38 239.168-2.13 286-90.684 91.44-172.9-14.092-304.934-118.25-306.75-40.756-.712-81.308 18.474-109.75 63-35.7 55.892-19.63 123.066 70.314 118.248-58.22-43.256-3.8-127.246 53.434-90.686 46.756 29.864 44.988 103.76 19.5 154.56-30.33 60.46-121.146 101.476-190.124 49.314-6.016-11.42-11.126-23.366-15.56-35.686 17.98-12.98 29.748-34.056 29.748-57.75 0-35.544-26.504-65.28-60.69-70.436-19.526-94.268-46.68-185.296-169.688-225.188-27.28-8.848-52.874-12.944-76.56-13.06zm235.689 274.81c18.926 0 33.874 14.948 33.874 33.876 0 18.926-14.946 33.874-33.872 33.874-18.926 0-33.812-14.948-33.812-33.876 0-18.926 14.886-33.874 33.812-33.874zm-130.812 21c18.926 0 33.874 14.948 33.874 33.876 0 18.926-14.948 33.874-33.876 33.874-18.926 0-33.874-14.948-33.874-33.876 0-18.926 14.948-33.874 33.876-33.874z",
      strokeWidth: 2
    }));
  }
  var Octochemdb_default = SvgOctochemdb;

  // build/lib-react-tsx/misc/Peptide.tsx
  var React71 = __toModule(require_react());
  function SvgPeptide({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React71.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React71.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React71.createElement("path", {
      d: "M122.51 335.96c42.683 0 77.33-34.825 77.33-77.329 0-42.504-34.647-77.15-77.33-77.15-42.504 0-77.15 34.646-77.15 77.15 0 42.504 34.646 77.33 77.15 77.33zM500.406 757.431l-169.124-71.434M411.468 201.84c42.505 0 77.15-34.825 77.15-77.33 0-42.504-34.645-77.15-77.15-77.15-42.504 0-77.15 34.646-77.15 77.15 0 42.505 34.646 77.33 77.15 77.33zM524.518 492.226c42.503 0 77.146-34.646 77.146-77.15 0-42.505-34.643-77.33-77.146-77.33-42.507 0-77.332 34.825-77.332 77.33 0 42.504 34.825 77.15 77.332 77.15zM267.168 705.642c42.504 0 77.329-34.827 77.329-77.33 0-42.504-34.825-77.152-77.329-77.152-42.505 0-77.15 34.648-77.15 77.151 0 42.504 34.645 77.331 77.15 77.331zM580.235 849.05c42.503 0 77.33-34.648 77.33-77.151 0-42.504-34.827-77.151-77.33-77.151-42.504 0-77.15 34.647-77.15 77.15 0 42.504 34.646 77.152 77.15 77.152zM507.37 337.746l-60.899-145.014M464.866 469.545l-123.584 111.26M341.64 157.728l-144.122 64.47M873.302 685.637c42.683 0 77.326-34.647 77.326-77.15 0-42.504-34.643-77.327-77.326-77.327-42.504 0-77.151 34.823-77.151 77.326 0 42.504 34.647 77.151 77.15 77.151zM789.719 368.642c42.508 0 77.151-34.646 77.151-77.15 0-42.683-34.643-77.33-77.151-77.33-42.684 0-77.326 34.647-77.326 77.33 0 42.504 34.642 77.15 77.326 77.15zM799.184 649.74L658.28 727.427M853.657 530.8l-43.933-165.015",
      fill: "none",
      strokeWidth: 50.719,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Peptide_default = SvgPeptide;

  // build/lib-react-tsx/misc/Percent.tsx
  var React72 = __toModule(require_react());
  function SvgPercent({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React72.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React72.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React72.createElement("g", {
      fill: "none",
      strokeWidth: 100.803,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React72.createElement("path", {
      d: "M127.434 119.309c-57.771 63.662-57.973 167.047-.439 230.936 57.526 63.88 150.991 64.055 208.761.393 57.765-63.669 57.961-167.055.434-230.934-57.534-63.875-150.986-64.056-208.756-.395M316.6 924.229L672.977 71.633M653.829 645.28c-57.765 63.654-57.968 167.04-.439 230.925 57.517 63.881 150.985 64.061 208.754.394 57.762-63.664 57.96-167.044.43-230.925-57.534-63.887-150.984-64.055-208.745-.394"
    })));
  }
  var Percent_default = SvgPercent;

  // build/lib-react-tsx/misc/Polymer.tsx
  var React73 = __toModule(require_react());
  function SvgPolymer({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React73.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React73.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React73.createElement("path", {
      d: "M100 200c150-50 300-100 421.429-68.571C704.945 178.927 894.769 164.709 950 150M50 450c182.696-142.115 350-88.4 450-38.4C589.443 456.32 850 450 950 550M50 800c150 100 250 100 350 50s150-50 227.143-92.857C724.877 702.846 900 750 950 700M344.286 138.571c150 50 55.326 255.413 144.285 267.143M255.714 372.857C300 450 340.797 708.987 150 850M817.143 172.857C750 250 650 400 700 450M546.429 430.714C600 500 550 700 567.857 772.143",
      fill: "none",
      strokeWidth: 50,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Polymer_default = SvgPolymer;

  // build/lib-react-tsx/misc/Pubchem.tsx
  var React74 = __toModule(require_react());
  function SvgPubchem({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React74.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React74.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React74.createElement("path", {
      d: "M510.482 36.393a27.527 27.527 0 00-13.181 3.439l-372.125 205.88a27.527 27.527 0 00-14.2 24.015l-1.101 436.533a27.527 27.527 0 0013.002 23.45l370.475 230.102a27.527 27.527 0 0027.873.688l372.127-206.432a27.527 27.527 0 0014.171-23.998l1.102-435.982a27.527 27.527 0 00-13.002-23.451L525.148 40.535a27.527 27.527 0 00-14.666-4.142zm-.66 59.423L853.54 309.3l-1.021 404.47L508.66 904.52l-343.7-213.472 1.022-405z"
    }), /* @__PURE__ */ React74.createElement("path", {
      d: "M632.283 416.225h106.793c-3.302-29.726-11.01-56.15-23.67-79.27-12.661-23.12-28.625-42.387-48.443-58.35-19.267-15.414-41.286-27.525-66.058-35.232-24.771-8.257-50.644-12.66-78.719-12.66-38.533 0-73.214 7.156-104.04 20.918-30.277 14.312-56.7 33.029-77.619 57.8-20.918 24.222-37.433 53.397-48.442 85.876-11.56 33.029-17.065 68.81-17.065 107.344 0 37.433 5.505 72.113 17.065 104.591 11.01 32.479 27.524 61.104 48.442 84.775 20.918 24.22 47.342 42.937 77.618 56.7 30.827 13.761 65.508 20.367 104.041 20.367 31.378 0 59.452-4.404 85.325-14.312 25.873-9.358 48.443-23.671 67.71-41.837 19.266-18.166 34.68-40.185 46.24-66.058 12.11-25.873 19.267-55.048 22.02-87.527H636.686c-4.404 34.68-15.964 62.755-35.231 83.674-18.717 21.469-45.14 31.928-79.27 31.928-24.771 0-45.69-4.955-63.305-14.863-17.616-9.909-31.378-23.12-42.387-39.085-10.46-16.514-18.717-35.23-23.671-55.598-4.954-20.368-7.156-41.286-7.156-62.755 0-22.57 2.202-44.59 7.156-65.508 4.954-21.469 13.212-40.185 23.67-56.7 11.01-16.514 24.772-29.725 42.388-39.634 17.615-9.909 38.534-14.863 63.305-14.863 13.762 0 26.974 2.202 39.085 7.156 12.66 4.404 23.67 10.46 33.579 18.716 9.909 8.258 18.166 17.616 24.772 28.626 6.606 11.01 10.459 22.57 12.66 35.78z"
    }));
  }
  var Pubchem_default = SvgPubchem;

  // build/lib-react-tsx/misc/SearchRequest.tsx
  var React75 = __toModule(require_react());
  function SvgSearchRequest({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React75.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React75.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React75.createElement("path", {
      d: "M423.177 667.09c-166.181 0-301.72-135.541-301.72-301.721 0-166.183 135.538-301.726 301.72-301.726 166.18 0 301.725 135.544 301.725 301.726 0 166.18-135.544 301.72-301.725 301.72",
      className: "fil0 str0",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.85,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React75.createElement("path", {
      className: "fil0 str1",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.8680981,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      d: "M875.305 876.912L652.382 578.46l-78.036 58.287 222.921 298.446"
    }), /* @__PURE__ */ React75.createElement("path", {
      d: "M797.267 935.193c11.855 15.876 34.551 19.165 50.425 7.306M847.694 942.498L868 927.33M868 927.33c15.874-11.858 19.162-34.545 7.304-50.418",
      className: "fil0 str1",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.849,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React75.createElement("path", {
      d: "M423.177 612.992c-136.382 0-247.623-111.241-247.623-247.623 0-136.389 111.241-247.623 247.623-247.623 136.387 0 247.623 111.234 247.623 247.623 0 136.382-111.236 247.623-247.623 247.623",
      className: "fil0 str2",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 24.319,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React75.createElement("path", {
      d: "M584.777 262.134v151.73L568 414V262.27zm0 151.73c0 11.906-5.141 22.728-13.53 30.577l-11.432-12.178C564.888 427.53 568 421.034 568 414zm-13.53 30.577c-8.252 7.643-19.549 12.446-31.929 12.446l.136-16.776c7.981 0 15.22-3.043 20.36-7.848zm-31.929 12.446H383.462l.135-16.776h155.857zm-155.788-8.388l-.068 8.388a8.343 8.343 0 01-8.388-8.388 8.502 8.502 0 018.523-8.388zm6.358 5.48l-73.26 84.963-12.718-10.892 73.26-85.031zm-79.62 79.551l6.36 5.412c-3.045 3.585-8.389 3.99-11.906.946-3.45-2.975-3.856-8.32-.812-11.838zm-8.184-1.69l18.061-84.965 16.37 3.248-18.061 85.031zm26.246-83.341l-8.253-1.69c.948-4.534 5.412-7.51 10.012-6.563 4.532.946 7.441 5.344 6.426 9.943zm-.067 8.388h-17.927l.136-16.776h17.926zm-17.927 0c-12.379 0-23.676-4.735-31.86-12.378l11.567-12.312c5.208 4.87 12.446 7.914 20.429 7.914zm-31.86-12.378c-8.321-7.78-13.53-18.604-13.53-30.509l16.844-.136c0 7.036 3.111 13.597 8.253 18.333zM264.945 414V262.27l16.844-.136v151.73zm0-151.73c0-11.974 5.209-22.797 13.597-30.577l11.432 12.177c-5.074 4.735-8.185 11.161-8.185 18.264zm13.597-30.577c8.185-7.711 19.482-12.514 31.929-12.514l-.136 16.844c-7.982 0-15.22 2.976-20.361 7.847zm31.929-12.514h228.982l-.136 16.844H310.336zm228.982 0c12.378 0 23.675 4.803 31.86 12.447l-11.567 12.311c-5.208-4.938-12.446-7.914-20.429-7.914zm31.86 12.447c8.322 7.779 13.463 18.602 13.463 30.508L568 262.27c0-7.103-3.112-13.597-8.253-18.332z",
      stroke: "none",
      strokeWidth: 0.338
    }));
  }
  var SearchRequest_default = SvgSearchRequest;

  // build/lib-react-tsx/misc/Weight.tsx
  var React76 = __toModule(require_react());
  function SvgWeight({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React76.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React76.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React76.createElement("path", {
      d: "M407.416 576.172H125.817l.484-47.956h281.438zm-281.438-23.978l-.161 23.978c-13.356 0-23.976-10.785-23.815-23.978.16-13.356 10.942-24.136 24.298-24.136zm-22.045-9.335l140.8-330.193 44.09 18.505-140.8 330.195zm162.845-321.02l-22.045-9.173c5.149-12.23 19.31-18.022 31.539-12.873 12.229 4.988 17.861 19.149 12.55 31.378zm22.045-9.495l140.8 330.196-44.091 19.15-140.8-330.197zm118.754 339.85l22.045-9.654c5.31 12.23-.482 26.39-12.712 31.7-12.23 5.147-26.229-.324-31.378-12.55z",
      stroke: "none"
    }), /* @__PURE__ */ React76.createElement("path", {
      d: "M431.392 553.162v1.283c0 93.01-73.698 168.317-164.614 168.317-90.916 0-164.615-75.306-164.615-168.317v-1.283z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React76.createElement("path", {
      d: "M875.835 576.172h-281.6l.324-47.956h281.6zm-281.437-23.978l-.163 23.978c-13.356 0-23.973-10.785-23.816-23.978.163-13.356 10.947-24.136 24.302-24.136zm-22.046-9.335l140.8-330.193 44.091 18.505-140.8 330.195zm162.845-321.02l-22.046-9.173c5.152-12.23 19.313-18.022 31.538-12.873 12.23 4.988 17.863 19.149 12.554 31.378zm22.046-9.495l140.8 330.196-44.092 19.15-140.8-330.197zm118.754 339.85l22.046-9.654c5.309 12.23-.482 26.39-12.711 31.7-12.23 5.147-26.23-.324-31.38-12.55z",
      stroke: "none"
    }), /* @__PURE__ */ React76.createElement("path", {
      d: "M899.813 553.162v1.283c0 93.01-73.698 168.317-164.616 168.317-90.917 0-164.615-75.306-164.615-168.317v-1.283z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React76.createElement("path", {
      d: "M269.03 194.322c-13.195.161-23.976 10.781-24.137 24.137a23.762 23.762 0 0023.815 23.815zm0 0h464.236l-.32 47.952H268.71zm463.916 47.952c13.193 0 24.135-10.78 24.135-23.976.163-13.195-10.46-23.976-23.815-23.976z",
      stroke: "none"
    }), /* @__PURE__ */ React76.createElement("path", {
      d: "M524.883 89.085c.161-13.195-10.62-23.816-23.815-23.655-13.195 0-23.976 10.781-23.976 24.137zm0 0v126.478l-47.791.322V89.568zm-47.791 126.8c0 13.355 10.62 23.976 23.815 23.815 13.356-.161 23.976-10.942 23.976-24.137z",
      stroke: "none"
    }));
  }
  var Weight_default = SvgWeight;

  // build/lib-react-tsx/misc/Xps.tsx
  var React77 = __toModule(require_react());
  function SvgXps({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React77.createElement("svg", {
      id: "svg4152",
      xmlns: "http://www.w3.org/2000/svg",
      x: 0,
      y: 0,
      viewBox: "0 0 1000 1000",
      xmlSpace: "preserve",
      enableBackground: "new 0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React77.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React77.createElement("style", null, ".st0{fill:none;stroke:#000;stroke-width:38.8466;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:9.4994}"), /* @__PURE__ */ React77.createElement("filter", {
      height: 1.248,
      id: "filter907",
      width: 1.079,
      x: -0.04,
      y: -0.124,
      colorInterpolationFilters: "sRGB"
    }, /* @__PURE__ */ React77.createElement("feGaussianBlur", {
      id: "feGaussianBlur909",
      stdDeviation: 1.527
    })), /* @__PURE__ */ React77.createElement("g", {
      id: "g6050",
      transform: "translate(1485.641 -1771.974) scale(2.37485)"
    }, /* @__PURE__ */ React77.createElement("path", {
      id: "path5963",
      d: "M-578.8 1087.7c0 5.5 3.7 9.9 8.2 9.9 4.5 0 8.2-4.4 8.2-9.9h-16.4zm0 0V814.4h16.4v273.3h-16.4zm16.4-273.3c0-5.4-3.7-9.8-8.2-9.8-4.6 0-8.2 4.4-8.2 9.8h16.4z"
    }), /* @__PURE__ */ React77.createElement("path", {
      id: "path5965",
      className: "st0",
      d: "M-570.6 801.5l21 27.7"
    }), /* @__PURE__ */ React77.createElement("path", {
      id: "path5967",
      className: "st0",
      d: "M-591.6 829.2l21-27.7"
    }), /* @__PURE__ */ React77.createElement("path", {
      id: "path5969",
      d: "M-562.4 1087.7c-6.2 0-11.2 3.7-11.2 8.2 0 4.6 5 8.2 11.2 8.2v-16.4zm0 0H-253v16.4h-309.5v-16.4zm309.4 16.4c6.1 0 11.1-3.7 11.1-8.2 0-4.5-5-8.2-11.1-8.2v16.4z"
    }), /* @__PURE__ */ React77.createElement("path", {
      id: "path5971",
      className: "st0",
      d: "M-238.8 1095.8l-27.7 21.1"
    }), /* @__PURE__ */ React77.createElement("path", {
      id: "path5973",
      className: "st0",
      d: "M-266.5 1074.8l27.7 21"
    }), /* @__PURE__ */ React77.createElement("path", {
      id: "path857",
      d: "M-551.6 1040c7.1 1.1 22 2.3 38.5-4.5 3.1-1.3 12.3-5.2 20-12.6 17-16.4 12-36.4 19.6-65.6 6.1-23.4 22.5-61 39.5-61 21.7 0 39.9 61.1 41.8 67.6 11.2 37.6 5.1 55.6 21 67.1 8.7 6.3 21.6 6.6 47.5 7.2 18.6.5 33.9-.8 44.2-1.9",
      fill: "none",
      stroke: "#000",
      strokeWidth: 30,
      strokeMiterlimit: 9.499
    })));
  }
  var Xps_default = SvgXps;

  // build/lib-react-tsx/misc/Zenodo.tsx
  var React78 = __toModule(require_react());
  function SvgZenodo({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React78.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React78.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React78.createElement("path", {
      d: "M248.466 72.488H743.88L248.466 745.276H750",
      fill: "none",
      strokeWidth: 101.08482749999999,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      clipRule: "evenodd",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }));
  }
  var Zenodo_default = SvgZenodo;

  // build/lib-react-tsx/nmr/13C.tsx
  var React79 = __toModule(require_react());
  function Svg13C({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React79.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React79.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React79.createElement("path", {
      d: "M959.838 645.911c0 8.223-.169 15.101-.665 20.795a127.538 127.538 0 01-2.185 14.756c-.999 4.185-2.348 7.712-4.019 10.559-1.681 3.015-4.193 6.366-7.878 10.06-3.524 3.853-10.569 8.546-20.795 14.579-10.396 5.873-22.968 11.57-37.889 16.935-14.92 5.363-31.848 9.892-51.132 13.418-19.114 3.684-39.733 5.531-62.034 5.531-43.586 0-82.819-6.875-117.862-20.284-35.035-13.419-64.871-33.361-89.349-60.02-24.647-26.828-43.418-60.021-56.505-100.09-13.075-39.902-19.78-86.337-19.78-139.481 0-53.99 7.208-101.937 21.629-143.854 14.42-41.906 34.535-77.114 60.521-105.62 25.816-28.498 56.835-50.127 93.049-64.874 36.208-14.756 75.94-22.13 119.534-22.13 17.772 0 34.71 1.502 51.132 4.527 16.433 2.848 31.521 6.699 45.434 11.563 13.918 4.695 26.484 10.225 37.559 16.433 11.068 6.198 18.945 11.562 23.298 15.925 4.531 4.361 7.551 8.045 9.055 11.062 1.682 3.026 3.018 6.708 4.028 11.238 1.004 4.694 1.671 10.06 2.17 16.257.514 6.208.675 13.92.675 23.143 0 9.716-.329 18.104-.844 24.981-.666 6.865-1.833 12.395-3.514 16.759-1.679 4.194-3.519 7.377-5.868 9.225-2.348 2.013-4.861 3.014-7.886 3.014-4.86 0-11.059-2.848-18.606-8.546-7.544-5.698-17.269-12.24-29.342-19.283-11.895-7.043-26.149-13.419-42.581-19.115-16.593-5.7-36.376-8.548-59.344-8.548-25.15 0-47.616 5.196-67.4 15.423-19.951 10.39-36.72 25.147-50.629 44.263-13.92 19.107-24.478 42.242-31.689 69.402-7.208 27.328-10.894 57.838-10.894 91.877 0 37.387 3.86 69.745 11.561 97.063 7.72 27.329 18.781 49.795 33.037 67.564 14.242 17.604 31.344 30.855 51.465 39.569 20.114 8.556 42.918 12.907 68.063 12.907 22.966 0 42.749-2.682 59.354-8.046 16.768-5.363 31.177-11.405 43.083-17.937 11.905-6.544 21.798-12.407 29.508-17.771 7.714-5.197 13.576-7.711 17.939-7.711 3.186 0 5.863.502 7.71 1.846 2.012 1.337 3.683 4.019 5.032 7.879 1.336 4.016 2.179 9.381 2.846 16.424.674 7.046 1.008 16.428 1.008 28.333zM205.28 297.133c0 4.263-.234 7.83-.695 10.767-.463 2.946-1.082 5.343-1.935 7.042-.855 1.711-1.777 3.026-2.871 3.724-1 .778-2.236 1.159-3.634 1.159H34.219a5.5 5.5 0 01-3.41-1.159c-1.079-.698-2.015-2.013-2.867-3.724-.849-1.698-1.467-4.096-1.938-7.042-.457-2.938-.696-6.504-.696-10.767 0-4.411.239-8.057.618-10.992.392-2.947.934-5.343 1.791-7.122.853-1.858 1.777-3.184 2.867-4.026a5.852 5.852 0 013.634-1.241h54.667V82.709L41.654 108.81c-3.487 1.699-6.276 2.703-8.517 3.095-2.173.384-3.88-.077-5.195-1.396-1.306-1.237-2.164-3.486-2.634-6.658-.38-3.171-.619-7.674-.619-13.401 0-3.632.078-6.581.239-8.978.076-2.326.459-4.341 1.077-5.962.632-1.708 1.475-3.026 2.479-4.106 1.091-1.08 2.561-2.171 4.339-3.409L95.94 27.188c.694-.628 1.621-1.091 2.789-1.474 1.159-.392 2.626-.695 4.413-.93 1.855-.238 4.183-.384 7.197-.463 2.95-.078 6.739-.078 11.466-.078 5.728 0 10.372.078 13.937.305 3.557.238 6.19.63 8.054 1.168 1.779.463 3.017 1.24 3.638 2.095.537.923.852 2.082.852 3.397v242.546h47.86c1.397 0 2.634.465 3.794 1.241 1.081.844 2.093 2.169 2.945 4.026.844 1.78 1.384 4.174 1.778 7.122.384 2.935.617 6.581.617 10.99h0zm236.813-63.262c0 14.638-2.791 27.643-8.37 39.028-5.567 11.309-13.401 20.837-23.389 28.576-9.994 7.663-21.906 13.548-35.856 17.575-13.93 4.028-29.114 5.963-45.608 5.963-9.994 0-19.355-.699-28.106-2.094-8.754-1.462-16.494-3.25-23.233-5.343-6.739-2.161-12.32-4.331-16.728-6.582-4.342-2.316-7.202-4.018-8.599-5.265-1.394-1.16-2.404-2.554-3.016-4.026-.696-1.542-1.315-3.331-1.863-5.335-.541-2.094-.926-4.648-1.16-7.751-.225-3.096-.315-6.816-.315-11.228 0-7.281.632-12.31 1.79-15.099 1.238-2.79 3.094-4.185 5.497-4.185 1.466 0 4.097 1.011 7.82 3.103 3.713 2.006 8.44 4.175 14.167 6.582 5.736 2.318 12.477 4.49 20.214 6.582 7.665 2.016 16.494 3.018 26.327 3.018 8.292 0 15.64-1.002 21.996-2.937 6.346-1.946 11.77-4.725 16.177-8.292 4.498-3.567 7.829-7.818 10-12.927 2.163-5.039 3.332-10.687 3.332-16.885 0-6.819-1.394-12.928-4.036-18.351-2.626-5.5-6.583-10.146-11.771-14.018-5.186-3.803-11.769-6.816-19.746-8.908-7.895-2.171-17.27-3.173-28.027-3.173h-25.4c-1.939 0-3.646-.305-4.961-.855-1.399-.463-2.557-1.62-3.401-3.251-.935-1.701-1.553-3.95-1.947-6.887-.38-3.025-.536-6.817-.536-11.462 0-4.42.156-7.977.536-10.847.393-2.779 1.011-4.949 1.791-6.423.843-1.553 1.933-2.555 3.17-3.173 1.319-.618 2.872-.932 4.65-.932h25.625c8.833 0 16.571-1.004 23.393-3.017 6.816-2.092 12.544-4.959 17.111-8.753 4.646-3.793 8.133-8.36 10.607-13.702 2.396-5.424 3.569-11.308 3.569-17.821 0-5.03-.779-9.754-2.487-14.164-1.622-4.49-4.097-8.369-7.359-11.621-3.252-3.249-7.428-5.805-12.614-7.663-5.118-1.934-11.16-2.868-18.124-2.868-7.898 0-15.257 1.161-22.23 3.487-6.965 2.397-13.163 4.96-18.736 7.74-5.498 2.79-10.225 5.425-14.014 7.83-3.874 2.398-6.739 3.635-8.519 3.635-1.237 0-2.328-.306-3.184-.776-.921-.542-1.7-1.542-2.317-3.095-.542-1.472-1.012-3.71-1.316-6.583-.314-2.866-.463-6.581-.463-11.079 0-3.792.07-6.965.225-9.441.16-2.483.47-4.568.935-6.276.382-1.619 1.003-3.095 1.7-4.255.619-1.246 1.785-2.562 3.252-4.026 1.548-1.394 4.646-3.565 9.292-6.435 4.724-2.857 10.606-5.647 17.74-8.36 7.124-2.79 15.256-5.028 24.63-6.964 9.292-1.866 19.349-2.789 30.277-2.789 14.162 0 26.796 1.621 37.789 4.95 10.913 3.331 20.127 8.135 27.641 14.413 7.516 6.266 13.162 14.008 17.042 23.152 3.794 9.136 5.729 19.431 5.729 30.974 0 8.911-1.091 17.19-3.41 24.932-2.25 7.75-5.58 14.638-9.911 20.679-4.412 6.041-9.91 11.149-16.493 15.412-6.58 4.254-14.175 7.436-22.771 9.53v.687c10.227 1.169 19.517 3.803 27.642 7.83 8.214 4.017 15.109 9.056 20.758 15.099 5.651 6.041 10.07 12.846 13.084 20.521 3.032 7.577 4.508 15.789 4.508 24.619z"
    }));
  }
  var C_default = Svg13C;

  // build/lib-react-tsx/nmr/1H.tsx
  var React80 = __toModule(require_react());
  function Svg1H({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React80.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React80.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React80.createElement("path", {
      d: "M953.102 865.157c0 3.837-1.218 7.457-3.836 10.49-2.628 3.245-6.879 5.87-12.742 7.695-5.848 2.012-13.735 3.625-23.629 4.83-9.912 1.229-22.238 1.822-37.394 1.822-15.355 0-28.085-.594-38.183-1.822-9.91-1.204-17.991-2.818-23.649-4.83-5.662-1.825-9.896-4.45-12.321-7.695-2.633-3.032-3.839-6.653-3.839-10.49V555.371H510.967v309.787c0 3.838-1.209 7.457-3.632 10.49-2.43 3.244-6.464 5.87-12.53 7.695-5.861 2.014-13.748 3.625-23.641 4.831-9.902 1.229-22.43 1.822-37.799 1.822-14.956 0-27.476-.594-37.579-1.822-10.099-1.204-18.187-2.817-24.049-4.831-5.861-1.825-10.095-4.451-12.724-7.695-2.634-3.031-3.837-6.652-3.837-10.49V141.536c0-3.834 1.203-7.485 3.837-10.515 2.627-3.221 6.861-5.848 12.724-7.673 5.862-2.036 13.951-3.645 24.049-4.852 10.102-1.208 22.624-1.822 37.579-1.822 15.369 0 27.897.615 37.799 1.822 9.894 1.207 17.779 2.816 23.641 4.852 6.066 1.825 10.101 4.452 12.53 7.673 2.423 3.029 3.632 6.68 3.632 10.515V422.81h286.542V141.536c0-3.834 1.205-7.485 3.839-10.515 2.427-3.221 6.661-5.848 12.321-7.673 5.658-2.036 13.737-3.645 23.649-4.852 10.098-1.208 22.829-1.822 38.183-1.822 15.155 0 27.481.615 37.394 1.822 9.894 1.207 17.779 2.816 23.629 4.852 5.863 1.825 10.114 4.452 12.742 7.673 2.617 3.029 3.836 6.68 3.836 10.515v723.621zM259.367 349.994c0 5.14-.286 9.425-.849 12.978-.563 3.55-1.312 6.44-2.327 8.5-1.03 2.036-2.153 3.623-3.458 4.477-1.217.923-2.711 1.397-4.391 1.397H53.178a6.698 6.698 0 01-4.109-1.397c-1.312-.854-2.422-2.441-3.452-4.477-1.023-2.059-1.775-4.95-2.333-8.5-.557-3.553-.84-7.839-.84-12.978 0-5.327.283-9.709.744-13.26.476-3.553 1.124-6.44 2.146-8.572 1.025-2.252 2.149-3.838 3.455-4.853a7.06 7.06 0 014.389-1.494h65.893V91.547L62.13 122.995c-4.192 2.062-7.556 3.268-10.265 3.744-2.603.447-4.665-.098-6.25-1.682-1.588-1.492-2.616-4.214-3.173-8.029-.474-3.834-.747-9.234-.747-16.15 0-4.38.095-7.934.273-10.823.094-2.811.568-5.238 1.314-7.189.745-2.062 1.776-3.647 2.983-4.952 1.312-1.299 3.091-2.615 5.236-4.107l76.059-49.184c.842-.745 1.963-1.314 3.361-1.776 1.395-.475 3.175-.843 5.327-1.126 2.239-.284 5.033-.461 8.68-.553 3.544-.098 8.121-.098 13.807-.098 6.914 0 12.511.098 16.812.369 4.288.284 7.458.76 9.695 1.41 2.155.555 3.646 1.491 4.393 2.522.654 1.113 1.019 2.522 1.019 4.107v292.338h57.685c1.68 0 3.173.544 4.58 1.494 1.304 1.016 2.512 2.603 3.541 4.853 1.033 2.13 1.688 5.019 2.158 8.572.463 3.55.749 7.931.749 13.259z"
    }));
  }
  var H_default = Svg1H;

  // build/lib-react-tsx/nmr/1H13C.tsx
  var React81 = __toModule(require_react());
  function Svg1H13C({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React81.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React81.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React81.createElement("path", {
      fill: "none",
      strokeWidth: 30.004,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M363.105 35.888l53.128 70.154M309.974 106.042l53.131-70.154"
    }), /* @__PURE__ */ React81.createElement("path", {
      fill: "none",
      strokeWidth: 41.53,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M363.114 640.841h576.354M363.105 640.841V64.487"
    }), /* @__PURE__ */ React81.createElement("path", {
      fill: "none",
      strokeWidth: 30.004,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M968.07 640.841l-70.158 53.127M897.912 587.713l70.158 53.128"
    }), /* @__PURE__ */ React81.createElement("path", {
      d: "M480.425 505.72c27.762 0 50.405-14.576 50.405-32.437 0-17.87-22.644-32.435-50.405-32.435-27.769 0-50.41 14.565-50.41 32.435 0 17.862 22.641 32.437 50.41 32.437zM284.782 291.987c0 2.158-.043 3.961-.175 5.458a33.608 33.608 0 01-.572 3.875c-.266 1.101-.616 2.026-1.057 2.774-.441.795-1.101 1.672-2.071 2.642-.921 1.012-2.772 2.244-5.459 3.83-2.729 1.542-6.03 3.035-9.947 4.446-3.917 1.406-8.361 2.598-13.423 3.521-5.018.969-10.433 1.454-16.289 1.454-11.442 0-21.743-1.804-30.944-5.327-9.201-3.52-17.036-8.759-23.462-15.756-6.468-7.045-11.398-15.76-14.835-26.281-3.433-10.476-5.192-22.667-5.192-36.624 0-14.171 1.896-26.761 5.677-37.764 3.785-11.005 9.069-20.25 15.89-27.729 6.782-7.485 14.925-13.161 24.433-17.036 9.507-3.874 19.939-5.812 31.38-5.812 4.668 0 9.113.396 13.429 1.188 4.314.75 8.275 1.764 11.931 3.039 3.65 1.231 6.953 2.687 9.855 4.315 2.908 1.629 4.979 3.035 6.122 4.179 1.188 1.144 1.979 2.113 2.376 2.909.44.791.791 1.761 1.056 2.949.262 1.23.441 2.642.571 4.27.131 1.628.175 3.65.175 6.075 0 2.549-.087 4.749-.217 6.554-.175 1.808-.485 3.258-.926 4.406-.441 1.101-.925 1.935-1.542 2.418-.615.529-1.275.792-2.065.792-1.28 0-2.909-.747-4.886-2.245-1.982-1.493-4.537-3.209-7.704-5.061-3.126-1.847-6.869-3.521-11.178-5.018-4.358-1.499-9.556-2.244-15.586-2.244-6.602 0-12.501 1.362-17.694 4.047-5.24 2.729-9.638 6.603-13.293 11.62-3.655 5.017-6.427 11.092-8.318 18.227-1.896 7.171-2.861 15.185-2.861 24.119 0 9.817 1.014 18.311 3.036 25.486 2.025 7.18 4.93 13.074 8.672 17.742 3.742 4.621 8.231 8.096 13.511 10.384 5.284 2.25 11.271 3.393 17.873 3.393 6.031 0 11.223-.707 15.581-2.113 4.402-1.411 8.188-2.996 11.314-4.712 3.122-1.716 5.721-3.257 7.747-4.664 2.026-1.366 3.563-2.027 4.708-2.027.838 0 1.542.131 2.026.485.528.354.969 1.056 1.318 2.07.354 1.057.571 2.463.75 4.309.177 1.846.265 4.315.265 7.437z"
    }), /* @__PURE__ */ React81.createElement("path", {
      strokeWidth: 0.966,
      strokeMiterlimit: 22.926,
      d: "M75.202 200.414c0 1.117-.06 2.052-.183 2.825-.122.772-.283 1.403-.507 1.851-.227.446-.471.791-.755.975-.262.206-.59.307-.956.307H30.29c-.328 0-.633-.101-.896-.307-.284-.184-.529-.529-.75-.975-.223-.448-.388-1.079-.51-1.851-.122-.774-.181-1.708-.181-2.825 0-1.162.059-2.114.163-2.887.1-.774.245-1.406.467-1.875.222-.484.467-.834.75-1.057.267-.201.589-.324.956-.324h14.354v-50.162l-12.402 6.856c-.917.446-1.646.707-2.236.811-.572.1-1.017-.021-1.362-.367-.35-.328-.571-.913-.692-1.747-.103-.835-.163-2.013-.163-3.521 0-.956.021-1.729.06-2.358.023-.611.122-1.14.284-1.568.162-.445.388-.791.65-1.074.284-.284.672-.572 1.139-.896l16.569-10.717c.188-.162.428-.284.733-.384.305-.105.689-.183 1.162-.245.484-.06 1.096-.101 1.891-.122.77-.023 1.769-.023 3.009-.023 1.501 0 2.726.023 3.659.083.934.06 1.625.162 2.114.305.466.122.794.324.956.546.14.245.222.55.222.895v63.682h12.563c.367 0 .693.123.996.324.289.223.551.571.774 1.057.227.466.367 1.101.471 1.874.102.78.162 1.732.162 2.894h0zm62.175-16.612c0 3.843-.734 7.257-2.196 10.249a21.345 21.345 0 01-6.141 7.498c-2.625 2.013-5.755 3.559-9.414 4.621-3.66 1.057-7.646 1.563-11.974 1.563-2.625 0-5.083-.184-7.385-.551-2.298-.384-4.328-.851-6.096-1.403-1.768-.567-3.236-1.139-4.393-1.729-1.139-.612-1.891-1.057-2.258-1.38a2.826 2.826 0 01-.791-1.056 9.832 9.832 0 01-.489-1.405c-.144-.546-.244-1.22-.305-2.03a41.44 41.44 0 01-.083-2.952c0-1.908.167-3.233.471-3.961.324-.733.812-1.101 1.441-1.101.388 0 1.078.267 2.052.812.979.533 2.218 1.1 3.721 1.729 1.505.612 3.275 1.18 5.31 1.729 2.013.529 4.329.791 6.909.791 2.179 0 4.109-.262 5.777-.773 1.669-.507 3.091-1.235 4.25-2.175 1.179-.934 2.053-2.053 2.625-3.393.567-1.324.873-2.809.873-4.433 0-1.791-.367-3.397-1.057-4.822-.689-1.441-1.729-2.663-3.092-3.676-1.362-1-3.091-1.791-5.183-2.341-2.075-.567-4.533-.834-7.363-.834h-6.668c-.507 0-.956-.079-1.302-.224-.362-.122-.672-.427-.896-.851-.245-.45-.407-1.041-.507-1.812-.105-.795-.145-1.791-.145-3.009 0-1.158.039-2.091.145-2.846.1-.729.262-1.302.467-1.687.222-.405.506-.672.834-.833.345-.161.75-.244 1.217-.244h6.73c2.317 0 4.354-.267 6.139-.795 1.791-.546 3.297-1.297 4.493-2.296a9.99 9.99 0 002.787-3.6c.633-1.424.935-2.964.935-4.678 0-1.318-.201-2.558-.65-3.72a8.148 8.148 0 00-1.93-3.047c-.855-.857-1.951-1.524-3.314-2.013-1.341-.507-2.926-.751-4.755-.751-2.075 0-4.008.305-5.834.913-1.833.633-3.458 1.302-4.92 2.036-1.446.733-2.687 1.423-3.683 2.053-1.018.632-1.768.956-2.237.956-.322 0-.61-.083-.834-.205-.243-.141-.445-.407-.611-.812-.139-.385-.262-.975-.346-1.729-.083-.75-.122-1.725-.122-2.904 0-1 .023-1.83.062-2.484.043-.646.122-1.196.244-1.646a4.18 4.18 0 01.445-1.117c.167-.324.472-.668.856-1.057.406-.367 1.219-.934 2.441-1.686 1.24-.751 2.785-1.484 4.655-2.196 1.87-.733 4.004-1.322 6.463-1.83 2.441-.489 5.084-.734 7.952-.734 3.72 0 7.034.429 9.921 1.301 2.868.873 5.288 2.134 7.258 3.782 1.973 1.647 3.458 3.682 4.476 6.08.996 2.402 1.501 5.105 1.501 8.135 0 2.337-.283 4.51-.896 6.546-.59 2.035-1.463 3.843-2.603 5.429-1.158 1.585-2.602 2.93-4.331 4.048-1.725 1.117-3.721 1.951-5.973 2.498v.184c2.681.306 5.123.996 7.257 2.053 2.153 1.062 3.966 2.38 5.45 3.964 1.485 1.59 2.642 3.375 3.433 5.391.799 1.989 1.187 4.142 1.187 6.46z"
    }), /* @__PURE__ */ React81.createElement("path", {
      d: "M849.393 917.236c0 .839-.262 1.634-.834 2.289-.572.706-1.497 1.275-2.774 1.676-1.279.438-2.996.786-5.153 1.058-2.156.262-4.843.392-8.139.392-3.346 0-6.12-.131-8.325-.392-2.153-.271-3.916-.621-5.149-1.058-1.23-.4-2.157-.97-2.685-1.676-.571-.655-.834-1.45-.834-2.289V849.76h-62.42v67.477c0 .839-.264 1.634-.792 2.289-.527.706-1.409 1.275-2.728 1.676-1.277.438-2.997.786-5.154 1.058-2.157.262-4.887.392-8.231.392-3.257 0-5.986-.131-8.184-.392-2.199-.271-3.961-.621-5.239-1.058-1.276-.4-2.201-.97-2.773-1.676-.571-.655-.835-1.45-.835-2.289V759.609c0-.838.264-1.633.835-2.287.57-.708 1.497-1.275 2.773-1.678 1.28-.437 3.04-.785 5.239-1.057 2.197-.262 4.927-.392 8.184-.392 3.345 0 6.074.132 8.231.392 2.157.271 3.877.621 5.154 1.057 1.318.402 2.2.97 2.728 1.678.528.654.792 1.45.792 2.287v61.27h62.419v-61.27c0-.838.263-1.633.834-2.287.527-.708 1.454-1.275 2.685-1.678 1.231-.437 2.996-.785 5.149-1.057 2.205-.262 4.979-.392 8.325-.392 3.296 0 5.982.132 8.139.392 2.157.271 3.874.621 5.153 1.057 1.277.402 2.2.97 2.774 1.678.572.654.834 1.45.834 2.287v157.627z"
    }), /* @__PURE__ */ React81.createElement("path", {
      strokeWidth: 0.966,
      strokeMiterlimit: 22.926,
      d: "M686.806 805.017c0 1.118-.062 2.053-.184 2.83-.121.769-.283 1.397-.506 1.843-.223.453-.468.796-.752.979-.266.208-.59.305-.955.305h-42.517c-.323 0-.629-.095-.896-.305-.284-.184-.528-.524-.751-.979-.221-.446-.388-1.074-.51-1.843-.118-.777-.179-1.711-.179-2.83 0-1.161.061-2.113.162-2.883.1-.776.243-1.406.466-1.879.223-.479.468-.829.752-1.055.267-.203.59-.325.957-.325h14.354v-50.158l-12.402 6.848c-.913.453-1.646.717-2.237.82-.566.096-1.017-.027-1.362-.367-.345-.33-.571-.916-.688-1.747-.104-.839-.167-2.017-.167-3.52 0-.961.022-1.729.061-2.357.021-.612.122-1.146.284-1.574.166-.444.388-.786.65-1.074.288-.288.672-.566 1.139-.89l16.573-10.717c.182-.165.429-.288.729-.385a6.163 6.163 0 011.161-.244 18.54 18.54 0 011.892-.122c.772-.026 1.767-.026 3.008-.026 1.503 0 2.726.026 3.659.087.935.062 1.63.158 2.115.306.468.114.795.325.956.542.144.246.223.551.223.901v63.676h12.566c.367 0 .69.121.997.324.283.226.55.575.773 1.055.223.472.366 1.103.467 1.879.1.771.162 1.723.162 2.885z"
    }), /* @__PURE__ */ React81.createElement("path", {
      d: "M480.425 333.943c27.762 0 50.405-14.566 50.405-32.433 0-17.865-22.644-32.433-50.405-32.433-27.769 0-50.41 14.568-50.41 32.433 0 17.865 22.641 32.433 50.41 32.433zM789.938 330.704c27.766 0 50.406-14.566 50.406-32.433s-22.641-32.433-50.406-32.433c-27.769 0-50.411 14.568-50.411 32.433s22.642 32.433 50.411 32.433zM789.938 181.619c27.766 0 50.406-14.568 50.406-32.434 0-17.864-22.641-32.432-50.406-32.432-27.769 0-50.411 14.568-50.411 32.432-.001 17.866 22.642 32.434 50.411 32.434z"
    }));
  }
  var H13C_default = Svg1H13C;

  // build/lib-react-tsx/nmr/1H1H.tsx
  var React82 = __toModule(require_react());
  function Svg1H1H({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React82.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React82.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React82.createElement("path", {
      d: "M449.391 578.71c33.109 0 60.112-27.008 60.112-60.127 0-33.114-27.003-60.119-60.112-60.119-33.12 0-60.125 27.005-60.125 60.119-.001 33.119 27.005 60.127 60.125 60.127z"
    }), /* @__PURE__ */ React82.createElement("path", {
      fill: "none",
      strokeWidth: 31.354,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M329.713 40.214l55.516 73.307M274.19 113.521l55.523-73.307"
    }), /* @__PURE__ */ React82.createElement("path", {
      fill: "none",
      strokeWidth: 43.399,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M329.722 672.385h602.284M329.713 672.385V70.096"
    }), /* @__PURE__ */ React82.createElement("path", {
      fill: "none",
      strokeWidth: 31.354,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M961.896 672.385l-73.316 55.518M888.58 616.866l73.316 55.519"
    }), /* @__PURE__ */ React82.createElement("path", {
      d: "M837.877 961.217c0 .878-.272 1.698-.871 2.393-.598.729-1.565 1.332-2.898 1.742-1.337.465-3.131.83-5.386 1.104-2.254.281-5.061.419-8.506.419-3.495 0-6.395-.138-8.698-.419-2.251-.275-4.093-.641-5.382-1.104-1.286-.41-2.254-1.013-2.805-1.742a3.583 3.583 0 01-.873-2.393v-70.514h-65.227v70.514c0 .878-.275 1.698-.827 2.393-.553.729-1.474 1.332-2.852 1.742-1.333.465-3.132.83-5.387 1.104-2.253.281-5.105.419-8.602.419-3.401 0-6.257-.138-8.552-.419-2.3-.275-4.137-.641-5.474-1.104-1.334-.41-2.3-1.013-2.899-1.742-.597-.694-.871-1.515-.871-2.393V796.5c0-.877.274-1.708.871-2.4.598-.731 1.565-1.336 2.899-1.744 1.337-.457 3.174-.831 5.474-1.105 2.295-.272 5.148-.409 8.552-.409 3.496 0 6.349.138 8.602.409 2.255.275 4.054.649 5.387 1.105 1.378.408 2.299 1.013 2.852 1.744.552.692.827 1.523.827 2.4v64.022h65.227V796.5c0-.877.276-1.708.873-2.4.551-.731 1.519-1.336 2.805-1.744 1.287-.457 3.131-.831 5.382-1.105 2.304-.272 5.203-.409 8.698-.409 3.445 0 6.252.138 8.506.409 2.255.275 4.049.649 5.386 1.105 1.333.408 2.299 1.013 2.898 1.744.599.692.871 1.523.871 2.4v164.717z"
    }), /* @__PURE__ */ React82.createElement("path", {
      strokeWidth: 1.009,
      strokeMiterlimit: 22.926,
      d: "M667.976 843.948c0 1.168-.064 2.145-.191 2.958-.129.803-.297 1.462-.529 1.925-.233.475-.488.831-.785 1.024a1.633 1.633 0 01-1 .318h-44.429c-.337 0-.657-.109-.936-.318-.297-.193-.553-.548-.783-1.024-.232-.465-.406-1.122-.534-1.925-.123-.813-.188-1.788-.188-2.958 0-1.215.064-2.21.169-3.022.104-.803.256-1.461.486-1.953.233-.51.489-.866.786-1.104.277-.209.615-.338.999-.338h14.999v-52.413l-12.957 7.153c-.956.468-1.721.748-2.338.849-.593.111-1.064-.019-1.423-.382-.36-.339-.598-.949-.722-1.826-.109-.867-.173-2.099-.173-3.669 0-1.005.022-1.807.063-2.475.024-.628.128-1.186.297-1.633.174-.465.405-.83.681-1.122.302-.302.702-.593 1.189-.941l17.317-11.187c.193-.175.449-.302.764-.412.318-.101.724-.19 1.214-.256a22.821 22.821 0 011.977-.128c.807-.019 1.849-.019 3.144-.019 1.57 0 2.848.019 3.825.083.975.063 1.702.174 2.208.319.489.128.831.338 1.001.575.15.256.232.574.232.939v66.543h13.131c.384 0 .721.129 1.042.338.296.237.574.594.806 1.104.233.492.384 1.15.489 1.953.104.816.169 1.81.169 3.024z"
    }), /* @__PURE__ */ React82.createElement("path", {
      d: "M247.864 344.398c0 .876-.274 1.698-.872 2.392-.597.73-1.564 1.333-2.899 1.744-1.336.466-3.13.83-5.385 1.104-2.253.281-5.061.42-8.505.42-3.501 0-6.398-.139-8.699-.42-2.255-.274-4.093-.639-5.381-1.104-1.286-.41-2.253-1.014-2.806-1.744a3.58 3.58 0 01-.876-2.392v-70.523h-65.224v70.523c0 .876-.274 1.698-.827 2.392-.551.73-1.474 1.333-2.851 1.744-1.339.466-3.131.83-5.385 1.104-2.255.281-5.107.42-8.602.42-3.404 0-6.257-.139-8.552-.42-2.3-.274-4.145-.639-5.476-1.104-1.333-.41-2.301-1.014-2.898-1.744a3.587 3.587 0 01-.877-2.392V179.679c0-.876.28-1.707.877-2.402.596-.729 1.565-1.332 2.898-1.743 1.333-.465 3.176-.831 5.476-1.104 2.294-.274 5.147-.41 8.552-.41 3.494 0 6.346.136 8.602.41 2.254.274 4.046.639 5.385 1.104 1.377.411 2.299 1.014 2.851 1.743.552.693.827 1.525.827 2.402v64.023h65.224v-64.023c0-.876.278-1.707.876-2.402.553-.729 1.52-1.332 2.806-1.743 1.287-.465 3.126-.831 5.381-1.104 2.299-.274 5.198-.41 8.699-.41 3.444 0 6.252.136 8.505.41 2.255.274 4.049.639 5.385 1.104 1.334.411 2.3 1.014 2.899 1.743.598.693.872 1.525.872 2.402v164.719z"
    }), /* @__PURE__ */ React82.createElement("path", {
      strokeWidth: 1.009,
      strokeMiterlimit: 22.926,
      d: "M77.962 227.13c0 1.167-.064 2.144-.191 2.948-.129.812-.297 1.469-.53 1.935-.232.466-.488.831-.784 1.023a1.62 1.62 0 01-1.001.32H31.028c-.343 0-.657-.109-.936-.32-.295-.192-.552-.557-.784-1.023s-.406-1.123-.533-1.935c-.122-.804-.187-1.778-.187-2.948 0-1.214.065-2.209.168-3.021.105-.805.256-1.46.488-1.953.233-.512.488-.867.784-1.105a1.65 1.65 0 011-.338h15.001v-52.415l-12.96 7.156c-.96.466-1.721.749-2.337.847-.598.109-1.063-.019-1.424-.383-.359-.338-.597-.95-.72-1.825-.109-.867-.174-2.099-.174-3.679 0-.995.024-1.797.064-2.464.024-.63.129-1.188.296-1.633.174-.466.406-.831.68-1.123.3-.301.703-.602 1.191-.94l17.317-11.19c.191-.174.443-.301.762-.41.32-.1.725-.191 1.214-.256a23.18 23.18 0 011.977-.127c.807-.02 1.847-.02 3.144-.02 1.57 0 2.848.02 3.825.083.978.062 1.703.173 2.208.318.488.127.832.338 1 .575.151.257.232.576.232.94v66.543h13.131c.385 0 .722.127 1.041.338.296.238.571.593.809 1.105.232.493.377 1.15.486 1.953.107.814.171 1.81.171 3.024z"
    }), /* @__PURE__ */ React82.createElement("path", {
      d: "M610.655 427.34c33.108 0 60.111-27.005 60.111-60.117 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.007-60.127 60.126 0 33.112 27.006 60.117 60.127 60.117zM793.139 427.34c33.111 0 60.116-27.005 60.116-60.117 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.007-60.126 60.126 0 33.112 27.005 60.117 60.126 60.117zM610.655 260.415c33.108 0 60.111-27.007 60.111-60.118 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.005-60.127 60.126 0 33.111 27.006 60.118 60.127 60.118zM793.139 260.415c33.111 0 60.116-27.007 60.116-60.118 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.005-60.126 60.126 0 33.111 27.005 60.118 60.126 60.118z"
    }));
  }
  var H1H_default = Svg1H1H;

  // build/lib-react-tsx/nmr/2D.tsx
  var React83 = __toModule(require_react());
  function Svg2D({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React83.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React83.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React83.createElement("path", {
      d: "M290.592 768.97c33.109 0 60.112-27.008 60.112-60.127 0-33.114-27.003-60.12-60.112-60.12-33.12 0-60.125 27.006-60.125 60.12-.001 33.119 27.005 60.127 60.125 60.127z"
    }), /* @__PURE__ */ React83.createElement("path", {
      strokeMiterlimit: 22.926,
      fill: "none",
      strokeWidth: 31.354,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M109.491 73.172l55.516 73.307M53.968 146.479l55.523-73.307"
    }), /* @__PURE__ */ React83.createElement("path", {
      strokeMiterlimit: 22.926,
      fill: "none",
      strokeWidth: 48.573,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M115.061 891.109h754.456"
    }), /* @__PURE__ */ React83.createElement("path", {
      strokeMiterlimit: 22.926,
      fill: "none",
      strokeWidth: 49.065,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M109.491 884.987V115.169"
    }), /* @__PURE__ */ React83.createElement("path", {
      strokeMiterlimit: 22.926,
      fill: "none",
      strokeWidth: 31.354,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M912.458 891.109l-73.316 55.518M839.142 835.59l73.316 55.519"
    }), /* @__PURE__ */ React83.createElement("path", {
      d: "M510.655 527.34c33.108 0 60.111-27.005 60.111-60.117 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.007-60.127 60.126 0 33.112 27.006 60.117 60.127 60.117zM793.139 527.34c33.111 0 60.116-27.005 60.116-60.117 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.007-60.126 60.126 0 33.112 27.005 60.117 60.126 60.117zM510.655 260.415c33.108 0 60.111-27.007 60.111-60.118 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.005-60.127 60.126 0 33.111 27.006 60.118 60.127 60.118zM793.139 260.415c33.111 0 60.116-27.007 60.116-60.118 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.005-60.126 60.126 0 33.111 27.005 60.118 60.126 60.118z"
    }));
  }
  var D_default = Svg2D;

  // build/lib-react-tsx/nmr/AddFilter.tsx
  var React84 = __toModule(require_react());
  function SvgAddFilter({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React84.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React84.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React84.createElement("path", {
      d: "M38.416 887.681c558.451 0 148.174-1.283 633.454-1.283 10.578 0 47.87-38 57.844-55l44.9-345.78 44.857 347.78 26.927 54 113.692.283",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeWidth: 50.126
    }), /* @__PURE__ */ React84.createElement("path", {
      "data-name": "Path 9",
      d: "M687.492 282.78l-51.858 100.095 24.17 110.116c-42.727-48.433-115.375-98.433-175.081-129.992"
    }), /* @__PURE__ */ React84.createElement("path", {
      "data-name": "Path 11",
      d: "M624.301 376.896c68.882 3.825 102.461 21.904 132.651 76.103",
      fill: "none",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeWidth: 48.987
    }), /* @__PURE__ */ React84.createElement("path", {
      d: "M629.812 76.248c18.317 5.053 34.108 20.212 40.424 38.4 2.021 5.937 2.4 10.738 2.4 33.6 0 28.8-1.011 35.876-6.822 47.246a72.107 72.107 0 01-7.706 11.369c-4.169 4.8-75.8 61.521-79.585 62.91-1.642.632-20.844-23.876-20.844-26.528 0-.884 17.054-14.906 37.9-31.076 26.655-20.717 38.4-30.571 39.793-33.476 1.516-3.285 1.895-9.222 1.895-29.56 0-28.676-.884-32.592-7.832-36.382-4.042-2.148-14.654-2.274-244.819-2.274s-240.777.126-244.819 2.274c-6.948 3.79-7.832 7.706-7.832 36.255 0 18.7.505 26.4 1.769 29.56 1.39 3.411 19.581 17.054 101.313 75.922 54.825 39.414 100.934 72.89 102.324 74.406 2.653 2.527 3.032 7.706 11.117 120.767 4.674 64.931 8.716 119.63 9.1 121.4a13.9 13.9 0 003.79 6.316c3.158 2.905 3.916 3.032 23.244 3.032 19.454 0 20.086-.126 23.244-3.032a14.8 14.8 0 003.916-6.948c.253-2.148 2.021-24.886 3.916-50.657 1.769-25.644 3.411-46.867 3.663-47.246.758-.632 33.6 2.148 34.361 2.905 1.011 1.011-5.937 95.5-7.453 101.187-3.79 14.654-14.148 26.655-29.687 34.361l-9.727 4.8h-22.112c-21.6 0-22.486-.126-29.687-3.411-10.738-5.053-19.075-11.622-24.633-19.454-4.927-6.948-5.306-8.337-8.969-31.076-.632-4.421-4.421-52.93-8.211-107.756-3.916-54.952-7.327-100.934-7.58-102.45-.379-1.895-29.813-23.749-93.1-69.353-50.909-36.634-95.25-69.227-98.534-72.385-6.948-6.7-12.759-17.054-15.538-27.413-2.906-11.5-2.653-57.226.379-67.205 4.8-15.159 15.917-27.665 31.455-35.371l9.727-4.8 241.914-.253c193.021-.124 243.177.128 247.846 1.396z"
    }), /* @__PURE__ */ React84.createElement("path", {
      d: "M.5.5h997.512l2.488 1000H.5z",
      fill: "none"
    }));
  }
  var AddFilter_default = SvgAddFilter;

  // build/lib-react-tsx/nmr/AlignBottom.tsx
  var React85 = __toModule(require_react());
  function SvgAlignBottom({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React85.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React85.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React85.createElement("g", {
      clipPath: "url(#clip-align-bottom)"
    }, /* @__PURE__ */ React85.createElement("path", {
      d: "M74.308 889.139c44.876-.388 119.418-1.382 207.014-.9 81.54-1.168 55.647-252.189 61.657-307.029l.006-.055c9.134 83.481-10.239 291.374 86.758 307.083 22.56 3.653 107.859 5.114 132.337 0 96.267-19.911 67.725-129.929 76.859-213.41 6.028 53.888-9.874 194.965 79.957 214.313 60.223.9 136.628.994 206.9 0",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 39.653
    }), /* @__PURE__ */ React85.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, /* @__PURE__ */ React85.createElement("path", {
      "data-name": "Path 6",
      d: "M640.001 338.057L499.86 478.198 359.719 338.057",
      strokeWidth: 35
    }), /* @__PURE__ */ React85.createElement("path", {
      "data-name": "Path 7",
      d: "M612.142 295.383L499.76 407.765l3.764-338.977-3.764 338.977-112.382-112.382",
      strokeWidth: 20
    }), /* @__PURE__ */ React85.createElement("path", {
      "data-name": "Path 8",
      d: "M640.001 338.057L499.86 478.198 359.719 338.057",
      strokeWidth: 35
    }))));
  }
  var AlignBottom_default = SvgAlignBottom;

  // build/lib-react-tsx/nmr/AlignCenter.tsx
  var React86 = __toModule(require_react());
  function SvgAlignCenter({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React86.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React86.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React86.createElement("g", {
      clipPath: "url(#clip-align-center)"
    }, /* @__PURE__ */ React86.createElement("path", {
      d: "M74.308 610.139c44.876-.388 119.418-1.382 207.014-.9 81.7-1.17 55.543-253.2 61.663-307.085 9.134 83.481-10.239 291.374 86.758 307.083 22.56 3.653 107.859 5.114 132.337 0 96.267-19.911 67.725-129.929 76.859-213.41 6.028 53.888-9.874 194.965 79.957 214.313 60.223.9 136.628.994 206.9 0",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 39.653
    }), /* @__PURE__ */ React86.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, /* @__PURE__ */ React86.createElement("path", {
      "data-name": "Path 6",
      d: "M640.002 862.524L499.861 722.383 359.72 862.524",
      strokeWidth: 35
    }), /* @__PURE__ */ React86.createElement("path", {
      "data-name": "Path 7",
      d: "M612.142 905.199L499.76 792.817 387.378 905.199",
      strokeWidth: 20
    })), /* @__PURE__ */ React86.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, /* @__PURE__ */ React86.createElement("path", {
      "data-name": "Path 6",
      d: "M640.001 145.057L499.86 285.198 359.719 145.057",
      strokeWidth: 35
    }), /* @__PURE__ */ React86.createElement("path", {
      "data-name": "Path 7",
      d: "M612.142 102.383L499.76 214.765 387.378 102.383",
      strokeWidth: 20
    }))));
  }
  var AlignCenter_default = SvgAlignCenter;

  // build/lib-react-tsx/nmr/Apodization.tsx
  var React87 = __toModule(require_react());
  function SvgApodization({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React87.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React87.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React87.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M27.989 24.288l24.468 939.363 52.128-677.659 29.787 456.383 44.681-297.873 23.404 202.128 38.298-108.511 26.596 42.339h698.936"
    }), /* @__PURE__ */ React87.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "50,50",
      d: "M293.947 55.51v886.864"
    }), /* @__PURE__ */ React87.createElement("path", {
      d: "M650.938 63.47h67.1l148.5 390.5h-78.1l-36.3-97.35h-136.4l-35.75 97.35h-78.1zm87.45 239.8l-53.9-153.45-56.1 153.45z"
    }));
  }
  var Apodization_default = SvgApodization;

  // build/lib-react-tsx/nmr/Assignment.tsx
  var React88 = __toModule(require_react());
  function SvgAssignment6({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React88.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React88.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React88.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React88.createElement("path", {
      strokeWidth: 50.126,
      d: "M45.332 634.783h614.323l66.347-389.362 59.074 389.362h99.105"
    }), /* @__PURE__ */ React88.createElement("path", {
      strokeWidth: 44.208,
      d: "M724.551 73.495v85.48"
    }), /* @__PURE__ */ React88.createElement("path", {
      strokeWidth: 61.89,
      d: "M45.332 809.969h882.592"
    }), /* @__PURE__ */ React88.createElement("g", {
      strokeWidth: 61.89
    }, /* @__PURE__ */ React88.createElement("path", {
      d: "M955.191 809.959l-99.571 75.414M855.62 734.56l99.571 75.399"
    })), /* @__PURE__ */ React88.createElement("path", {
      strokeWidth: 50.126,
      d: "M158.572 160.25l150.263-86.755 150.262 86.755v173.504l-150.262 86.752-150.263-86.752z"
    })));
  }
  var Assignment_default6 = SvgAssignment6;

  // build/lib-react-tsx/nmr/Assignment2.tsx
  var React89 = __toModule(require_react());
  function SvgAssignment22({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React89.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React89.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React89.createElement("path", {
      d: "M821.53 292.639l-83.455 53.397-29.992 94.432c-11.238-55.639-44.56-125.618-76.135-175.875"
    }), /* @__PURE__ */ React89.createElement("g", {
      fill: "none",
      strokeWidth: 50.126,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React89.createElement("path", {
      d: "M45.332 934.783c559.962 0 148.575-1.283 635.168-1.283 10.607 0 48-38 58-55l50-379 40 381 27 54 114 .283M58.363 250.85L328.835 94.691 599.306 250.85v312.307L328.835 719.311 58.363 563.157z"
    })), /* @__PURE__ */ React89.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M709.996 313.94C770.5 353.5 791.5 387.5 790.5 452.5"
    }));
  }
  var Assignment2_default = SvgAssignment22;

  // build/lib-react-tsx/nmr/BaselineCorrection.tsx
  var React90 = __toModule(require_react());
  function SvgBaselineCorrection({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React90.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React90.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React90.createElement("g", {
      "data-name": "baseline correction",
      clipPath: "url(#clip-baseline_correction)",
      fill: "none",
      strokeWidth: 45
    }, /* @__PURE__ */ React90.createElement("path", {
      d: "M27.265 648.5h961.746",
      strokeLinecap: "square",
      strokeLinejoin: "bevel",
      strokeDasharray: "5 100"
    }), /* @__PURE__ */ React90.createElement("path", {
      d: "M33.737 698.735c14.928 4.584 51.09 39.489 112.8 39.489s76.691-53.427 127.581-62.8 98.841-30.237 108.461-30.181c76.9-1.17 58.063-490.423 63.823-544.308 8.6 83.481-21.07 528.6 70.224 544.306 21.234 3.653-15.192 5.114 7.847 0 90.607-19.911 79.3-392.121 79.3-392.121s-6.906 293.146 51.71 355.345 84.549-41.324 148.667-31.625 107.807 70.415 107.807 70.415 40.428 51.7 55.4 51.478",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })));
  }
  var BaselineCorrection_default = SvgBaselineCorrection;

  // build/lib-react-tsx/nmr/ExportAsMatrix.tsx
  var React91 = __toModule(require_react());
  function SvgExportAsMatrix({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React91.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React91.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React91.createElement("g", {
      "data-name": "matrix-group"
    }, /* @__PURE__ */ React91.createElement("g", {
      "data-name": "Group 1"
    }, /* @__PURE__ */ React91.createElement("path", {
      "data-name": "Path 9",
      d: "M726.324 382.369l42.232 129.055-65.809 111.873c73.311-37.31 188.443-65.248 280.26-77.75",
      strokeWidth: 1.0001
    }), /* @__PURE__ */ React91.createElement("path", {
      "data-name": "Path 11",
      d: "M788.538 516.872c-18.263-6.046-202.212-27.71-214.417-25.723-67.023 10.912-119.093 136.624-136.565 160.707-3.238 4.463-10.934-45.332-10.934-45.332L342.05 75.93l-82.685 558.027-134.978-.023",
      fill: "rgba(0,0,0,0)",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeWidth: 60.006
    })), /* @__PURE__ */ React91.createElement("path", {
      "data-name": "Path 17",
      d: "M623.293 640.639v296.849H505",
      fill: "none",
      strokeLinecap: "round",
      strokeWidth: 60
    }), /* @__PURE__ */ React91.createElement("path", {
      "data-name": "Path 18",
      d: "M623.293 361.415V73.494H505",
      fill: "none",
      strokeLinecap: "round",
      strokeWidth: 60
    }), /* @__PURE__ */ React91.createElement("path", {
      "data-name": "Path 19",
      d: "M179.092 73.494H60.319v863.994h118.773",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 60
    })));
  }
  var ExportAsMatrix_default = SvgExportAsMatrix;

  // build/lib-react-tsx/nmr/Fid.tsx
  var React92 = __toModule(require_react());
  function SvgFid({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React92.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React92.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React92.createElement("path", {
      strokeMiterlimit: 22.926,
      strokeLinejoin: "round",
      strokeLinecap: "round",
      strokeWidth: 48.987,
      fill: "none",
      d: "M149.053 29.608L178.84 963.65l65.958-774.467 40.425 600 65.957-396.809 51.064 286.17 67.022-175.532 70.213 115.958 61.701-73.405 72.767 34.893h176.596"
    }));
  }
  var Fid_default = SvgFid;

  // build/lib-react-tsx/nmr/FourierTransform.tsx
  var React93 = __toModule(require_react());
  function SvgFourierTransform({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React93.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React93.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React93.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M444.092 954.83l260.101.898s18.906-3.57 32.399-15.299c11.067-9.619 16.2-13.5 22.5-26.1.244-.832 16.859-45.973 17.101-46.801 9-37.801 6.299-23.4 16.199-90.9 15.443-190.23 18.9-309.6 18.9-309.6M812.192 467.029c0-137.7 3.456 119.369 18.899 309.6 9.899 67.5 7.2 53.1 16.2 90.9.24.828 16.854 45.969 17.1 46.801 6.301 12.6 11.434 16.48 22.5 26.1 13.494 11.729 32.4 15.299 32.4 15.299l50.4-.898"
    }), /* @__PURE__ */ React93.createElement("path", {
      d: "M494.573 832.361l84.332-51.996 31.562-93.917c10.312 55.815 42.461 126.343 73.191 177.118-56.408-18.446-132.387-33.795-189.085-31.205z"
    }), /* @__PURE__ */ React93.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M462.253 673.862l118.259 106.22"
    }), /* @__PURE__ */ React93.createElement("path", {
      fill: "none",
      strokeWidth: 80,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M536.969 53.506c51.065-19.271 334.979 22.168 390.4 0M637.369 86.706c-8.012 84.916 1.6 315.199-71.2 404M637.563 273.225c.967-.04 86.205 16.681 149.405 10.281"
    }), /* @__PURE__ */ React93.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M29.053 29.608L58.84 963.65l65.958-774.467 40.425 600 65.957-396.809 51.064 286.17 67.022-175.532 70.213 115.958 61.701-73.405 72.767 34.893h176.596"
    }));
  }
  var FourierTransform_default = SvgFourierTransform;

  // build/lib-react-tsx/nmr/Ft.tsx
  var React94 = __toModule(require_react());
  function SvgFt({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React94.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React94.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React94.createElement("path", {
      d: "M444.092 954.83l260.101.898s18.906-3.57 32.399-15.299c11.067-9.619 16.2-13.5 22.5-26.1.244-.832 16.859-45.973 17.101-46.801 9-37.801 6.299-23.4 16.199-90.9 15.443-190.23 18.9-309.6 18.9-309.6M812.192 467.029c0-137.7 3.456 119.369 18.899 309.6 9.899 67.5 7.2 53.1 16.2 90.9.24.828 16.854 45.969 17.1 46.801 6.301 12.6 11.434 16.48 22.5 26.1 13.494 11.729 32.4 15.299 32.4 15.299l50.4-.898",
      strokeMiterlimit: 22.926,
      strokeLinejoin: "round",
      strokeLinecap: "round",
      strokeWidth: 49.312,
      fill: "none",
      transform: "matrix(1.5417 0 0 1.40189 -584.35 -473.718)"
    }));
  }
  var Ft_default = SvgFt;

  // build/lib-react-tsx/nmr/ImpuritiesStars.tsx
  var React95 = __toModule(require_react());
  function SvgImpuritiesStars({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React95.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React95.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React95.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M43.528 957.101H159.71l28.61-77.773 29.083 76.971 242.097.084 39-57.883 50.907-846.347L603.5 896.5l43 60.601h70.667l50.082-116.9 52.511 116.9h133.575"
    }), /* @__PURE__ */ React95.createElement("path", {
      fill: "none",
      strokeWidth: 39.19,
      strokeLinecap: "square",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M188.5 618.1v126.4"
    }), /* @__PURE__ */ React95.createElement("path", {
      d: "M188.5 839.106c-16.518-44.521-44.7-99.75-74.537-133.979l74.537 26.958 74.537-26.958C233.2 739.356 205.01 794.589 188.5 839.106z"
    }), /* @__PURE__ */ React95.createElement("path", {
      fill: "none",
      strokeWidth: 39.19,
      strokeLinecap: "square",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M766.5 585.1v126.4"
    }), /* @__PURE__ */ React95.createElement("path", {
      d: "M766.5 806.106c-16.518-44.521-44.7-99.75-74.537-133.979l74.537 26.958 74.537-26.958c-29.836 34.229-58.027 89.462-74.537 133.979z"
    }), /* @__PURE__ */ React95.createElement("g", null, /* @__PURE__ */ React95.createElement("path", {
      d: "M289.078 325.536l-75.804 99.897v1.6l120.489-15.984v54.346L213.274 450.21v2.396l76.602 95.905-50.27 28.771-48.674-111.888h-1.597l-51.07 112.685-45.485-28.77 75.807-97.501v-2.398l-118.1 15.985v-54.346l117.301 15.185v-1.6l-75.012-98.302 48.678-27.971 49.474 111.889h1.596L241.2 297.562l47.878 27.974z"
    })), /* @__PURE__ */ React95.createElement("g", null, /* @__PURE__ */ React95.createElement("path", {
      d: "M863.81 295.177l-74.812 98.438v1.576l118.912-15.75v53.552L788.998 418.03v2.361l75.599 94.504-49.612 28.351-48.041-110.253h-1.57l-50.401 111.039-44.893-28.352 74.815-96.075v-2.363l-116.555 15.75V379.44l115.767 14.963v-1.576l-74.027-96.865 48.041-27.562 48.823 110.254h1.576l48.041-111.042 47.249 27.565z"
    })));
  }
  var ImpuritiesStars_default = SvgImpuritiesStars;

  // build/lib-react-tsx/nmr/Impurities.tsx
  var React96 = __toModule(require_react());
  function SvgImpurities2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React96.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React96.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React96.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M43.528 787.101h93.182l51.61-99.773 51.083 98.971 255.948.113 54.056-734.259 57.363 734.948h87.397l63.082-96.9 64.511 96.9h131.575"
    }));
  }
  var Impurities_default2 = SvgImpurities2;

  // build/lib-react-tsx/nmr/Integrate.tsx
  var React97 = __toModule(require_react());
  function SvgIntegrate({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React97.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React97.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React97.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M40.677 920.5H142.5l36-5 25-28 14-59 15-87 19-284s3.841 52.633 21 264c11 75 8 59 18 101 .268.921 18.728 51.077 19 52 7 14 12.703 18.312 25 29 14.993 13.033 36 17 36 17l590-1"
    }), /* @__PURE__ */ React97.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M64.5 419.5c197 5 187-13.598 186-190.397-1-176.8-15-207.205 156-202.603"
    }), /* @__PURE__ */ React97.createElement("ellipse", {
      strokeWidth: 60,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      cx: 811.5,
      cy: 117,
      rx: 35,
      ry: 28.5
    }), /* @__PURE__ */ React97.createElement("path", {
      fill: "none",
      strokeWidth: 60,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M807.5 87.5c-110-2-156 237-164 349M810.5 90.5c-110-2-105 234-113 346"
    }), /* @__PURE__ */ React97.createElement("ellipse", {
      strokeWidth: 60,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      cx: 529.5,
      cy: 747.98,
      rx: 35,
      ry: 28.5
    }), /* @__PURE__ */ React97.createElement("path", {
      fill: "none",
      strokeWidth: 60,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M533.5 777.48c110 2 156-227 164-339M530.5 774.48c110 2 105-224 113-336"
    }));
  }
  var Integrate_default = SvgIntegrate;

  // build/lib-react-tsx/nmr/Lineshapedeconvolution.tsx
  var React98 = __toModule(require_react());
  function SvgLineshapedeconvolution({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React98.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React98.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React98.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M211.5 287.5s3.841 43.633 21 255c11 75 19 146 41 213 20 37 72 66 92 78 37 13 61 53 88 79 6 8 33 9 33 9l434-2M35.5 919.5l56 1s21.007-3.967 36-17c12.297-10.688 18-15 25-29 .272-.923 18.732-51.079 19-52 10-42 7-26 18-101 17.159-211.367 21-587 21-434"
    }), /* @__PURE__ */ React98.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M472.5 76.5s3.841 132.633 21 344c11 75 8 59 18 101 .268.921 18.728 51.077 19 52 7 14 12.703 18.312 25 29 14.993 13.033 36 17 36 17l289-1M296.5 618.5l56 1s21.007-3.967 36-17c12.297-10.688 18-15 25-29 .272-.923 18.732-51.079 19-52 10-42 7-26 18-101 17.159-211.367 21-497 21-344"
    }), /* @__PURE__ */ React98.createElement("path", {
      d: "M708.897 831.817l-78.271-60.741-99.021 3.379c48.656-29.23 103.428-84.072 140.201-130.658 2.508 59.295 14.781 135.83 37.091 188.02z"
    }), /* @__PURE__ */ React98.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M583.5 881.5l58-148"
    }), /* @__PURE__ */ React98.createElement("circle", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      cx: 762.5,
      cy: 238.5,
      r: 197
    }), /* @__PURE__ */ React98.createElement("circle", {
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      cx: 762.5,
      cy: 131.5,
      r: 18
    }), /* @__PURE__ */ React98.createElement("circle", {
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      cx: 762.5,
      cy: 339.5,
      r: 18
    }), /* @__PURE__ */ React98.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M667.5 235.5h190"
    }));
  }
  var Lineshapedeconvolution_default = SvgLineshapedeconvolution;

  // build/lib-react-tsx/nmr/MultipleAnalysis.tsx
  var React99 = __toModule(require_react());
  function SvgMultipleAnalysis({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React99.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 991.323 980.387",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React99.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React99.createElement("path", {
      d: "M24.612 594.712h305.673l61.025-399.9 61.127 399.9h338.338",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeWidth: 49.224,
      strokeDasharray: "1, 70"
    }), /* @__PURE__ */ React99.createElement("path", {
      d: "M199.548 953.651h371.673l61.024-399.9 63.127 399.9h271.339",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeWidth: 49.224
    }), /* @__PURE__ */ React99.createElement("path", {
      d: "M116.665 775.367c60.181 0 342.086.408 342.086.408l61.025-399.9 62.127 399.9h330.782",
      fill: "none",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeWidth: 49.224,
      strokeDasharray: "50, 30"
    }), /* @__PURE__ */ React99.createElement("path", {
      "data-name": "Path 5",
      d: "M213.446 229.43v-152h527v151",
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: 39.653
    }));
  }
  var MultipleAnalysis_default = SvgMultipleAnalysis;

  // build/lib-react-tsx/nmr/Multiplet.tsx
  var React100 = __toModule(require_react());
  function SvgMultiplet({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React100.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React100.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React100.createElement("path", {
      d: "M235.272 294.355c0 1.324-.394 2.506-1.192 3.506-.792 1.045-2.045 1.907-3.883 2.635-1.786.722-4.225 1.245-7.325 1.639-3.101.405-7 .536-11.809.536-4.748 0-8.64-.131-11.739-.536-3.102-.393-5.61-.915-7.455-1.639-1.848-.727-3.171-1.59-3.891-2.635a6.276 6.276 0 01-1.057-3.506v-81.914c-4.611 4.276-9.104 7.968-13.526 11.14-4.345 3.168-8.769 5.743-13.123 7.717a62.421 62.421 0 01-13.519 4.355c-4.622.921-9.567 1.313-14.721 1.313-12.592 0-23.345-2.51-32.252-7.583-8.906-5.077-16.154-11.939-21.77-20.585-5.6-8.64-9.689-18.724-12.264-30.266-2.578-11.544-3.832-23.687-3.832-36.417 0-15.373 1.648-29.155 5.016-41.361 3.366-12.263 8.244-22.687 14.711-31.329 6.399-8.64 14.318-15.237 23.748-19.856 9.362-4.684 20.321-6.993 32.653-6.993 4.74 0 9.36.464 13.718 1.454 4.352.983 8.775 2.634 13.131 5.003 4.413 2.38 8.966 5.479 13.655 9.312 4.681 3.821 9.894 8.433 15.563 13.982V53.585c0-1.254.325-2.439 1.056-3.364.662-.979 1.846-1.771 3.427-2.441 1.649-.655 3.761-1.117 6.338-1.44 2.577-.328 5.935-.465 10.022-.465 3.891 0 7.128.137 9.766.465 2.637.323 4.749.785 6.271 1.44 1.58.67 2.635 1.461 3.297 2.441.654.926.987 2.111.987 3.364v240.77h-.001zm-48.354-183.571c-6.932-8.775-13.594-15.441-19.985-20.053-6.398-4.68-13.063-6.997-19.994-6.997-6.329 0-11.733 1.587-16.352 4.756-4.553 3.16-8.246 7.388-11.019 12.66-2.774 5.274-4.818 11.147-6.201 17.672a101.145 101.145 0 00-1.984 19.996c0 7.193.602 14.24 1.718 21.17 1.194 6.863 3.04 12.994 5.737 18.268 2.646 5.282 6.141 9.508 10.496 12.734 4.416 3.241 9.963 4.818 16.619 4.818 3.367 0 6.604-.458 9.765-1.448 3.17-.929 6.399-2.507 9.697-4.683 3.236-2.25 6.664-5.083 10.091-8.641 3.494-3.504 7.325-7.85 11.413-13.072v-57.18z"
    }), /* @__PURE__ */ React100.createElement("path", {
      fill: "none",
      strokeWidth: 49.859,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M34.5 703.843h96.845l51.151-146.426 56.134 146.426h87.82l59.601-530.531 58.111 530.531h108.67l58.109-530.531 59.603 530.531h87.825l56.134-146.426 51.154 146.426H962.5"
    }));
  }
  var Multiplet_default = SvgMultiplet;

  // build/lib-react-tsx/nmr/Overlay.tsx
  var React101 = __toModule(require_react());
  function SvgOverlay3({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React101.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React101.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React101.createElement("path", {
      fill: "none",
      strokeWidth: 60.777,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M53.64 725.878h866.719"
    }), /* @__PURE__ */ React101.createElement("g", {
      fill: "none",
      strokeWidth: 60.777,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React101.createElement("path", {
      d: "M947.136 725.868l-97.782 74.059M849.354 651.824l97.782 74.044"
    })), /* @__PURE__ */ React101.createElement("path", {
      d: "M69.844 454.67c13.192 0 23.943-10.758 23.943-23.942 0-13.198-10.753-23.947-23.943-23.947-13.186 0-23.945 10.749-23.945 23.947 0 13.182 10.76 23.942 23.945 23.942zM286.296 454.67c13.193 0 23.945-10.758 23.945-23.942 0-13.198-10.751-23.947-23.945-23.947s-23.944 10.749-23.944 23.947c.001 13.182 10.751 23.942 23.944 23.942zM214.149 454.67c13.184 0 23.945-10.758 23.945-23.942 0-13.198-10.761-23.947-23.945-23.947-13.193 0-23.953 10.749-23.953 23.947 0 13.182 10.758 23.942 23.953 23.942zM141.999 454.67c13.187 0 23.945-10.758 23.945-23.942 0-13.198-10.758-23.947-23.945-23.947-13.193 0-23.943 10.749-23.943 23.947 0 13.182 10.75 23.942 23.943 23.942zM410.217 454.67c13.188 0 23.947-10.758 23.947-23.942 0-13.198-10.759-23.947-23.947-23.947-13.185 0-23.943 10.749-23.943 23.947 0 13.182 10.758 23.942 23.943 23.942zM626.66 454.67c13.193 0 23.943-10.758 23.943-23.942 0-13.198-10.75-23.947-23.943-23.947-13.186 0-23.945 10.749-23.945 23.947 0 13.182 10.761 23.942 23.945 23.942zM554.521 454.67c13.185 0 23.944-10.758 23.944-23.942 0-13.198-10.76-23.947-23.944-23.947-13.193 0-23.945 10.749-23.945 23.947-.001 13.182 10.751 23.942 23.945 23.942zM482.369 454.67c13.189 0 23.939-10.758 23.939-23.942 0-13.198-10.75-23.947-23.939-23.947-13.193 0-23.946 10.749-23.946 23.947-.002 13.182 10.752 23.942 23.946 23.942zM843.115 454.67c13.193 0 23.941-10.758 23.941-23.942 0-13.198-10.748-23.947-23.941-23.947-13.195 0-23.948 10.749-23.948 23.947 0 13.182 10.753 23.942 23.948 23.942zM770.964 454.67c13.189 0 23.944-10.758 23.944-23.942 0-13.198-10.757-23.947-23.944-23.947-13.185 0-23.944 10.749-23.944 23.947 0 13.182 10.76 23.942 23.944 23.942zM698.817 454.67c13.185 0 23.942-10.758 23.942-23.942 0-13.198-10.76-23.947-23.942-23.947-13.193 0-23.943 10.749-23.943 23.947 0 13.182 10.75 23.942 23.943 23.942zM347.174 99.073c13.195 0 23.945-10.751 23.945-23.945 0-13.183-10.75-23.945-23.945-23.945-13.182 0-23.942 10.762-23.942 23.945 0 13.193 10.76 23.945 23.942 23.945zM287.042 284.445c2.238-13.034 14.616-21.793 27.643-19.561 13.041 2.229 21.798 14.609 19.569 27.642-2.239 13.032-14.609 21.79-27.643 19.562-13.04-2.231-21.789-14.611-19.569-27.643zM274.875 355.559c2.23-13.034 14.609-21.793 27.643-19.562 13.03 2.238 21.79 14.61 19.56 27.643-2.24 13.042-14.609 21.79-27.643 19.56-13.038-2.229-21.789-14.608-19.56-27.641zM311.393 142.216c2.239-13.041 14.611-21.792 27.643-19.569 13.042 2.237 21.791 14.616 19.562 27.641-2.231 13.04-14.609 21.8-27.643 19.569-13.03-2.239-21.789-14.62-19.562-27.641zM299.221 213.33c2.238-13.033 14.606-21.801 27.642-19.561 13.039 2.231 21.79 14.601 19.569 27.643-2.238 13.03-14.617 21.787-27.649 19.56-13.035-2.231-21.795-14.61-19.562-27.642zM407.173 284.445c-2.238-13.034-14.618-21.793-27.639-19.561-13.042 2.229-21.801 14.609-19.572 27.642 2.239 13.032 14.609 21.79 27.643 19.562 13.041-2.231 21.791-14.611 19.568-27.643zM419.341 355.559c-2.23-13.034-14.609-21.793-27.642-19.562-13.031 2.238-21.792 14.61-19.561 27.643 2.238 13.042 14.609 21.79 27.642 19.56 13.041-2.229 21.794-14.608 19.561-27.641z"
    }), /* @__PURE__ */ React101.createElement("path", {
      d: "M382.821 142.216c-2.236-13.041-14.607-21.792-27.64-19.569-13.042 2.237-21.792 14.616-19.561 27.641 2.23 13.04 14.611 21.8 27.642 19.569 13.031-2.239 21.791-14.62 19.559-27.641zM394.999 213.33c-2.239-13.033-14.609-21.801-27.641-19.561-13.042 2.231-21.791 14.601-19.57 27.643 2.239 13.03 14.618 21.787 27.65 19.56 13.032-2.231 21.79-14.61 19.561-27.642z"
    }), /* @__PURE__ */ React101.createElement("path", {
      fill: "none",
      strokeWidth: 49.224,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M72.744 560.332h372.673l61.025-358.899 62.127 358.899h271.338"
    }));
  }
  var Overlay_default3 = SvgOverlay3;

  // build/lib-react-tsx/nmr/Overlay3Aligned.tsx
  var React102 = __toModule(require_react());
  function SvgOverlay3Aligned({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React102.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React102.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React102.createElement("path", {
      fill: "none",
      strokeWidth: 49.224,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "1,70",
      d: "M29.127 687.461H334.8l61.025-399.9 61.127 399.9H795.29"
    }), /* @__PURE__ */ React102.createElement("path", {
      fill: "none",
      strokeWidth: 49.224,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M204.063 686.396h371.673l61.024-399.898 63.127 399.898h271.339"
    }), /* @__PURE__ */ React102.createElement("path", {
      fill: "none",
      strokeWidth: 49.224,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "50,30",
      d: "M121.18 688.116c60.181 0 342.086.408 342.086.408l61.025-399.899 62.127 399.899H917.2"
    }));
  }
  var Overlay3Aligned_default = SvgOverlay3Aligned;

  // build/lib-react-tsx/nmr/Overlay3.tsx
  var React103 = __toModule(require_react());
  function SvgOverlay32({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React103.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React103.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React103.createElement("path", {
      fill: "none",
      strokeWidth: 49.224,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "1,70",
      d: "M29.127 465.651H334.8l61.025-399.899 61.127 399.899H795.29"
    }), /* @__PURE__ */ React103.createElement("path", {
      fill: "none",
      strokeWidth: 49.224,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M204.063 911.396h371.673l61.025-399.898 63.127 399.898h271.338"
    }), /* @__PURE__ */ React103.createElement("path", {
      fill: "none",
      strokeWidth: 49.224,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "50,30",
      d: "M121.18 688.116c60.181 0 342.087.408 342.087.408l61.025-399.899 62.127 399.899h330.782"
    }));
  }
  var Overlay3_default = SvgOverlay32;

  // build/lib-react-tsx/nmr/PeakPicking.tsx
  var React104 = __toModule(require_react());
  function SvgPeakPicking({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React104.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React104.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React104.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React104.createElement("path", {
      strokeWidth: 47.417,
      d: "M54.005 697.855H280.66l59.528-364.132 57.24 364.132h249.553L717.95 214.67l59.528 483.185h176.733"
    }), /* @__PURE__ */ React104.createElement("path", {
      strokeWidth: 41.819,
      d: "M337.901 171.258v80.862M715.664 47.484v80.86"
    }), /* @__PURE__ */ React104.createElement("path", {
      strokeWidth: 58.546,
      d: "M54.005 863.579h834.889"
    }), /* @__PURE__ */ React104.createElement("g", {
      strokeWidth: 58.546
    }, /* @__PURE__ */ React104.createElement("path", {
      d: "M914.688 863.572l-94.193 71.336M820.495 792.244l94.193 71.328"
    }))));
  }
  var PeakPicking_default = SvgPeakPicking;

  // build/lib-react-tsx/nmr/PeakPicking2.tsx
  var React105 = __toModule(require_react());
  function SvgPeakPicking2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React105.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React105.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React105.createElement("path", {
      fill: "none",
      strokeWidth: 39.653,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M43.556 943.061c64.942-.561 18.942-.561 145.707.133 118.237-1.694 85.253-402.71 94.11-480.694 13.218 120.809-19.692 457.958 120.678 480.692 32.647 5.286 156.088 7.401 191.512 0C734.876 914.378 696.282 608.309 709.5 487.5c8.724 77.984-17 429 113 457 87.151 1.308 27.312 0 129-1.439M244.5 106.5c79 59 397 144 425 190s26 82 26 82"
    }), /* @__PURE__ */ React105.createElement("path", {
      fill: "none",
      strokeWidth: 39.653,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M239.5 114.5c89 59 238.867 336.803 289.497 355.152 50.629 18.35 85.522 9.27 85.522 9.27"
    }));
  }
  var PeakPicking2_default = SvgPeakPicking2;

  // build/lib-react-tsx/nmr/Peaks.tsx
  var React106 = __toModule(require_react());
  function SvgPeaks({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React106.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React106.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React106.createElement("g", {
      strokeMiterlimit: 22.926,
      strokeLinejoin: "round",
      strokeLinecap: "round",
      fill: "none"
    }, /* @__PURE__ */ React106.createElement("path", {
      strokeWidth: 47.417,
      d: "M54.005 837.855H280.66l59.528-364.132 57.24 364.132h249.553L717.95 354.67l59.528 483.185h176.733"
    }), /* @__PURE__ */ React106.createElement("path", {
      strokeWidth: 41.819,
      d: "M337.901 251.258v80.862M715.664 127.484v80.86"
    })));
  }
  var Peaks_default = SvgPeaks;

  // build/lib-react-tsx/nmr/PhaseCorr.tsx
  var React107 = __toModule(require_react());
  function SvgPhaseCorr({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React107.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React107.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React107.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M23.903 784.146L176.5 781.5l34-26 15-96 51-629 41 751 18 185 24-113 17-54 28-13 65-3 504 1.447"
    }), /* @__PURE__ */ React107.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "25,25",
      d: "M534.5 345.5c80 1 126 12 182 54"
    }), /* @__PURE__ */ React107.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M667.5 102.5c106.948-3.868 176.044 18.818 258 82"
    }), /* @__PURE__ */ React107.createElement("path", {
      d: "M736.882 5.431l-30.309 94.326 37.043 91.894c-44.108-35.725-114.376-68.437-170.73-87.059 54.862-22.636 122.583-60.345 163.996-99.161z"
    }), /* @__PURE__ */ React107.createElement("path", {
      fill: "none",
      strokeWidth: 50,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "25,25",
      d: "M574.5 617.5L885 197"
    }), /* @__PURE__ */ React107.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M549.5 654.5v-609"
    }));
  }
  var PhaseCorr_default = SvgPhaseCorr;

  // build/lib-react-tsx/nmr/PhaseCorrection.tsx
  var React108 = __toModule(require_react());
  function SvgPhaseCorrection({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React108.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React108.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React108.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M23.903 784.146l153.596.09L225.5 712.5l52-683 37 737L339 970.348l63-186 134.26.599h223.575"
    }), /* @__PURE__ */ React108.createElement("circle", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      cx: 577.5,
      cy: 464.5,
      r: 194.5
    }), /* @__PURE__ */ React108.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M824.5 193.5c64 62 84 158 82 265"
    }), /* @__PURE__ */ React108.createElement("path", {
      d: "M904.291 576.736c-19.604-56.021-53.537-125.708-90.025-169.186l92.525 35.434 93.783-31.95c-38.088 42.082-74.609 110.452-96.283 165.702z"
    }), /* @__PURE__ */ React108.createElement("path", {
      fill: "none",
      strokeWidth: 50,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "25,25",
      d: "M575.5 478.5L809 245"
    }));
  }
  var PhaseCorrection_default = SvgPhaseCorrection;

  // build/lib-react-tsx/nmr/RangePicking.tsx
  var React109 = __toModule(require_react());
  function SvgRangePicking({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React109.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React109.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React109.createElement("path", {
      fill: "none",
      strokeWidth: 39.653,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M43.556 943.061c64.939-.561 128.939-.561 255.707.136C417.5 941.5 384.515 640.484 393.373 562.5c13.218 120.809-19.69 357.958 120.678 380.692 23.449.308 21.449-.692 41.512 0C694.876 914.378 656.282 682.309 669.5 561.5c8.724 77.984-17 355 113 383 87.151 1.308 57.312 0 159-1.439M67.5 24.5c79 59 397 144 425 190s26 82 26 82M62.5 32.5c89 59 238.867 336.803 289.497 355.152 50.629 18.35 85.521 9.27 85.521 9.27"
    }), /* @__PURE__ */ React109.createElement("path", {
      d: "M609.5 329.5l31-168c5.5-29 9-54.5 12-75.5H703l-5.5 42.5h1c22.5-32.5 53-48 85-48 38 0 55 24.5 57 50 22-33 52.5-49.5 86.5-50 33 0 59 21.5 59 65 0 10.5-2 28.5-4 41.5l-26.5 142.5H899l25-136c2-9.5 3.5-21 3.5-30.5 0-21-8.5-35-29.5-35-27 0-56.5 33.5-66 85l-21.5 116.5H754l26.5-138c1.5-10 3-19.5 3-28.5 0-18-5.5-35-29.5-35-27 0-58 37-67 86.5l-21 115h-56.5z"
    }), /* @__PURE__ */ React109.createElement("path", {
      fill: "none",
      strokeWidth: 39.653,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M267.5 635.5v-152h527v151"
    }));
  }
  var RangePicking_default = SvgRangePicking;

  // build/lib-react-tsx/nmr/RealImag.tsx
  var React110 = __toModule(require_react());
  function SvgRealImag({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React110.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React110.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React110.createElement("path", {
      fill: "none",
      strokeWidth: 39.653,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M38.5 28.5v934h933"
    }), /* @__PURE__ */ React110.createElement("text", {
      transform: "translate(467.5 896.5)",
      fontFamily: "'MyriadPro-Regular'",
      fontSize: 500
    }, "Re"), /* @__PURE__ */ React110.createElement("text", {
      transform: "translate(57.5 354.5)",
      fontFamily: "'MyriadPro-Regular'",
      fontSize: 500
    }, "Im"), /* @__PURE__ */ React110.createElement("path", {
      fill: "none",
      strokeWidth: 50,
      d: "M763.5 233.5c79 0 196 41 196 211"
    }), /* @__PURE__ */ React110.createElement("path", {
      d: "M595.297 237.352c85.194-31.611 190.897-85.547 256.406-142.646l-51.592 142.646 51.592 142.646c-65.508-57.1-171.211-111.052-256.406-142.646z"
    }), /* @__PURE__ */ React110.createElement("g", null, /* @__PURE__ */ React110.createElement("path", {
      fill: "none",
      strokeWidth: 50,
      d: "M309.5 729.5c-79 0-196-41-196-211"
    }), /* @__PURE__ */ React110.createElement("path", {
      d: "M475.703 728.647c-85.194 31.611-190.897 85.547-256.405 142.647l51.591-142.647-51.592-142.646c65.507 57.1 171.211 111.051 256.406 142.646z"
    })));
  }
  var RealImag_default = SvgRealImag;

  // build/lib-react-tsx/nmr/Reference.tsx
  var React111 = __toModule(require_react());
  function SvgReference({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React111.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React111.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React111.createElement("path", {
      fill: "none",
      strokeWidth: 47.417,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M54.005 897.855H280.66l59.528-364.132 57.24 364.132h249.553L717.95 414.67l59.528 483.185h176.733"
    }), /* @__PURE__ */ React111.createElement("path", {
      fill: "none",
      strokeWidth: 41.819,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M715.664 247.484v80.86"
    }), /* @__PURE__ */ React111.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 266.667,
      fontFamily: "sans-serif",
      stroke: "none"
    }, /* @__PURE__ */ React111.createElement("path", {
      d: "M29.136 55.701h154.818v35.807q-20.183 18.23-33.724 39.454-16.407 25.78-25.912 57.422-7.552 24.609-10.156 58.203H61.297q6.25-46.745 19.662-78.386 13.411-31.64 42.448-67.708H29.136zM211.558 193.462h56.64v53.125h-56.64zM450.62 246.587H291.507q2.734-23.568 16.536-44.271 13.933-20.834 52.084-49.089 23.307-17.318 29.817-26.302 6.51-8.984 6.51-17.057 0-8.724-6.51-14.844-6.38-6.25-16.145-6.25-10.157 0-16.667 6.38-6.38 6.38-8.594 22.526l-53.125-4.297q3.125-22.395 11.458-34.895 8.334-12.63 23.438-19.271 15.234-6.771 42.057-6.771 27.995 0 43.49 6.38 15.625 6.38 24.479 19.662 8.984 13.15 8.984 29.557 0 17.448-10.286 33.333-10.156 15.886-37.11 34.896-16.015 11.068-21.484 15.495-5.338 4.427-12.63 11.588h82.813zM474.449 55.701h154.818v35.807q-20.183 18.23-33.724 39.454-16.407 25.78-25.912 57.422-7.552 24.609-10.156 58.203H506.61q6.25-46.745 19.662-78.386 13.411-31.64 42.448-67.708h-94.271z"
    })));
  }
  var Reference_default = SvgReference;

  // build/lib-react-tsx/nmr/ResetScale.tsx
  var React112 = __toModule(require_react());
  function SvgResetScale({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React112.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React112.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React112.createElement("g", {
      "data-name": "Group 1"
    }, /* @__PURE__ */ React112.createElement("path", {
      "data-name": "Union 1",
      d: "M448.722 988.7l-285.93-242.377c-17.662-14.972-17.662-38.984 0-53.956 8.665-7.627 20-11.3 31.66-11.3a49.672 49.672 0 0131.658 11.3l209.282 177.4v-338.53h-398.4S.068 527.554.005 489.846s36.987-40.427 36.987-40.427h398.4V130.227l-209.281 177.4c-17.329 14.689-45.989 14.689-63.319 0-17.662-14.972-17.662-38.984 0-53.956l285.93-242.377c8.331-7.345 19.662-11.3 31.659-11.3a49.907 49.907 0 0131.659 11.3l285.93 242.382c17.662 14.972 17.662 38.984 0 53.956-8.665 7.627-20 11.3-31.659 11.3a49.674 49.674 0 01-31.659-11.3L525.37 130.227v319.191h441.847S1000 454.846 1000 489.845s-32.783 41.391-32.783 41.391H525.37v338.535l209.282-177.4c17.329-14.689 45.989-14.689 63.318 0 17.662 14.972 17.662 38.984 0 53.956L512.04 988.7c-8.331 7.344-19.662 11.3-31.659 11.3a49.914 49.914 0 01-31.659-11.3z"
    })));
  }
  var ResetScale_default = SvgResetScale;

  // build/lib-react-tsx/nmr/SameTop.tsx
  var React113 = __toModule(require_react());
  function SvgSameTop({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React113.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React113.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React113.createElement("g", {
      "data-name": "Group 1"
    }, /* @__PURE__ */ React113.createElement("path", {
      "data-name": "Path 1",
      d: "M967.216 0H36.987S-.063 2.979 0 44.3s36.987 45.35 36.987 45.35h930.229s32.783-7 32.783-45.352S967.216 0 967.216 0z"
    }), /* @__PURE__ */ React113.createElement("path", {
      "data-name": "Path 2",
      d: "M235.001 515.329l218.112-174.663v621.787c0 20.859 20.839 37.547 46.887 37.547s46.887-16.687 46.887-37.547V340.666l218.111 174.663c9.03 7.231 21.186 11.125 32.995 11.125 12.156 0 23.964-3.616 32.995-11.125 18.407-14.741 18.407-38.381 0-53.122L532.994 223.575c-8.683-6.953-20.839-11.125-32.995-11.125-12.5 0-24.312 3.894-32.995 11.125L169.012 462.207c-18.408 14.741-18.408 38.381 0 53.122 18.06 14.463 47.929 14.463 65.989 0z"
    })));
  }
  var SameTop_default = SvgSameTop;

  // build/lib-react-tsx/nmr/Search.tsx
  var React114 = __toModule(require_react());
  function SvgSearch({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React114.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React114.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React114.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React114.createElement("path", {
      strokeWidth: 46.91,
      d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251"
    }), /* @__PURE__ */ React114.createElement("path", {
      strokeWidth: 46.908,
      d: "M897.765 890.229l-235.87-315.79-82.569 61.672 235.871 315.791M815.197 951.902c12.543 16.792 36.556 20.275 53.355 7.72M868.553 959.624l21.484-16.054M890.037 943.57c16.795-12.541 20.277-36.542 7.728-53.342"
    }), /* @__PURE__ */ React114.createElement("path", {
      strokeWidth: 21.586,
      d: "M419.367 610.974c-144.301 0-262.007-117.703-262.007-262.009 0-144.317 117.706-262.011 262.007-262.011 144.314 0 262.009 117.694 262.009 262.011.001 144.306-117.693 262.009-262.009 262.009"
    }), /* @__PURE__ */ React114.createElement("path", {
      strokeWidth: 40.745,
      d: "M228.175 400.361h228.784l43.774-204.311 47.223 204.311h50.245"
    })));
  }
  var Search_default = SvgSearch;

  // build/lib-react-tsx/nmr/Searchq.tsx
  var React115 = __toModule(require_react());
  function SvgSearchq({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React115.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React115.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React115.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React115.createElement("path", {
      strokeWidth: 46.91,
      d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251"
    }), /* @__PURE__ */ React115.createElement("path", {
      strokeWidth: 46.908,
      d: "M897.764 890.229l-235.87-315.79-82.568 61.672 235.871 315.791M815.197 951.902c21.303 26.598 23.303 26.598 53.354 7.72M868.552 959.624l21.485-16.054M890.037 943.57c29.463-22.07 29.463-23.07 7.728-53.342"
    })), /* @__PURE__ */ React115.createElement("text", {
      transform: "translate(258.5 538.5)",
      fontFamily: "'Helvetica'",
      fontSize: 550
    }, "?"));
  }
  var Searchq_default = SvgSearchq;

  // build/lib-react-tsx/nmr/Signals.tsx
  var React116 = __toModule(require_react());
  function SvgSignals({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React116.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React116.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React116.createElement("path", {
      d: "M43.556 773.06c99 12.954 89.087-59.214 105.609-151.341 21.809 85.65 13.614 146.848 80.099 151.474 112.614 7.798 85.254-471.209 94.11-549.193 13.217 120.81-19.695 526.458 120.676 549.193 32.648 5.287 66.089 7.402 101.512 0C684.876 744.378 653.153 344.809 666.37 224c8.724 77.984-18.637 556.991 93.977 549.193 66.617-4.626 58.29-65.824 80.1-151.474 16.521 92.127 6.608 164.295 105.74 151.342",
      fill: "none",
      strokeWidth: 39.653,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Signals_default = SvgSignals;

  // build/lib-react-tsx/nmr/Simulator.tsx
  var React117 = __toModule(require_react());
  function SvgSimulator({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React117.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React117.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React117.createElement("path", {
      d: "M493.451 251.114c1.298 3.96 2.149 7.125 2.488 9.442.28 2.317-.12 4.07-1.359 5.203-1.19 1.185-3.337 1.869-6.446 2.149-3.11.28-7.346.449-12.775.449-5.596 0-10.006-.107-13.174-.281-3.109-.168-5.538-.506-7.178-.957-1.639-.512-2.828-1.189-3.509-2.095-.621-.906-1.188-2.036-1.64-3.505l-14.416-43.026h-80.506l-13.574 41.898c-.449 1.524-1.02 2.821-1.749 3.898-.681 1.017-1.87 1.862-3.45 2.49-1.581.562-3.9 1.014-6.789 1.238-2.937.231-6.785.34-11.527.34-5.096 0-9.055-.169-11.934-.51-2.879-.334-4.866-1.125-5.938-2.426-1.131-1.242-1.53-3.059-1.19-5.371.34-2.317 1.19-5.428 2.498-9.272L367.37 60.643c.68-1.865 1.41-3.396 2.317-4.578.909-1.133 2.32-2.038 4.24-2.658 1.918-.564 4.585-.962 8.026-1.133 3.389-.168 7.975-.28 13.575-.28 6.496 0 11.696.11 15.604.28 3.84.169 6.838.567 8.987 1.133 2.148.62 3.738 1.526 4.64 2.773.958 1.184 1.749 2.825 2.43 4.972l66.262 189.962h0zM395.02 93.944h-.168l-30.309 91.078h60.774L395.02 93.944h0zm313.173 109.115c0 7.636-1.021 14.528-3.109 20.697-2.142 6.217-5.03 11.7-8.699 16.448a55.787 55.787 0 01-13.291 12.21c-5.089 3.45-10.814 6.294-16.962 8.484-6.15 2.19-12.775 3.843-19.783 4.86-7.011 1.073-14.84 1.583-23.471 1.583h-56.927c-3.646 0-6.728-1.073-9.218-3.223-2.489-2.146-3.729-5.651-3.729-10.513V66.748c0-4.862 1.257-8.385 3.729-10.515 2.47-2.133 5.547-3.221 9.218-3.221h53.816c13.117 0 24.279 1.141 33.365 3.33 9.091 2.193 16.786 5.544 23.004 10.012 6.276 4.462 11.026 10.12 14.363 16.959 3.279 6.842 4.979 14.925 4.979 24.201 0 5.196-.679 10.064-2.039 14.642-1.299 4.581-3.219 8.765-5.767 12.497-2.548 3.783-5.649 7.067-9.386 9.947-3.671 2.883-7.91 5.202-12.668 6.955 6.109 1.132 11.705 3.056 16.854 5.823 5.085 2.776 9.615 6.274 13.401 10.686 3.789 4.354 6.831 9.44 9.038 15.32 2.21 5.826 3.282 12.383 3.282 19.675h0zm-56.309-90.234c0-4.354-.68-8.194-1.977-11.59a20.589 20.589 0 00-5.999-8.537c-2.599-2.261-5.93-4.013-10.006-5.258-4.009-1.187-9.412-1.807-16.105-1.807h-22.049v55.63h24.357c6.278 0 11.313-.736 15.036-2.206 3.798-1.467 6.905-3.561 9.395-6.108 2.479-2.597 4.298-5.65 5.538-9.155 1.192-3.448 1.81-7.124 1.81-10.969h0zm11.087 91.758c0-4.975-.798-9.437-2.499-13.34-1.63-3.957-4.058-7.237-7.228-9.895-3.218-2.601-7.295-4.694-12.272-6.103-4.978-1.414-11.452-2.151-19.385-2.151h-25.836v60.948h31.486c6.056 0 11.135-.623 15.322-1.926 4.119-1.242 7.688-3.11 10.745-5.592 3.041-2.491 5.419-5.602 7.118-9.275 1.699-3.729 2.549-7.918 2.549-12.666z"
    }), /* @__PURE__ */ React117.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M40.677 918.5h95.78l50.591-144.818L242.565 918.5h86.862l58.943-524.723L445.842 918.5h107.484l57.472-524.723 58.95 524.723h86.862l55.519-144.818L862.718 918.5H958.5"
    }));
  }
  var Simulator_default = SvgSimulator;

  // build/lib-react-tsx/nmr/Simulatormicro.tsx
  var React118 = __toModule(require_react());
  function SvgSimulatormicro({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React118.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React118.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React118.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M40.677 918.5h95.78l50.591-797.277L242.565 918.5h86.862l58.943-798 57.472 798h107.484l57.472-170 58.95 170h86.862l55.519-265 50.589 265H958.5"
    }), /* @__PURE__ */ React118.createElement("path", {
      fill: "none",
      strokeWidth: 75,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "40,40",
      d: "M558.5 126.5v288"
    }), /* @__PURE__ */ React118.createElement("path", {
      fill: "none",
      strokeWidth: 49.312,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M583 105h325v325H583z"
    }), /* @__PURE__ */ React118.createElement("path", {
      fill: "none",
      strokeWidth: 75,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "40,40",
      d: "M932.5 128.5v288M605.5 82.5h288M605.5 453.5h288"
    }), /* @__PURE__ */ React118.createElement("path", {
      d: "M700.17 262.665c0 15.469 1.531 25.862 4.593 31.179 3.062 5.318 8.565 7.977 16.517 7.977 12.674 0 23.147-8.835 31.42-26.506 8.271-17.67 12.408-40.147 12.408-67.435v-43.022h30.453v108.281c0 9.885 1.02 17.136 3.062 21.753 2.039 4.62 5.209 6.929 9.506 6.929 4.618 0 8.138-2.281 10.555-6.848 2.417-4.565 3.625-11.305 3.625-20.223v-4.512h6.93c.105.861.186 1.8.241 2.82.053 1.021.081 2.497.081 4.431 0 12.246-2.606 21.728-7.815 28.44-5.212 6.714-12.543 10.07-21.995 10.07-11.064 0-19.391-4.698-24.975-14.1-5.588-9.398-8.435-23.605-8.541-42.619-5.05 19.553-11.79 33.894-20.222 43.022-8.435 9.134-19.095 13.698-31.986 13.698-9.668 0-17.672-2.875-24.008-8.621-6.34-5.745-10.744-14.204-13.213-25.378-.217 2.042-.322 5.156-.322 9.346 0 13.857 3.517 29.352 10.554 46.487 7.034 17.133 10.554 27.256 10.554 30.373 0 4.295-1.236 7.679-3.705 10.151-2.473 2.47-5.856 3.706-10.152 3.706-5.05 0-8.676-1.8-10.876-5.398-2.203-3.6-3.304-9.481-3.304-17.644 0-1.934.215-8.298.645-19.095.429-10.795.645-20.6.645-29.406 0-7.948-.16-19.119-.482-33.516-.322-14.394-.484-24.814-.484-31.26v-80.889h30.293v97.809z"
    }));
  }
  var Simulatormicro_default = SvgSimulatormicro;

  // build/lib-react-tsx/nmr/Sum.tsx
  var React119 = __toModule(require_react());
  function SvgSum2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React119.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React119.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React119.createElement("path", {
      "data-name": "Path 1",
      d: "M713.547 237.766l84.27-.682V77.631s-5.122-24.916-20.866-40.995-42.111-23.322-42.111-23.322H115.788s-38.483 9.884-54.3 33.69-8.969 61.533-8.969 61.533l274.61 388.2a7.294 7.294 0 011.321 3.719 8.6 8.6 0 01-1.321 3.945L60.85 873.556s-17.841 40.987-5.111 69.46 56.026 44.435 56.026 44.435h694.089s30-5.73 46.746-21.809 20.254-42.505 20.254-42.505v-234.49h-91.555l2 194.646s.146 1.94-.87 2.829-3.194.729-3.194.729l-606.513-3.5s-1.678-.251-2-1.062.7-2.183.7-2.183l242.047-340.2s12.2-18.089 12.2-38.858-12.2-44.218-12.2-44.218L164.056 106.218a1.98 1.98 0 01.257-1.136 1.909 1.909 0 01.943-.47l540.54-2s3.231.076 5.083 1.861 2.327 5.276 2.327 5.276z"
    }));
  }
  var Sum_default2 = SvgSum2;

  // build/lib-react-tsx/nmr/Tools.tsx
  var React120 = __toModule(require_react());
  function SvgTools({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React120.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React120.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React120.createElement("path", {
      fill: "#FFF",
      strokeWidth: 50,
      d: "M188.491 960.059c-11.069 11.069-29.019 11.069-40.087 0L38.586 850.24c-11.07-11.071-11.072-29.019 0-40.087l297.208-287.211c11.07-11.07 29.019-11.071 40.089.001l109.818 109.819c11.07 11.07 11.07 29.017 0 40.087l-297.21 287.21z"
    }), /* @__PURE__ */ React120.createElement("path", {
      fill: "#FFF",
      strokeWidth: 80,
      d: "M930 71.47L94.203 907.271"
    }), /* @__PURE__ */ React120.createElement("path", {
      strokeWidth: 50,
      strokeLinecap: "square",
      d: "M815.25 131.774l58.031 58.032 57.136-53.741 36.77-62.791-37.336-37.334-59.396 32.243-57.135 61.66"
    }), /* @__PURE__ */ React120.createElement("path", {
      fill: "none",
      strokeWidth: 50,
      strokeLinecap: "round",
      d: "M280.166 28.167c93.974 0 170.155 76.181 170.155 170.155S374.14 368.477 280.166 368.477s-170.155-76.181-170.155-170.155"
    }), /* @__PURE__ */ React120.createElement("path", {
      fill: "none",
      strokeWidth: 50,
      strokeLinecap: "square",
      d: "M268.979 42.067l123.497 123.496-30.17 112.597-112.597 30.17-123.884-123.884"
    }), /* @__PURE__ */ React120.createElement("path", {
      fill: "none",
      strokeWidth: 50,
      strokeLinecap: "square",
      d: "M142.569 239.02l87.597 92.248 39.535 2.326 96.124-25.582 29.457-31.008 24.031-98.449-9.302-38.76-77.52-74.419"
    }), /* @__PURE__ */ React120.createElement("path", {
      fill: "#FFF",
      strokeWidth: 120,
      strokeLinecap: "round",
      d: "M384.131 301.333l555.892 555.892"
    }));
  }
  var Tools_default = SvgTools;

  // build/lib-react-tsx/nmr/Tree.tsx
  var React121 = __toModule(require_react());
  function SvgTree({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React121.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React121.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React121.createElement("path", {
      d: "M499.307 43.814a21.397 21.397 0 00-21.075 21.698V290.25l-193.664 84.127A21.397 21.397 0 00271.698 394v216.098l-145.464 85.23a21.397 21.397 0 00-10.578 18.46V944a21.397 21.397 0 1042.79 0V726.049l134.718-78.936 134.719 78.936V944a21.397 21.397 0 1042.79 0V713.787a21.397 21.397 0 00-10.58-18.459l-145.605-85.314v-201.98l185.14-80.425 185.14 80.424v202.059l-145.598 85.23a21.397 21.397 0 00-10.586 18.465V944a21.397 21.397 0 1042.789 0V726.055l134.785-78.903 134.653 78.897V944a21.397 21.397 0 1042.79 0V713.787a21.397 21.397 0 00-10.58-18.459L727.56 610.096V394a21.397 21.397 0 00-12.871-19.623L521.023 290.25V65.512a21.397 21.397 0 00-21.716-21.698z"
    }));
  }
  var Tree_default = SvgTree;

  // build/lib-react-tsx/nmr/ZeroFilling.tsx
  var React122 = __toModule(require_react());
  function SvgZeroFilling({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React122.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React122.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React122.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M27.989 24.288l24.468 939.363 52.128-677.659 29.787 456.383 44.681-297.873 23.404 202.128 38.298-108.511 26.596 42.339h698.936"
    }), /* @__PURE__ */ React122.createElement("path", {
      fill: "none",
      strokeWidth: 48.987,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      strokeDasharray: "50,50",
      d: "M293.947 55.51v886.864"
    }), /* @__PURE__ */ React122.createElement("path", {
      d: "M786.083 122.546c22.189 42.847 30.287 92.068 30.287 147.656 0 43.728-3.812 84.928-17.435 123.597-25.708 72.732-70.201 109.094-133.482 109.094-43.292 0-78.888-19.661-106.787-58.996-29.886-41.965-40.824-98.985-40.824-171.058 0-56.689 5.995-105.469 25.991-146.338 27.026-55.588 68.555-83.386 124.585-83.386 50.536 0 89.757 26.48 117.665 79.431zm-50.098 308.539c12.079-35.35 18.126-86.502 18.126-153.472 0-53.353-3.624-95.941-10.875-127.778-13.629-59.279-39.114-82.172-76.465-82.172-37.359 0-62.953 23.769-76.796 84.803-7.251 32.496-10.875 75.312-10.875 128.443 0 49.84 3.732 89.689 11.206 119.549 14.057 55.767 40.424 76.898 79.102 76.898 32.3 0 54.489-10.924 66.577-46.271z"
    }), /* @__PURE__ */ React122.createElement("path", {
      strokeWidth: 50,
      d: "M763.095 123.225l-180.85 307.447"
    }));
  }
  var ZeroFilling_default = SvgZeroFilling;

  // build/lib-react-tsx/periodic/Carbon.tsx
  var React123 = __toModule(require_react());
  function SvgCarbon({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React123.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React123.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React123.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React123.createElement("path", {
      d: "M105.938 31.182h788.88v935.636h-788.88z",
      fillOpacity: 0,
      strokeWidth: 40
    }), /* @__PURE__ */ React123.createElement("path", {
      d: "M659.806 520.928q0 8.463-.677 14.557-.339 5.755-1.354 10.156-1.016 4.063-2.709 7.11-1.692 3.047-5.416 7.11-3.724 3.723-14.557 9.817-10.495 6.094-26.068 11.849-15.235 5.417-35.209 9.14-19.635 3.724-42.656 3.724-45.026 0-81.25-13.88t-61.614-41.302q-25.391-27.76-38.933-69.062-13.541-41.302-13.541-96.146 0-55.86 14.896-99.193 14.895-43.333 41.64-72.786 26.745-29.453 63.985-44.688Q493.92 142.1 538.947 142.1q18.28 0 35.208 3.047 16.927 3.047 31.146 8.125 14.557 4.74 26.068 11.172 11.51 6.432 15.911 11.171 4.74 4.401 6.432 7.448 1.693 3.047 2.709 7.787 1.015 4.74 1.354 11.172.677 6.432.677 15.911 0 10.156-.677 17.266-.677 7.11-2.37 11.51-1.693 4.401-4.062 6.432-2.37 2.032-5.417 2.032-5.078 0-12.865-5.756-7.786-6.093-20.312-13.203-12.188-7.448-29.453-13.203-16.927-6.094-40.625-6.094-26.068 0-46.72 10.834-20.312 10.495-34.869 30.469-14.219 19.635-21.667 47.734-7.447 28.099-7.447 63.307 0 38.594 7.786 67.031 8.125 28.1 22.682 46.38 14.896 18.282 35.547 27.423 20.99 8.802 47.057 8.802 23.698 0 40.964-5.417 17.266-5.755 29.453-12.526 12.526-6.77 20.313-12.188 8.125-5.416 12.526-5.416 3.385 0 5.416 1.354 2.032 1.354 3.386 5.417 1.354 4.062 2.031 11.51.677 7.11.677 19.297z",
      fontWeight: 400,
      fontSize: 693.333,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React123.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React123.createElement("path", {
      d: "M340.94 834.496q0 3.1-.331 5.313-.332 2.103-.996 3.43-.554 1.218-1.329 1.772-.774.553-1.77.553H257.49q-.885 0-1.66-.553-.775-.554-1.439-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.221-5.312.332-2.214.886-3.542.664-1.328 1.438-1.881.775-.664 1.771-.664h26.673v-93.19l-23.02 12.727q-2.546 1.218-4.206 1.55-1.55.221-2.546-.664-.885-.996-1.217-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.111-1.77.554-2.988.443-1.218 1.217-1.992.775-.775 2.103-1.66l30.768-19.922q.554-.443 1.328-.664.886-.332 2.214-.443 1.328-.221 3.431-.221 2.214-.111 5.645-.111 4.205 0 6.75.221 2.657.11 3.985.554 1.328.332 1.771.996.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.663 1.328.885 3.542.332 2.103.332 5.312zM457.373 833.722q0 3.21-.332 5.534-.221 2.213-.775 3.652-.553 1.439-1.439 2.103-.885.553-1.992.553h-82.343q-2.435 0-4.206-.443-1.771-.442-2.878-1.66-1.107-1.328-1.66-3.763-.443-2.435-.443-6.308 0-3.653.332-6.198.332-2.657 1.218-4.649.885-2.103 2.213-3.984 1.44-1.992 3.653-4.317l24.791-26.562q7.416-7.747 11.953-14.056 4.538-6.42 7.084-11.621 2.545-5.313 3.43-9.74.997-4.427.997-8.411 0-3.652-1.218-6.862-1.106-3.32-3.43-5.755-2.214-2.435-5.645-3.763-3.431-1.44-8.08-1.44-6.53 0-11.62 1.661-4.981 1.66-8.855 3.763-3.763 1.992-6.308 3.763-2.546 1.66-3.985 1.66-.996 0-1.77-.664-.665-.664-1.107-2.213-.443-1.55-.775-4.095-.221-2.657-.221-6.42 0-2.545.11-4.205.222-1.771.554-2.989.332-1.328.885-2.213.553-.996 1.882-2.324 1.438-1.329 5.09-3.32 3.764-2.104 9.187-3.985 5.423-1.992 11.953-3.32 6.53-1.329 13.613-1.329 11.179 0 19.48 2.878 8.41 2.767 13.945 7.858 5.534 4.98 8.19 11.953 2.767 6.862 2.767 14.83 0 6.974-1.328 13.725-1.328 6.751-5.534 14.61-4.206 7.747-11.843 17.265-7.636 9.407-20.254 21.914l-16.712 17.155h56.446q1.106 0 1.992.664.996.664 1.66 2.103.664 1.328.996 3.652.332 2.214.332 5.313zM513.376 829.627q0 10.293-3.653 13.834-3.541 3.542-12.838 3.542-9.297 0-12.839-3.431-3.541-3.542-3.541-13.281 0-10.404 3.541-13.946 3.653-3.541 13.06-3.541 9.186 0 12.728 3.541 3.542 3.431 3.542 13.282zM636.006 773.403q0 17.155-2.767 30.99-2.767 13.834-9.076 23.573-6.198 9.74-16.27 14.942-9.96 5.202-24.459 5.202-14.72 0-24.349-4.98-9.629-5.092-15.273-14.5-5.645-9.518-7.969-23.131-2.213-13.724-2.213-30.99 0-17.044 2.766-30.878 2.878-13.946 9.076-23.685 6.309-9.74 16.27-14.942 10.071-5.202 24.46-5.202 14.72 0 24.348 5.092 9.74 4.98 15.384 14.498 5.645 9.408 7.858 23.132 2.214 13.613 2.214 30.879zm-29.33 1.438q0-10.182-.553-17.93-.553-7.857-1.77-13.613-1.108-5.755-2.878-9.74-1.66-3.983-4.095-6.308-2.435-2.435-5.534-3.43-3.1-.997-6.862-.997-6.53 0-10.847 3.21-4.205 3.099-6.751 9.407-2.435 6.309-3.431 15.717-.996 9.407-.996 21.914 0 15.273 1.217 25.345 1.218 9.96 3.763 15.937 2.657 5.866 6.752 8.301 4.095 2.324 9.85 2.324 4.316 0 7.637-1.328 3.32-1.439 5.755-4.206 2.545-2.767 4.206-6.972 1.66-4.206 2.656-9.74 1.107-5.534 1.439-12.506.442-6.973.442-15.385zM746.904 834.496q0 3.1-.332 5.313-.332 2.103-.996 3.43-.553 1.218-1.328 1.772-.775.553-1.77.553h-79.024q-.886 0-1.66-.553-.775-.554-1.44-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.222-5.312.332-2.214.885-3.542.664-1.328 1.439-1.881.775-.664 1.77-.664h26.674v-93.19l-23.02 12.727q-2.546 1.218-4.207 1.55-1.55.221-2.545-.664-.886-.996-1.218-3.32-.332-2.325-.332-6.53 0-2.657.111-4.317.11-1.77.553-2.988.443-1.218 1.218-1.992.775-.775 2.103-1.66l30.768-19.922q.553-.443 1.328-.664.885-.332 2.214-.443 1.328-.221 3.43-.221 2.214-.111 5.645-.111 4.206 0 6.751.221 2.657.11 3.985.554 1.328.332 1.77.996.443.664.443 1.66v118.314h23.353q.996 0 1.771.664.885.553 1.439 1.881.664 1.328.885 3.542.332 2.103.332 5.312z"
    })));
  }
  var Carbon_default = SvgCarbon;

  // build/lib-react-tsx/periodic/Electronegativity.tsx
  var React124 = __toModule(require_react());
  function SvgElectronegativity({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React124.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React124.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React124.createElement("path", {
      d: "M499.9 100h150v50h-150z",
      fillOpacity: 0
    }), /* @__PURE__ */ React124.createElement("path", {
      d: "M103.838 31.182h788.88v935.636h-788.88z",
      fillOpacity: 0,
      strokeWidth: 40
    }), /* @__PURE__ */ React124.createElement("path", {
      d: "M621.877 388.387q0 10.156-1.015 17.266-.678 6.77-2.709 10.833-1.693 4.062-4.062 6.094-2.37 2.031-5.417 2.031H465.471v117.812h134.4q3.048 0 5.418 1.693t4.062 5.755q2.031 4.063 2.708 10.834 1.016 6.77 1.016 16.927 0 10.156-1.016 16.927-.677 6.77-2.708 11.172-1.693 4.4-4.062 6.432-2.37 1.693-5.417 1.693H465.47v163.177q0 3.724-2.031 6.432-2.032 2.708-7.448 4.74-5.078 1.692-13.542 2.708-8.463 1.016-21.667 1.016-12.864 0-21.666-1.016-8.464-1.016-13.542-2.708-5.078-2.032-7.448-4.74-2.031-2.708-2.031-6.432v-397.11q0-14.895 7.448-21.328 7.786-6.77 18.958-6.77h206.172q3.047 0 5.417 2.03 2.37 1.693 4.062 6.095 2.031 4.062 2.709 11.171 1.015 7.11 1.015 17.266z",
      fontWeight: 400,
      fontSize: 693.333,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React124.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React124.createElement("path", {
      d: "M657.365 223.315q0 5.645-1.217 8.633-1.107 2.878-3.1 2.878h-12.727v25.898q0 1.107-.664 1.992-.664.775-2.324 1.328-1.66.554-4.317.775-2.656.332-6.862.332-3.984 0-6.751-.332-2.656-.221-4.316-.775-1.55-.553-2.214-1.328-.553-.885-.553-1.992v-25.898h-54.786q-1.549 0-2.766-.332-1.218-.443-2.103-1.771-.775-1.439-1.218-3.985-.332-2.656-.332-6.972 0-3.542.11-6.087.222-2.657.554-4.76.443-2.102 1.107-3.984.775-1.881 1.882-3.984l44.492-78.47q.553-.996 1.881-1.66 1.328-.775 3.653-1.218 2.434-.553 6.087-.775 3.652-.221 8.854-.221 5.644 0 9.629.332 3.984.221 6.308.885 2.435.554 3.542 1.44 1.107.885 1.107 2.102v86.218h12.728q1.77 0 2.988 2.766 1.328 2.657 1.328 8.965zm-45.045-77.584h-.222l-37.74 65.853h37.962zM708.94 248.55q0 10.293-3.652 13.834-3.541 3.542-12.838 3.542-9.297 0-12.839-3.431-3.541-3.542-3.541-13.281 0-10.404 3.541-13.946 3.653-3.541 13.06-3.541 9.186 0 12.728 3.541 3.542 3.431 3.542 13.282zM831.57 192.326q0 17.155-2.766 30.99-2.767 13.834-9.076 23.574-6.197 9.74-16.27 14.94-9.96 5.203-24.459 5.203-14.72 0-24.349-4.98-9.629-5.092-15.273-14.5-5.645-9.518-7.969-23.13-2.213-13.725-2.213-30.99 0-17.045 2.767-30.88 2.877-13.945 9.075-23.684 6.309-9.74 16.27-14.942 10.071-5.202 24.46-5.202 14.72 0 24.348 5.092 9.74 4.98 15.384 14.498 5.645 9.408 7.858 23.132 2.214 13.613 2.214 30.879zm-29.329 1.439q0-10.183-.553-17.93-.553-7.858-1.77-13.613-1.108-5.756-2.878-9.74-1.66-3.984-4.095-6.309-2.435-2.435-5.534-3.43-3.1-.997-6.862-.997-6.53 0-10.847 3.21-4.205 3.099-6.75 9.407-2.436 6.31-3.432 15.717t-.996 21.914q0 15.273 1.217 25.345 1.218 9.96 3.763 15.937 2.657 5.866 6.752 8.301 4.095 2.324 9.85 2.324 4.316 0 7.637-1.328 3.32-1.439 5.755-4.206 2.546-2.767 4.206-6.972 1.66-4.206 2.656-9.74 1.107-5.534 1.439-12.506.442-6.973.442-15.384z"
    })));
  }
  var Electronegativity_default = SvgElectronegativity;

  // build/lib-react-tsx/periodic/ElectronicBoron.tsx
  var React125 = __toModule(require_react());
  function SvgElectronicBoron({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React125.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React125.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React125.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React125.createElement("path", {
      d: "M105.12 32.364H894V968H105.12z",
      fillOpacity: 0,
      strokeWidth: 40
    }), /* @__PURE__ */ React125.createElement("path", {
      d: "M704.18 503.873q0 26.953-7.422 48.828-7.422 21.875-20.703 38.672-12.89 16.797-31.25 28.906-17.969 12.11-39.844 19.922-21.875 7.812-46.875 11.719-24.61 3.515-55.078 3.515H368.633q-12.89 0-21.875-7.422-8.594-7.812-8.594-25V182.388q0-17.187 8.594-24.61 8.984-7.812 21.875-7.812h126.953q46.484 0 78.516 7.813 32.421 7.812 54.296 23.828 22.266 15.625 33.985 39.844 11.719 24.219 11.719 57.031 0 18.36-4.688 34.766-4.687 16.015-13.672 29.297-8.984 13.28-22.265 23.437-12.891 10.156-29.688 16.406 21.484 3.907 39.453 13.672 18.36 9.766 31.64 25.39 13.673 15.235 21.485 35.938 7.813 20.703 7.813 46.485zM571.367 290.982q0-15.234-4.687-27.344-4.688-12.11-14.063-19.922-9.375-8.203-23.828-12.5-14.062-4.296-37.89-4.296h-51.954v131.25h57.422q22.266 0 35.547-5.079 13.281-5.468 21.875-14.453 8.984-9.375 13.281-21.484 4.297-12.5 4.297-26.172zm26.172 216.406q0-17.578-5.86-31.25-5.859-14.062-17.187-23.437-11.328-9.375-28.906-14.453-17.578-5.078-45.703-5.078h-60.938v143.75h74.22q21.483 0 35.937-4.297 14.843-4.688 25.39-13.282 10.938-8.984 16.797-21.875 6.25-13.28 6.25-30.078z",
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React125.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React125.createElement("path", {
      d: "M215.604 838.839q0 2.005-.215 3.437-.215 1.36-.644 2.22-.358.788-.86 1.146-.5.358-1.145.358h-51.133q-.573 0-1.074-.358-.502-.358-.931-1.146-.359-.86-.573-2.22-.215-1.432-.215-3.437 0-2.077.143-3.438.215-1.432.573-2.292.43-.859.93-1.217.502-.43 1.147-.43h17.259v-60.3l-14.896 8.236q-1.647.788-2.721 1.003-1.003.143-1.647-.43-.573-.644-.788-2.148-.215-1.504-.215-4.225 0-1.72.072-2.793.071-1.146.358-1.934.286-.788.787-1.289.502-.501 1.361-1.074l19.909-12.89q.358-.287.86-.43.572-.215 1.432-.287.859-.143 2.22-.143 1.432-.072 3.652-.072 2.721 0 4.368.143 1.72.072 2.579.359.859.214 1.145.644.287.43.287 1.074v76.556h15.11q.645 0 1.146.43.573.358.931 1.217.43.86.573 2.292.215 1.36.215 3.438zM276.477 825.518q0 5.443-2.077 9.597-2.005 4.153-5.73 6.946-3.723 2.793-8.808 4.154-5.085 1.432-11.029 1.432-3.58 0-6.875-.573-3.222-.501-5.8-1.289-2.579-.86-4.297-1.719-1.72-.859-2.507-1.575-.788-.788-1.217-2.363-.43-1.648-.43-4.799 0-2.076.143-3.294.143-1.289.43-2.005.286-.788.716-1.003.43-.286 1.074-.286.788 0 2.292.93 1.576.86 3.867 1.934 2.292 1.075 5.3 2.006 3.08.93 6.946.93 2.435 0 4.297-.5 1.934-.502 3.294-1.433 1.433-.93 2.149-2.363.716-1.432.716-3.294 0-2.149-1.36-3.653-1.29-1.575-3.51-2.721-2.148-1.146-4.941-2.149-2.722-1.002-5.658-2.22-2.864-1.217-5.657-2.793-2.722-1.575-4.942-3.867-2.148-2.291-3.509-5.514-1.289-3.223-1.289-7.735 0-4.583 1.79-8.378 1.79-3.868 5.157-6.589 3.366-2.721 8.164-4.225 4.87-1.504 10.885-1.504 3.008 0 5.801.43 2.865.43 5.156 1.074 2.292.644 3.867 1.432 1.576.716 2.22 1.29.717.5 1.003 1.073.287.502.43 1.29.143.716.215 1.861.143 1.075.143 2.722 0 1.933-.143 3.15-.072 1.218-.358 1.934-.215.717-.645 1.003-.43.215-1.003.215-.644 0-2.005-.716-1.36-.788-3.437-1.647-2.006-.86-4.727-1.576-2.65-.788-6.087-.788-2.435 0-4.225.502-1.79.5-2.937 1.432-1.145.93-1.718 2.22-.573 1.217-.573 2.65 0 2.22 1.36 3.724 1.361 1.504 3.581 2.65 2.22 1.145 5.013 2.148 2.865 1.002 5.73 2.22 2.936 1.146 5.729 2.721 2.864 1.576 5.084 3.867 2.22 2.292 3.58 5.515 1.362 3.15 1.362 7.52zM349.38 779.67q0 2.077-.215 3.581-.143 1.433-.5 2.364-.359.93-.932 1.36-.573.358-1.289.358h-53.281q-1.576 0-2.722-.286-1.145-.287-1.862-1.074-.716-.86-1.074-2.435-.286-1.576-.286-4.082 0-2.364.215-4.01.214-1.72.787-3.008.573-1.361 1.433-2.579.93-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.936-4.154 4.583-7.52 1.647-3.437 2.22-6.302.645-2.864.645-5.442 0-2.364-.788-4.44-.716-2.149-2.22-3.725-1.432-1.575-3.652-2.434-2.22-.931-5.228-.931-4.225 0-7.52 1.074-3.222 1.074-5.729 2.435-2.435 1.289-4.082 2.435-1.647 1.074-2.578 1.074-.645 0-1.146-.43-.43-.43-.716-1.432-.286-1.003-.501-2.65-.143-1.719-.143-4.154 0-1.647.071-2.72.143-1.147.358-1.934.215-.86.573-1.433.358-.644 1.218-1.504.93-.86 3.294-2.148 2.435-1.36 5.944-2.578 3.509-1.29 7.734-2.149 4.225-.86 8.809-.86 7.233 0 12.604 1.863 5.443 1.79 9.023 5.085 3.581 3.222 5.3 7.734 1.79 4.44 1.79 9.596 0 4.512-.86 8.88-.859 4.369-3.58 9.454-2.721 5.013-7.663 11.171-4.941 6.088-13.105 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.644 2.364.215 1.432.215 3.438zM457.089 838.337q0 2.077-.215 3.581-.144 1.432-.502 2.363t-.93 1.36q-.573.359-1.29.359h-53.28q-1.576 0-2.722-.286-1.146-.287-1.862-1.075-.716-.86-1.074-2.435-.287-1.575-.287-4.082 0-2.363.215-4.01.215-1.719.788-3.008.573-1.36 1.432-2.578.931-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.937-4.154 4.584-7.52 1.647-3.438 2.22-6.302.644-2.865.644-5.443 0-2.363-.788-4.44-.716-2.148-2.22-3.724-1.432-1.575-3.652-2.435-2.22-.93-5.228-.93-4.225 0-7.52 1.073-3.222 1.075-5.728 2.435-2.435 1.29-4.083 2.435-1.647 1.074-2.578 1.074-.644 0-1.145-.43-.43-.429-.717-1.432-.286-1.002-.5-2.65-.144-1.718-.144-4.153 0-1.647.071-2.721.144-1.146.359-1.934.214-.86.572-1.432.359-.645 1.218-1.504.93-.86 3.294-2.148 2.435-1.361 5.944-2.579 3.51-1.289 7.735-2.148 4.225-.86 8.808-.86 7.233 0 12.604 1.863 5.443 1.79 9.024 5.084 3.58 3.223 5.3 7.735 1.79 4.44 1.79 9.596 0 4.512-.86 8.88-.86 4.369-3.58 9.453-2.722 5.013-7.663 11.172-4.942 6.087-13.106 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.645 2.364.215 1.432.215 3.437zM517.102 825.518q0 5.443-2.077 9.597-2.005 4.153-5.73 6.946-3.723 2.793-8.808 4.154-5.085 1.432-11.029 1.432-3.58 0-6.875-.573-3.222-.501-5.8-1.289-2.579-.86-4.297-1.719-1.719-.859-2.507-1.575-.788-.788-1.217-2.363-.43-1.648-.43-4.799 0-2.076.143-3.294.144-1.289.43-2.005.286-.788.716-1.003.43-.286 1.074-.286.788 0 2.292.93 1.576.86 3.867 1.934 2.292 1.075 5.3 2.006 3.08.93 6.946.93 2.435 0 4.297-.5 1.934-.502 3.294-1.433 1.433-.93 2.149-2.363.716-1.432.716-3.294 0-2.149-1.36-3.653-1.29-1.575-3.51-2.721-2.148-1.146-4.941-2.149-2.722-1.002-5.658-2.22-2.864-1.217-5.657-2.793-2.722-1.575-4.942-3.867-2.148-2.291-3.509-5.514-1.289-3.223-1.289-7.735 0-4.583 1.79-8.378 1.79-3.868 5.157-6.589 3.366-2.721 8.164-4.225 4.87-1.504 10.885-1.504 3.008 0 5.801.43 2.865.43 5.156 1.074 2.292.644 3.867 1.432 1.576.716 2.22 1.29.717.5 1.003 1.073.287.502.43 1.29.143.716.215 1.861.143 1.075.143 2.722 0 1.933-.143 3.15-.072 1.218-.358 1.934-.215.717-.645 1.003-.43.215-1.003.215-.644 0-2.005-.716-1.36-.788-3.437-1.647-2.006-.86-4.727-1.576-2.65-.788-6.087-.788-2.435 0-4.225.502-1.79.5-2.937 1.432-1.145.93-1.718 2.22-.573 1.217-.573 2.65 0 2.22 1.36 3.724 1.361 1.504 3.581 2.65 2.22 1.145 5.013 2.148 2.865 1.002 5.73 2.22 2.936 1.146 5.729 2.721 2.864 1.576 5.084 3.867 2.22 2.292 3.58 5.515 1.362 3.15 1.362 7.52zM590.005 779.67q0 2.077-.215 3.581-.143 1.433-.5 2.364-.359.93-.932 1.36-.573.358-1.289.358h-53.281q-1.576 0-2.722-.286-1.145-.287-1.862-1.074-.716-.86-1.074-2.435-.286-1.576-.286-4.082 0-2.364.215-4.01.214-1.72.787-3.008.573-1.361 1.433-2.579.93-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.936-4.154 4.583-7.52 1.647-3.437 2.22-6.302.645-2.864.645-5.442 0-2.364-.788-4.44-.716-2.149-2.22-3.725-1.432-1.575-3.652-2.434-2.22-.931-5.228-.931-4.225 0-7.52 1.074-3.222 1.074-5.729 2.435-2.435 1.289-4.082 2.435-1.647 1.074-2.578 1.074-.644 0-1.146-.43-.43-.43-.716-1.432-.286-1.003-.501-2.65-.143-1.719-.143-4.154 0-1.647.071-2.72.143-1.147.358-1.934.215-.86.573-1.433.358-.644 1.218-1.504.93-.86 3.294-2.148 2.435-1.36 5.944-2.578 3.509-1.29 7.734-2.149 4.225-.86 8.809-.86 7.233 0 12.604 1.863 5.443 1.79 9.023 5.085 3.581 3.222 5.3 7.734 1.79 4.44 1.79 9.596 0 4.512-.86 8.88-.859 4.369-3.58 9.454-2.721 5.013-7.663 11.171-4.941 6.088-13.105 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.644 2.364.215 1.432.215 3.438zM697.714 838.337q0 2.077-.215 3.581-.144 1.432-.502 2.363t-.93 1.36q-.573.359-1.29.359h-53.28q-1.576 0-2.722-.286-1.146-.287-1.862-1.075-.716-.86-1.074-2.435-.287-1.575-.287-4.082 0-2.363.215-4.01.215-1.719.788-3.008.573-1.36 1.432-2.578.931-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.937-4.154 4.584-7.52 1.647-3.438 2.22-6.302.644-2.865.644-5.443 0-2.363-.788-4.44-.716-2.148-2.22-3.724-1.432-1.575-3.652-2.435-2.22-.93-5.228-.93-4.225 0-7.52 1.073-3.222 1.075-5.728 2.435-2.435 1.29-4.082 2.435-1.648 1.074-2.579 1.074-.644 0-1.145-.43-.43-.429-.717-1.432-.286-1.002-.5-2.65-.144-1.718-.144-4.153 0-1.647.071-2.721.144-1.146.359-1.934.214-.86.572-1.432.359-.645 1.218-1.504.93-.86 3.294-2.148 2.435-1.361 5.944-2.579 3.51-1.289 7.735-2.148 4.225-.86 8.808-.86 7.233 0 12.604 1.863 5.443 1.79 9.024 5.084 3.58 3.223 5.3 7.735 1.79 4.44 1.79 9.596 0 4.512-.86 8.88-.86 4.369-3.58 9.453-2.722 5.013-7.663 11.172-4.942 6.087-13.106 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.645 2.364.215 1.432.215 3.437zM777.063 810.694q0 8.522-1.862 15.397-1.79 6.804-5.3 11.602t-8.737 7.376q-5.228 2.578-11.96 2.578-2.793 0-5.156-.573-2.291-.501-4.512-1.575-2.148-1.146-4.296-2.793-2.149-1.647-4.44-3.867v30.078q0 .716-.43 1.289t-1.504.93q-1.003.43-2.721.645-1.72.215-4.369.215-2.65 0-4.368-.215-1.72-.215-2.793-.644-1.003-.358-1.433-.931-.43-.573-.43-1.29v-89.231q0-.716.359-1.218.358-.572 1.217-.93.931-.359 2.363-.502 1.504-.215 3.724-.215 2.149 0 3.581.215 1.504.143 2.363.501.931.359 1.29.931.358.502.358 1.218v7.52q2.793-2.865 5.442-5.014 2.722-2.22 5.515-3.652 2.793-1.504 5.729-2.22 3.008-.716 6.373-.716 7.019 0 11.96 2.793 4.941 2.721 8.02 7.52 3.152 4.798 4.584 11.171 1.433 6.374 1.433 13.607zm-18.764 1.29q0-4.083-.644-7.807-.573-3.795-2.077-6.732-1.432-2.936-3.867-4.655-2.363-1.79-5.944-1.79-1.79 0-3.58.573-1.72.501-3.582 1.719-1.79 1.217-3.723 3.15-1.934 1.934-4.083 4.799v21.055q3.796 4.798 7.234 7.447 3.437 2.579 7.161 2.579 3.51 0 5.944-1.79 2.507-1.791 4.082-4.656 1.576-2.936 2.292-6.588.787-3.653.787-7.305zM850.11 780.172q0 2.005-.215 3.437-.215 1.361-.645 2.22-.358.788-.86 1.146-.5.358-1.145.358h-51.133q-.573 0-1.074-.358-.501-.358-.931-1.146-.358-.859-.573-2.22-.215-1.432-.215-3.437 0-2.077.143-3.438.215-1.432.573-2.291.43-.86.931-1.218.501-.43 1.146-.43h17.26v-60.299l-14.897 8.236q-1.647.788-2.721 1.002-1.003.144-1.647-.43-.573-.644-.788-2.148-.215-1.504-.215-4.225 0-1.719.072-2.793.071-1.146.358-1.934.286-.787.788-1.289.501-.5 1.36-1.074l19.91-12.89q.357-.287.859-.43.572-.215 1.432-.287.86-.143 2.22-.143 1.432-.071 3.652-.071 2.722 0 4.369.143 1.718.071 2.578.358.86.215 1.146.644.286.43.286 1.075v76.556h15.11q.645 0 1.147.43.573.357.93 1.217.43.86.574 2.291.214 1.361.214 3.438z"
    })));
  }
  var ElectronicBoron_default = SvgElectronicBoron;

  // build/lib-react-tsx/periodic/ElectronicLithium.tsx
  var React126 = __toModule(require_react());
  function SvgElectronicLithium({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React126.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React126.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React126.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React126.createElement("path", {
      d: "M115.938 31.182h788.88v935.636h-788.88z",
      fillOpacity: 0,
      strokeWidth: 40
    }), /* @__PURE__ */ React126.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 700,
      fontSize: 693.333,
      fontFamily: "Calibri",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React126.createElement("path", {
      d: "M563.514 619.376q0 10.156-1.015 17.265-.677 6.771-2.37 11.51-1.693 4.402-4.401 6.433-2.37 2.031-5.755 2.031H349.218q-11.172 0-18.959-6.432-7.448-6.77-7.448-21.667V230.73q0-3.385 2.032-6.094 2.37-2.708 7.447-4.4 5.079-1.694 13.542-2.71 8.802-1.015 21.667-1.015 13.203 0 21.666 1.016 8.464 1.015 13.542 2.708 5.078 1.693 7.11 4.401 2.37 2.709 2.37 6.094v352.422h137.786q3.385 0 5.755 2.031 2.708 1.693 4.401 6.094 1.693 4.062 2.37 11.172 1.015 6.77 1.015 16.927zM696.9 645.105q0 3.385-2.031 6.094-2.032 2.37-7.11 4.062-4.74 1.693-12.864 2.37-8.125 1.016-20.651 1.016t-20.651-1.016q-8.125-.677-13.204-2.37-4.74-1.693-6.77-4.062-2.032-2.709-2.032-6.094V343.803q0-3.386 2.032-5.755 2.03-2.709 6.77-4.401 5.079-2.032 13.204-3.047 8.125-1.016 20.65-1.016 12.527 0 20.652 1.016 8.125 1.015 12.864 3.047 5.078 1.692 7.11 4.4 2.03 2.37 2.03 5.756v301.302zm6.432-404.219q0 25.73-10.495 35.547-10.494 9.818-38.932 9.818-28.776 0-38.932-9.48-9.818-9.479-9.818-34.192 0-25.73 10.156-35.547 10.495-10.156 39.271-10.156 28.438 0 38.594 9.818 10.156 9.479 10.156 34.192z",
      style: {
        lineHeight: 1.25
      }
    })), /* @__PURE__ */ React126.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React126.createElement("path", {
      d: "M326.94 891.163q0 3.099-.331 5.313-.332 2.102-.996 3.43-.554 1.218-1.329 1.771-.774.554-1.77.554H243.49q-.885 0-1.66-.554-.775-.553-1.439-1.77-.553-1.329-.885-3.431-.332-2.214-.332-5.313 0-3.21.221-5.312.332-2.214.886-3.542.664-1.328 1.438-1.882.775-.664 1.771-.664h26.673v-93.19l-23.02 12.728q-2.546 1.218-4.206 1.55-1.55.22-2.546-.664-.885-.997-1.217-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.111-1.771.554-2.988.443-1.218 1.217-1.993.775-.774 2.103-1.66l30.768-19.922q.554-.442 1.328-.664.886-.332 2.214-.442 1.328-.222 3.431-.222 2.214-.11 5.645-.11 4.205 0 6.75.22 2.657.112 3.985.554 1.328.332 1.771.996.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.554 1.44 1.882.663 1.328.885 3.542.332 2.102.332 5.312zM421.016 870.577q0 8.412-3.21 14.83-3.098 6.42-8.854 10.737-5.755 4.316-13.613 6.419-7.858 2.213-17.044 2.213-5.534 0-10.625-.885-4.98-.775-8.965-1.992-3.984-1.328-6.64-2.657-2.657-1.328-3.874-2.434-1.218-1.218-1.882-3.653-.664-2.545-.664-7.415 0-3.21.222-5.091.22-1.992.664-3.1.442-1.217 1.106-1.549.664-.442 1.66-.442 1.218 0 3.542 1.438 2.435 1.329 5.977 2.989 3.541 1.66 8.19 3.099 4.759 1.438 10.736 1.438 3.763 0 6.64-.774 2.988-.775 5.091-2.214 2.214-1.439 3.32-3.652 1.107-2.214 1.107-5.091 0-3.32-2.102-5.645-1.993-2.435-5.424-4.206-3.32-1.77-7.636-3.32-4.206-1.55-8.744-3.43-4.427-1.882-8.743-4.317-4.206-2.435-7.637-5.977-3.32-3.542-5.423-8.522-1.992-4.98-1.992-11.953 0-7.083 2.766-12.95 2.767-5.976 7.97-10.182 5.201-4.205 12.616-6.53 7.526-2.324 16.823-2.324 4.649 0 8.965.664 4.427.664 7.969 1.66 3.542.997 5.976 2.214 2.435 1.107 3.431 1.992 1.107.775 1.55 1.66.443.775.664 1.992.221 1.107.332 2.878.221 1.66.221 4.206 0 2.988-.221 4.87-.11 1.881-.553 2.988-.332 1.107-.996 1.55-.664.331-1.55.331-.996 0-3.099-1.106-2.103-1.218-5.312-2.546-3.1-1.328-7.305-2.435-4.095-1.217-9.408-1.217-3.763 0-6.53.774-2.766.775-4.537 2.214t-2.657 3.431q-.885 1.882-.885 4.095 0 3.431 2.103 5.755t5.534 4.095q3.43 1.771 7.747 3.32 4.427 1.55 8.854 3.432 4.538 1.77 8.854 4.205 4.428 2.435 7.859 5.977 3.43 3.542 5.533 8.522 2.103 4.87 2.103 11.621z",
      style: {
        lineHeight: 1.25
      },
      fontWeight: 700,
      fontSize: 226.667,
      fontFamily: "Calibri"
    }), /* @__PURE__ */ React126.createElement("path", {
      d: "M496.653 803.867q0 2.086-.216 3.597-.144 1.438-.503 2.374-.36.935-.936 1.366-.575.36-1.295.36H440.18q-1.583 0-2.734-.288-1.15-.287-1.87-1.079-.72-.863-1.08-2.446-.287-1.582-.287-4.1 0-2.374.216-4.029.216-1.727.791-3.021.576-1.367 1.439-2.59.935-1.295 2.374-2.806l16.115-17.266q4.82-5.035 7.77-9.136 2.949-4.172 4.603-7.554 1.655-3.453 2.23-6.33.648-2.878.648-5.468 0-2.374-.792-4.46-.719-2.158-2.23-3.741-1.438-1.583-3.669-2.446-2.23-.935-5.251-.935-4.245 0-7.554 1.079-3.237 1.079-5.755 2.446-2.446 1.295-4.1 2.446-1.655 1.079-2.59 1.079-.648 0-1.152-.432-.431-.431-.719-1.439-.288-1.007-.504-2.661-.143-1.727-.143-4.173 0-1.654.071-2.734.144-1.15.36-1.942.216-.863.576-1.439.36-.647 1.223-1.51.935-.864 3.309-2.159 2.446-1.367 5.97-2.59 3.526-1.294 7.77-2.158 4.245-.863 8.85-.863 7.265 0 12.66 1.87 5.468 1.799 9.065 5.108 3.597 3.237 5.324 7.77 1.798 4.46 1.798 9.64 0 4.532-.863 8.92-.864 4.389-3.597 9.496-2.734 5.036-7.698 11.223-4.964 6.115-13.165 14.244l-10.863 11.15h36.69q.719 0 1.295.432.647.432 1.079 1.367.431.864.647 2.374.216 1.44.216 3.454z",
      fontSize: "65%",
      baselineShift: "super"
    }), /* @__PURE__ */ React126.createElement("path", {
      d: "M608.503 890.388q0 3.21-.332 5.534-.221 2.214-.775 3.653-.553 1.438-1.438 2.102-.886.554-1.993.554h-82.343q-2.435 0-4.206-.443-1.77-.443-2.878-1.66-1.106-1.328-1.66-3.763-.442-2.435-.442-6.309 0-3.652.332-6.198.332-2.656 1.217-4.648.885-2.103 2.214-3.984 1.438-1.993 3.652-4.317l24.792-26.562q7.415-7.748 11.953-14.056 4.537-6.42 7.083-11.621 2.546-5.313 3.431-9.74.996-4.427.996-8.411 0-3.653-1.217-6.862-1.107-3.32-3.431-5.756-2.214-2.435-5.645-3.763-3.43-1.438-8.08-1.438-6.53 0-11.62 1.66-4.98 1.66-8.855 3.763-3.763 1.992-6.308 3.763-2.546 1.66-3.985 1.66-.996 0-1.77-.664-.664-.664-1.107-2.214-.443-1.55-.775-4.095-.221-2.656-.221-6.419 0-2.546.11-4.206.222-1.77.554-2.988.332-1.328.885-2.214.554-.996 1.882-2.324 1.439-1.328 5.09-3.32 3.764-2.103 9.187-3.985 5.423-1.992 11.953-3.32 6.53-1.328 13.614-1.328 11.178 0 19.479 2.878 8.411 2.767 13.945 7.858 5.534 4.98 8.19 11.953 2.767 6.862 2.767 14.83 0 6.973-1.328 13.725-1.328 6.75-5.534 14.609-4.206 7.747-11.842 17.266-7.637 9.407-20.254 21.914l-16.713 17.155h56.446q1.107 0 1.992.664.996.664 1.66 2.102.664 1.329.996 3.653.332 2.213.332 5.312zM701.25 870.577q0 8.412-3.209 14.83-3.099 6.42-8.854 10.737-5.755 4.316-13.613 6.419-7.859 2.213-17.045 2.213-5.534 0-10.625-.885-4.98-.775-8.965-1.992-3.984-1.328-6.64-2.657-2.656-1.328-3.874-2.434-1.217-1.218-1.881-3.653-.664-2.545-.664-7.415 0-3.21.22-5.091.222-1.992.665-3.1.443-1.217 1.107-1.549.664-.442 1.66-.442 1.217 0 3.542 1.438 2.434 1.329 5.976 2.989t8.19 3.099q4.76 1.438 10.736 1.438 3.763 0 6.64-.774 2.989-.775 5.092-2.214 2.213-1.439 3.32-3.652 1.107-2.214 1.107-5.091 0-3.32-2.103-5.645-1.992-2.435-5.423-4.206-3.32-1.77-7.637-3.32-4.206-1.55-8.743-3.43-4.428-1.882-8.744-4.317-4.206-2.435-7.637-5.977-3.32-3.542-5.423-8.522-1.992-4.98-1.992-11.953 0-7.083 2.767-12.95 2.767-5.976 7.969-10.182 5.201-4.205 12.617-6.53 7.526-2.324 16.823-2.324 4.648 0 8.965.664 4.427.664 7.968 1.66 3.542.997 5.977 2.214 2.435 1.107 3.43 1.992 1.108.775 1.55 1.66.443.775.664 1.992.222 1.107.332 2.878.222 1.66.222 4.206 0 2.988-.222 4.87-.11 1.881-.553 2.988-.332 1.107-.996 1.55-.664.331-1.55.331-.996 0-3.098-1.106-2.103-1.218-5.313-2.546-3.099-1.328-7.305-2.435-4.095-1.217-9.407-1.217-3.763 0-6.53.774-2.767.775-4.538 2.214-1.77 1.439-2.656 3.431-.886 1.882-.886 4.095 0 3.431 2.103 5.755t5.534 4.095q3.431 1.771 7.748 3.32 4.427 1.55 8.854 3.432 4.537 1.77 8.854 4.205 4.427 2.435 7.858 5.977 3.43 3.542 5.534 8.522 2.103 4.87 2.103 11.621z",
      style: {
        lineHeight: 1.25
      },
      fontWeight: 700,
      fontSize: 226.667,
      fontFamily: "Calibri"
    }), /* @__PURE__ */ React126.createElement("path", {
      d: "M776.024 804.37q0 2.014-.216 3.453-.216 1.367-.647 2.23-.36.792-.863 1.151-.504.36-1.152.36h-51.365q-.575 0-1.079-.36-.503-.36-.935-1.15-.36-.864-.576-2.23-.215-1.44-.215-3.454 0-2.086.143-3.453.216-1.439.576-2.302.432-.863.935-1.223.504-.432 1.151-.432h17.338v-60.573l-14.964 8.273q-1.654.791-2.733 1.007-1.008.144-1.655-.432-.576-.647-.791-2.158-.216-1.51-.216-4.244 0-1.727.072-2.806.072-1.151.36-1.942.287-.792.79-1.295.504-.504 1.368-1.08l19.999-12.949q.36-.287.863-.431.576-.216 1.439-.288.863-.144 2.23-.144 1.439-.072 3.67-.072 2.733 0 4.387.144 1.727.072 2.59.36.864.216 1.151.647.288.432.288 1.08v76.903h15.18q.647 0 1.15.432.576.36.936 1.223.431.863.575 2.302.216 1.367.216 3.453z",
      fontSize: "65%",
      baselineShift: "super"
    })));
  }
  var ElectronicLithium_default = SvgElectronicLithium;

  // build/lib-react-tsx/periodic/IsotopeCarbon.tsx
  var React127 = __toModule(require_react());
  function SvgIsotopeCarbon({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React127.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React127.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React127.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React127.createElement("path", {
      d: "M115.938 31.182h788.88v935.636h-788.88z",
      fillOpacity: 0,
      strokeWidth: 40
    }), /* @__PURE__ */ React127.createElement("path", {
      d: "M669.037 661.338q0 8.464-.677 14.557-.339 5.756-1.354 10.157-1.016 4.062-2.709 7.109-1.692 3.047-5.416 7.11-3.724 3.723-14.558 9.817-10.494 6.094-26.067 11.85-15.235 5.416-35.209 9.14-19.635 3.724-42.656 3.724-45.026 0-81.25-13.88t-61.615-41.303q-25.39-27.76-38.932-69.062-13.542-41.302-13.542-96.146 0-55.86 14.896-99.193t41.64-72.786q26.746-29.453 63.985-44.688 37.578-15.234 82.604-15.234 18.282 0 35.209 3.047 16.927 3.047 31.146 8.125 14.557 4.74 26.067 11.172t15.912 11.172q4.74 4.4 6.432 7.448 1.693 3.046 2.708 7.786 1.016 4.74 1.355 11.172.677 6.432.677 15.911 0 10.157-.677 17.266-.677 7.11-2.37 11.51-1.693 4.401-4.063 6.433-2.37 2.03-5.416 2.03-5.078 0-12.865-5.754-7.786-6.094-20.312-13.203-12.188-7.448-29.454-13.204-16.927-6.093-40.625-6.093-26.067 0-46.718 10.833-20.313 10.495-34.87 30.469-14.219 19.635-21.667 47.734-7.448 28.1-7.448 63.307 0 38.594 7.787 67.032 8.125 28.099 22.682 46.38 14.896 18.281 35.547 27.422 20.99 8.802 47.057 8.802 23.698 0 40.964-5.417 17.265-5.755 29.453-12.526 12.526-6.77 20.312-12.187 8.125-5.417 12.526-5.417 3.386 0 5.417 1.354 2.031 1.354 3.386 5.417 1.354 4.062 2.03 11.51.678 7.11.678 19.297z",
      fontWeight: 400,
      fontSize: 693.333,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React127.createElement("path", {
      d: "M270.787 292.24q0 3.099-.332 5.312-.332 2.103-.996 3.431-.554 1.218-1.328 1.771-.775.554-1.771.554h-79.024q-.885 0-1.66-.554-.775-.553-1.439-1.77-.553-1.329-.885-3.432-.332-2.213-.332-5.312 0-3.21.221-5.313.332-2.213.886-3.541.664-1.328 1.439-1.882.774-.664 1.77-.664h26.674v-93.19l-23.021 12.728q-2.546 1.217-4.206 1.55-1.55.22-2.546-.665-.885-.996-1.217-3.32-.332-2.324-.332-6.53 0-2.656.11-4.316.111-1.771.554-2.989.443-1.217 1.217-1.992.775-.774 2.103-1.66l30.769-19.922q.553-.442 1.328-.664.885-.332 2.213-.443 1.328-.22 3.431-.22 2.214-.112 5.645-.112 4.205 0 6.751.222 2.656.11 3.984.553 1.329.332 1.771.996.443.664.443 1.66V280.84h23.353q.996 0 1.77.664.886.554 1.44 1.882.663 1.328.885 3.541.332 2.103.332 5.313zM386.555 261.361q0 10.736-4.095 19.037-4.095 8.3-11.4 13.945-7.304 5.644-17.487 8.633-10.182 2.877-22.246 2.877-7.304 0-13.724-1.106-6.419-.997-11.4-2.546-4.87-1.55-8.079-3.21-3.21-1.66-4.206-2.545-.996-.886-1.55-1.992-.442-1.107-.885-2.546-.332-1.55-.553-3.763-.11-2.324-.11-5.534 0-5.312.885-7.305.885-2.102 2.656-2.102 1.107 0 3.763 1.549 2.767 1.439 6.973 3.21 4.206 1.66 9.85 3.21 5.645 1.438 12.839 1.438 6.087 0 10.735-1.439 4.649-1.439 7.858-3.984 3.32-2.656 4.87-6.309 1.66-3.763 1.66-8.3 0-4.98-1.992-8.965-1.881-3.985-5.755-6.752-3.763-2.877-9.629-4.427-5.755-1.55-13.613-1.55h-12.396q-1.439 0-2.435-.331-.996-.443-1.66-1.66-.664-1.218-.996-3.32-.222-2.214-.222-5.645 0-3.21.222-5.202.332-2.103.885-3.21.664-1.106 1.55-1.55.996-.442 2.324-.442h12.506q6.42 0 11.4-1.439 4.98-1.55 8.3-4.316 3.432-2.767 5.203-6.64 1.77-3.985 1.77-8.744 0-3.653-1.217-6.862-1.217-3.32-3.652-5.645-2.324-2.435-6.088-3.763-3.763-1.439-8.854-1.439-5.755 0-10.846 1.771-5.091 1.66-9.186 3.763-3.985 1.993-6.862 3.763-2.767 1.771-4.095 1.771-.886 0-1.55-.332-.664-.443-1.107-1.55-.442-1.106-.664-3.209-.22-2.103-.22-5.423 0-2.767.11-4.538.11-1.881.442-3.099.332-1.217.775-2.103.554-.885 1.66-1.881 1.107-1.107 4.538-3.21 3.431-2.103 8.633-4.095 5.202-1.992 11.953-3.32 6.862-1.439 14.83-1.439 10.404 0 18.373 2.435 8.08 2.435 13.503 7.083 5.534 4.538 8.3 11.29 2.878 6.64 2.878 15.051 0 6.53-1.66 12.175-1.66 5.644-4.87 10.071-3.21 4.428-8.08 7.526-4.758 3.1-11.067 4.649v.332q7.526.885 13.503 3.874 5.976 2.877 10.071 7.304 4.206 4.427 6.42 10.072 2.213 5.534 2.213 11.953z"
    }));
  }
  var IsotopeCarbon_default = SvgIsotopeCarbon;

  // build/lib-react-tsx/periodic/IsotopeFluor.tsx
  var React128 = __toModule(require_react());
  function SvgIsotopeFluor({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React128.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React128.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React128.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React128.createElement("path", {
      d: "M115.938 31.182h788.88v935.636h-788.88z",
      fillOpacity: 0,
      strokeWidth: 40
    }), /* @__PURE__ */ React128.createElement("path", {
      d: "M660.593 411.105q0 10.156-1.016 17.266-.677 6.77-2.708 10.833-1.693 4.062-4.063 6.094-2.37 2.03-5.417 2.03H504.186v117.813h134.401q3.047 0 5.417 1.693 2.37 1.693 4.062 5.755 2.032 4.063 2.709 10.834 1.015 6.77 1.015 16.927 0 10.156-1.015 16.927-.677 6.77-2.709 11.172-1.692 4.4-4.062 6.432-2.37 1.693-5.417 1.693h-134.4V799.75q0 3.724-2.032 6.432-2.031 2.708-7.448 4.74-5.078 1.692-13.542 2.708-8.463 1.016-21.666 1.016-12.865 0-21.667-1.016-8.463-1.016-13.542-2.708-5.078-2.032-7.447-4.74-2.032-2.708-2.032-6.432V402.64q0-14.895 7.448-21.328 7.787-6.77 18.959-6.77h206.171q3.047 0 5.417 2.03 2.37 1.693 4.063 6.094 2.03 4.063 2.708 11.172 1.016 7.11 1.016 17.266z",
      fontWeight: 400,
      fontSize: 693.333,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React128.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React128.createElement("path", {
      d: "M302.787 327.932q0 3.1-.332 5.313-.332 2.103-.996 3.43-.554 1.218-1.328 1.772-.775.553-1.771.553h-79.024q-.885 0-1.66-.553-.775-.554-1.439-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.221-5.312.332-2.214.886-3.542.664-1.328 1.439-1.881.774-.664 1.77-.664h26.674v-93.19l-23.021 12.727q-2.546 1.218-4.206 1.55-1.55.221-2.546-.664-.885-.996-1.217-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.111-1.77.554-2.988.443-1.218 1.217-1.992.775-.775 2.103-1.66l30.769-19.922q.553-.443 1.328-.664.885-.333 2.213-.443 1.328-.222 3.431-.222 2.214-.11 5.645-.11 4.205 0 6.751.221 2.656.11 3.984.554 1.329.332 1.771.996.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.663 1.328.885 3.542.332 2.103.332 5.312zM419.551 260.862q0 8.743-.885 18.151-.886 9.297-3.431 18.262-2.435 8.965-6.862 17.044-4.317 8.08-11.29 14.167-6.861 5.976-16.822 9.518-9.85 3.542-23.353 3.542-4.76 0-9.518-.664-4.649-.665-8.522-1.66-3.874-.997-6.641-2.104-2.656-1.106-3.874-2.213-1.217-1.217-1.77-3.431-.554-2.214-.554-6.198 0-3.652.11-5.866.222-2.213.665-3.43.553-1.218 1.217-1.55.775-.443 1.771-.443 1.328 0 3.763.775 2.435.774 5.866 1.77 3.542.997 7.969 1.771 4.427.775 9.85.775 9.297 0 15.716-3.32 6.42-3.32 10.404-8.965t5.866-13.06q1.881-7.415 2.103-15.605-5.092 3.21-12.286 5.644-7.194 2.324-16.49 2.324-11.4 0-19.369-2.988-7.969-2.988-12.95-8.633-4.98-5.644-7.304-13.724-2.213-8.08-2.213-18.261 0-10.736 3.21-19.7 3.209-9.076 9.517-15.606 6.309-6.641 15.717-10.293 9.407-3.653 21.803-3.653 9.96 0 17.376 2.325 7.526 2.324 12.839 6.64 5.423 4.317 8.965 10.514 3.652 6.088 5.644 13.614 2.103 7.526 2.878 16.27.885 8.743.885 18.261zm-28.887-3.984q0-11.843-1.328-19.812-1.328-7.968-3.984-12.727-2.656-4.76-6.64-6.752-3.985-1.992-9.298-1.992-5.201 0-8.964 1.882-3.763 1.77-6.309 5.09-2.435 3.321-3.652 7.859-1.218 4.538-1.218 9.96 0 5.867.996 10.404 1.107 4.427 3.32 7.416 2.325 2.877 5.977 4.316 3.653 1.439 8.854 1.439 6.42 0 12.064-1.882 5.755-1.992 10.182-5.201z"
    })));
  }
  var IsotopeFluor_default = SvgIsotopeFluor;

  // build/lib-react-tsx/periodic/IsotopeHydrogen.tsx
  var React129 = __toModule(require_react());
  function SvgIsotopeHydrogen({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React129.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React129.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React129.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React129.createElement("path", {
      d: "M115.938 31.182h788.88v935.636h-788.88z",
      fillOpacity: 0,
      strokeWidth: 40
    }), /* @__PURE__ */ React129.createElement("path", {
      d: "M699.224 743.86q0 3.385-2.37 6.093-2.031 2.708-7.11 4.401-5.078 1.693-13.541 2.708-8.464 1.016-21.328 1.016-13.203 0-22.006-1.016-8.463-1.015-13.541-2.708-4.74-1.693-7.11-4.4-2.03-2.71-2.03-6.095V566.802H446.332v177.057q0 3.386-2.031 6.094t-7.11 4.401q-5.078 1.693-13.541 2.708-8.464 1.016-21.667 1.016-12.865 0-21.667-1.016-8.463-1.015-13.541-2.708-5.078-1.693-7.448-4.4-2.031-2.71-2.031-6.095V330.161q0-3.385 2.03-6.093 2.37-2.709 7.449-4.401 5.078-1.693 13.541-2.709 8.802-1.015 21.667-1.015 13.203 0 21.667 1.015 8.463 1.016 13.541 2.709 5.079 1.692 7.11 4.4 2.031 2.709 2.031 6.094V490.97h163.854V330.16q0-3.385 2.031-6.093 2.37-2.709 7.11-4.401 5.078-1.693 13.541-2.709 8.803-1.015 22.006-1.015 12.864 0 21.328 1.015 8.463 1.016 13.541 2.709 5.079 1.692 7.11 4.4 2.37 2.709 2.37 6.094V743.86z",
      fontWeight: 400,
      fontSize: 693.333,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React129.createElement("path", {
      d: "M320.787 335.932q0 3.1-.332 5.313-.332 2.103-.996 3.43-.554 1.218-1.328 1.772-.775.553-1.771.553h-79.024q-.885 0-1.66-.553-.775-.554-1.439-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.221-5.312.332-2.214.886-3.542.664-1.328 1.439-1.881.774-.664 1.77-.664h26.674v-93.19l-23.021 12.727q-2.546 1.218-4.206 1.55-1.55.221-2.546-.664-.885-.996-1.217-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.111-1.77.554-2.988.443-1.218 1.217-1.992.775-.775 2.103-1.66l30.769-19.922q.553-.443 1.328-.664.885-.333 2.213-.443 1.328-.222 3.431-.222 2.214-.11 5.645-.11 4.205 0 6.751.221 2.656.11 3.984.554 1.329.332 1.771.996.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.663 1.328.885 3.542.332 2.103.332 5.312z",
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }));
  }
  var IsotopeHydrogen_default = SvgIsotopeHydrogen;

  // build/lib-react-tsx/periodic/Mass.tsx
  var React130 = __toModule(require_react());
  function SvgMass({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React130.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React130.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React130.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React130.createElement("path", {
      d: "M129.833 50H870v850H129.833z",
      fillOpacity: 0,
      strokeWidth: 50.639
    }), /* @__PURE__ */ React130.createElement("path", {
      d: "M656.009 518.506q0 8.138-.651 13.997-.326 5.534-1.302 9.766-.977 3.906-2.604 6.836-1.628 2.93-5.209 6.836-3.58 3.58-13.997 9.44-10.091 5.859-25.065 11.393-14.649 5.208-33.854 8.789-18.88 3.58-41.016 3.58-43.294 0-78.125-13.346-34.83-13.346-59.245-39.713-24.414-26.693-37.435-66.406-13.02-39.714-13.02-92.448 0-53.711 14.322-95.378 14.323-41.667 40.04-69.987 25.715-28.32 61.523-42.969 36.133-14.648 79.427-14.648 17.578 0 33.854 2.93t29.948 7.812q13.997 4.557 25.065 10.742 11.068 6.185 15.3 10.742 4.557 4.232 6.184 7.162 1.628 2.93 2.605 7.487.976 4.557 1.302 10.742.65 6.185.65 15.3 0 9.765-.65 16.601-.651 6.836-2.279 11.068-1.628 4.232-3.906 6.185-2.279 1.953-5.209 1.953-4.882 0-12.37-5.534-7.486-5.86-19.53-12.695-11.72-7.162-28.32-12.696-16.277-5.86-39.063-5.86-25.066 0-44.922 10.418-19.532 10.09-33.529 29.296-13.672 18.88-20.833 45.899-7.162 27.018-7.162 60.872 0 37.11 7.487 64.453 7.813 27.019 21.81 44.597 14.323 17.578 34.18 26.367 20.182 8.464 45.247 8.464 22.787 0 39.388-5.209 16.602-5.534 28.32-12.044 12.045-6.51 19.532-11.719 7.812-5.208 12.044-5.208 3.255 0 5.208 1.302 1.954 1.302 3.256 5.208 1.302 3.906 1.953 11.068.65 6.836.65 18.555z",
      fontWeight: 400,
      fontSize: 506.667,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React130.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React130.createElement("path", {
      d: "M341.403 802.081q0 3.076-.33 5.273-.329 2.088-.988 3.406-.55 1.209-1.318 1.758-.77.55-1.758.55h-78.443q-.879 0-1.648-.55-.769-.55-1.428-1.758-.55-1.318-.879-3.406-.33-2.197-.33-5.273 0-3.186.22-5.273.33-2.198.88-3.516.659-1.318 1.428-1.868.769-.659 1.757-.659h26.477V698.26l-22.851 12.634q-2.527 1.209-4.175 1.539-1.538.22-2.527-.66-.879-.988-1.208-3.296-.33-2.307-.33-6.481 0-2.637.11-4.285.11-1.758.55-2.966.439-1.209 1.208-1.978.769-.769 2.087-1.648l30.542-19.775q.55-.44 1.319-.66.878-.33 2.197-.439 1.318-.22 3.406-.22 2.197-.11 5.603-.11 4.174 0 6.701.22 2.637.11 3.955.55 1.319.33 1.758.988.44.66.44 1.648v117.444h23.18q.99 0 1.759.66.878.549 1.428 1.867.659 1.318.879 3.516.33 2.087.33 5.273zM456.98 801.312q0 3.186-.33 5.493-.22 2.197-.77 3.626-.549 1.428-1.427 2.087-.88.55-1.978.55h-81.738q-2.417 0-4.175-.44t-2.856-1.648q-1.1-1.318-1.648-3.735-.44-2.417-.44-6.263 0-3.625.33-6.152.33-2.637 1.208-4.614.88-2.088 2.197-3.955 1.429-1.978 3.626-4.285l24.61-26.367q7.36-7.69 11.865-13.953 4.504-6.372 7.03-11.535 2.528-5.274 3.407-9.668.988-4.395.988-8.35 0-3.626-1.208-6.812-1.099-3.295-3.406-5.712-2.197-2.417-5.603-3.736-3.406-1.428-8.02-1.428-6.482 0-11.536 1.648-4.943 1.648-8.789 3.735-3.735 1.978-6.262 3.736-2.527 1.648-3.955 1.648-.989 0-1.758-.66-.659-.659-1.098-2.197-.44-1.538-.77-4.065-.22-2.637-.22-6.372 0-2.527.11-4.175.22-1.758.55-2.966.33-1.318.879-2.197.55-.989 1.868-2.307 1.428-1.319 5.053-3.296 3.736-2.088 9.119-3.955 5.383-1.978 11.865-3.296 6.482-1.319 13.513-1.319 11.097 0 19.336 2.857 8.35 2.746 13.843 7.8 5.493 4.944 8.13 11.865 2.747 6.812 2.747 14.722 0 6.921-1.319 13.623-1.318 6.702-5.493 14.502-4.175 7.69-11.755 17.139-7.58 9.338-20.105 21.753l-16.59 17.028h56.03q1.1 0 1.978.66.989.659 1.648 2.087.66 1.318.989 3.626.33 2.197.33 5.273zM512.57 797.247q0 10.217-3.625 13.733-3.516 3.516-12.744 3.516-9.229 0-12.745-3.406-3.515-3.516-3.515-13.184 0-10.327 3.515-13.843 3.626-3.515 12.964-3.515 9.119 0 12.635 3.515 3.515 3.406 3.515 13.184zM633.86 741.436q0 17.03-2.747 30.762-2.747 13.733-9.009 23.401-6.152 9.668-16.15 14.832-9.888 5.163-24.28 5.163-14.612 0-24.17-4.944-9.558-5.053-15.16-14.392-5.604-9.448-7.911-22.961-2.197-13.623-2.197-30.762 0-16.919 2.746-30.652 2.857-13.843 9.01-23.51 6.261-9.668 16.15-14.832 9.997-5.164 24.279-5.164 14.612 0 24.17 5.054 9.668 4.944 15.27 14.392 5.604 9.339 7.801 22.962 2.197 13.513 2.197 30.651zm-29.114 1.429q0-10.108-.55-17.798-.55-7.8-1.758-13.513-1.098-5.713-2.856-9.668-1.648-3.955-4.065-6.263-2.417-2.417-5.493-3.405-3.076-.99-6.812-.99-6.482 0-10.766 3.187-4.175 3.076-6.702 9.338-2.417 6.263-3.406 15.6-.988 9.34-.988 21.754 0 15.161 1.208 25.159 1.209 9.887 3.735 15.82 2.637 5.823 6.702 8.24 4.065 2.307 9.778 2.307 4.285 0 7.58-1.319 3.296-1.428 5.713-4.174 2.527-2.747 4.175-6.922 1.648-4.175 2.637-9.668 1.099-5.493 1.428-12.414.44-6.922.44-15.271zM743.942 802.081q0 3.076-.33 5.273-.329 2.088-.988 3.406-.55 1.209-1.318 1.758-.77.55-1.758.55h-78.443q-.878 0-1.648-.55-.769-.55-1.428-1.758-.55-1.318-.879-3.406-.33-2.197-.33-5.273 0-3.186.22-5.273.33-2.198.88-3.516.659-1.318 1.428-1.868.769-.659 1.757-.659h26.477V698.26l-22.851 12.634q-2.527 1.209-4.175 1.539-1.538.22-2.527-.66-.879-.988-1.208-3.296-.33-2.307-.33-6.481 0-2.637.11-4.285.11-1.758.55-2.966.439-1.209 1.208-1.978.769-.769 2.087-1.648l30.542-19.775q.55-.44 1.319-.66.878-.33 2.197-.439 1.318-.22 3.406-.22 2.197-.11 5.603-.11 4.174 0 6.701.22 2.637.11 3.955.55 1.319.33 1.758.988.44.66.44 1.648v117.444h23.18q.99 0 1.759.66.879.549 1.428 1.867.659 1.318.879 3.516.33 2.087.33 5.273z"
    })));
  }
  var Mass_default = SvgMass;

  // build/lib-react-tsx/periodic/OxidationState.tsx
  var React131 = __toModule(require_react());
  function SvgOxidationState({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React131.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React131.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React131.createElement("path", {
      d: "M499.5 99.5v51h151v-51zm1 1h149v49h-149z"
    }), /* @__PURE__ */ React131.createElement("path", {
      d: "M95.938 11.182v975.636h828.88V11.182zm40 40h748.88v895.636h-748.88z"
    }), /* @__PURE__ */ React131.createElement("path", {
      d: "M566.738 687.095q0 3.385-2.37 6.093-2.03 2.709-7.109 4.401-5.078 1.693-13.541 2.709-8.464 1.015-21.329 1.015-13.203 0-22.005-1.015-8.463-1.016-13.541-2.709-4.74-1.692-7.11-4.4-2.031-2.709-2.031-6.094V510.037H313.848v177.058q0 3.385-2.031 6.093-2.032 2.709-7.11 4.401-5.078 1.693-13.542 2.709-8.463 1.015-21.666 1.015-12.865 0-21.667-1.015-8.463-1.016-13.542-2.709-5.078-1.692-7.447-4.4-2.032-2.709-2.032-6.094V273.397q0-3.386 2.032-6.094 2.37-2.708 7.447-4.401 5.079-1.693 13.542-2.708 8.802-1.016 21.667-1.016 13.203 0 21.666 1.016 8.464 1.015 13.542 2.708 5.078 1.693 7.11 4.4 2.03 2.71 2.03 6.095v160.807h163.855V273.397q0-3.386 2.031-6.094 2.37-2.708 7.11-4.401 5.078-1.693 13.541-2.708 8.802-1.016 22.005-1.016 12.865 0 21.329 1.016 8.463 1.015 13.541 2.708 5.078 1.693 7.11 4.4 2.37 2.71 2.37 6.095z",
      fontWeight: 400,
      fontSize: 693.333,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React131.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React131.createElement("path", {
      d: "M718.212 288.694q0 3.099-.332 5.202-.332 2.103-.996 3.43-.664 1.218-1.55 1.772-.885.553-1.88.553h-34.421v37.52q0 1.106-.554 1.992-.553.774-1.881 1.439-1.328.553-3.542.885-2.213.332-5.534.332-3.32 0-5.534-.332-2.213-.332-3.541-.885-1.328-.664-1.992-1.44-.554-.885-.554-1.991v-37.52h-34.31q-.996 0-1.881-.553-.775-.554-1.44-1.771-.663-1.328-1.106-3.431-.332-2.103-.332-5.202 0-2.988.332-5.091.332-2.214.886-3.431.664-1.328 1.438-1.882.775-.553 1.771-.553h34.642v-37.409q0-1.107.554-1.992.664-.996 1.992-1.55 1.328-.664 3.541-.996 2.214-.332 5.534-.332t5.534.332q2.214.332 3.542.996 1.328.554 1.881 1.55.554.885.554 1.992v37.409h34.752q.886 0 1.66.553.886.554 1.44 1.882.663 1.217.995 3.43.332 2.104.332 5.092zM828.447 341.266q0 3.099-.332 5.312-.332 2.103-.996 3.431-.554 1.218-1.329 1.77-.774.554-1.77.554h-79.024q-.885 0-1.66-.553-.775-.553-1.439-1.77-.553-1.329-.885-3.432-.332-2.213-.332-5.312 0-3.21.221-5.313.332-2.213.886-3.542.664-1.328 1.438-1.881.775-.664 1.771-.664h26.673v-93.19l-23.02 12.728q-2.546 1.217-4.206 1.55-1.55.22-2.546-.665-.885-.996-1.217-3.32-.332-2.324-.332-6.53 0-2.656.11-4.317.111-1.77.554-2.988.442-1.217 1.217-1.992.775-.775 2.103-1.66L775.1 209.56q.554-.443 1.328-.664.886-.332 2.214-.443 1.328-.221 3.431-.221 2.214-.11 5.645-.11 4.205 0 6.75.22 2.657.111 3.985.554 1.328.332 1.771.996.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.663 1.329.885 3.542.332 2.103.332 5.313z"
    })), /* @__PURE__ */ React131.createElement("g", {
      style: {
        lineHeight: ".01%"
      },
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React131.createElement("path", {
      d: "M715.941 694.663q0 6.419-1.217 8.965-1.217 2.545-3.874 2.545H664.81q-2.767 0-3.985-2.545-1.217-2.657-1.217-8.965 0-6.198 1.217-8.744 1.218-2.545 3.985-2.545h46.041q1.328 0 2.214.553.996.553 1.66 1.882.664 1.328.885 3.541.332 2.214.332 5.313zM827.061 739.266q0 3.099-.332 5.312-.332 2.103-.996 3.431-.553 1.218-1.328 1.77-.775.554-1.77.554H743.61q-.886 0-1.66-.553-.775-.553-1.44-1.77-.553-1.329-.885-3.432-.332-2.213-.332-5.312 0-3.21.222-5.313.332-2.213.885-3.542.664-1.328 1.439-1.881.775-.664 1.77-.664h26.674v-93.19l-23.02 12.728q-2.546 1.217-4.207 1.55-1.55.22-2.545-.665-.886-.996-1.218-3.32-.332-2.324-.332-6.53 0-2.656.111-4.317.11-1.77.553-2.988.443-1.217 1.218-1.992.775-.775 2.103-1.66l30.768-19.922q.553-.443 1.328-.664.885-.332 2.214-.443 1.328-.221 3.43-.221 2.214-.11 5.645-.11 4.206 0 6.751.22 2.657.111 3.985.554 1.328.332 1.77.996.443.664.443 1.66v118.314h23.353q.996 0 1.771.664.885.553 1.439 1.881.664 1.329.885 3.542.332 2.103.332 5.313z"
    })), /* @__PURE__ */ React131.createElement("path", {
      d: "M824.29 477.276q0 17.155-2.767 30.99-2.767 13.834-9.076 23.574-6.198 9.74-16.27 14.941-9.96 5.202-24.459 5.202-14.72 0-24.349-4.98-9.629-5.092-15.273-14.5-5.645-9.518-7.969-23.13-2.214-13.725-2.214-30.99 0-17.045 2.767-30.88 2.878-13.945 9.076-23.684 6.309-9.74 16.27-14.942 10.071-5.201 24.46-5.201 14.72 0 24.348 5.09 9.74 4.981 15.384 14.5 5.645 9.407 7.858 23.13 2.214 13.614 2.214 30.88zm-29.33 1.439q0-10.183-.553-17.93-.553-7.858-1.77-13.613-1.108-5.756-2.878-9.74-1.66-3.984-4.096-6.308-2.434-2.435-5.533-3.431-3.1-.997-6.862-.997-6.53 0-10.847 3.21-4.205 3.099-6.751 9.408-2.435 6.308-3.431 15.716-.996 9.407-.996 21.914 0 15.273 1.217 25.345 1.218 9.96 3.763 15.937 2.657 5.866 6.752 8.301 4.095 2.324 9.85 2.324 4.316 0 7.637-1.328 3.32-1.439 5.755-4.205 2.545-2.767 4.206-6.973 1.66-4.206 2.656-9.74 1.107-5.534 1.439-12.506.442-6.973.442-15.384z",
      fontWeight: 400,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }));
  }
  var OxidationState_default = SvgOxidationState;

  // build/lib-react-tsx/raman/Assignment.tsx
  var React132 = __toModule(require_react());
  function SvgAssignment7({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React132.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React132.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React132.createElement("path", {
      d: "M49.941 730.47h883.662M947.568 730.47l-51.27 38.956M896.298 691.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React132.createElement("path", {
      d: "M101.35 640.31c87.832-7.236 153.621-89.197 158.583-167.475 11.576-179.157 13.743-241.208 48.179-248.84 74.856.224-33.321 414.776 212.233 419.503 96.256 1.887 87.445-72.992 92.222-151.822 4.962-83.974 4.062-147.325 14.171-213.66 37.85 109.516-11.394 356.845 162.804 360.337 35.649.734 34.68 3.082 66.653 1.427",
      fill: "none",
      strokeWidth: 31.973,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React132.createElement("path", {
      d: "M326.284 161.008c0 7.485-6.092 13.577-13.402 13.577-7.485 0-13.576-6.092-13.576-13.577zm0 0V70.675h-26.978v90.333zm-26.978-90.333c0-7.31 6.091-13.402 13.576-13.402 7.31 0 13.402 6.092 13.402 13.402zM644.174 215.661c0 7.484-6.092 13.576-13.576 13.576-7.31 0-13.402-6.092-13.402-13.576zm0 0v-90.334h-26.978v90.334zm-26.978-90.334c0-7.31 6.091-13.401 13.402-13.401 7.484 0 13.576 6.091 13.576 13.401zM447.477 902.976c0 3.312-1.102 6.803-2.94 10.474-2.021 3.677-4.962 7.353-9.004 10.66-4.043 3.306-9.004 6.062-15.252 8.083-6.063 2.205-12.862 3.126-20.58 3.126-16.17 0-28.848-4.777-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.655 2.021-20.213 6.248-28.482 4.042-8.268 10.106-14.7 18.008-19.292 7.9-4.412 17.456-6.798 28.48-6.798 6.8 0 13.047 1.1 18.744 3.121 5.512 1.841 10.473 4.412 14.332 7.533 4.043 3.312 6.983 6.618 9.004 10.11 2.205 3.676 3.124 6.982 3.124 9.923 0 3.306-1.102 5.878-3.491 8.083-2.39 2.206-5.145 3.307-8.453 3.307-2.205 0-4.043-.55-5.512-1.651-1.47-1.106-2.94-2.941-4.778-5.512-3.308-4.962-6.615-8.454-10.106-11.03-3.491-2.385-7.902-3.671-13.414-3.671-7.718 0-13.965 3.121-18.743 9.183-4.777 6.068-7.166 14.336-7.166 24.81 0 4.962.734 9.554 1.837 13.78 1.287 4.042 3.124 7.533 5.33 10.475 2.388 2.941 5.144 5.147 8.452 6.612 3.307 1.656 6.798 2.391 10.84 2.391 5.146 0 9.74-1.286 13.415-3.676 3.859-2.571 7.166-6.248 9.923-11.21 1.654-2.936 3.49-5.327 5.328-6.982 1.838-1.651 4.043-2.386 6.8-2.386 3.123 0 5.88 1.1 7.9 3.491 2.205 2.571 3.308 5.142 3.308 7.898zm110.25-18.922v34.908c0 5.518-1.102 9.74-3.674 12.5-2.573 2.757-5.88 4.042-9.923 4.042-4.042 0-7.166-1.286-9.739-4.042-2.388-2.76-3.675-6.982-3.675-12.5v-41.89c0-6.618-.184-11.76-.734-15.437-.368-3.676-1.655-6.617-3.675-9.003-1.838-2.391-5.145-3.492-9.372-3.492-8.636 0-14.332 2.942-16.905 8.819-2.756 5.882-4.226 14.335-4.226 25.54v35.463c0 5.518-1.286 9.56-3.675 12.315-2.389 2.942-5.696 4.227-9.739 4.227-4.042 0-7.35-1.286-9.739-4.227-2.572-2.756-3.859-6.797-3.859-12.315v-75.149c0-4.962 1.103-8.823 3.492-11.394 2.205-2.571 5.145-3.862 9.004-3.862 3.491 0 6.43 1.29 9.003 3.677 2.39 2.39 3.492 5.697 3.492 9.924v2.57c4.593-5.512 9.555-9.553 14.7-12.124 5.145-2.576 11.025-3.862 17.273-3.862 6.615 0 12.311 1.47 17.088 4.042 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.513 9.188-9.37 14.333-11.945 4.961-2.571 10.658-4.042 16.722-4.042 7.166 0 13.414 1.47 18.556 4.227 5.332 2.941 9.188 6.983 11.764 12.31 2.201 4.597 3.307 12.13 3.307 22.419v51.264c0 5.518-1.287 9.74-3.677 12.5-2.57 2.757-5.877 4.042-9.924 4.042-4.041 0-7.347-1.286-9.739-4.227-2.57-2.756-3.856-6.797-3.856-12.315V874.68c0-5.512-.186-10.104-.736-13.595-.55-3.311-1.838-6.247-3.859-8.453-2.205-2.391-5.329-3.492-9.739-3.492-3.491 0-6.799 1.1-9.739 3.122-3.123 2.02-5.512 4.776-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.524zM742.583 873.76v-67.802c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.57-1.656-1.657-2.39-3.492-2.39-5.698 0-2.571.735-4.412 2.39-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.941 10.845-5.882 14.521-9.004 3.491-3.126 6.798-6.617 9.554-10.474 2.756-3.861 4.592-6.247 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.777 1.106 6.247 3.126 1.656 2.021 2.391 4.962 2.391 8.449v85.628c0 9.924-3.311 14.886-10.109 14.886-3.121 0-5.512-.92-7.348-2.941-1.84-2.021-2.756-5.142-2.756-9.189zM641.306 850c-4.412 0-7.903-4.042-7.903-9.189 0-4.961 3.491-9.183 7.903-9.183zm0 0H690v-18.372h-48.694zM690 831.628c4.412 0 7.903 4.222 7.903 9.183 0 5.147-3.491 9.189-7.903 9.189z",
      stroke: "none"
    }));
  }
  var Assignment_default7 = SvgAssignment7;

  // build/lib-react-tsx/raman/Overlay.tsx
  var React133 = __toModule(require_react());
  function SvgOverlay4({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React133.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React133.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React133.createElement("path", {
      d: "M49.941 730.47h883.662M947.568 730.47l-51.27 38.956M896.298 691.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M448.044 905.942c0 3.311-1.102 6.802-2.94 10.474-2.021 3.676-4.962 7.353-9.004 10.66-4.043 3.305-9.004 6.061-15.252 8.082-6.063 2.206-12.862 3.126-20.58 3.126-16.17 0-28.849-4.776-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.654 2.021-20.213 6.248-28.481 4.042-8.268 10.106-14.7 18.008-19.293 7.9-4.411 17.456-6.797 28.48-6.797 6.8 0 13.047 1.1 18.744 3.12 5.512 1.842 10.473 4.413 14.332 7.534 4.043 3.311 6.983 6.618 9.004 10.109 2.205 3.676 3.124 6.983 3.124 9.924 0 3.306-1.102 5.877-3.491 8.083-2.39 2.206-5.146 3.306-8.453 3.306-2.205 0-4.043-.55-5.512-1.65-1.47-1.106-2.94-2.942-4.778-5.513-3.308-4.962-6.615-8.453-10.106-11.03-3.492-2.385-7.902-3.67-13.414-3.67-7.718 0-13.965 3.12-18.743 9.183-4.778 6.067-7.166 14.336-7.166 24.81 0 4.962.734 9.553 1.837 13.78 1.286 4.042 3.124 7.533 5.33 10.474 2.388 2.941 5.144 5.147 8.451 6.613 3.308 1.656 6.8 2.39 10.842 2.39 5.145 0 9.739-1.285 13.414-3.676 3.858-2.57 7.166-6.247 9.922-11.21 1.655-2.935 3.492-5.326 5.329-6.982 1.838-1.65 4.043-2.386 6.8-2.386 3.123 0 5.879 1.1 7.9 3.492 2.205 2.57 3.308 5.142 3.308 7.898zm110.25-18.922v34.908c0 5.517-1.102 9.739-3.675 12.5-2.572 2.756-5.88 4.042-9.922 4.042-4.042 0-7.166-1.287-9.739-4.042-2.389-2.761-3.675-6.983-3.675-12.5v-41.891c0-6.618-.184-11.76-.734-15.436-.369-3.677-1.655-6.618-3.675-9.004-1.838-2.39-5.145-3.491-9.372-3.491-8.636 0-14.333 2.941-16.905 8.818-2.756 5.883-4.226 14.336-4.226 25.54v35.464c0 5.517-1.286 9.559-3.675 12.315-2.389 2.941-5.696 4.227-9.739 4.227-4.042 0-7.35-1.287-9.739-4.227-2.572-2.756-3.859-6.798-3.859-12.315v-75.15c0-4.961 1.103-8.823 3.492-11.394 2.205-2.57 5.145-3.861 9.004-3.861 3.491 0 6.43 1.29 9.003 3.676 2.39 2.391 3.492 5.697 3.492 9.924v2.571c4.593-5.512 9.555-9.554 14.7-12.125 5.145-2.576 11.025-3.861 17.273-3.861 6.615 0 12.31 1.47 17.088 4.041 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.512 9.188-9.369 14.333-11.945 4.961-2.57 10.658-4.041 16.721-4.041 7.167 0 13.415 1.47 18.557 4.227 5.332 2.94 9.188 6.982 11.764 12.31 2.201 4.596 3.307 12.13 3.307 22.418v51.265c0 5.517-1.287 9.739-3.677 12.5-2.57 2.756-5.877 4.042-9.924 4.042-4.041 0-7.347-1.287-9.739-4.227-2.57-2.756-3.856-6.798-3.856-12.315v-44.282c0-5.512-.186-10.104-.736-13.595-.55-3.312-1.838-6.248-3.86-8.454-2.204-2.39-5.328-3.491-9.738-3.491-3.491 0-6.799 1.1-9.739 3.121-3.123 2.02-5.512 4.777-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.525zM743.15 876.725v-67.801c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.571-1.656-1.656-2.391-3.492-2.391-5.698 0-2.57.736-4.411 2.391-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.94 10.844-5.882 14.521-9.003 3.491-3.126 6.798-6.618 9.554-10.474 2.756-3.862 4.592-6.248 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.776 1.106 6.247 3.126 1.656 2.02 2.391 4.962 2.391 8.448v85.629c0 9.923-3.311 14.885-10.109 14.885-3.121 0-5.512-.92-7.348-2.94-1.84-2.022-2.756-5.143-2.756-9.19zM641.873 852.966c-4.412 0-7.903-4.042-7.903-9.19 0-4.961 3.491-9.183 7.903-9.183zm0 0h48.694v-18.373h-48.694zm48.694-18.373c4.412 0 7.903 4.222 7.903 9.184 0 5.147-3.491 9.189-7.903 9.189z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M100 500c87.833 20.764 145.038-71.722 150-150 11.576-179.157.309-263.626 60.763-260.315C400 100 331.794 510.236 522.995 509.187 609.721 499.132 600 150 629.39 143.707 650 150 639.802 504.508 750 500c35.627-1.438 106.873 3.124 138.845 1.47",
      fill: "none",
      strokeWidth: 31.973,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M96.693 629.177l-.736-.184-.735-.184-.734-.368-.55-.184-.736-.368-.55-.368-.552-.368-.55-.368-.737-.368-.368-.55-.552-.369-.552-.552-.368-.552-.55-.552-.368-.552-.368-.552-.368-.552-.184-.734-.368-.552-.184-.552-.368-.734-.184-.735-.184-.552v-.734l-.184-.734v-.734l-.184-.553v-.734l.184-.734v-.734l.184-.735.184-.734.184-.734.184-.734.184-.552.368-.735.184-.552.368-.734.368-.552.368-.552.552-.552.368-.552.55-.552.552-.368.368-.552.552-.368.55-.368.553-.552.736-.184.552-.368.55-.368.734-.184.552-.184.734-.368h.735l.552-.184.736-.184h3.673l.552.184.736.184-6.432 27.93z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M129.4 631.566l-1.837.184h-2.389l-2.389.184H118.008l-2.205-.184h-2.389l-2.389-.184-2.389-.368-2.388-.184-2.39-.368-2.388-.552-2.388-.368-2.39-.552 6.432-27.93 1.837.368 1.655.368 1.837.184 1.655.368 1.654.184 1.838.184 1.654.184h1.837l1.655.184h3.492l1.654-.184h1.838l1.837-.184z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M127.563 602.9h2.206l.552.185h.734l.736.183.735.184.552.184.734.369.552.183.734.369.552.368.55.368.55.368.553.368.55.368.552.552.552.552.368.368.368.552.55.55.368.734.368.553.184.552.369.734.368.552.184.734.184.552.184.734.184.735v.734l.184.734V617.788l-.184.734v.734l-.184.734v.552l-.184.735-.368.734-.185.552-.183.734-.369.552-.368.552-.368.734-.368.553-.368.552-.552.55-.368.368-.552.552-.55.368-.552.552-.552.368-.55.369-.552.367-.55.369-.737.367-.55.184-.734.184-.736.184-.734.184-.55.184-.737.184h-.734l-1.838-28.666zM189.487 610.25l-.55.553-.735.184-.55.368-.736.184-.552.368-.734.184-.734.184h-.735l-.552.184H180.118l-.734-.184-.736-.184-.55-.184-.734-.184-.55-.184-.737-.184-.552-.368-.55-.368-.734-.368-.552-.368-.552-.368-.55-.552-.55-.368-.369-.552-.552-.552-.55-.552-.368-.552-.368-.552-.368-.735-.368-.552-.368-.734-.184-.734-.184-.552-.184-.735-.184-.734-.184-.552-.184-.734v-2.755l.184-.734v-.734l.184-.552.184-.735.184-.734.184-.552.368-.734.184-.55.368-.552.368-.735.368-.552.368-.552.55-.552.368-.552.552-.368.55-.552.55-.368.553-.552.736-.368 15.067 24.255z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M214.293 591.876l-1.47 1.286-1.838 1.654-2.02 1.47-1.838 1.655-1.838 1.47-2.021 1.47-1.837 1.47-2.022 1.471-2.021 1.286-2.021 1.47-2.021 1.287-1.838 1.286-2.022 1.103-15.067-24.256 1.47-.918 1.655-1.102 1.654-1.102 1.838-1.287 1.654-1.102 1.655-1.286 1.654-1.287 1.654-1.102 1.655-1.47 1.654-1.286 1.47-1.287 1.654-1.286 1.47-1.286z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M195.55 570.193l.551-.552.736-.366.55-.369.552-.367.735-.369.55-.366.736-.184.552-.366.734-.184h.736l.552-.184.735-.184h3.49l.55.184.737.184.734.184.55.184.736.184.55.184.735.366.552.368.55.368.736.368.55.368.55.552.55.368.553.552.368.552.55.552.368.55.368.737.368.552.368.552.368.734.184.736.184.55.184.735.184.552.184.734.184.734v2.757l-.184.734v.552l-.184.736-.184.734-.184.552-.184.736-.368.55-.184.735-.368.552-.368.552-.368.734-.368.552-.55.552-.368.552-.552.369-.55.55-18.743-21.683zM254.535 546.489l-.368.552-.368.552-.55.552-.553.552-.552.368-.55.55-.55.369-.55.368-.552.366-.735.368-.552.184-.734.368-.552.184-.734.184-.55.184-.735.183h-.736l-.55.184h-2.205l-.552-.184h-.736l-.734-.183-.736-.184-.55-.184-.734-.184-.737-.368-.55-.184-.734-.368-.552-.366-.552-.368-.736-.552-.55-.368-.55-.552-.369-.552-.55-.552-.368-.553-.552-.552-.368-.552-.368-.552-.184-.552-.368-.734-.184-.55-.368-.736-.184-.552-.184-.735v-.736l-.184-.734v-1.286l-.184-.736.184-.552v-1.471l.184-.734.184-.55.184-.736.184-.734.368-.552.368-.736.184-.552.368-.735.55-.552 23.336 16.538z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M270.521 520.58l-.918 1.654-1.102 2.205-1.286 2.021-1.287 2.205-1.102 2.022-1.286 2.205-1.286 2.02-1.47 2.022-1.287 2.205-1.286 2.022-1.47 2.021-1.287 2.02-.918 1.287-23.336-16.537.552-.919 1.286-1.837 1.286-1.838 1.103-1.837 1.286-1.838 1.102-1.837 1.102-2.022 1.103-1.837 1.286-1.837 1.102-1.838.918-2.022 1.103-1.837.918-1.654z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M245.348 506.799l.368-.55.368-.735.368-.552.55-.552.368-.552.552-.368.55-.552.55-.369.553-.552.55-.368.552-.366.734-.368.55-.184.552-.368.735-.184.55-.184.734-.184.736-.184.55-.183H259.311l.734.183h.736l.735.184.55.184.736.184.734.368.55.184.736.367.55.369.735.552.552.368.55.368.55.552.552.552.368.368.553.552.368.552.368.552.368.735.368.552.184.55.368.736.184.552.184.734.184.735.184.552.184.734v3.492l-.184.735v.552l-.184.736-.184.734-.184.552-.368.736-.184.734-.368.552-25.174-13.781zM292.388 463.434l-.184.734-.185.736-.184.734-.368.55-.368.735-.184.552-.368.552-.552.734-.368.552-.368.552-.552.368-.368.552-.552.369-.552.552-.55.368-.55.368-.735.368-.55.368-.55.184-.736.367-.55.184-.735.184-.55.184-.736.184-.734.184h-3.491l-.736-.184-.734-.184-.735-.184-.736-.184-.734-.184-.55-.367-.736-.184-.55-.368-.55-.368-.735-.368-.552-.552-.368-.368-.55-.552-.552-.368-.368-.552-.55-.552-.368-.55-.368-.553-.368-.552-.368-.736-.185-.55-.368-.552-.184-.734-.184-.736-.184-.552-.184-.734-.184-.737v-3.49l.184-.735.184-.736 27.93 6.248z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M295.695 440.832l-.184 2.021-.184 2.205-.184 2.022-.184 2.021-.368 2.205-.184 2.021-.368 2.205-.368 2.021-.552 2.205-.368 2.022-.368 1.654-27.93-6.248.184-1.286.368-1.838.368-1.655.368-1.654.184-1.837.368-1.655.184-1.654.184-1.654.184-1.655.184-1.654v-1.654z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M296.247 432.747l-28.666-1.838-.55 8.086 28.665 1.837z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M267.581 430.91v-.735l.184-.736.184-.552.184-.734.185-.736.184-.734.184-.55.368-.737.368-.552.368-.55.368-.552.368-.552.368-.552.552-.552.55-.552.368-.369.55-.552.55-.367.553-.369.734-.368.55-.368.552-.368.736-.184.55-.184.735-.368.736-.184h.55l.734-.184h.734l.736-.184h1.471l.734.184h.736l.734.184.736.184.55.184.735.184.55.368.736.368.552.184.55.368.735.368.55.552.552.368.368.366.55.552.552.552.368.552.368.553.368.552.368.552.368.552.368.734.184.552.368.736.184.552.184.734.184.736v.735l.184.736V432.749l-28.665-1.838zM298.635 375.05V376.518l-.184.735-.184.552-.184.736-.184.734-.184.552-.368.736-.184.552-.368.734-.368.552-.368.552-.368.55-.55.553-.368.552-.55.366-.55.552-.553.368-.55.369-.552.368-.55.368-.55.368-.736.368-.55.184-.735.184-.736.368-.55.184h-.734l-.736.184h-3.675l-.735-.184-.736-.184-.55-.184-.734-.184-.736-.183-.552-.369-.734-.184-.55-.368-.55-.368-.553-.368-.55-.368-.552-.552-.552-.368-.368-.553-.552-.55-.368-.552-.55-.55-.369-.552-.368-.552-.184-.552-.368-.736-.184-.552-.368-.735-.184-.736-.184-.552-.184-.734v-.736l-.184-.734v-1.471l28.665.919z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M299.37 346.016l-.184 5.33v6.43l-.184 6.8-.184 6.798-.184 3.675-28.665-.918.184-3.491.184-6.615v-6.8l.184-6.43v-5.146z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M270.521 345.649l.185-.735v-1.47l.184-.734.184-.55.184-.736.368-.735.184-.552.368-.736.184-.552.368-.55.368-.552.552-.552.368-.552.368-.552.55-.552.552-.368.55-.55.552-.369.55-.368.55-.366.551-.368.734-.369.55-.184.737-.183.55-.369.734-.184h.736l.734-.184h.736l.735-.183h1.47l.734.183h.55l.736.184.735.184.736.184.55.184.734.366.55.184.737.368.55.368.55.368.552.369.55.552.55.368.368.55.55.552.369.552.55.552.368.552.368.55.368.553.184.552.368.734.184.736.184.552.184.734.184.736.184.735v1.286l.184.734-28.849-.368zM299.738 288.686v1.47l-.184.735v.552l-.184.736-.184.734-.368.552-.184.736-.368.552-.184.734-.368.55-.368.553-.55.552-.369.55-.368.552-.552.552-.552.368-.552.552-.55.367-.55.369-.55.368-.552.366-.735.368-.55.184-.736.366-.55.184-.734.184-.737.184h-.734l-.55.184h-2.941l-.736-.184-.734-.184h-.734l-.736-.368-.55-.184-.735-.184-.55-.368-.736-.368-.55-.369-.55-.366-.55-.368-.553-.368-.55-.552-.368-.368-.55-.552-.368-.552-.55-.552-.368-.55-.368-.553-.368-.552-.184-.734-.369-.552-.183-.734-.369-.552-.184-.734v-.736l-.184-.735-.184-.736v-1.47l28.666.368z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M300.473 260.388l-.184 3.675-.184 3.859v4.042l-.184 4.227v4.226l-.184 4.594v3.675l-28.665-.368v-3.675l.184-4.594v-4.594l.184-4.41v-4.226l.184-4.043.184-3.49z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M271.807 259.286v-.736l.184-.734.184-.736v-.735l.184-.736.368-.552.184-.734.369-.552.184-.736.368-.552.368-.552.368-.552.55-.55.368-.552.55-.552.368-.553.55-.368.55-.368.55-.552.553-.368.734-.184.552-.366.55-.368.736-.184.55-.184.735-.367h.734l.736-.184.734-.184H287.427l.734.184h.736l.734.184.736.184.553.183.734.369.734.184.552.368.55.368.552.368.552.368.55.368.55.552.551.368.552.552.368.552.368.552.552.552.368.55.368.552.184.735.368.552.184.734.368.552.184.734.184.736v.55l.184.735v2.206l-28.665-1.102zM311.498 218.126l-.55.368-.736.368-.55.368-.735.368-.55.368-.736.184-.55.184-.734.184-.737.183-.55.184h-.734l-.736.184h-2.021l-.734-.184h-.734l-.552-.184-.734-.183-.55-.184-.735-.184-.736-.368-.552-.184-.55-.368-.736-.368-.552-.368-.55-.552-.55-.368-.551-.55-.552-.368-.368-.552-.55-.55-.368-.735-.368-.552-.368-.552-.368-.736-.368-.552-.184-.734-.184-.736-.184-.552-.184-.734-.185-.736-.184-.552v-2.757l.184-.736v-.734l.185-.736.184-.552.184-.735.184-.55.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.55-.553.368-.552.552-.552.55-.366.55-.552 17.64 22.785z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M315.724 207.835l11.944 7.718-1.103-.184h-4.225l-.918.184h-1.836l-.736.184-.735.184h-.736l-.734.184-.736.183-.552.184-.55.184-.55.184h-.55l-.369.184-.55.368-.368.184-.368.183-.368.184-.368.184-.368.184.55-.184-17.64-22.785.55-.368 1.102-.736 1.286-.918 1.287-.736 1.286-.735 1.47-.552 1.287-.552 1.47-.552 1.286-.552 1.47-.552 1.47-.368 1.471-.368 1.286-.368 1.47-.184 1.655-.368 1.47-.184 1.47-.183 1.471-.184h1.654l1.47-.184h6.434l1.47.184 12.128 7.717z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M329.138 186.888h.736l.734.184h.736l.734.184.735.183.552.369.734.184.55.368.736.184.55.367.55.369.551.366.55.552.552.366.552.552.368.552.55.369.369.552.368.552.368.736.368.552.368.552.184.734.368.552.184.736.184.55.184.735.184.736V203.433l-.184.736-.184.552-.184.734-.184.736-.368.55-.184.735-.368.552-.368.552-.368.736-.368.552-.552.552-.368.368-.55.552-.369.552-.552.368-.552.55-.55.369-.55.368-.736.368-.55.184-.553.368-.734.184-.736.184-.552.183-.734.184-.736.184h-.735l-.736.184h-1.47l1.47-28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M316.46 209.122l-.369-.552-.368-.734 25.542-13.23.55 1.286.368.552z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M342.184 196.443l.184.734.369.552.184.736.184.735.184.736.184.55v.734l.184.736v2.021l-.184.736v.734l-.184.552-.184.736-.184.734-.368.55-.185.737-.368.55-.184.552-.368.552-.368.734-.55.552-.368.552-.55.368-.368.55-.55.552-.55.367-.553.368-.736.55-.55.368-.734.368-.55.184-.736.368-.735.184-.55.184-.736.184-.734.184h-.734l-.736.184H328.775l-.736-.184h-.734l-.552-.184h-.736l-.735-.184-.552-.184-.736-.368-.55-.183-.734-.368-.55-.369-.55-.183-.553-.552-.55-.368-.55-.369-.552-.552-.55-.367-.368-.55-.55-.553-.369-.552-.368-.734-.368-.552-.368-.734 25.725-12.68zM326.382 259.837v-2.206l.184-.734v-.736l.184-.553.184-.734.184-.734.184-.552.368-.734.184-.552.368-.552.368-.736.368-.553.368-.552.55-.552.368-.55.552-.368.55-.55.369-.368.55-.368.736-.552.55-.369.552-.184.734-.368.552-.368.735-.184.552-.184.734-.184.736-.184h.734l.736-.184h2.941l.734.184.55.184.735.184.736.184.55.184.734.368.552.184.736.368.55.369.55.368.55.368.551.552.552.368.368.552.55.368.368.552.369.55.55.553.368.734.184.552.368.552.368.734.184.736.184.552.184.734.184.735.184.736v.734l-28.665 2.205z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M327.852 287.767v-3.858l-.184-3.86-.184-3.674-.184-3.675-.184-3.675-.368-3.676-.184-3.49-.184-2.022 28.665-2.205.184 2.205.184 3.675.366 3.859.184 3.859.184 3.858.184 3.86.184 3.858v4.042zM356.517 286.848v2.207l-.184.734v.736l-.184.734-.368.552-.184.736-.184.552-.368.735-.368.552-.368.552-.368.552-.368.736-.368.368-.552.552-.366.552-.552.366-.55.552-.553.369-.552.367-.55.369-.734.366-.552.368-.55.183-.737.368-.734.184-.55.184-.736.184h-.734l-.736.184h-2.205l-.734-.184h-.736l-.735-.184-.55-.184-.736-.184-.734-.184-.55-.368-.736-.184-.55-.368-.553-.368-.55-.366-.552-.368-.55-.55-.55-.368-.55-.552-.369-.552-.55-.369-.368-.552-.368-.552-.368-.734-.368-.552-.368-.552-.184-.734-.184-.55-.368-.737-.184-.734v-.734l-.184-.736v-.734l-.184-.736 28.665-.919zM329.138 345.097v-1.47l.184-.734v-.734l.184-.736.184-.735.184-.552.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.368-.552.368-.552.55-.552.55-.552.369-.368.55-.552.55-.366.55-.368.736-.368.55-.369.553-.184.734-.367.736-.184.552-.184.734-.184.736-.184h.735l.736-.184H344.759l.734.184h.552l.737.184.734.184.736.184.552.368.734.184.55.368.552.368.736.366.553.368.55.369.55.368.368.552.55.368.55.552.368.552.368.552.369.552.368.734.368.55.368.553.184.736.184.55.184.734.184.734.184.736.184.735v1.47l-28.665.55z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M329.873 373.947v-.184l-.184-9.004-.368-9.004-.184-9.003v-1.655l28.665-.552v1.47l.368 9.005.184 8.82.368 9.004zM358.722 372.844v.919l-.184.552v.736l-.184.734v.736l-.184.734-.184.552-.368.736-.184.735-.368.552-.184.552-.368.736-.368.552-.55.55-.368.552-.368.368-.553.552-.55.553-.552.367-.552.369-.55.552-.55.184-.55.366-.735.367-.55.369-.736.184-.55.184-.735.183-.736.184-.734.184h-3.675l-.736-.184-.55-.184-.734-.183-.736-.184-.55-.184-.735-.184-.552-.366-.736-.369-.552-.367-.552-.369-.55-.368-.55-.368-.552-.552-.368-.368-.553-.552-.368-.552-.55-.552-.368-.55-.368-.552-.368-.735-.184-.552-.368-.734-.184-.552-.184-.734-.184-.736-.184-.552-.184-.735v-.736l-.184-.734 28.849-1.102zM333.732 432.012l-.184-.734v-.736l.184-.735v-1.288l.184-.734.184-.734.184-.736.184-.552.368-.735.184-.552.368-.552.368-.734.368-.552.368-.552.368-.552.55-.552.368-.368.55-.552.55-.368.55-.55.553-.369.552-.366.55-.368.734-.368.55-.184.737-.368.55-.184.734-.184.736-.184h.735l.734-.184h2.94l.736.184h.553l.734.184.736.184.55.184.734.368.55.184.737.368.552.368.55.366.55.369.55.367.55.55.553.369.368.55.55.552.368.552.368.552.368.552.368.735.368.552.184.552.368.734.184.734.184.552.184.734.184.735v.736l-28.482 2.756zM337.407 461.228l-.55-4.042-.735-4.594-.55-4.594-.55-4.594-.552-4.777-.55-4.594-.185-2.021 28.482-2.756.184 1.837.55 4.41.552 4.41.552 4.41.55 4.41.55 4.227.553 4.042z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M365.705 457.002l.184.734v2.939l-.184.736v.552l-.184.735-.184.734-.369.552-.183.734-.185.552-.368.736-.368.552-.368.552-.368.55-.368.553-.552.552-.55.552-.368.367-.552.552-.552.369-.55.368-.55.368-.737.369-.55.367-.734.369-.55.184-.736.183-.735.184-.736.184-.55.184h-.734l-.734.184h-1.471l-.736-.184h-.734l-.736-.184-.55-.184-.734-.184-.737-.183-.552-.184-.734-.369-.55-.367-.552-.369-.552-.368-.55-.368-.55-.369-.553-.367-.55-.552-.55-.552-.368-.552-.368-.552-.55-.55-.368-.553-.184-.552-.368-.736-.369-.552-.184-.734-.184-.552-.368-.734v-.735l-.184-.736 28.299-4.226zM351.188 519.477l-.184-.734-.184-.736-.184-.552-.184-.734v-3.493l.184-.734.184-.734v-.735l.368-.552.184-.736.184-.552.368-.734.368-.552.184-.552.55-.552.368-.552.368-.55.55-.552.369-.552.552-.369.55-.552.55-.368.552-.368.55-.368.735-.368.55-.368.736-.184.734-.366.734-.184.736-.184.552-.184h.735l.736-.184H365.887l.55.184h.737l.734.184.55.184.736.184.734.184.55.368.553.184.736.368.552.368.55.368.55.368.55.552.55.368.553.552.368.368.55.552.368.552.368.734.368.55.368.553.368.736.184.734.368.552-27.195 9.188zM362.58 547.591l-.735-1.654-.918-1.838-.919-2.02-.918-2.022-.918-2.021-.918-2.021-.735-2.022-.918-2.205-.734-2.021-.736-2.021-.919-2.022-.734-2.205-.736-2.02-.552-2.022 27.196-9.188.55 1.838.734 1.837.55 1.838.737 1.838.734 1.837.734 1.837.552 1.838.734 1.654.919 1.837.734 1.838.736 1.654.734 1.838.918 1.654.735 1.655z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M388.49 535.28l.368.736.184.55.184.735.184.734.184.736.184.552v.734l.184.736v1.471l-.184.552v.734l-.184.736-.184.734-.184.552-.184.736-.184.553-.368.734-.184.552-.368.552-.368.552-.368.736-.368.552-.55.368-.55.552-.369.552-.55.367-.552.552-.55.366-.735.368-.552.368-.734.368-.552.368-.736.184-.734.184-.735.184-.55.183-.736.184h-.734l-.736.184h-1.286l-.737-.184h-.734l-.736-.184-.55-.183-.734-.184-.552-.184-.736-.184-.55-.368-.735-.184-.552-.367-.55-.367-.55-.367-.55-.369-.553-.552-.55-.368-.55-.552-.368-.552-.55-.552-.368-.55-.368-.734-.368-.552-.368-.734 25.908-12.312zM399.515 597.94l-.552-.369-.55-.552-.368-.552-.552-.552-.368-.734-.368-.552-.369-.552-.183-.735-.369-.552-.184-.734-.184-.552-.184-.734-.184-.734-.184-.553v-3.49l.184-.735v-.734l.184-.552.184-.734.184-.552.368-.736.185-.734.368-.553.368-.552.368-.734.55-.552.368-.552.55-.552.55-.552.368-.368.55-.552.737-.368.55-.552.552-.184.552-.368.734-.366.55-.184.736-.368.735-.184.55-.184h.736l.734-.184h.552l.736-.184h1.471l.552.184h.734l.736.184.552.184.734.184.736.184.552.184.735.367.55.369.552.366.736.368.55.368.55.552.55.368-19.477 20.948z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M425.056 616.682l-1.654-.918-2.021-1.103-1.838-1.286-2.021-1.286-1.838-1.102-1.837-1.287-1.838-1.47-1.837-1.286-1.655-1.287-1.837-1.47-1.654-1.286-1.654-1.47-1.655-1.47-1.654-1.471-.55-.552 19.477-20.948.184.367 1.47 1.102 1.287 1.102 1.286 1.102 1.47 1.103 1.287 1.102 1.47 1.102 1.47 1.103 1.47 1.102 1.471.918 1.47 1.102 1.47.919 1.655.918 1.47.918 1.838 1.102zM439.756 592.06l.553.367.552.368.55.553.55.367.55.552.552.552.368.369.552.734.368.552.368.552.368.552.184.552.368.734.184.552.184.735.184.734.184.552.184.734v.734l.183.552v2.203l-.183.552v.734l-.184.735-.184.734-.184.55-.368.734-.184.735-.368.552-.368.734-.368.552-.368.552-.552.552-.368.552-.552.552-.55.552-.55.369-.55.552-.552.368-.55.368-.553.368-.734.368-.55.184-.736.184-.552.368-.735.184h-.55l-.736.184-.734.184h-2.755l-.736-.184h-.55l-.734-.184-.736-.184-.55-.184-.735-.183-.736-.368-.55-.369-.734-.367 14.7-24.623zM484.408 636.527l-.736-.184-.734-.184-.736-.183-.55-.184-.735-.369-.552-.184-.736-.367-.552-.369-.55-.367-.55-.369-.552-.552-.55-.368-.553-.552-.367-.368-.553-.552-.367-.552-.369-.552-.367-.553-.369-.734-.368-.552-.184-.552-.368-.734-.184-.734-.184-.55-.184-.735-.184-.734v-1.286l-.184-.735.184-.734v-1.468l.184-.735.184-.734.184-.734.184-.734.368-.552.184-.735.368-.552.369-.552.367-.734.369-.552.552-.552.368-.368.552-.552.368-.552.55-.369.553-.368.55-.552.55-.368.736-.184.55-.368.552-.368.735-.184.736-.184.55-.184.734-.184.736-.184h.735l.55-.184h1.47l.736.184h.734l-4.226 28.482z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M514.91 638.732h-3.49l-2.94-.184h-2.94l-2.94-.184-2.756-.183-2.756-.184-2.757-.368-2.756-.184-2.756-.368-2.756-.368-1.655-.184 4.226-28.481 1.287.184 2.388.367 2.389.184 2.389.369 2.389.183 2.388.184 2.573.184 2.572.184h2.39l2.755.184h3.123z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M515.278 610.067h.736l.734.184h.735l.736.184.734.184.55.184.736.184.735.367.55.184.55.368.736.369.55.367.55.369.553.552.367.368.552.552.55.368.368.552.369.552.552.552.184.734.367.55.369.553.367.734.184.552.184.734.184.734.184.552v.735l.184.734v2.937l-.184.734-.184.734-.184.735-.184.552-.184.734-.183.552-.369.734-.368.552-.368.552-.368.734-.368.553-.368.552-.55.367-.368.552-.552.552-.55.369-.552.367-.55.369-.55.368-.735.368-.55.368-.55.184-.737.368-.734.184-.552.184-.736.184h-.734l-.736.184h-1.471l.369-28.665zM572.792 637.813h-1.472l-.736-.183-.736-.184h-.736l-.55-.184-.737-.184-.736-.368-.55-.184-.55-.368-.736-.368-.55-.368-.556-.368-.55-.369-.55-.367-.55-.552-.37-.552-.55-.368-.365-.552-.37-.552-.55-.735-.364-.552-.186-.552-.37-.734-.182-.552-.37-.734-.186-.552-.182-.735-.186-.734v-1.468l-.186-.734v-.735l.186-.734v-.734l.186-.734v-.553l.182-.734.37-.734.186-.55.182-.736.37-.55.364-.553.37-.734.364-.552.37-.552.55-.552.364-.368.556-.552.55-.552.55-.368.55-.368.55-.368.556-.368.55-.368.737-.368.55-.184.736-.184.55-.368h.736l.736-.183.736-.184H572.24l.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M601.458 637.262l-.55-28.665-28.666.552.55 28.665zM600.908 608.597h2.202l.737.184.736.184.556.184.736.184.73.183.556.368.55.184.736.368.55.369.55.367.551.552.556.369.55.368.364.552.556.552.364.552.365.552.37.552.364.552.37.734.364.55.186.553.37.734.182.734.186.735v.552l.186.734v.734l.186.734v.735l-.186.734v.734l-.186.734-.186.734v.735l-.364.552-.186.734-.186.552-.364.734-.37.552-.364.552-.37.552-.365.552-.55.553-.37.552-.55.552-.55.367-.55.369-.55.552-.556.368-.55.368-.55.184-.737.368-.55.368-.736.184-.736.183-.55.184-.736.184h-.737l-.736.184h-.736l-.55-28.665zM658.785 636.16h-1.466l-.736-.184h-.736l-.556-.184-.73-.184-.737-.184-.555-.368-.736-.184-.55-.368-.55-.368-.737-.368-.55-.368-.55-.368-.556-.368-.364-.552-.55-.552-.55-.369-.37-.552-.365-.552-.37-.734-.364-.552-.37-.552-.364-.734-.186-.552-.186-.735-.182-.552-.186-.734-.186-.734-.186-.734V619.802l.186-.734.186-.552.186-.734.182-.736.186-.55.364-.735.186-.552.37-.552.364-.734.37-.552.55-.552.364-.552.37-.368.55-.552.55-.552.55-.368.556-.368.55-.368.55-.368.737-.368.55-.368.55-.184.736-.184.737-.184.736-.184.55-.184.736-.183h1.472l.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M687.452 635.609l-.55-28.666-28.667.552.55 28.665zM686.902 606.943h2.208l.736.184.736.184.736.184.55.184.736.184.55.368.736.184.55.368.551.368.556.368.55.552.55.368.55.368.55.552.37.552.55.552.37.552.365.552.37.553.364.734.186.552.364.552.186.734.186.734.182.735.186.55v.734l.186.734v2.203l-.186.734v.734l-.186.735-.182.734-.186.552-.365.734-.185.552-.37.735-.364.552-.37.552-.365.552-.37.552-.364.552-.55.552-.55.552-.37.368-.55.368-.55.552-.556.368-.736.369-.55.183-.55.369-.737.368-.736.184-.55.184-.736.184-.736.184h-.736l-.736.183h-.737l-.55-28.665zM744.97 634.506H743.496l-.736-.184h-.736l-.736-.184-.736-.184-.55-.184-.736-.367-.55-.184-.737-.369-.555-.368-.55-.368-.55-.368-.551-.368-.55-.368-.556-.552-.55-.552-.365-.368-.55-.552-.37-.552-.364-.735-.37-.552-.364-.552-.186-.734-.37-.552-.183-.734-.186-.552-.185-.735-.186-.734v-.734l-.183-.734v-2.203l.183-.734v-.736l.186-.55.185-.735.186-.734.365-.552.186-.734.364-.552.37-.552.364-.735.37-.552.364-.552.37-.552.55-.368.365-.552.555-.55.55-.369.55-.367.551-.369.736-.367.55-.369.556-.368.736-.183.55-.184.736-.184.737-.184.736-.184.736-.184h1.466l.556 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M773.63 633.955l-.55-28.666-28.666.552.555 28.666z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M773.08 605.29h2.208l.55.183.737.184.736.184.736.184.55.184.736.368.55.184.556.367.736.369.55.367.55.552.55.369.37.367.55.553.365.55.556.552.365.552.37.552.364.552.364.734.37.552.186.552.182.734.186.735.186.734.186.552.182.734v3.671l-.182.735-.186.734-.186.734-.186.552-.182.735-.37.552-.186.734-.364.552-.364.55-.37.552-.55.552-.37.552-.55.552-.365.552-.555.368-.55.368-.55.552-.551.368-.55.368-.736.184-.556.369-.73.367-.556.184-.736.184-.736.184-.55.184h-.737l-.736.184h-.736l-.55-28.665zM830.963 632.852h-1.472l-.736-.184h-.737l-.736-.183-.55-.184-.736-.184-.736-.184-.55-.368-.55-.369-.736-.184-.55-.368-.556-.552-.55-.368-.55-.368-.551-.552-.37-.368-.55-.552-.365-.552-.37-.552-.55-.55-.364-.552-.186-.734-.37-.553-.182-.734-.37-.552-.186-.734-.182-.734-.186-.735v-1.286l-.186-.734v-.734l.186-.736v-.735l.186-.734v-.734l.182-.734.37-.552.186-.735.182-.552.37-.734.364-.552.37-.552.364-.552.37-.552.55-.55.364-.552.556-.552.55-.368.55-.552.55-.369.551-.367.556-.369.55-.367.736-.184.55-.368.736-.184.55-.184.737-.184.736-.184h.736l.736-.183h.736l.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M859.814 632.117l-5.697.184-5.882.184-6.063.184-5.882.184h-5.327l-.55-28.666 5.327-.184h5.882l5.877-.183 5.697-.184 5.698-.184z",
      stroke: "none"
    }), /* @__PURE__ */ React133.createElement("path", {
      d: "M858.894 603.452h1.472l.736.184h.736l.736.184.736.184.55.184.736.183.55.369.737.184.55.368.55.368.55.368.556.552.55.368.55.368.55.552.37.552.55.55.365.552.37.552.364.552.37.553.364.734.186.552.186.734.365.734.186.552v.735l.186.734v.734l.182.734v.735l-.182.734v.734l-.186.734v.735l-.186.552-.182.734-.37.552-.186.734-.365.552-.37.734-.364.552-.37.55-.364.553-.364.552-.556.552-.365.368-.55.552-.556.368-.55.552-.55.368-.55.368-.736.368-.55.184-.737.368-.555.184-.731.184-.736.184-.556.184-.736.183h-1.466l-.92-28.665z",
      stroke: "none"
    }));
  }
  var Overlay_default4 = SvgOverlay4;

  // build/lib-react-tsx/reaction/Equilibrium.tsx
  var React134 = __toModule(require_react());
  function SvgEquilibrium({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React134.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React134.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React134.createElement("path", {
      d: "M126.157 256.415v60.835l-1.299-.039-1.282-.118-1.262-.194-1.244-.267-1.22-.34-1.2-.41-1.172-.477-1.147-.544-1.118-.611-1.088-.67-1.057-.734-1.025-.79-.989-.85-.953-.902-.917-.956-.876-1.006-.837-1.057-.793-1.105-.75-1.15-.703-1.191-.656-1.235-.608-1.274-.559-1.31-.504-1.349-.452-1.381-.397-1.413-.341-1.443-.282-1.472-.221-1.497-.162-1.522-.097-1.545-.033-1.565.033-1.566.097-1.544.162-1.523.22-1.497.283-1.472.341-1.443.397-1.413.452-1.381.504-1.348.559-1.311.608-1.274.656-1.235.703-1.192.75-1.149.793-1.105.837-1.056.876-1.007.917-.956.953-.902.99-.849 1.024-.79 1.057-.735 1.088-.67 1.118-.61 1.147-.545 1.172-.477 1.2-.41 1.22-.34 1.244-.268 1.262-.193 1.282-.12 1.3-.038zm701.611 60.835h-701.61v-60.835h701.61v60.835zm0 0v-60.835l1.3.039 1.281.12 1.263.192 1.243.268 1.22.34 1.2.41 1.172.477 1.147.544 1.119.611 1.088.67 1.057.734 1.024.791.99.849.953.902.917.957.876 1.006.837 1.056.793 1.105.75 1.15.704 1.192.653 1.234.61 1.274.557 1.31.506 1.349.455 1.381.396 1.413.338 1.443.279 1.473.22 1.496.161 1.523.096 1.545.032 1.565-.032 1.565-.096 1.545-.161 1.522-.22 1.497-.28 1.472-.337 1.443-.396 1.413-.455 1.382-.506 1.348-.558 1.31-.609 1.274-.653 1.235-.704 1.192-.75 1.15-.793 1.104-.837 1.057-.876 1.006-.917.956-.953.903-.99.848-1.024.791-1.057.734-1.088.67-1.12.611-1.146.544-1.172.477-1.2.41-1.22.34-1.243.268-1.263.193-1.282.12-1.299.039z",
      className: "fil0",
      clipRule: "evenodd",
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 0.882,
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React134.createElement("path", {
      className: "fil1 str0",
      d: "M867.823 286.866l-114.436 86.593",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 62.96436594,
      strokeLinecap: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React134.createElement("path", {
      className: "fil1 str0",
      d: "M753.387 200.2l114.436 86.666",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 62.96436594,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React134.createElement("path", {
      d: "M874.384 486.192v60.836l1.3-.04 1.282-.118 1.262-.193 1.244-.267 1.22-.34 1.2-.41 1.172-.478 1.146-.544 1.12-.61 1.087-.671 1.057-.733 1.025-.791.989-.849.953-.902.917-.957.876-1.006.836-1.056.794-1.105.75-1.15.703-1.192.656-1.234.608-1.274.558-1.311.505-1.348.452-1.381.397-1.414.34-1.442.283-1.473.22-1.496.163-1.523.097-1.545.032-1.565-.032-1.565-.097-1.545-.162-1.523-.22-1.496-.283-1.473-.341-1.442-.397-1.413-.452-1.382-.505-1.348-.558-1.31-.608-1.274-.656-1.235-.703-1.192-.75-1.15-.794-1.104-.836-1.057-.876-1.006-.917-.956-.953-.903-.99-.848-1.024-.791-1.057-.734-1.088-.67-1.119-.611-1.146-.544-1.173-.477-1.199-.41-1.22-.34-1.244-.268-1.262-.194-1.282-.119-1.3-.039zm-701.61 60.836h701.61v-60.836h-701.61v60.836zm0 0v-60.836l-1.3.04-1.282.119-1.262.193-1.244.267-1.22.34-1.2.411-1.172.477-1.146.544-1.119.61-1.088.67-1.057.735-1.025.79-.989.85-.954.902-.916.956-.876 1.006-.837 1.057-.793 1.105-.75 1.149-.704 1.192-.653 1.235-.61 1.274-.557 1.31-.506 1.348-.455 1.382-.397 1.413-.337 1.443-.279 1.472-.22 1.497-.162 1.522-.095 1.545-.032 1.565.032 1.565.095 1.545.162 1.523.22 1.496.279 1.473.337 1.443.397 1.413.455 1.381.506 1.348.557 1.31.61 1.275.653 1.234.704 1.192.75 1.15.793 1.105.837 1.056.876 1.007.916.956.954.902.99.849 1.024.79 1.057.735 1.088.67 1.12.61 1.145.545 1.173.477 1.199.41 1.22.34 1.244.268 1.262.193 1.282.12 1.3.038z",
      className: "fil0",
      clipRule: "evenodd",
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 0.882,
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React134.createElement("path", {
      className: "fil1 str0",
      d: "M132.72 516.643l114.434 86.594",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 62.96436594,
      strokeLinecap: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React134.createElement("path", {
      className: "fil1 str0",
      d: "M247.154 429.978L132.72 516.643",
      clipRule: "evenodd",
      fillRule: "evenodd",
      strokeWidth: 62.96436594,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }));
  }
  var Equilibrium_default = SvgEquilibrium;

  // build/lib-react-tsx/reaction/Search.tsx
  var React135 = __toModule(require_react());
  function SvgSearch2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React135.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React135.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React135.createElement("path", {
      d: "M423.177 667.09c-166.181 0-301.72-135.541-301.72-301.721 0-166.183 135.538-301.726 301.72-301.726 166.18 0 301.725 135.544 301.725 301.726 0 166.18-135.544 301.72-301.725 301.72",
      className: "fil0 str0",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.85,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React135.createElement("path", {
      className: "fil0 str1",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.8680981,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      d: "M875.305 876.912L652.382 578.46l-78.036 58.287 222.921 298.446"
    }), /* @__PURE__ */ React135.createElement("path", {
      d: "M797.267 935.193c11.855 15.876 34.551 19.165 50.425 7.306M847.694 942.498L868 927.33M868 927.33c15.874-11.858 19.162-34.545 7.304-50.418",
      className: "fil0 str1",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.849,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React135.createElement("path", {
      d: "M423.177 612.992c-136.382 0-247.623-111.241-247.623-247.623 0-136.389 111.241-247.623 247.623-247.623 136.387 0 247.623 111.234 247.623 247.623 0 136.382-111.236 247.623-247.623 247.623",
      className: "fil0 str2",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 24.319,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React135.createElement("g", {
      clipRule: "evenodd",
      fillRule: "evenodd",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }, /* @__PURE__ */ React135.createElement("path", {
      d: "M264.615 327.049h244.013c8.157 0 14.83 6.673 14.83 14.83v51.23c0 8.156-6.674 14.83-14.83 14.83H264.615c-8.156 0-14.83-6.674-14.83-14.83v-51.23c0-8.157 6.674-14.83 14.83-14.83z",
      className: "fil1",
      strokeWidth: 35.15589
    }), /* @__PURE__ */ React135.createElement("path", {
      d: "M474.54 500V234.988l132.504 132.507zM540.79 433.747",
      className: "fil2",
      fillRule: "nonzero",
      strokeWidth: 35.15589
    })));
  }
  var Search_default2 = SvgSearch2;

  // build/lib-react-tsx/safety/Toxic.tsx
  var React136 = __toModule(require_react());
  function SvgToxic2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React136.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React136.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React136.createElement("path", {
      d: "M336.034 221.151h103.78v-97.184h129.385v97.184h103.585c32.007 0 58.195 26.188 58.195 58.194v427.338c0 32.2-26.188 58.391-58.195 58.391h-336.75c-32.007 0-58.194-26.19-58.194-58.39V279.344c0-32.006 26.187-58.194 58.194-58.194z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React136.createElement("path", {
      d: "M420.027 156.943h168.958V81.097H420.027z",
      fill: "none",
      strokeWidth: 58.194,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React136.createElement("path", {
      d: "M420.027 156.943h168.958V81.097H420.027zM649.7 393.406c0-60.328-64.983-109.211-145.29-109.211-80.115 0-145.099 48.883-145.099 109.211 0 32.201 18.622 61.104 48.108 81.084a42.96 42.96 0 00-.581 7.177c0 20.95 13.772 38.796 32.588 45.198.581 13.578 11.833 24.441 25.606 24.441h78.95c13.772 0 24.83-10.863 25.411-24.441 19.01-6.402 32.59-24.248 32.59-45.198 0-2.521-.195-4.85-.584-7.177 29.68-19.98 48.302-48.883 48.302-81.084zM596.357 652.95c-.777 2.139-1.358 4.076-1.746 6.21l-48.884-21.339 55.479-24.052v.385c5.237 11.833 18.816 17.267 30.649 12.029 11.832-5.043 17.264-18.814 12.027-30.458a23.748 23.748 0 00-13.58-12.8c5.432-7.178 7.178-17.07 3.299-25.994-5.82-13.19-20.95-19.204-33.947-13.385-13.19 5.626-19.204 20.756-13.385 33.947.777 1.94 1.94 3.686 3.298 5.432l-83.024 36.082-2.134.965-1.94-.965-83.023-36.082c1.358-1.747 2.328-3.492 3.297-5.432 5.626-13.19-.388-28.321-13.384-33.947-12.997-5.82-28.322.195-33.947 13.385a25.52 25.52 0 003.298 25.994c-6.013 2.133-11.057 6.596-13.773 12.8-5.043 11.644.388 25.415 12.027 30.458 11.833 5.238 25.605-.196 30.649-12.03l.194-.384 55.284 24.052-48.883 21.339c-.194-2.134-.777-4.071-1.746-6.21-5.625-12.995-20.756-19.01-33.947-13.38-12.997 5.818-19.01 20.947-13.384 33.942 3.88 9.12 12.415 14.743 21.532 15.519-2.716 5.629-2.91 12.414-.195 18.624 5.238 11.833 18.817 17.262 30.65 12.029 11.833-5.048 17.07-18.82 12.026-30.653l-.194-.192 75.458-32.982 75.653 32.982-.194.192c-5.237 11.833.194 25.605 12.027 30.653 11.638 5.233 25.411-.196 30.455-12.029 2.715-6.21 2.522-12.995 0-18.624 9.117-.777 17.458-6.4 21.337-15.52 5.82-12.994-.194-28.123-13.384-33.942-12.997-5.629-28.127.385-33.947 13.38zM441.172 437.246c-24.248 0-43.84-19.786-43.84-44.034 0-24.247 19.592-43.84 43.84-43.84 24.247 0 43.84 19.593 43.84 43.84 0 24.248-19.593 44.034-43.84 44.034zm126.669 0c-24.248 0-44.034-19.786-44.034-44.034 0-24.247 19.786-43.84 44.034-43.84 24.247 0 43.84 19.593 43.84 43.84 0 24.248-19.593 44.034-43.84 44.034z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Toxic_default2 = SvgToxic2;

  // build/lib-react-tsx/spectra/Analyse.tsx
  var React137 = __toModule(require_react());
  function SvgAnalyse({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React137.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React137.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React137.createElement("path", {
      d: "M49.941 850.47h883.662M947.568 850.47l-51.27 38.956M896.298 811.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M97.35 628.574c87.832 20.764 119.621-79.197 124.583-157.475 11.576-179.157 25.725-256.151 86.179-252.84 158.21-1.106 12.679 436.775 212.233 419.502 95.92-8.268 107.445-74.991 112.222-153.82C637.529 399.965 639.89 316.333 650 250c37.85 109.516-34.656 379.125 139.542 382.616 35.649.735 64.68-.918 96.653-2.572",
      fill: "none",
      strokeWidth: 31.973,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M94.042 757.751l-.736-.184-.735-.184-.734-.368-.55-.184-.736-.368-.55-.368-.552-.368-.55-.368-.737-.368-.368-.55-.552-.369-.552-.552-.368-.552-.55-.552-.368-.552-.368-.552-.368-.552-.184-.734-.368-.552-.184-.552-.368-.734-.184-.735-.184-.552v-.734l-.184-.734v-.735l-.184-.552v-.734l.184-.734v-.734l.184-.735.184-.734.184-.734.184-.734.184-.552.368-.735.184-.552.368-.734.368-.552.368-.552.552-.552.368-.552.55-.552.552-.368.368-.552.552-.368.55-.368.553-.552.736-.184.552-.368.55-.368.734-.184.552-.184.734-.368h.735l.552-.184.736-.184h3.673l.552.184.736.184-6.431 27.93z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M126.75 760.14l-1.838.184h-2.389l-2.389.184H115.356l-2.204-.184h-2.389l-2.389-.184-2.389-.368-2.388-.184-2.39-.368-2.388-.552-2.388-.368-2.39-.552 6.432-27.93 1.837.368 1.655.368 1.837.184 1.655.368 1.654.184 1.838.184 1.654.184h1.838l1.654.184h3.492l1.654-.184h1.838l1.837-.184z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M124.912 731.475h2.206l.552.184h.734l.736.183.735.184.552.184.734.368.552.184.734.369.552.368.55.368.55.368.553.368.55.368.552.552.552.552.368.368.368.552.55.55.368.734.369.552.184.553.368.734.368.552.184.734.184.552.184.734.184.735v.734l.184.734V746.362l-.184.734v.734l-.184.734v.552l-.184.735-.368.734-.184.552-.184.734-.368.552-.368.552-.369.734-.368.553-.368.552-.552.55-.368.368-.552.552-.55.368-.552.552-.552.368-.55.369-.552.367-.55.369-.737.367-.55.184-.734.184-.736.184-.734.184-.55.184-.737.184h-.734l-1.838-28.666zM186.836 738.825l-.55.552-.735.184-.55.368-.736.184-.552.368-.734.184-.734.184h-.735l-.552.184H177.467l-.734-.184-.736-.184-.55-.184-.734-.184-.55-.184-.737-.184-.552-.368-.55-.368-.734-.368-.552-.368-.552-.368-.55-.552-.55-.368-.369-.552-.552-.552-.55-.552-.368-.552-.368-.553-.368-.734-.368-.552-.368-.734-.184-.734-.184-.552-.184-.735-.184-.734-.184-.552-.184-.734v-2.755l.184-.734v-.734l.184-.552.184-.735.184-.734.184-.552.368-.734.184-.55.368-.552.368-.735.368-.552.368-.552.55-.552.368-.552.552-.368.55-.552.55-.368.553-.552.736-.368 15.067 24.255z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M211.643 720.45l-1.47 1.286-1.839 1.654-2.02 1.47-1.838 1.655-1.838 1.47-2.021 1.47-1.837 1.47-2.022 1.471-2.02 1.286-2.022 1.47-2.021 1.287-1.838 1.286-2.021 1.103-15.068-24.256 1.47-.918 1.655-1.102 1.654-1.102 1.838-1.287 1.654-1.102 1.655-1.286 1.654-1.287 1.654-1.102 1.655-1.47 1.654-1.286 1.47-1.287 1.655-1.286 1.47-1.286z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M192.9 698.767l.55-.552.736-.366.55-.369.552-.367.735-.369.55-.366.736-.184.552-.366.734-.184h.736l.552-.184.735-.184h3.49l.55.184.737.184.734.184.55.184.736.184.55.184.735.366.552.368.55.368.736.368.55.368.55.552.55.368.553.552.368.552.55.552.368.55.368.737.368.552.368.552.368.734.184.736.184.55.184.735.184.552.184.734.184.734v2.757l-.184.734v.552l-.184.736-.184.734-.184.552-.184.736-.368.55-.184.735-.368.552-.368.552-.368.734-.368.552-.55.552-.368.552-.552.369-.55.55-18.743-21.683zM251.884 675.063l-.368.552-.368.552-.55.552-.553.552-.552.368-.55.55-.55.369-.55.368-.552.366-.735.368-.552.184-.734.368-.552.184-.734.184-.55.184-.735.183h-.736l-.55.184h-2.205l-.552-.184h-.736l-.734-.183-.736-.184-.55-.184-.734-.184-.736-.368-.55-.184-.735-.368-.552-.366-.552-.368-.736-.552-.55-.368-.55-.552-.369-.552-.55-.552-.368-.553-.552-.552-.368-.552-.368-.552-.184-.552-.368-.734-.184-.55-.368-.736-.184-.552-.184-.735v-.736l-.184-.734v-1.286l-.184-.736.184-.552v-1.471l.184-.734.184-.55.184-.736.184-.734.368-.552.368-.736.184-.553.368-.734.55-.552 23.336 16.538z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M267.87 649.154l-.918 1.654-1.102 2.205-1.286 2.021-1.287 2.205-1.102 2.022-1.286 2.204-1.286 2.022-1.47 2.021-1.287 2.205-1.286 2.022-1.47 2.021-1.287 2.02-.918 1.287-23.336-16.537.552-.919 1.286-1.837 1.286-1.838 1.103-1.837 1.286-1.838 1.102-1.837 1.102-2.022 1.103-1.837 1.286-1.837 1.102-1.838.919-2.022 1.102-1.837.918-1.654z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M242.697 635.373l.368-.55.368-.735.368-.552.55-.552.368-.552.552-.368.55-.552.55-.369.553-.552.55-.368.552-.366.734-.368.55-.184.552-.368.735-.184.55-.184.734-.184.736-.184.55-.184H256.66l.734.184h.736l.735.184.55.184.736.184.734.368.55.184.736.367.55.369.735.552.552.368.55.368.55.552.553.552.368.368.552.552.368.552.368.552.368.735.368.552.184.55.368.736.184.552.184.734.184.734.184.552.184.735v3.492l-.184.735v.552l-.184.736-.184.734-.184.552-.368.736-.184.734-.368.552-25.174-13.781zM289.737 592.008l-.184.734-.184.736-.184.734-.368.55-.369.735-.184.552-.368.552-.552.734-.368.552-.368.552-.552.368-.368.552-.552.369-.552.552-.55.368-.55.368-.735.368-.55.368-.55.184-.736.367-.55.184-.735.184-.55.184-.736.184-.734.184h-3.491l-.736-.184-.734-.184-.734-.184-.737-.184-.734-.184-.55-.367-.736-.184-.55-.368-.55-.368-.735-.368-.552-.552-.368-.368-.55-.552-.552-.368-.368-.552-.55-.552-.368-.55-.368-.553-.368-.552-.368-.736-.184-.55-.369-.552-.184-.734-.184-.736-.184-.552-.184-.735-.184-.736v-3.49l.184-.735.184-.736 27.93 6.248z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M293.044 569.406l-.184 2.021-.184 2.205-.184 2.022-.184 2.021-.368 2.205-.184 2.021-.368 2.205-.368 2.021-.552 2.205-.368 2.021-.368 1.655-27.93-6.248.184-1.286.368-1.838.368-1.655.368-1.654.184-1.837.368-1.655.184-1.654.184-1.654.184-1.655.184-1.654v-1.654z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M293.596 561.321l-28.666-1.838-.55 8.086 28.665 1.837z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M264.93 559.483v-.734l.185-.736.183-.552.185-.734.184-.736.184-.735.184-.55.368-.736.368-.552.368-.55.368-.552.368-.552.368-.552.552-.552.55-.552.368-.369.55-.552.55-.367.553-.369.734-.368.55-.368.552-.368.736-.184.55-.184.735-.368.736-.184h.55l.734-.184h.734l.736-.184h1.471l.734.184h.736l.734.184.736.184.55.184.735.184.55.368.736.368.552.184.55.368.735.368.55.552.552.368.368.366.55.552.552.552.368.552.368.552.368.553.368.552.368.552.368.734.184.552.368.736.184.552.184.734.184.736v.735l.184.736V561.323l-28.665-1.838zM295.985 503.623v1.47l-.184.735-.185.552-.184.736-.184.734-.184.552-.368.736-.184.552-.368.734-.368.552-.368.552-.368.55-.55.553-.368.552-.55.366-.55.552-.553.368-.55.369-.552.368-.55.368-.55.368-.736.368-.55.184-.735.184-.736.368-.55.184h-.734l-.736.184h-3.675l-.734-.184-.737-.184-.55-.184-.734-.184-.736-.183-.552-.369-.734-.184-.55-.368-.55-.368-.553-.368-.55-.368-.552-.552-.552-.369-.368-.552-.552-.55-.368-.552-.55-.55-.369-.552-.368-.552-.184-.552-.368-.736-.184-.552-.368-.735-.184-.736-.184-.552-.184-.734v-.736l-.184-.734v-1.471l28.665.919z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M296.72 474.59l-.185 5.33v6.43l-.184 6.8-.184 6.798-.184 3.675-28.665-.918.184-3.491.184-6.616V485.8l.184-6.432v-5.145z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M267.87 474.223l.185-.735v-1.47l.184-.734.184-.55.184-.736.368-.735.184-.552.368-.736.184-.552.368-.55.368-.552.552-.552.368-.552.368-.552.55-.552.552-.368.55-.55.552-.369.55-.368.55-.366.551-.368.734-.369.55-.184.737-.183.55-.369.734-.184h.736l.734-.184h.736l.735-.183h1.47l.734.183h.55l.736.184.735.184.736.184.55.184.734.366.55.184.737.368.55.368.55.368.552.369.55.552.55.368.369.55.55.552.368.552.55.552.368.552.368.55.368.553.184.552.368.734.184.736.184.552.184.734.184.736.184.735v1.286l.184.734-28.849-.368zM297.087 417.26v1.47l-.184.735v.552l-.184.736-.184.734-.368.552-.184.736-.368.552-.184.734-.368.55-.368.553-.55.552-.368.55-.369.552-.552.552-.552.368-.552.552-.55.367-.55.369-.55.368-.552.366-.735.368-.55.184-.736.366-.55.184-.734.184-.736.184h-.735l-.55.184h-2.941l-.736-.184-.734-.184h-.734l-.736-.368-.55-.184-.735-.184-.55-.368-.736-.368-.55-.369-.55-.366-.55-.368-.553-.368-.55-.552-.368-.368-.55-.552-.368-.552-.55-.552-.368-.55-.368-.553-.368-.552-.184-.734-.368-.552-.184-.734-.368-.552-.185-.734v-.737l-.183-.734-.185-.736v-1.47l28.666.368z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M297.822 388.962l-.184 3.675-.184 3.859v4.042l-.184 4.227v4.226l-.184 4.594v3.675l-28.665-.368v-3.675l.184-4.594v-4.594l.184-4.41v-4.226l.184-4.043.184-3.49z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M269.156 387.86v-.736l.184-.734.184-.736v-.735l.184-.736.368-.552.185-.734.368-.552.184-.736.368-.552.368-.552.368-.552.55-.55.368-.552.55-.553.368-.552.55-.368.55-.368.55-.552.553-.368.734-.184.552-.366.55-.368.736-.184.55-.184.735-.367h.734l.736-.184.735-.184h2.758l.734.184h.736l.734.184.737.184.552.183.734.369.734.184.552.368.55.368.552.368.552.368.55.368.55.552.551.368.552.552.368.552.368.552.552.552.368.55.368.552.184.735.368.552.184.734.368.552.184.734.184.736v.55l.184.735v2.206l-28.665-1.102zM308.847 346.7l-.55.368-.736.368-.55.368-.735.368-.55.368-.736.184-.55.184-.734.184-.737.183-.55.184h-.734l-.736.184h-2.021l-.734-.184h-.734l-.552-.184-.734-.183-.55-.184-.735-.184-.736-.368-.552-.184-.55-.368-.736-.368-.552-.368-.55-.552-.55-.368-.55-.55-.553-.368-.368-.552-.55-.55-.368-.735-.368-.552-.368-.552-.368-.736-.368-.552-.184-.734-.184-.736-.184-.552-.184-.734-.184-.736-.184-.553V334.2l.184-.736v-.734l.184-.736.184-.553.184-.734.184-.55.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.55-.553.368-.552.552-.552.55-.366.55-.552 17.64 22.785z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M313.073 336.41l11.944 7.717-1.102-.184H319.689l-.918.184h-1.836l-.736.184-.735.184h-.736l-.734.184-.736.183-.552.184-.55.184-.55.184h-.55l-.369.184-.55.368-.368.184-.368.183-.368.184-.368.184-.368.184.55-.184-17.64-22.785.55-.368 1.102-.736 1.287-.918 1.286-.736 1.286-.735 1.47-.552 1.287-.552 1.47-.552 1.286-.552 1.47-.552 1.47-.368 1.471-.368 1.287-.368 1.47-.184 1.654-.368 1.47-.184 1.47-.184 1.471-.183h1.654l1.47-.184h6.434l1.47.184 12.128 7.717z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M326.487 315.462h.736l.734.184h.736l.735.183.734.184.552.369.734.184.55.368.736.184.55.367.55.369.551.366.55.552.552.366.552.552.368.552.55.369.369.552.368.552.368.736.368.552.368.552.184.734.368.552.184.736.184.55.184.735.184.736V332.007l-.184.736-.184.552-.184.734-.184.736-.368.55-.184.735-.368.552-.368.552-.368.736-.368.552-.552.552-.368.368-.55.552-.369.552-.552.368-.552.55-.55.369-.55.368-.736.368-.55.184-.553.368-.734.184-.736.184-.552.183-.734.184-.736.184h-.734l-.737.184h-1.47l1.47-28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M313.808 337.696l-.368-.552-.368-.735 25.542-13.23.55 1.287.368.552z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M339.533 325.017l.185.734.368.552.184.736.184.734.184.737.184.55v.734l.184.736v2.021l-.184.736v.734l-.184.552-.184.736-.184.734-.368.55-.184.737-.369.55-.183.552-.369.552-.368.734-.55.552-.368.552-.55.368-.368.55-.55.552-.55.367-.553.368-.736.55-.55.368-.734.368-.55.184-.736.368-.735.184-.55.184-.736.184-.734.184h-.734l-.736.184H326.124l-.736-.184h-.734l-.552-.184h-.736l-.735-.184-.552-.184-.736-.368-.55-.184-.734-.367-.55-.369-.55-.183-.553-.553-.55-.367-.55-.369-.552-.552-.55-.367-.368-.55-.55-.553-.369-.552-.368-.734-.368-.552-.368-.734 25.725-12.68zM323.73 388.411v-2.206l.185-.734v-.737l.184-.552.184-.734.184-.734.184-.552.368-.734.184-.552.368-.552.368-.736.368-.553.368-.552.55-.552.368-.55.552-.368.55-.55.369-.368.55-.368.736-.552.55-.369.552-.184.734-.368.552-.368.735-.184.552-.184.734-.184.736-.184h.734l.736-.184h2.941l.734.184.55.184.735.184.736.184.55.184.734.368.552.184.736.368.55.369.55.368.551.368.55.552.552.368.368.552.55.368.369.552.368.55.55.553.368.734.184.552.368.552.368.734.184.736.184.552.184.734.184.735.184.736v.734l-28.665 2.205z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M325.201 416.341v-3.858l-.184-3.86-.184-3.674-.184-3.675-.184-3.675-.368-3.676-.184-3.49-.184-2.022 28.665-2.205.184 2.205.184 3.675.366 3.859.184 3.859.184 3.858.184 3.86.184 3.858v4.042zM353.866 415.422v2.207l-.184.734v.736l-.184.734-.368.552-.184.736-.184.552-.368.735-.368.552-.368.552-.368.552-.368.736-.368.368-.552.552-.366.552-.552.366-.55.552-.553.369-.552.367-.55.369-.734.366-.552.368-.55.183-.737.368-.734.184-.55.184-.736.184h-.734l-.736.184h-2.205l-.734-.184h-.736l-.734-.184-.55-.184-.737-.184-.734-.184-.55-.368-.736-.184-.55-.368-.553-.368-.55-.366-.552-.368-.55-.55-.55-.368-.55-.552-.369-.552-.55-.369-.368-.552-.368-.552-.368-.734-.368-.552-.368-.552-.184-.734-.184-.55-.368-.737-.184-.734v-.734l-.184-.736v-.734l-.184-.736 28.665-.919zM326.487 473.671v-1.47l.184-.734v-.734l.184-.736.184-.735.184-.552.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.368-.552.368-.552.55-.552.55-.552.369-.368.55-.552.55-.366.55-.368.736-.368.55-.369.553-.184.734-.367.736-.184.552-.184.734-.184.736-.184h.735l.736-.184H342.108l.734.184h.553l.736.184.734.184.736.184.552.368.734.184.55.368.552.368.737.366.552.368.55.369.55.368.368.552.55.368.55.552.369.552.368.552.368.552.368.734.368.55.368.553.184.736.184.55.184.734.184.734.184.736.184.735v1.47l-28.665.55z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M327.222 502.52v-.183l-.184-9.004-.368-9.004-.184-9.003v-1.655l28.665-.552v1.47l.368 9.005.184 8.82.368 9.004zM356.071 501.418v.919l-.184.552v.736l-.184.734v.736l-.184.734-.184.552-.368.736-.184.735-.368.552-.184.552-.368.736-.368.552-.55.55-.368.552-.368.368-.552.552-.55.553-.553.367-.552.369-.55.552-.55.183-.55.367-.735.367-.55.369-.736.184-.55.184-.734.183-.737.184-.734.184h-3.675l-.736-.184-.55-.184-.734-.183-.736-.184-.55-.184-.735-.184-.552-.366-.736-.369-.552-.367-.552-.369-.55-.368-.55-.368-.552-.552-.368-.368-.552-.552-.368-.552-.55-.552-.369-.55-.368-.552-.368-.735-.184-.552-.368-.734-.184-.552-.184-.734-.184-.736-.184-.552-.184-.735v-.736l-.184-.734 28.849-1.102zM331.08 560.586l-.183-.734v-.736l.184-.735v-1.288l.184-.734.184-.734.184-.736.184-.552.368-.735.184-.552.368-.552.368-.734.368-.552.368-.552.368-.552.55-.552.368-.368.55-.552.55-.368.551-.55.552-.369.552-.366.55-.368.735-.368.55-.184.736-.368.55-.184.734-.184.736-.184h.735l.734-.184h2.94l.737.184h.552l.734.184.736.184.55.184.734.368.55.184.737.368.552.368.55.366.55.369.55.367.55.55.553.369.368.55.55.552.368.552.368.552.368.552.368.734.368.552.184.553.368.734.184.734.184.552.184.734.184.735v.736l-28.482 2.756zM334.756 589.802l-.55-4.042-.735-4.594-.55-4.594-.55-4.594-.552-4.777-.55-4.594-.185-2.021 28.482-2.756.184 1.837.55 4.41.552 4.41.552 4.41.55 4.41.55 4.227.553 4.042z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M363.054 585.576l.184.734v2.939l-.184.736v.552l-.184.735-.184.734-.368.552-.184.734-.184.552-.368.736-.369.552-.368.552-.368.55-.368.553-.552.552-.55.552-.368.367-.552.552-.552.369-.55.368-.55.368-.737.369-.55.367-.734.369-.55.184-.736.183-.735.184-.736.184-.55.184h-.734l-.734.184h-1.471l-.736-.184h-.734l-.736-.184-.55-.184-.734-.184-.737-.183-.552-.184-.734-.369-.55-.367-.552-.369-.552-.368-.55-.368-.55-.369-.553-.367-.55-.552-.55-.552-.368-.552-.368-.552-.55-.55-.368-.553-.184-.552-.368-.736-.368-.552-.185-.734-.183-.552-.369-.734v-.735l-.184-.736 28.299-4.226zM348.537 648.051l-.184-.734-.184-.736-.184-.552-.184-.734v-3.493l.184-.734.184-.734v-.735l.368-.552.184-.736.184-.552.368-.734.368-.552.184-.552.55-.552.368-.552.368-.55.55-.552.369-.552.552-.369.55-.552.55-.368.552-.368.55-.368.735-.368.55-.368.736-.184.734-.366.734-.184.736-.184.553-.184h.734l.736-.184H363.236l.55.184h.737l.734.184.55.184.736.184.734.184.55.368.553.184.736.368.552.368.55.368.55.368.55.552.55.368.553.552.368.368.55.552.368.552.368.734.368.55.368.553.368.736.184.734.368.552-27.195 9.188zM359.93 676.165l-.736-1.654-.918-1.838-.919-2.021-.918-2.021-.918-2.021-.918-2.021-.735-2.022-.918-2.205-.734-2.021-.736-2.021-.918-2.022-.735-2.205-.736-2.02-.552-2.022 27.196-9.188.55 1.838.734 1.837.55 1.838.737 1.838.734 1.837.734 1.837.552 1.838.734 1.654.919 1.837.734 1.838.736 1.654.734 1.838.919 1.654.734 1.654zM385.839 663.854l.368.736.184.55.184.735.184.734.184.736.184.552v.734l.184.736v1.471l-.184.552v.734l-.184.736-.184.734-.184.552-.184.736-.184.553-.368.734-.184.552-.368.552-.368.552-.368.736-.368.552-.55.368-.55.552-.369.552-.55.367-.552.552-.55.366-.735.368-.552.368-.734.368-.552.368-.736.184-.734.184-.735.184-.55.183-.736.184h-.734l-.736.184h-1.286l-.736-.184h-.735l-.736-.184-.55-.183-.734-.184-.552-.184-.736-.184-.55-.368-.735-.184-.552-.367-.55-.367-.55-.367-.55-.369-.553-.552-.55-.368-.55-.552-.368-.552-.55-.552-.368-.55-.368-.734-.368-.552-.368-.734 25.908-12.312zM396.864 726.513l-.552-.368-.55-.552-.368-.552-.552-.552-.368-.734-.368-.552-.368-.552-.184-.735-.368-.552-.185-.734-.184-.552-.184-.734-.184-.734-.184-.553v-3.49l.184-.735v-.734l.184-.552.184-.734.184-.552.369-.736.184-.735.368-.552.368-.552.368-.734.55-.552.368-.552.55-.552.55-.552.368-.368.55-.552.737-.368.55-.552.552-.184.552-.368.734-.366.55-.184.737-.368.734-.184.55-.184h.736l.734-.184h.552l.736-.184h1.471l.552.184h.734l.736.184.552.184.734.184.736.184.552.184.735.367.55.369.552.366.736.368.55.368.55.552.55.368-19.477 20.948z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M422.405 745.256l-1.654-.918-2.021-1.103-1.838-1.286-2.021-1.286-1.838-1.102-1.837-1.287-1.838-1.47-1.837-1.286-1.654-1.287-1.838-1.47-1.654-1.286-1.654-1.47-1.655-1.47-1.654-1.471-.55-.552 19.477-20.948.184.367 1.47 1.102 1.287 1.102 1.286 1.102 1.47 1.103 1.287 1.102 1.47 1.102 1.47 1.103 1.47 1.102 1.471.918 1.47 1.102 1.47.919 1.655.918 1.47.918 1.838 1.102zM437.106 720.633l.552.368.552.368.55.553.55.367.55.552.552.552.368.369.552.734.368.552.368.552.368.552.184.552.368.734.184.552.184.735.184.734.184.552.184.734v.734l.183.552v2.203l-.183.552v.734l-.184.735-.184.734-.184.55-.368.734-.184.735-.368.552-.368.734-.368.552-.368.552-.552.552-.368.552-.552.552-.55.552-.55.369-.55.552-.552.368-.55.368-.553.368-.734.368-.55.184-.736.184-.552.368-.735.184h-.55l-.736.184-.734.184h-2.755l-.736-.184h-.55l-.734-.184-.736-.184-.55-.184-.735-.184-.736-.367-.55-.369-.734-.367 14.7-24.623zM481.757 765.101l-.736-.184-.734-.184-.736-.184-.55-.183-.735-.369-.552-.184-.736-.367-.552-.369-.55-.367-.55-.369-.552-.552-.55-.368-.553-.552-.367-.368-.552-.552-.368-.552-.369-.552-.367-.553-.369-.734-.368-.552-.184-.552-.368-.734-.184-.734-.184-.55-.184-.735-.184-.734v-1.286l-.183-.735.183-.734v-1.468l.184-.735.184-.734.184-.734.184-.734.368-.552.184-.735.368-.552.369-.552.367-.734.369-.552.552-.552.368-.368.552-.552.368-.552.55-.369.553-.368.55-.552.55-.368.736-.184.55-.368.553-.368.734-.184.736-.184.55-.184.734-.184.736-.184h.735l.55-.184h1.47l.736.184h.734l-4.226 28.482z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M512.26 767.306h-3.49l-2.94-.184h-2.94l-2.94-.184-2.757-.183-2.756-.184-2.757-.368-2.756-.184-2.756-.368-2.756-.368-1.655-.184 4.226-28.481 1.287.184 2.388.367 2.39.184 2.388.369 2.389.183 2.389.184 2.572.184 2.572.184h2.39l2.755.184h3.123z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M512.627 738.641h.736l.734.184h.735l.736.184.734.184.55.184.736.183.735.368.55.184.55.368.736.369.55.367.55.369.553.552.367.368.552.552.55.368.368.552.369.552.552.552.184.734.367.55.369.553.367.734.184.552.184.734.184.734.184.552v.735l.184.734v2.937l-.184.734-.184.734-.184.735-.184.552-.184.734-.183.552-.369.734-.367.552-.369.552-.368.734-.368.552-.368.553-.55.367-.368.552-.552.552-.55.369-.552.367-.55.369-.55.368-.735.368-.55.368-.55.184-.737.368-.734.184-.552.184-.736.184h-.734l-.736.184h-1.471l.369-28.665zM570.141 766.387h-1.472l-.736-.183-.736-.184h-.736l-.55-.184-.736-.184-.737-.368-.55-.184-.55-.368-.736-.368-.55-.368-.556-.368-.55-.369-.55-.367-.55-.552-.37-.553-.55-.367-.365-.552-.37-.552-.55-.735-.364-.552-.186-.552-.37-.734-.182-.552-.37-.734-.186-.552-.182-.735-.186-.734v-1.468l-.186-.735v-.734l.186-.734v-.734l.186-.734v-.553l.182-.734.37-.734.186-.55.182-.736.37-.55.364-.553.37-.734.364-.552.37-.552.55-.552.364-.368.556-.552.55-.552.55-.368.55-.368.55-.368.557-.368.55-.368.736-.368.55-.184.736-.184.55-.368h.736l.736-.183.737-.184h1.472l.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M598.807 765.836l-.55-28.665-28.666.552.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M598.257 737.171h2.202l.737.184.736.184.556.184.736.183.73.184.556.368.55.184.736.368.55.369.55.367.551.552.556.369.55.368.365.552.555.552.364.552.365.552.37.552.364.552.37.734.364.55.186.553.37.734.182.734.186.734v.552l.186.735v.734l.186.734v.734l-.186.735v.734l-.186.734-.186.734v.735l-.364.552-.186.734-.186.552-.364.734-.37.552-.364.552-.37.552-.365.552-.55.553-.37.552-.55.552-.55.367-.55.369-.55.552-.556.367-.55.369-.55.184-.737.368-.55.368-.736.184-.736.183-.55.184-.736.184h-.737l-.736.184h-.736l-.55-28.665zM656.135 764.734h-1.467l-.736-.184h-.736l-.556-.184-.73-.184-.737-.184-.555-.368-.736-.184-.55-.368-.55-.368-.737-.368-.55-.368-.55-.368-.556-.368-.364-.552-.55-.552-.55-.369-.37-.552-.365-.552-.37-.734-.364-.552-.37-.552-.364-.734-.186-.552-.186-.735-.182-.552-.186-.734-.186-.734-.186-.734V748.376l.186-.734.186-.552.186-.734.182-.736.186-.55.364-.735.186-.552.37-.552.364-.734.37-.552.55-.552.364-.552.37-.368.55-.552.55-.552.55-.368.556-.368.55-.368.55-.368.737-.368.55-.368.55-.184.737-.184.736-.184.736-.184.55-.184.736-.183h1.472l.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M684.8 764.183l-.55-28.666-28.666.552.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M684.25 735.517H686.46l.736.184.736.184.736.184.55.184.736.184.55.368.737.184.55.368.55.368.556.368.55.552.55.368.55.368.55.552.37.552.55.552.37.552.365.552.37.552.364.735.186.552.364.552.186.734.186.734.182.735.186.55v.734l.186.734v2.203l-.186.734v.734l-.186.735-.182.734-.186.552-.364.734-.186.552-.37.735-.364.552-.37.552-.365.552-.37.552-.364.552-.55.552-.55.552-.37.368-.55.368-.55.552-.556.368-.736.368-.55.184-.55.369-.737.368-.736.184-.55.184-.736.184-.736.183h-.736l-.736.184h-.737l-.55-28.665zM742.318 763.08h-1.472l-.736-.184h-.736l-.736-.184-.736-.184-.55-.184-.736-.367-.55-.184-.737-.369-.555-.368-.55-.368-.55-.368-.55-.368-.551-.368-.556-.552-.55-.552-.365-.368-.55-.552-.37-.552-.364-.735-.37-.552-.364-.552-.186-.734-.37-.552-.182-.734-.186-.552-.186-.735-.186-.734v-.734l-.183-.734v-2.203l.183-.734v-.736l.186-.55.186-.735.186-.734.364-.552.186-.734.364-.552.37-.553.364-.734.37-.552.364-.552.37-.552.55-.368.365-.552.555-.55.55-.369.551-.367.55-.369.736-.368.55-.368.556-.368.736-.183.55-.184.737-.184.736-.184.736-.184.736-.184h1.466l.556 28.665zM770.98 762.529l-.55-28.666-28.667.552.556 28.666z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M770.43 733.863h2.207l.55.184.737.184.736.184.736.184.55.184.736.368.55.183.556.368.736.369.55.367.55.552.55.369.37.367.55.552.366.55.555.553.365.552.37.552.364.552.364.734.37.552.186.552.182.734.186.735.186.734.186.552.182.734v3.671l-.182.735-.186.734-.186.734-.186.552-.182.734-.37.553-.186.734-.364.552-.364.55-.37.552-.55.552-.37.552-.55.552-.365.552-.555.368-.55.368-.55.552-.551.368-.55.368-.736.184-.556.369-.73.367-.556.184-.736.184-.736.184-.55.184h-.737l-.736.184h-.736l-.55-28.665zM828.312 761.426h-1.472l-.736-.184h-.736l-.737-.184-.55-.183-.736-.184-.736-.184-.55-.368-.55-.369-.736-.184-.55-.368-.556-.552-.55-.368-.55-.368-.551-.552-.37-.368-.55-.552-.365-.552-.37-.552-.55-.55-.364-.552-.186-.735-.37-.552-.182-.734-.37-.552-.186-.734-.182-.734-.186-.735v-1.286l-.186-.734v-.734l.186-.736v-.735l.186-.734v-.734l.182-.734.37-.552.186-.735.182-.552.37-.734.364-.552.37-.552.364-.552.37-.552.55-.55.364-.552.556-.552.55-.368.55-.552.55-.369.551-.367.556-.369.55-.367.736-.184.55-.368.736-.184.55-.184.737-.184.736-.184h.736l.736-.183h.736l.55 28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M857.163 760.691l-5.697.184-5.882.184-6.063.184-5.882.184h-5.327l-.55-28.666 5.327-.184h5.882l5.877-.183 5.698-.184 5.697-.184z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M856.243 732.026h1.472l.736.184h.736l.736.184.736.184.55.183.736.184.55.369.737.184.55.368.55.368.55.368.556.552.55.368.55.368.55.552.37.552.55.55.365.552.37.552.364.552.37.553.364.734.186.552.186.734.365.734.186.552v.735l.186.734v.734l.182.734v.735l-.182.734v.734l-.186.734v.734l-.186.553-.182.734-.37.552-.186.734-.365.552-.37.734-.364.552-.37.55-.364.553-.364.552-.556.552-.365.368-.55.552-.556.368-.55.552-.55.368-.55.368-.736.368-.55.184-.737.368-.555.184-.73.184-.737.184-.556.184-.736.183h-1.466l-.92-28.665z",
      stroke: "none"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M750 850V100",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 31.053,
      strokeDasharray: "31.05295017,31.05295017"
    }), /* @__PURE__ */ React137.createElement("path", {
      d: "M530 850V100",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 31.053,
      strokeDasharray: "31.0529,31.0529"
    }));
  }
  var Analyse_default = SvgAnalyse;

  // build/lib-react-tsx/spectra/Compare.tsx
  var React138 = __toModule(require_react());
  function SvgCompare({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React138.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React138.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React138.createElement("path", {
      d: "M49.941 850.47h883.662M947.568 850.47l-51.27 38.956M896.298 811.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React138.createElement("g", {
      fill: "none",
      strokeWidth: 31.973,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, /* @__PURE__ */ React138.createElement("path", {
      d: "M97.35 628.574c87.832 20.764 119.621-79.197 124.583-157.475 11.576-179.157 25.725-256.151 86.179-252.84 158.21-1.106 12.679 436.775 212.233 419.502 95.92-8.268 107.445-74.991 112.222-153.82C637.529 399.965 639.89 316.333 650 250c37.85 109.516-34.656 379.125 139.542 382.616 35.649.735 64.68-.918 96.653-2.572"
    }), /* @__PURE__ */ React138.createElement("path", {
      d: "M100 750c87.833 20.764 150-50 150-100 0 0 0-50 50-50 100 0 23.442 176.46 222.995 159.187C600 750 643.223 756.83 648 678c0-50 2 22 2-78 0 100-32.005 150.551 142.193 154.042 35.649.735 64.68-.918 96.652-2.572"
    })));
  }
  var Compare_default = SvgCompare;

  // build/lib-react-tsx/spectra/Deconvolution.tsx
  var React139 = __toModule(require_react());
  function SvgDeconvolution({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React139.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React139.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React139.createElement("path", {
      d: "M49.941 850.47h883.662M947.568 850.47l-51.27 38.956M896.298 811.7l51.27 38.77",
      fill: "none",
      strokeWidth: 39.323,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React139.createElement("path", {
      d: "M94.492 348.574C285.488 350.806 182.212 58.298 300 58.571c126.782-1.063 52.857 285.715 220.345 287.762C628.763 344.998 600 208.57 650 208.57s-8.942 134.84 139.542 132.617c35.653-.514 56.109 1.939 88.081.284M94.492 728.574C300 750 200 600 300 600c100 0 52.857 124.286 220.345 126.333C628.763 724.998 600 500 650 500s-8.942 223.41 139.542 221.188c35.653-.514 56.109 1.939 88.081.284",
      fill: "none",
      strokeWidth: 31.973,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React139.createElement("path", {
      fillRule: "evenodd",
      d: "M330 492h250v50H330z"
    }), /* @__PURE__ */ React139.createElement("path", {
      d: "M430 392h50v250h-50z"
    }));
  }
  var Deconvolution_default = SvgDeconvolution;

  // build/lib-react-tsx/spectra/Pca.tsx
  var React140 = __toModule(require_react());
  function SvgPca({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React140.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React140.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React140.createElement("ellipse", {
      cx: 75,
      cy: 425,
      rx: 325,
      ry: 125,
      fillOpacity: 0,
      stroke: "none",
      strokeWidth: 40
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 225,
      cy: 225,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 225,
      cy: 225,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 114.91,
      cy: 408.333,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 333.018,
      cy: 375.991,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 255.18,
      cy: 550.405,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 683.198,
      cy: 238.333,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 875.901,
      cy: 313.378,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 822.838,
      cy: 128.784,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 781.306,
      cy: 870.135,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 620.676,
      cy: 785.901,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }), /* @__PURE__ */ React140.createElement("circle", {
      cx: 874.279,
      cy: 712.387,
      r: 75,
      stroke: "none",
      strokeWidth: 20,
      strokeDasharray: "20,20"
    }));
  }
  var Pca_default = SvgPca;

  // build/lib-react-tsx/spectra/Phylogram.tsx
  var React141 = __toModule(require_react());
  function SvgPhylogram({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React141.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React141.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React141.createElement("path", {
      d: "M50 550h350M650 400h300M850 700h100M850 700h100M850 850h100M750 100h200M750 200h200M650 150h100M850 700v150M650 150v250M650 125v300M400 275v500M400 300h250M850 675v200M750 75v150M375 775h475",
      fill: "none",
      strokeWidth: 50
    }));
  }
  var Phylogram_default = SvgPhylogram;

  // build/lib-react-tsx/structure/3DModelText.tsx
  var React142 = __toModule(require_react());
  function Svg3DModelText({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React142.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React142.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React142.createElement("path", {
      d: "M404.514 595.703c0 27.632-5.257 52.182-15.784 73.675-10.526 21.339-25.287 39.323-44.146 53.94-18.859 14.465-41.364 25.574-67.674 33.175-26.316 7.602-54.964 11.264-86.104 11.264-18.853 0-36.54-1.32-53.062-3.95-16.521-2.781-31.139-6.137-43.854-10.084-12.716-4.093-23.242-8.184-31.568-12.43-8.189-4.378-13.596-7.602-16.225-9.943-2.64-2.19-4.537-4.818-5.709-7.602-1.314-2.914-2.486-6.28-3.509-10.087-1.023-3.938-1.749-8.767-2.188-14.618-.44-5.841-.583-12.857-.583-21.194 0-13.74 1.166-23.243 3.36-28.5 2.338-5.27 5.847-7.887 10.378-7.887 2.777 0 7.749 1.89 14.761 5.84 7.018 3.795 15.938 7.898 26.75 12.43 10.823 4.376 23.538 8.48 38.157 12.418 14.47 3.805 31.134 5.698 49.696 5.698 15.641 0 29.533-1.894 41.517-5.545 11.984-3.663 22.213-8.921 30.551-15.652 8.48-6.721 14.761-14.761 18.853-24.407 4.097-9.504 6.291-20.173 6.291-31.867 0-12.858-2.634-24.407-7.6-34.637-4.972-10.383-12.429-19.15-22.219-26.464-9.801-7.162-22.225-12.86-37.277-16.808-14.916-4.092-32.603-5.996-52.918-5.996h-47.947c-3.651 0-6.869-.583-9.35-1.605-2.64-.88-4.829-3.068-6.434-6.137-1.755-3.223-2.926-7.458-3.658-13.013-.731-5.698-1.023-12.87-1.023-21.636 0-8.326.292-15.058 1.023-20.46.731-5.267 1.903-9.36 3.36-12.143 1.612-2.915 3.657-4.818 5.995-5.984 2.486-1.176 5.412-1.76 8.772-1.76h48.381c16.664 0 31.282-1.902 44.151-5.697 12.858-3.95 23.682-9.361 32.305-16.521 8.767-7.16 15.345-15.785 20.024-25.868 4.527-10.234 6.726-21.35 6.726-33.626 0-9.502-1.462-18.418-4.68-26.75-3.069-8.475-7.75-15.79-13.887-21.922-6.138-6.138-14.036-10.966-23.825-14.48-9.646-3.652-21.053-5.406-34.208-5.406-14.91 0-28.797 2.194-41.952 6.583-13.155 4.532-24.847 9.354-35.374 14.618-10.384 5.264-19.293 10.229-26.459 14.76-7.309 4.539-12.721 6.865-16.076 6.865-2.343 0-4.389-.583-5.995-1.457-1.759-1.028-3.217-2.92-4.388-5.846-1.023-2.783-1.903-7.018-2.486-12.43-.583-5.406-.88-12.418-.88-20.898 0-7.155.154-13.155.44-17.83.297-4.681.88-8.635 1.76-11.847.726-3.063 1.897-5.846 3.212-8.034 1.171-2.338 3.366-4.818 6.138-7.601 2.926-2.628 8.778-6.726 17.544-12.132 8.921-5.417 20.03-10.675 33.472-15.79 13.452-5.263 28.802-9.503 46.483-13.155 17.543-3.503 36.551-5.27 57.158-5.27 26.756 0 50.581 3.069 71.337 9.367 20.612 6.28 38.003 15.344 52.181 27.185 14.178 11.835 24.854 26.454 32.163 43.707 7.16 17.247 10.812 36.694 10.812 58.467 0 16.812-2.046 32.448-6.43 47.066-4.24 14.622-10.521 27.633-18.71 39.04-8.332 11.397-18.709 21.043-31.133 29.083-12.43 8.04-26.75 14.036-42.975 17.984v1.309c19.293 2.2 36.837 7.16 52.181 14.772 15.498 7.6 28.505 17.093 39.175 28.5 10.675 11.396 19.001 24.266 24.704 38.74 5.708 14.32 8.479 29.82 8.479 46.483h0zm558.54-122.94h0c0 50.73-6.721 94.287-20.019 130.398-13.305 36.1-32.306 65.633-57.158 88.435-24.854 22.802-54.959 39.609-90.482 50.278-35.665 10.682-77.914 16.08-127.026 16.08h-132.29c-9.504 0-17.396-2.781-23.825-8.325-6.435-5.555-9.651-14.618-9.651-27.19V239.325c0-12.578 3.217-21.636 9.651-27.191 6.429-5.555 14.321-8.332 23.825-8.332h142.079c49.409 0 91.362 5.846 125.713 17.395 34.351 11.544 63.444 28.654 86.978 51.307 23.533 22.659 41.512 50.719 53.793 84.196 12.276 33.333 18.412 72.065 18.412 116.063h0zm-116.494 3.805h0c0-26.311-3.075-50.575-9.213-73.233-6.143-22.52-16.081-42.103-29.676-58.613-13.448-16.526-30.838-29.54-52.188-38.746-21.19-9.35-49.112-14.034-83.755-14.034h-56.861v376.997h58.615c30.843 0 56.867-4.093 77.91-11.99 21.194-8.041 38.739-20.172 52.917-36.254 14.179-16.081 24.705-36.244 31.723-60.222 7.019-23.98 10.528-51.895 10.528-83.905z"
    }));
  }
  var DModelText_default = Svg3DModelText;

  // build/lib-react-tsx/structure/3DModel.tsx
  var React143 = __toModule(require_react());
  function Svg3DModel({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React143.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React143.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React143.createElement("path", {
      d: "M502.616 698.225c111.244 0 201.965-90.735 201.965-201.985 0-111.25-90.72-201.999-201.965-201.999-111.248 0-201.983 90.749-201.983 201.999 0 111.249 90.737 201.985 201.983 201.985z"
    }), /* @__PURE__ */ React143.createElement("path", {
      fill: "none",
      strokeWidth: 60.471,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M449.349 384.629l-100.541-138.86M770.778 772.926L601.53 598.317M780.359 218.159L609.042 390.712M416.17 508.564L244.836 681.133"
    }), /* @__PURE__ */ React143.createElement("path", {
      fill: "none",
      strokeWidth: 60.471,
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M852.9 245.769c56.541 0 102.665-46.109 102.665-102.664 0-56.542-46.124-102.652-102.665-102.652-56.545 0-102.682 46.11-102.682 102.652.001 56.555 46.14 102.664 102.682 102.664zM296.398 251.422c56.541 0 102.68-46.124 102.68-102.666 0-56.54-46.139-102.652-102.68-102.652-56.54 0-102.665 46.112-102.665 102.652.001 56.542 46.125 102.666 102.665 102.666zM149.512 850.318c56.54 0 102.65-46.125 102.65-102.667 0-56.556-46.11-102.664-102.65-102.664-56.557 0-102.681 46.108-102.681 102.664.001 56.542 46.125 102.667 102.681 102.667zM847.244 954.845c56.544 0 102.668-46.124 102.668-102.665 0-56.558-46.124-102.668-102.668-102.668-56.54 0-102.648 46.11-102.648 102.668.001 56.541 46.11 102.665 102.648 102.665z"
    }));
  }
  var DModel_default = Svg3DModel;

  // build/lib-react-tsx/structure/Abundance.tsx
  var React144 = __toModule(require_react());
  function SvgAbundance({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React144.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React144.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React144.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 36.754,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none",
      strokeWidth: 0.919
    }, /* @__PURE__ */ React144.createElement("path", {
      d: "M305.859 267.243q7.002 7.11 11.147 16.589 4.144 9.479 4.144 25.221 0 17.774-6.002 33.177-5.86 15.404-18.15 26.406-12.004 10.664-28.296 16.42-16.15 5.586-39.3 5.586-26.44 0-45.446-4.91-18.865-4.908-30.726-11.002V319.38h5.573q12.29 8.802 29.297 15.234 17.15 6.432 31.298 6.432 8.288 0 18.006-1.523 9.718-1.693 16.435-7.11 5.288-4.231 8.432-10.156 3.144-6.094 3.144-17.435 0-11.002-4.288-16.927-4.287-6.093-11.29-8.633-7.002-2.708-16.863-2.877-9.86-.339-18.293-.339h-11.718V231.02h12.147q11.147 0 19.722-.846 8.575-.846 14.577-3.893 6.288-3.216 9.432-8.464 3.144-5.416 3.144-15.742 0-7.617-3.287-12.187-3.287-4.74-8.289-7.448-5.573-3.047-13.148-4.063-7.574-1.015-13.005-1.015-13.433 0-29.153 5.586-15.72 5.416-30.44 15.742h-5.288v-54.675q11.719-5.586 31.87-10.664 20.15-5.247 40.872-5.247 20.15 0 35.299 4.232 15.148 4.062 25.009 11.002 11.719 8.295 17.435 20.143 5.716 11.85 5.716 27.76 0 20.99-11.004 37.579-11.004 16.42-29.01 20.99v2.37q7.288 1.184 15.434 4.739 8.146 3.554 14.863 10.325zM534.802 385.394H367.739v-41.64q19.15-16.42 38.3-34.87 19.293-18.45 30.869-31.823 17.292-19.805 24.58-34.531 7.289-14.727 7.289-29.115 0-17.265-9.432-26.575-9.29-9.48-26.868-9.48-13.147 0-27.724 6.433-14.434 6.432-26.867 16.42h-4.574v-56.03q10.147-5.247 29.869-10.494 19.864-5.248 39.729-5.248 40.015 0 61.023 19.974 21.008 19.805 21.008 56.198 0 23.867-10.147 45.365-10.004 21.497-30.726 44.349-13.005 14.218-26.152 26.237-13.148 11.848-18.722 16.588h95.608z",
      fontSize: 318.532,
      baselineShift: "super"
    }), /* @__PURE__ */ React144.createElement("path", {
      d: "M853.23 476.853q0 57.291-41.115 93.229-40.894 35.677-111.25 35.677-40.675 0-71.017-8.333-30.12-8.594-56.504-21.615v-92.969h9.234q26.164 24.74 58.484 38.021 32.54 13.281 62.44 13.281 7.696 0 20.228-1.562 12.532-1.563 20.447-5.208 9.674-4.688 15.83-11.72 6.377-7.03 6.377-20.833 0-12.76-9.235-21.875-9.014-9.375-26.603-14.323-18.469-5.208-39.136-9.635-20.447-4.688-38.476-11.719-41.334-15.885-59.583-42.969-18.029-27.343-18.029-67.708 0-54.167 40.895-88.281 41.114-34.376 105.534-34.376 32.32 0 63.76 7.553 31.661 7.291 54.747 18.49V319.3h-9.015q-19.787-18.75-48.59-31.25-28.582-12.76-58.483-12.76-10.554 0-21.107 1.823-10.334 1.562-20.008 6.25-8.574 3.906-14.73 11.979-6.157 7.812-6.157 17.969 0 15.364 9.894 23.698 9.894 8.073 37.377 14.843 18.029 4.427 34.519 8.594 16.71 4.167 35.837 11.459 37.597 14.583 55.406 39.843 18.029 25 18.029 65.105z"
    })), /* @__PURE__ */ React144.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React144.createElement("path", {
      d: "M331.135 828.153q0 10.957-2.812 20.391-2.813 9.434-8.555 15.879-6.211 6.973-15.41 10.488-9.2 3.457-21.446 3.457-4.336 0-9.375-.527t-6.62-.938v-17.168h2.343q1.758.82 4.98 1.758 3.282.938 8.907.938 4.57 0 8.965-1.113 4.394-1.172 7.558-3.633 3.457-2.637 5.684-6.563 2.226-3.984 2.988-9.55-5.098 2.93-9.492 4.511-4.336 1.524-10.84 1.524-4.922 0-9.434-1.172-4.453-1.23-8.144-3.75-4.863-3.457-7.793-9.082-2.871-5.684-2.871-14.297 0-14.004 9.726-22.793 9.786-8.848 25.606-8.848 8.144 0 14.414 2.168 6.328 2.11 10.898 6.504 5.332 5.04 8.028 12.832 2.695 7.793 2.695 18.984zm-22.441-3.28q0-7.15-1.407-11.72-1.347-4.628-3.75-7.148-1.699-1.875-3.925-2.695-2.227-.82-4.688-.82-2.285 0-4.394.82-2.051.761-3.985 2.695-1.816 1.875-2.988 4.922-1.113 3.047-1.113 7.265 0 4.102 1.23 6.915 1.23 2.753 3.399 4.394 2.05 1.582 4.804 2.227 2.813.644 6.094.644 2.637 0 5.742-.644 3.106-.703 4.805-1.407 0-.644.058-1.816.118-1.23.118-3.633zM419.553 856.571h-11.895v20.332h-21.503v-20.332h-42.247v-16.523l40.84-50.625h22.91v51.21h11.895zm-33.398-15.937V809.11l-25.372 31.524zM456.936 876.67h-21.914v-23.028h21.914zM545.12 828.153q0 10.957-2.813 20.391-2.813 9.434-8.555 15.879-6.21 6.973-15.41 10.488-9.2 3.457-21.445 3.457-4.336 0-9.375-.527-5.04-.527-6.621-.938v-17.168h2.343q1.758.82 4.98 1.758 3.282.938 8.907.938 4.57 0 8.965-1.113 4.395-1.172 7.559-3.633 3.457-2.637 5.683-6.563 2.227-3.984 2.988-9.55-5.097 2.93-9.492 4.511-4.336 1.524-10.84 1.524-4.921 0-9.433-1.172-4.453-1.23-8.145-3.75-4.863-3.457-7.793-9.082-2.87-5.684-2.87-14.297 0-14.004 9.726-22.793 9.785-8.848 25.605-8.848 8.145 0 14.414 2.168 6.328 2.11 10.899 6.504 5.332 5.04 8.027 12.832 2.695 7.793 2.695 18.984zm-22.442-3.28q0-7.15-1.406-11.72-1.348-4.628-3.75-7.148-1.7-1.875-3.926-2.695-2.227-.82-4.688-.82-2.285 0-4.394.82-2.05.761-3.984 2.695-1.817 1.875-2.989 4.922-1.113 3.047-1.113 7.265 0 4.102 1.23 6.915 1.231 2.753 3.399 4.394 2.05 1.582 4.805 2.227 2.812.644 6.093.644 2.637 0 5.743-.644 3.105-.703 4.804-1.407 0-.644.059-1.816.117-1.23.117-3.633zM623.752 835.77q2.871 2.462 4.57 5.743 1.7 3.281 1.7 8.73 0 6.153-2.461 11.485-2.403 5.332-7.442 9.14-4.921 3.692-11.601 5.684-6.621 1.933-16.113 1.933-10.84 0-18.633-1.699-7.735-1.699-12.598-3.808v-19.16h2.285q5.04 3.046 12.012 5.273 7.031 2.227 12.832 2.227 3.398 0 7.383-.528 3.984-.586 6.738-2.46 2.168-1.466 3.457-3.516 1.29-2.11 1.29-6.036 0-3.808-1.759-5.859-1.757-2.11-4.629-2.988-2.87-.938-6.914-.996-4.043-.118-7.5-.118h-4.804v-15.585h4.98q4.57 0 8.086-.293t5.977-1.348q2.578-1.113 3.867-2.93 1.289-1.875 1.289-5.449 0-2.637-1.348-4.219-1.347-1.64-3.398-2.578-2.285-1.055-5.39-1.406-3.106-.352-5.333-.352-5.508 0-11.953 1.934-6.445 1.875-12.48 5.45h-2.168v-18.927q4.804-1.933 13.066-3.691 8.262-1.816 16.758-1.816 8.262 0 14.473 1.464 6.21 1.407 10.253 3.809 4.805 2.871 7.149 6.973 2.344 4.101 2.344 9.609 0 7.266-4.512 13.008-4.512 5.683-11.895 7.265v.82q2.989.41 6.328 1.641 3.34 1.23 6.094 3.575zM740.764 815.966q0 14.59-6.738 21.621-6.739 7.031-19.63 7.031-13.3 0-20.038-7.09-6.68-7.148-6.68-21.328 0-14.472 6.855-21.445 6.856-7.031 19.864-7.031 13.125 0 19.746 7.031 6.62 6.973 6.62 21.21zm45.703-26.543l-45.703 87.246h-15.762l45.703-87.246zm37.09 60.41q0 14.59-6.738 21.621-6.739 7.031-19.63 7.031-13.3 0-20.038-7.09-6.68-7.148-6.68-21.327 0-14.473 6.855-21.446 6.856-7.031 19.864-7.031 13.125 0 19.746 7.031 6.62 6.973 6.62 21.211zm-100.078-33.691q0-9.375-2.168-12.657-2.168-3.28-7.09-3.28t-7.09 3.28q-2.168 3.282-2.168 12.715 0 9.434 2.168 12.715 2.168 3.281 7.09 3.281t7.09-3.28q2.168-3.282 2.168-12.774zm82.793 33.867q0-9.375-2.168-12.656-2.168-3.282-7.09-3.282t-7.09 3.282q-2.168 3.28-2.168 12.715 0 9.433 2.168 12.714 2.168 3.282 7.09 3.282t7.09-3.282q2.168-3.28 2.168-12.773z"
    })), /* @__PURE__ */ React144.createElement("path", {
      d: "M103.12 30H892v935.636H103.12z",
      fillOpacity: 0,
      strokeWidth: 40
    }));
  }
  var Abundance_default = SvgAbundance;

  // build/lib-react-tsx/structure/Atomistic2.tsx
  var React145 = __toModule(require_react());
  function SvgAtomistic2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React145.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React145.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React145.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, /* @__PURE__ */ React145.createElement("path", {
      d: "M328.952 111.542c74.853-43.267 209.754 50.505 301.388 209.26 91.634 158.754 105.288 322.444 30.6 365.548-74.855 43.103-209.755-50.506-301.389-209.261-91.633-158.755-105.288-322.445-30.599-365.547z",
      strokeWidth: 53.631784800000005
    }), /* @__PURE__ */ React145.createElement("path", {
      d: "M782.35 232.952c43.103 74.853-50.506 209.754-209.261 301.388-158.755 91.634-322.445 105.288-365.547 30.6-43.267-74.855 50.505-209.755 209.26-301.389 158.754-91.633 322.444-105.288 365.547-30.599z",
      strokeWidth: 53.631784800000005
    }), /* @__PURE__ */ React145.createElement("path", {
      d: "M494.945 340.05c-32.573 0-58.895 26.322-58.895 58.895 0 32.574 26.322 58.896 58.895 58.896 32.574 0 58.896-26.322 58.896-58.896 0-32.573-26.322-58.895-58.896-58.895z",
      strokeWidth: 52.6687
    })));
  }
  var Atomistic2_default = SvgAtomistic2;

  // build/lib-react-tsx/structure/AtomisticElectron.tsx
  var React146 = __toModule(require_react());
  function SvgAtomisticElectron({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React146.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React146.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React146.createElement("path", {
      fillOpacity: 0,
      d: "M352-84h150v50H352z"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M499.318 174.78c-180.085 0-326.065 145.98-326.065 326.212 0 180.088 145.98 326.065 326.065 326.065 180.084 0 326.212-145.977 326.212-326.065 0-180.232-146.128-326.212-326.212-326.212z",
      fill: "none",
      strokeWidth: 40,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M329.396 129.742c-54.712 0-99.15 44.439-99.15 99.151 0 54.712 44.438 99.15 99.15 99.15s99.15-44.438 99.15-99.15-44.438-99.15-99.15-99.15z",
      fill: "none",
      strokeWidth: 39.974,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M329.396 147.32c-45.057 0-81.573 36.516-81.573 81.573 0 45.057 36.516 81.573 81.573 81.573 45.057 0 81.574-36.516 81.574-81.573 0-45.057-36.517-81.573-81.574-81.573z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 0.642
    }), /* @__PURE__ */ React146.createElement("path", {
      d: "M275.655 224.893h103.483",
      fill: "none",
      strokeWidth: 30.021,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React146.createElement("circle", {
      cx: 500.098,
      cy: 501.154,
      r: 25
    }));
  }
  var AtomisticElectron_default = SvgAtomisticElectron;

  // build/lib-react-tsx/structure/AtomisticNeutron.tsx
  var React147 = __toModule(require_react());
  function SvgAtomisticNeutron({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React147.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React147.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React147.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "none",
      strokeWidth: 65.811,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926,
      d: "M499.757 948.085c246.683 0 447.882-201.198 447.882-447.892 0-246.688-201.199-447.886-447.882-447.886-246.688 0-447.89 201.198-447.89 447.886 0 246.694 201.202 447.892 447.89 447.892z"
    }), /* @__PURE__ */ React147.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "none",
      strokeWidth: 35.61,
      strokeMiterlimit: 10,
      d: "M499.751 660.4c88.232 0 160.204-71.969 160.204-160.208 0-88.237-71.972-160.204-160.204-160.204s-160.196 71.967-160.196 160.204c0 88.24 71.965 160.208 160.196 160.208z"
    }), /* @__PURE__ */ React147.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M166.143 278.772c47.393 0 86.063-38.66 86.063-86.065 0-47.403-38.67-86.066-86.063-86.066-47.413 0-86.069 38.663-86.069 86.066 0 47.405 38.656 86.065 86.069 86.065z"
    }), /* @__PURE__ */ React147.createElement("path", {
      d: "M580.458 584.001c0 2.319-.404 4.389-1.212 6.204-.805 1.816-1.891 3.328-3.254 4.538-1.362 1.21-2.977 2.094-4.841 2.646s-3.755.831-5.675.831h-16.943c-3.532 0-6.58-.351-9.153-1.057s-4.938-1.993-7.107-3.86c-2.17-1.863-4.257-4.385-6.273-7.564-2.016-3.174-4.291-7.285-6.816-12.327l-48.704-91.521a442.368 442.368 0 01-8.618-17.624 319.101 319.101 0 01-7.873-18.379h-.3c.404 7.261.703 14.498.912 21.707.195 7.212.298 14.647.298 22.311v102.417a4.723 4.723 0 01-.828 2.724c-.555.807-1.516 1.488-2.878 2.041-1.364.553-3.2.98-5.522 1.282-2.323.304-5.292.456-8.923.456-3.527 0-6.455-.152-8.771-.456-2.323-.302-4.139-.729-5.453-1.282-1.308-.553-2.211-1.234-2.719-2.041-.508-.808-.758-1.715-.758-2.724V416.387c0-4.74 1.391-8.293 4.159-10.666 2.775-2.367 6.176-3.553 10.21-3.553h21.33c3.833 0 7.06.33 9.682.984 2.622.657 4.973 1.738 7.032 3.25 2.073 1.514 4.013 3.606 5.829 6.278 1.814 2.675 3.679 5.977 5.591 9.91l38.126 71.552c2.211 4.337 4.409 8.6 6.58 12.785a481.342 481.342 0 016.271 12.557 2174.53 2174.53 0 015.9 12.331 674.009 674.009 0 015.604 12.101h.146c-.3-7.059-.528-14.421-.675-22.086a1095.52 1095.52 0 01-.237-21.939v-91.822c0-1.008.307-1.915.912-2.723.604-.807 1.612-1.512 3.024-2.118 1.413-.605 3.282-1.033 5.599-1.287 2.316-.25 5.294-.379 8.924-.379 3.429 0 6.302.129 8.625.379 2.322.254 4.104.682 5.369 1.287 1.258.605 2.143 1.311 2.643 2.118.508.808.766 1.714.766 2.723v175.932z"
    }));
  }
  var AtomisticNeutron_default = SvgAtomisticNeutron;

  // build/lib-react-tsx/structure/Atomistic.tsx
  var React148 = __toModule(require_react());
  function SvgAtomistic({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React148.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React148.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React148.createElement("path", {
      d: "M498.035 147.601c-151.635 0-274.552 122.917-274.552 274.675 0 151.637 122.917 274.551 274.552 274.551 151.634 0 274.677-122.914 274.677-274.551 0-151.758-123.043-274.675-274.677-274.675z",
      fill: "none",
      strokeWidth: 40.183,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React148.createElement("path", {
      d: "M321.396 107.742c-54.712 0-99.15 44.439-99.15 99.151 0 54.712 44.438 99.15 99.15 99.15s99.15-44.438 99.15-99.15-44.438-99.15-99.15-99.15z",
      fill: "none",
      strokeWidth: 41.374,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React148.createElement("path", {
      d: "M321.396 125.32c-45.057 0-81.573 36.516-81.573 81.573 0 45.057 36.516 81.573 81.573 81.573 45.057 0 81.574-36.516 81.574-81.573 0-45.057-36.517-81.573-81.574-81.573z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none",
      strokeWidth: 0.642
    }), /* @__PURE__ */ React148.createElement("path", {
      d: "M498.035 294.903c-70.309 0-127.373 56.94-127.373 127.373 0 70.309 57.064 127.251 127.373 127.251 70.31 0 127.373-56.942 127.373-127.251 0-70.432-57.063-127.373-127.373-127.373z",
      fill: "none",
      strokeWidth: 32.242,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React148.createElement("path", {
      d: "M269.655 206.893h103.483M446.294 422.276h103.482M498.035 370.411V474.02",
      fill: "none",
      strokeWidth: 35.021,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  var Atomistic_default = SvgAtomistic;

  // build/lib-react-tsx/structure/Bohr.tsx
  var React149 = __toModule(require_react());
  function SvgBohr({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React149.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React149.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React149.createElement("path", {
      d: "M490.253 62.562c-187.603 0-339.69 152.088-339.69 339.69 0 187.481 152.087 339.57 339.69 339.57 187.48 0 339.57-152.089 339.57-339.57 0-187.602-152.09-339.69-339.57-339.69z",
      fill: "none",
      strokeWidth: 37.125,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React149.createElement("path", {
      d: "M490.253 195.592c-114.22 0-206.66 92.441-206.66 206.66 0 114.1 92.44 206.662 206.66 206.662 114.098 0 206.66-92.563 206.66-206.661 0-114.22-92.562-206.66-206.66-206.66z",
      fill: "none",
      strokeWidth: 37.125,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React149.createElement("path", {
      d: "M490.253 326.272c-41.95 0-75.981 34.03-75.981 75.98 0 41.954 34.03 75.859 75.98 75.859 41.954 0 75.859-33.905 75.859-75.858 0-41.95-33.905-75.981-75.858-75.981z",
      fill: "none",
      strokeWidth: 37.125,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React149.createElement("path", {
      d: "M490.253 326.272c-41.95 0-75.981 34.03-75.981 75.98 0 41.954 34.03 75.859 75.98 75.859 41.954 0 75.859-33.905 75.859-75.858 0-41.95-33.905-75.981-75.858-75.981zM490.253 148.32c27.474 0 49.872 22.275 49.872 49.871 0 27.473-22.398 49.871-49.872 49.871-27.595 0-49.87-22.398-49.87-49.87 0-27.597 22.275-49.872 49.87-49.872zM490.253 556.32c27.474 0 49.872 22.401 49.872 49.872 0 27.596-22.398 49.872-49.872 49.872-27.595 0-49.87-22.276-49.87-49.872 0-27.471 22.275-49.872 49.87-49.872zM833.16 352.383c27.6 0 49.873 22.275 49.873 49.87 0 27.474-22.273 49.872-49.872 49.872-27.596 0-49.87-22.398-49.87-49.872 0-27.595 22.274-49.87 49.87-49.87z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var Bohr_default = SvgBohr;

  // build/lib-react-tsx/structure/Conformers.tsx
  var React150 = __toModule(require_react());
  function SvgConformers({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React150.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React150.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React150.createElement("path", {
      d: "M607.912 83.936a15.002 15.002 0 00-10.676 4.017L439.258 235.32H204.564l-147.023-144a15.002 15.002 0 00-23.303 18.526l151.397 248.283a15.002 15.002 0 0012.808 7.191H449.84a15.002 15.002 0 0012.709-7.033l157.627-251.396a15.002 15.002 0 00-12.264-22.955zM533.836 188.12l-92.295 147.2H206.865l-84.414-138.432 65.496 64.146a15.002 15.002 0 0010.496 4.285h246.725a15.002 15.002 0 0010.23-4.03l78.438-73.169zM950.018 341.566a15.002 15.002 0 00-10.706 3.993L790.632 483.64l-236.056 1.52a15.002 15.002 0 00-12.47 6.81L389.15 726.695a15.002 15.002 0 0022.524 19.407l144.144-127.934L796.85 613.6a15.002 15.002 0 0012.396-6.985l152.955-242.053a15.002 15.002 0 00-12.183-22.996zm-74.76 104.424L788.2 583.758l-238.486 4.52a15.002 15.002 0 00-9.672 3.779l-64.865 57.57 87.658-134.52 233.826-1.505a15.002 15.002 0 0010.111-4.008l68.485-63.604z"
    }));
  }
  var Conformers_default = SvgConformers;

  // build/lib-react-tsx/structure/Diastereotopic.tsx
  var React151 = __toModule(require_react());
  function SvgDiastereotopic({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React151.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React151.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React151.createElement("path", {
      d: "M252.565 300.988c0 1.382-.436 2.695-1.39 3.79-.939 1.164-2.477 2.111-4.59 2.77-2.12.731-4.96 1.313-8.531 1.748-3.577.443-8.026.66-13.486.66-5.544 0-10.139-.216-13.78-.66-3.578-.434-6.497-1.017-8.533-1.748-2.048-.659-3.579-1.606-4.448-2.77-.954-1.095-1.388-2.408-1.388-3.79V189.2H93.022v111.788a5.99 5.99 0 01-1.312 3.79c-.876 1.164-2.329 2.111-4.517 2.77-2.114.731-4.96 1.313-8.533 1.748-3.571.443-8.089.66-13.633.66-5.396 0-9.922-.216-13.563-.66-3.642-.434-6.561-1.017-8.679-1.748-2.113-.659-3.643-1.606-4.59-2.77-.955-1.095-1.39-2.408-1.39-3.79V39.873c0-1.39.435-2.702 1.39-3.789.948-1.173 2.478-2.12 4.59-2.779 2.118-.723 5.037-1.305 8.679-1.747 3.641-.436 8.167-.653 13.563-.653 5.542 0 10.062.218 13.633.653 3.573.442 6.419 1.024 8.533 1.747 2.188.659 3.641 1.606 4.517 2.779.878 1.086 1.312 2.398 1.312 3.789v101.501h103.396V39.873c0-1.39.436-2.702 1.388-3.789.869-1.173 2.399-2.12 4.448-2.779 2.036-.723 4.955-1.305 8.533-1.747 3.641-.436 8.236-.653 13.78-.653 5.459 0 9.909.218 13.486.653 3.572.442 6.413 1.024 8.531 1.747 2.111.659 3.65 1.606 4.59 2.779.953 1.086 1.39 2.398 1.39 3.789v261.115zM967.05 165.071c0 25.301-3.361 47.033-9.989 65.037-6.639 18.011-16.118 32.747-28.517 44.119-12.391 11.374-27.414 19.759-45.131 25.085-17.796 5.318-38.868 8.021-63.367 8.021h-65.99c-4.736 0-8.674-1.39-11.888-4.16-3.2-2.772-4.812-7.292-4.812-13.563V48.622c0-6.272 1.612-10.792 4.812-13.563 3.214-2.772 7.151-4.154 11.888-4.154h70.881c24.644 0 45.565 2.912 62.704 8.68 17.13 5.753 31.644 14.285 43.389 25.588 11.738 11.305 20.706 25.302 26.831 42.001 6.115 16.624 9.189 35.948 9.189 57.897h0zm-58.118 1.894c0-13.12-1.529-25.231-4.597-36.527-3.057-11.226-8.018-21.002-14.804-29.238-6.699-8.244-15.381-14.735-26.033-19.324-10.565-4.666-24.492-7.001-41.774-7.001h-28.362v188.052H822.6c15.389 0 28.362-2.042 38.865-5.978 10.568-4.014 19.325-10.062 26.397-18.083 7.074-8.027 12.321-18.083 15.822-30.047 3.502-11.958 5.248-25.884 5.248-41.854z"
    }), /* @__PURE__ */ React151.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React151.createElement("path", {
      strokeWidth: 37.088,
      d: "M508.229 777.649v148.985"
    }), /* @__PURE__ */ React151.createElement("path", {
      strokeWidth: 37.086,
      d: "M572.738 814.893L443.717 889.39"
    }), /* @__PURE__ */ React151.createElement("path", {
      strokeWidth: 37.084,
      d: "M572.738 889.39l-129.021-74.497"
    })), /* @__PURE__ */ React151.createElement("path", {
      d: "M472.871 641.211L210.263 386.17l103.529-73.225 207.06 320.692 444.43 222.213-22.727 42.928-434.331-222.215L73.902 893.727l-22.728-40.403z"
    }), /* @__PURE__ */ React151.createElement("path", {
      d: "M538.127 585.561l34.592-34.599 34.599 34.599-34.599 34.591z"
    }), /* @__PURE__ */ React151.createElement("path", {
      d: "M601.906 521.671l34.596-34.596 34.594 34.594-34.596 34.597zM665.827 457.916l34.6-34.6 34.597 34.597-34.6 34.6z",
      strokeWidth: 0.99999
    }), /* @__PURE__ */ React151.createElement("path", {
      d: "M729.665 394.022l34.592-34.601 34.6 34.601-34.6 34.591z"
    }));
  }
  var Diastereotopic_default = SvgDiastereotopic;

  // build/lib-react-tsx/structure/Lcao.tsx
  var React152 = __toModule(require_react());
  function SvgLcao({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React152.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React152.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React152.createElement("path", {
      d: "M467.491 268.613a199.64 198.45 0 01-199.64 198.45 199.64 198.45 0 01-199.638-198.45 199.64 198.45 0 01199.639-198.45 199.64 198.45 0 01199.639 198.45z",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 40
    }), /* @__PURE__ */ React152.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React152.createElement("path", {
      d: "M273.225 323.34q0 3.418-.367 5.86-.366 2.318-1.098 3.783-.61 1.343-1.465 1.953-.855.61-1.953.61h-87.158q-.977 0-1.832-.61-.854-.61-1.586-1.953-.61-1.465-.977-3.784-.366-2.441-.366-5.86 0-3.54.244-5.859.366-2.441.976-3.906.733-1.465 1.587-2.075.855-.732 1.954-.732h29.418V207.983l-25.39 14.038q-2.808 1.343-4.639 1.71-1.709.244-2.807-.733-.977-1.099-1.343-3.662-.366-2.564-.366-7.202 0-2.93.122-4.761.122-1.953.61-3.296.488-1.343 1.343-2.197.854-.855 2.32-1.831l33.935-21.973q.61-.488 1.464-.732.977-.367 2.442-.489 1.465-.244 3.784-.244 2.441-.122 6.226-.122 4.638 0 7.446.244 2.93.122 4.394.61 1.465.367 1.954 1.1.488.732.488 1.83v130.494h25.757q1.098 0 1.953.732.976.61 1.587 2.075.732 1.465.976 3.906.367 2.32.367 5.86zM376.984 300.635q0 9.277-3.54 16.357-3.418 7.08-9.765 11.84-6.348 4.762-15.015 7.081-8.667 2.441-18.799 2.441-6.103 0-11.719-.976-5.493-.855-9.887-2.197-4.395-1.465-7.325-2.93-2.93-1.465-4.272-2.686-1.343-1.342-2.075-4.028-.733-2.808-.733-8.179 0-3.54.245-5.615.244-2.197.732-3.418.488-1.343 1.22-1.709.733-.488 1.832-.488 1.343 0 3.906 1.587 2.686 1.465 6.592 3.296 3.906 1.83 9.033 3.418 5.249 1.587 11.84 1.587 4.151 0 7.325-.855 3.296-.854 5.615-2.441 2.442-1.587 3.662-4.029 1.221-2.441 1.221-5.615 0-3.662-2.32-6.226-2.197-2.685-5.98-4.638-3.663-1.953-8.424-3.662-4.638-1.71-9.643-3.784-4.883-2.076-9.644-4.761-4.638-2.686-8.423-6.592-3.662-3.906-5.981-9.4-2.197-5.493-2.197-13.183 0-7.813 3.052-14.282 3.051-6.592 8.789-11.23 5.737-4.64 13.916-7.203 8.3-2.563 18.554-2.563 5.127 0 9.888.732 4.883.733 8.79 1.831 3.905 1.099 6.59 2.442 2.686 1.22 3.785 2.197 1.22.854 1.709 1.83.488.855.732 2.198.245 1.22.367 3.174.244 1.831.244 4.639 0 3.296-.244 5.37-.122 2.076-.61 3.297-.367 1.22-1.1 1.709-.732.366-1.708.366-1.099 0-3.418-1.22-2.32-1.344-5.86-2.808-3.418-1.465-8.056-2.686-4.517-1.343-10.376-1.343-4.15 0-7.202.855-3.052.854-5.005 2.441-1.953 1.587-2.93 3.784-.977 2.075-.977 4.517 0 3.784 2.32 6.348 2.32 2.563 6.103 4.516 3.784 1.953 8.545 3.662 4.883 1.71 9.766 3.784 5.005 1.954 9.765 4.64 4.883 2.685 8.667 6.59 3.785 3.907 6.104 9.4 2.32 5.371 2.32 12.818z"
    })), /* @__PURE__ */ React152.createElement("path", {
      transform: "skewY(.891) scale(.99988 1)",
      d: "M843.146 722.01a342.224 167.455 0 01-342.224 167.456A342.224 167.455 0 01158.7 722.01a342.224 167.455 0 01342.223-167.455A342.224 167.455 0 01843.146 722.01z",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 40.002
    }), /* @__PURE__ */ React152.createElement("path", {
      d: "M604.273 652.167q0 6.775-1.648 9.522-1.648 2.563-4.76 2.563h-40.65q6.775 5.127 12.085 12.452 5.493 7.14 9.338 15.93 3.846 8.606 6.043 18.677 2.197 9.887 2.197 20.507 0 19.043-4.76 33.692-4.761 14.465-14.65 26.184-9.704 11.535-25.085 18.31-15.38 6.775-34.24 6.775-20.691 0-35.523-6.042-14.648-6.226-24.353-17.578-9.521-11.536-14.465-27.832-4.944-16.297-4.944-36.438 0-20.325 5.493-36.988 5.676-16.662 16.48-28.381 10.803-11.719 27.1-17.944 16.479-6.409 38.451-6.409h81.3q2.197 0 3.478.732 1.282.733 2.014 2.38.733 1.649.916 4.03.183 2.38.183 5.858zm-48.34 81.116q0-10.803-2.014-20.874-1.831-10.254-5.86-19.043-4.028-8.972-10.436-16.296-6.226-7.508-14.649-12.818h-7.324q-14.282 0-24.902 4.761-10.437 4.578-17.212 13-6.775 8.424-10.071 19.96-3.113 11.535-3.113 25.268 0 13.366 2.564 25.085 2.563 11.536 8.24 20.325 5.859 8.606 15.197 13.733 9.339 4.944 23.071 4.944 22.522 0 34.424-14.832 12.085-15.015 12.085-43.213z",
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React152.createElement("path", {
      d: "M945.323 263.687a199.64 198.45 0 01-199.64 198.45 199.64 198.45 0 01-199.638-198.45 199.64 198.45 0 01199.639-198.45 199.64 198.45 0 01199.639 198.45z",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 40
    }), /* @__PURE__ */ React152.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React152.createElement("path", {
      d: "M751.057 318.414q0 3.418-.367 5.859-.366 2.32-1.098 3.784-.61 1.343-1.465 1.953-.855.61-1.953.61h-87.159q-.976 0-1.83-.61-.855-.61-1.587-1.953-.61-1.465-.977-3.784-.366-2.441-.366-5.86 0-3.54.244-5.859.366-2.441.976-3.906.733-1.465 1.587-2.075.855-.733 1.953-.733h29.42V203.057l-25.391 14.038q-2.808 1.343-4.639 1.71-1.709.243-2.807-.733-.977-1.099-1.343-3.662-.366-2.564-.366-7.202 0-2.93.122-4.761.122-1.953.61-3.296.488-1.343 1.343-2.197.854-.855 2.32-1.831l33.935-21.973q.61-.488 1.464-.732.977-.367 2.442-.489 1.465-.244 3.784-.244 2.441-.122 6.226-.122 4.638 0 7.446.244 2.93.122 4.394.61 1.465.367 1.954 1.1.488.732.488 1.83V305.84h25.757q1.098 0 1.953.733.976.61 1.587 2.075.732 1.465.976 3.906.367 2.32.367 5.86zM854.816 295.709q0 9.277-3.54 16.357-3.418 7.08-9.765 11.84-6.348 4.762-15.015 7.08-8.667 2.442-18.799 2.442-6.103 0-11.719-.976-5.493-.855-9.887-2.198-4.395-1.464-7.325-2.93-2.93-1.464-4.272-2.685-1.343-1.343-2.075-4.028-.733-2.808-.733-8.179 0-3.54.245-5.615.244-2.197.732-3.418.488-1.343 1.22-1.709.733-.488 1.832-.488 1.343 0 3.906 1.587 2.686 1.464 6.592 3.296 3.906 1.83 9.033 3.417 5.249 1.587 11.84 1.587 4.151 0 7.325-.854 3.296-.855 5.615-2.441 2.442-1.587 3.662-4.029 1.221-2.441 1.221-5.615 0-3.662-2.32-6.226-2.197-2.685-5.98-4.638-3.663-1.953-8.424-3.662-4.638-1.71-9.643-3.785-4.883-2.075-9.644-4.76-4.638-2.686-8.423-6.592-3.662-3.906-5.981-9.4-2.197-5.493-2.197-13.183 0-7.813 3.052-14.282 3.051-6.592 8.789-11.23 5.737-4.64 13.916-7.203 8.3-2.563 18.554-2.563 5.127 0 9.888.732 4.883.732 8.789 1.831 3.906 1.099 6.592 2.441 2.685 1.221 3.784 2.198 1.22.854 1.709 1.83.488.855.732 2.198.245 1.22.367 3.174.244 1.83.244 4.639 0 3.295-.244 5.37-.122 2.076-.61 3.297-.367 1.22-1.1 1.708-.732.367-1.708.367-1.099 0-3.418-1.221-2.32-1.343-5.86-2.808-3.418-1.464-8.056-2.685-4.517-1.343-10.376-1.343-4.15 0-7.202.855-3.052.854-5.005 2.441-1.953 1.587-2.93 3.784-.977 2.075-.977 4.517 0 3.784 2.32 6.347 2.32 2.564 6.103 4.517 3.784 1.953 8.545 3.662 4.883 1.71 9.766 3.784 5.005 1.953 9.765 4.639 4.883 2.686 8.667 6.592 3.785 3.906 6.104 9.4 2.32 5.37 2.32 12.817z"
    })));
  }
  var Lcao_default = SvgLcao;

  // build/lib-react-tsx/structure/LewisNitrogen.tsx
  var React153 = __toModule(require_react());
  function SvgLewisNitrogen({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React153.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React153.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React153.createElement("path", {
      d: "M500 100h150v50H500z",
      fillOpacity: 0
    }), /* @__PURE__ */ React153.createElement("path", {
      d: "M706.961 697.498q0 8.984-3.125 16.015-3.125 7.032-8.594 11.719-5.078 4.688-12.5 7.031-7.031 1.953-14.453 1.953h-43.75q-13.672 0-23.828-2.734-9.766-2.734-18.36-9.766-8.203-7.421-16.015-19.53-7.813-12.5-17.578-32.032L422.977 433.826q-10.938-21.094-22.266-45.313-11.328-24.61-20.313-47.656h-.78q1.562 28.125 2.343 56.25.781 27.734.781 57.422v264.453q0 3.906-2.344 7.031-1.953 3.125-7.421 5.469-5.079 1.953-14.063 3.125-8.984 1.172-23.047 1.172-13.672 0-22.656-1.172-8.984-1.172-14.063-3.125-5.078-2.344-7.03-5.469-1.954-3.125-1.954-7.031V264.685q0-18.36 10.547-27.344 10.937-9.375 26.562-9.375h55.079q14.843 0 25 2.735 10.156 2.344 17.968 8.203 8.203 5.86 15.235 16.406 7.031 10.156 14.453 25.39l98.437 184.766q8.594 16.797 16.797 33.204 8.594 16.015 16.406 32.421 7.813 16.016 15.235 31.641t14.453 31.25h.39q-1.171-27.344-1.953-57.031-.39-29.688-.39-56.64V243.2q0-3.906 2.344-7.031 2.343-3.125 7.812-5.47 5.469-2.343 14.453-3.124 8.985-1.172 23.047-1.172 13.281 0 22.266 1.172 8.984.781 13.672 3.125 5.078 2.344 7.03 5.469 1.954 3.125 1.954 7.03v454.298z",
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }), /* @__PURE__ */ React153.createElement("path", {
      d: "M398.638 72c27.52 0 49.793 22.273 49.793 49.792 0 27.52-22.273 49.793-49.793 49.793s-49.792-22.273-49.792-49.793S371.118 72 398.638 72zM600 70c27.52 0 49.792 22.273 49.792 49.792 0 27.52-22.272 49.793-49.792 49.793-27.52 0-49.793-22.273-49.793-49.793S572.48 70 600 70zM174 400c27.52 0 49.792 22.273 49.792 49.792 0 27.52-22.272 49.793-49.792 49.793-27.52 0-49.793-22.273-49.793-49.793S146.48 400 174 400zM822 400c27.52 0 49.792 22.273 49.792 49.792 0 27.52-22.272 49.793-49.792 49.793-27.52 0-49.793-22.273-49.793-49.793S794.48 400 822 400zM500 778c27.52 0 49.792 22.273 49.792 49.792 0 27.52-22.272 49.793-49.792 49.793-27.52 0-49.793-22.273-49.793-49.793S472.48 778 500 778z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var LewisNitrogen_default = SvgLewisNitrogen;

  // build/lib-react-tsx/structure/LewisOxygen.tsx
  var React154 = __toModule(require_react());
  function SvgLewisOxygen({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React154.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React154.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React154.createElement("path", {
      d: "M410.638 50c27.52 0 49.793 22.273 49.793 49.792 0 27.52-22.273 49.793-49.793 49.793s-49.792-22.273-49.792-49.793S383.118 50 410.638 50zM577.858 50c27.518 0 49.792 22.273 49.792 49.792 0 27.52-22.274 49.793-49.792 49.793-27.403 0-49.795-22.273-49.795-49.793S550.455 50 577.858 50z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React154.createElement("path", {
      d: "M384.168 280.304c-64.136 67.401-64.136 176.78 0 244.183 64.252 67.517 168.385 67.517 232.521 0 64.25-67.403 64.25-176.782 0-244.183-64.136-67.517-168.27-67.517-232.521 0z",
      fill: "none",
      strokeWidth: 58.305,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React154.createElement("path", {
      d: "M237.356 329.048c0 27.52-22.273 49.79-49.793 49.79s-49.792-22.27-49.792-49.79 22.273-49.793 49.792-49.793c27.52 0 49.793 22.273 49.793 49.793zM237.356 496.382c0 27.403-22.273 49.677-49.793 49.677s-49.792-22.274-49.792-49.677c0-27.518 22.273-49.792 49.792-49.792 27.52 0 49.793 22.274 49.793 49.792zM808.745 350.504c27.404 0 49.675 22.272 49.675 49.792 0 27.521-22.271 49.792-49.675 49.792-27.52 0-49.794-22.27-49.794-49.792 0-27.52 22.273-49.792 49.794-49.792zM500.428 651.007c27.521 0 49.792 22.274 49.792 49.792 0 27.52-22.27 49.795-49.792 49.795-27.52 0-49.793-22.274-49.793-49.795 0-27.518 22.272-49.792 49.793-49.792z",
      fillRule: "evenodd",
      stroke: "none"
    }));
  }
  var LewisOxygen_default = SvgLewisOxygen;

  // build/lib-react-tsx/structure/Magnifier5.tsx
  var React155 = __toModule(require_react());
  function SvgMagnifier5({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React155.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React155.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React155.createElement("path", {
      d: "M580.305 27.525c-182.445 0-331.588 149.146-331.588 331.59 0 181.776 148.064 330.45 329.596 331.537a26.707 26.707 0 001.992.051c182.444 0 331.59-149.143 331.59-331.588 0-182.444-149.146-331.59-331.59-331.59zm0 53.409c153.404 0 278.181 124.777 278.181 278.181S733.71 637.297 580.305 637.297s-278.18-124.778-278.18-278.182S426.901 80.934 580.305 80.934z"
    }), /* @__PURE__ */ React155.createElement("path", {
      d: "M349.785 547.707a26.707 26.707 0 00-22.53 10.7L101.993 860.013a26.707 26.707 0 1042.791 31.96l209.268-280.19 36.043 26.974-209.3 280.234a26.707 26.707 0 1042.79 31.96L448.85 649.343a26.707 26.707 0 00-5.395-37.36l-78.803-58.978a26.707 26.707 0 00-14.867-5.299z"
    }), /* @__PURE__ */ React155.createElement("path", {
      d: "M203.086 907.97a26.707 26.707 0 00-22.313 11.05c-3.228 4.333-9.171 5.195-13.582 1.91a26.707 26.707 0 10-31.904 42.83c27.7 20.634 67.628 14.94 88.318-12.836a26.707 26.707 0 00-20.52-42.953z"
    }), /* @__PURE__ */ React155.createElement("path", {
      d: "M129.361 900.033a26.707 26.707 0 00-14.65 48.254l20.478 15.4a26.707 26.707 0 1032.1-42.685l-20.478-15.4a26.707 26.707 0 00-17.45-5.569z"
    }), /* @__PURE__ */ React155.createElement("path", {
      d: "M124.285 848.992a26.707 26.707 0 00-22.312 11.049c-20.634 27.7-14.941 67.63 12.836 88.32a26.707 26.707 0 1031.904-42.832c-4.334-3.228-5.195-9.172-1.91-13.582a26.707 26.707 0 00-20.518-42.955zM580.305 96.662c-144.618 0-262.617 117.992-262.617 262.453 0 144.157 117.507 261.933 261.707 262.43a12.288 12.288 0 00.91.023c144.461 0 262.453-117.991 262.453-262.453 0-144.461-117.992-262.453-262.453-262.453zm0 24.574c131.098 0 237.879 106.781 237.879 237.88 0 131.097-106.781 237.878-237.88 237.878-131.27 0-238.042-106.78-238.042-237.879 0-131.098 106.773-237.879 238.043-237.879z"
    }), /* @__PURE__ */ React155.createElement("path", {
      d: "M682.207 417.602c0 16.219-2.785 30.8-8.52 43.578-5.733 12.943-13.597 23.755-23.918 32.438-10.485 8.683-22.772 15.564-37.353 20.151-14.417 4.587-30.636 7.045-48.33 7.045-9.338 0-18.185-.655-26.54-1.802s-15.891-2.622-22.608-4.424c-6.717-1.802-12.123-3.604-16.383-5.406-4.26-1.802-7.045-3.277-8.519-4.423-1.147-1.147-2.294-2.458-2.949-3.768a67.759 67.759 0 01-1.474-5.08 67.005 67.005 0 01-.82-7.371c-.163-2.95-.163-6.39-.163-10.485 0-4.26.163-8.028.491-10.977.328-3.113.82-5.57 1.475-7.372.655-1.802 1.474-3.113 2.457-3.932.983-.82 1.966-1.147 3.277-1.147 1.474 0 3.931.82 7.044 2.621 3.277 1.802 7.373 3.768 12.615 6.062 5.243 2.13 11.632 4.096 19.004 5.734 7.372 1.966 16.383 2.785 26.704 2.785 9.01 0 17.202-.983 24.574-2.785 7.537-1.802 13.762-4.915 18.84-9.01 5.243-4.096 9.011-9.339 11.96-15.564 2.785-6.062 4.096-13.598 4.096-22.28 0-7.537-1.147-14.09-3.44-19.824-2.294-5.898-6.062-10.813-10.977-14.909-4.915-3.931-11.468-7.044-19.332-9.01-7.863-1.966-17.53-3.113-28.834-3.113-9.01 0-17.202.492-24.574 1.475-7.536.983-14.417 1.31-20.97 1.31-4.423 0-7.7-1.147-9.666-3.276-1.802-2.294-2.785-6.554-2.785-12.451v-130.9c0-6.225 1.147-10.812 3.604-13.433 2.294-2.785 6.226-4.096 11.468-4.096H654.52c1.31 0 2.621.492 3.932 1.474 1.147.82 2.293 2.294 3.112 4.26.82 2.13 1.475 4.751 1.966 8.028.328 3.44.492 7.372.492 12.123 0 9.174-.82 16.055-2.458 20.15-1.638 4.26-3.931 6.39-7.044 6.39H547.212v64.549c5.57-.656 10.977-.983 16.22-1.147 5.406-.164 10.976-.328 16.873-.328 16.383 0 30.964 1.966 43.579 5.734 12.615 3.768 23.264 9.338 31.783 16.71 8.683 7.537 15.236 16.547 19.823 27.524 4.423 10.976 6.717 23.755 6.717 38.172z",
      stroke: "none",
      strokeWidth: 4.299
    }));
  }
  var Magnifier5_default = SvgMagnifier5;

  // build/lib-react-tsx/structure/Orbital.tsx
  var React156 = __toModule(require_react());
  function SvgOrbital({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React156.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React156.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React156.createElement("path", {
      d: "M495.208 408.23c-19.731 19.591-94.242 91.617-105.556 105.143-102.382 133.565.138 234.568 105.418 236.36 108.178 1.795 219.39-99.07 114.248-236.36-26.352-31.048-63.885-64.578-104.865-105.558-5.795-5.795-3.174-5.519-9.245.415z",
      fill: "none",
      stroke: "#fefefe",
      strokeWidth: 68.991,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React156.createElement("path", {
      d: "M495.208 408.23c-19.731 19.591-94.242 91.617-105.556 105.143-102.382 133.565.138 234.568 105.418 236.36 108.178 1.795 219.39-99.07 114.248-236.36-26.352-31.048-63.885-64.578-104.865-105.558-5.795-5.795-3.174-5.519-9.245.415z",
      stroke: "none"
    }), /* @__PURE__ */ React156.createElement("path", {
      d: "M499.486 313.16c156.197 0 283 56.158 283 125.426 0 69.126-126.803 125.287-283 125.287-156.334 0-283-56.16-283-125.287 0-69.268 126.666-125.426 283-125.426zm0 80.581c97.414 0 176.34 20.008 176.34 44.845 0 24.696-78.926 44.705-176.34 44.705-97.416 0-176.34-20.009-176.34-44.705 0-24.837 78.924-44.845 176.34-44.845z",
      fill: "none",
      stroke: "#fefefe",
      strokeWidth: 41.395,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React156.createElement("path", {
      d: "M499.486 313.16c156.197 0 283 56.158 283 125.426 0 69.126-126.803 125.287-283 125.287-156.334 0-283-56.16-283-125.287 0-69.268 126.666-125.426 283-125.426zm0 80.581c97.414 0 176.34 20.008 176.34 44.845 0 24.696-78.926 44.705-176.34 44.705-97.416 0-176.34-20.009-176.34-44.705 0-24.837 78.924-44.845 176.34-44.845z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React156.createElement("path", {
      d: "M495.208 386.29c-19.731-18.49-94.242-86.928-105.556-99.623C287.27 160 389.79 64.517 495.07 62.723c108.178-1.794 219.39 93.828 114.248 223.944-26.352 29.39-63.885 61.126-104.865 99.9-5.795 5.518-3.174 5.38-9.245-.277z",
      fill: "none",
      stroke: "#fefefe",
      strokeWidth: 41.395,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React156.createElement("path", {
      d: "M495.208 386.29c-19.731-18.49-94.242-86.928-105.556-99.623C287.27 160 389.79 64.517 495.07 62.723c108.178-1.794 219.39 93.828 114.248 223.944-26.352 29.39-63.885 61.126-104.865 99.9-5.795 5.518-3.174 5.38-9.245-.277z",
      stroke: "none"
    }));
  }
  var Orbital_default = SvgOrbital;

  // build/lib-react-tsx/structure/SearchLipinski.tsx
  var React157 = __toModule(require_react());
  function SvgSearchLipinski({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React157.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React157.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React157.createElement("path", {
      d: "M423.177 667.09c-166.181 0-301.72-135.541-301.72-301.721 0-166.183 135.538-301.726 301.72-301.726 166.18 0 301.725 135.544 301.725 301.726 0 166.18-135.544 301.72-301.725 301.72",
      className: "fil0 str0",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.85,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React157.createElement("path", {
      className: "fil0 str1",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.8680981,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision",
      d: "M875.305 876.912L652.382 578.46l-78.036 58.287 222.921 298.446"
    }), /* @__PURE__ */ React157.createElement("path", {
      d: "M797.267 935.193c11.855 15.876 34.551 19.165 50.425 7.306M847.694 942.498L868 927.33M868 927.33c15.874-11.858 19.162-34.545 7.304-50.418",
      className: "fil0 str1",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 52.849,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React157.createElement("path", {
      d: "M423.177 612.992c-136.382 0-247.623-111.241-247.623-247.623 0-136.389 111.241-247.623 247.623-247.623 136.387 0 247.623 111.234 247.623 247.623 0 136.382-111.236 247.623-247.623 247.623",
      className: "fil0 str2",
      clipRule: "evenodd",
      fill: "none",
      fillRule: "evenodd",
      strokeWidth: 24.319,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }), /* @__PURE__ */ React157.createElement("path", {
      d: "M527.549 415.683c0 16.134-2.833 30.536-8.421 43.206-5.666 12.67-13.536 23.372-23.766 32.03-10.23 8.656-22.509 15.345-36.91 19.91-14.323 4.644-30.299 6.925-47.848 6.925-9.207 0-17.942-.55-26.285-1.731-8.263-1.101-15.74-2.598-22.35-4.327-6.611-1.811-12.041-3.543-16.213-5.352-4.249-1.732-7.004-3.227-8.341-4.33-1.258-1.18-2.281-2.44-2.912-3.855a26.855 26.855 0 01-1.495-4.957 65.613 65.613 0 01-.786-7.241c-.159-2.912-.237-6.375-.237-10.388 0-4.25.157-7.949.472-10.94.315-2.99.788-5.43 1.495-7.239.708-1.889 1.497-3.148 2.44-3.935.945-.788 1.968-1.18 3.226-1.18 1.497 0 3.857.943 7.004 2.675 3.149 1.81 7.32 3.698 12.436 5.902 5.193 2.125 11.49 4.093 18.808 5.823 7.398 1.811 16.211 2.677 26.521 2.677 8.893 0 17-.945 24.317-2.755 7.319-1.81 13.537-4.8 18.574-8.892 5.115-4.093 8.97-9.208 11.804-15.347 2.755-6.139 4.093-13.537 4.093-22.113 0-7.398-1.103-13.93-3.464-19.676-2.282-5.824-5.901-10.702-10.781-14.637-4.958-4.014-11.333-7.004-19.202-9.05-7.79-1.968-17.314-2.991-28.567-2.991-8.893 0-17 .472-24.318 1.417a160.674 160.674 0 01-20.62 1.337c-4.484 0-7.632-1.1-9.6-3.305-1.89-2.204-2.833-6.374-2.833-12.355V231.452c0-6.138 1.18-10.624 3.54-13.3 2.361-2.676 6.218-4.014 11.413-4.014h141.34c1.417 0 2.677.473 3.935 1.418 1.182.865 2.283 2.36 3.07 4.327.865 2.046 1.496 4.643 1.888 7.949.394 3.306.551 7.318.551 11.884 0 9.207-.786 15.896-2.44 20.066-1.573 4.172-3.935 6.218-7.004 6.218H394v63.903c5.43-.63 10.782-1.023 16.054-1.18a562.841 562.841 0 0116.684-.237c16.132 0 30.534 1.888 43.047 5.666 12.513 3.778 23.06 9.287 31.558 16.605 8.579 7.32 15.031 16.37 19.517 27.23 4.407 10.781 6.69 23.373 6.69 37.696z",
      className: "fil1",
      clipRule: "evenodd",
      strokeWidth: 74.462,
      imageRendering: "optimizeQuality",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }));
  }
  var SearchLipinski_default = SvgSearchLipinski;

  // build/lib-react-tsx/structure/Search.tsx
  var React158 = __toModule(require_react());
  function SvgSearch3({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React158.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React158.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React158.createElement("g", {
      fill: "none",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React158.createElement("path", {
      strokeWidth: 46.298,
      d: "M415.199 668.968c-173.539 0-315.081-141.541-315.081-315.079 0-173.545 141.542-315.093 315.081-315.093 173.553 0 315.099 141.548 315.099 315.093 0 173.538-141.546 315.079-315.099 315.079"
    }), /* @__PURE__ */ React158.createElement("path", {
      strokeWidth: 46.296,
      d: "M887.36 888.085L654.566 576.416l-81.491 60.867 232.794 311.669M805.869 948.952c12.383 16.576 36.082 20.013 52.657 7.634M858.526 956.586l21.208-15.843M879.734 940.743c16.576-12.389 20.012-36.083 7.626-52.656"
    }), /* @__PURE__ */ React158.createElement("path", {
      strokeWidth: 21.304,
      d: "M415.199 612.475c-142.419 0-258.587-116.169-258.587-258.586 0-142.43 116.168-258.59 258.587-258.59 142.437 0 258.598 116.162 258.598 258.59 0 142.416-116.161 258.586-258.598 258.586"
    }), /* @__PURE__ */ React158.createElement("path", {
      strokeWidth: 40.213,
      d: "M266.632 268.108l148.567-85.779 148.583 85.779v171.553l-148.583 85.78-148.567-85.78z"
    })));
  }
  var Search_default3 = SvgSearch3;

  // build/lib-react-tsx/structure/So4.tsx
  var React159 = __toModule(require_react());
  function SvgSo4({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React159.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React159.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React159.createElement("path", {
      d: "M449.65 685.624c-3.342 12.496-16.276 20.051-28.918 16.566-12.498-3.342-20.053-16.278-16.712-28.92zm0 0l149.093-556.129-45.63-12.207L404.021 673.27zm103.464-568.336c3.343-12.642 16.279-20.053 28.92-16.71 12.643 3.341 20.052 16.274 16.709 28.917z",
      stroke: "none"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M594.966 52.332c-36.472-9.737-73.82 11.916-83.556 48.245-9.736 36.329 11.916 73.82 48.247 83.557 36.325 9.736 73.675-11.916 83.41-48.245 9.735-36.33-11.772-73.821-48.1-83.557zM443.11 618.776c-36.328-9.735-73.675 11.772-83.41 48.102-9.737 36.475 11.77 73.821 48.245 83.556 36.328 9.735 73.675-11.772 83.41-48.244 9.737-36.329-11.77-73.675-48.245-83.414z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M356.939 362.729c-21.362 79.779 26.01 161.739 105.79 183.1 79.779 21.36 161.739-26.013 183.1-105.791 21.36-79.634-26.014-161.738-105.79-183.1-79.635-21.362-161.74 26.012-183.1 105.791z",
      fill: "none",
      strokeWidth: 58.853,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M785.623 453.114c12.497 3.343 20.053 16.278 16.567 28.92-3.343 12.643-16.277 20.052-28.92 16.71zm0 0L229.495 304.021l-12.207 45.63 555.981 149.093zM217.288 349.65c-12.642-3.342-20.054-16.275-16.711-28.918 3.343-12.497 16.276-20.054 28.918-16.711z",
      stroke: "none"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M152.331 307.944c-9.735 36.33 11.916 73.676 48.246 83.412 36.33 9.736 73.82-11.77 83.557-48.245 9.737-36.33-11.916-73.676-48.245-83.412-36.33-9.736-73.822 11.77-83.558 48.245z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M375.539 367.67c-18.6 69.46 22.669 140.959 92.13 159.559 69.461 18.6 140.96-22.67 159.56-92.133 18.6-69.46-22.67-140.957-92.133-159.557-69.46-18.601-140.957 22.669-159.557 92.13z",
      fill: "#fefefe",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M718.776 459.657c-9.736 36.325 11.772 73.675 48.102 83.41 36.475 9.735 73.822-11.772 83.556-48.101 9.735-36.472-11.771-73.82-48.244-83.556-36.33-9.736-73.675 11.916-83.414 48.247z",
      fillRule: "evenodd",
      stroke: "none"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M455.754 418.53c0 3.633-.72 6.83-2.035 9.591-1.31 2.907-3.197 5.377-5.668 7.266-2.324 2.035-5.085 3.488-8.282 4.505-3.343 1.017-6.686 1.453-10.463 1.453-2.616 0-5.087-.145-7.265-.582a50.262 50.262 0 01-5.96-1.598c-1.743-.726-3.196-1.308-4.358-2.035-1.167-.726-2.035-1.308-2.471-1.743-.433-.437-.88-1.018-1.023-1.89-.288-.725-.288-1.598-.288-2.906 0-.872 0-1.598.144-2.18 0-.58.144-1.017.288-1.453.144-.29.288-.58.576-.726.288-.146.577-.146.88-.146.575 0 1.31.292 2.325 1.018 1.023.58 2.324 1.308 3.922 2.18 1.599.725 3.633 1.598 5.813 2.179 2.325.726 4.941 1.163 7.847 1.163 2.326 0 4.36-.29 6.25-1.018 1.743-.582 3.34-1.453 4.795-2.47 1.31-1.163 2.324-2.47 3.051-4.069.72-1.598 1.023-3.488 1.023-5.522 0-2.18-.432-4.069-1.454-5.522-1.023-1.599-2.325-3.052-3.923-4.214a41.391 41.391 0 00-5.667-3.197c-2.034-1.018-4.214-2.035-6.394-3.052-2.325-1.017-4.359-2.18-6.539-3.342-2.034-1.309-3.925-2.761-5.523-4.36-1.598-1.744-3.052-3.632-4.069-5.958-1.023-2.325-1.452-4.94-1.452-8.137s.576-6.104 1.743-8.72c1.167-2.47 2.907-4.65 4.941-6.394 2.034-1.743 4.65-3.051 7.556-3.923 2.907-.872 5.96-1.308 9.3-1.308 1.744 0 3.489.145 5.232.436 1.744.292 3.343.727 4.941 1.163 1.598.582 2.906 1.017 4.069 1.744 1.311.581 2.034 1.018 2.47 1.453.288.437.576.727.734.872.145.291.145.582.289.872 0 .29.144.726.144 1.163 0 .582.144 1.162.144 1.889 0 .726-.144 1.453-.144 2.034 0 .437-.144 1.017-.288 1.308-.145.437-.289.727-.433.872-.288.146-.576.291-.864.291-.433 0-1.023-.29-2.035-.872-.879-.58-2.034-1.162-3.488-1.889-1.311-.726-2.906-1.308-4.795-1.889-1.89-.582-3.924-.871-6.25-.871-2.178 0-4.068.29-5.666.871-1.598.581-2.906 1.309-3.924 2.325-1.023.872-1.888 2.035-2.325 3.343a10.514 10.514 0 00-.879 4.214c0 2.18.576 4.069 1.6 5.667 1.022 1.454 2.323 2.906 3.923 4.07 1.743 1.307 3.632 2.324 5.667 3.341l6.54 3.052c2.178 1.017 4.358 2.18 6.393 3.342 2.18 1.163 4.069 2.616 5.667 4.36 1.745 1.598 3.051 3.633 4.069 5.812 1.023 2.325 1.599 4.942 1.599 8.138zm89.369-18.019c0 6.249-.72 11.916-2.324 17.002-1.454 5.087-3.633 9.3-6.54 12.933-3.052 3.488-6.684 6.249-11.188 8.138-4.36 1.89-9.592 2.761-15.55 2.761-5.813 0-10.899-.871-15.113-2.616-4.215-1.743-7.847-4.214-10.608-7.556-2.76-3.342-4.795-7.411-6.249-12.352-1.311-4.94-2.034-10.608-2.034-17.002 0-6.103.72-11.626 2.325-16.711 1.453-4.941 3.633-9.3 6.684-12.788 2.906-3.488 6.54-6.249 11.044-8.138 4.506-1.889 9.59-2.761 15.549-2.761 5.814 0 10.754.871 14.967 2.47 4.215 1.744 7.849 4.36 10.61 7.557 2.76 3.342 4.94 7.41 6.248 12.352 1.453 4.795 2.179 10.463 2.179 16.711zm-10.899.726c0-4.36-.432-8.573-1.167-12.352-.879-3.778-2.178-6.975-3.923-9.881-1.89-2.761-4.213-4.94-7.265-6.394-3.052-1.599-6.83-2.325-11.335-2.325-4.504 0-8.284.726-11.335 2.47-3.052 1.599-5.522 3.924-7.41 6.685-1.89 2.906-3.198 6.103-4.07 9.881-.879 3.779-1.167 7.702-1.167 11.77 0 4.506.288 8.72 1.023 12.644.865 3.778 2.18 7.12 3.924 9.881 1.743 2.761 4.214 4.94 7.266 6.54 3.052 1.598 6.83 2.325 11.334 2.325 4.505 0 8.283-.872 11.48-2.616 3.052-1.599 5.522-3.924 7.41-6.685 1.891-2.906 3.198-6.248 4.07-10.027.72-3.778 1.167-7.702 1.167-11.916z",
      fill: "none",
      strokeWidth: 14.532,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M455.754 418.53c0 3.633-.72 6.83-2.035 9.591-1.31 2.907-3.197 5.377-5.668 7.266-2.324 2.035-5.085 3.488-8.282 4.505-3.343 1.017-6.686 1.453-10.463 1.453-2.616 0-5.087-.145-7.265-.582a50.262 50.262 0 01-5.96-1.598c-1.743-.726-3.196-1.308-4.358-2.035-1.167-.726-2.035-1.308-2.471-1.743-.433-.437-.88-1.018-1.023-1.89-.288-.725-.288-1.598-.288-2.906 0-.872 0-1.598.144-2.18 0-.58.144-1.017.288-1.453.144-.29.288-.58.576-.726.288-.146.577-.146.88-.146.575 0 1.31.292 2.325 1.018 1.023.58 2.324 1.308 3.922 2.18 1.599.725 3.633 1.598 5.813 2.179 2.325.726 4.941 1.163 7.847 1.163 2.326 0 4.36-.29 6.25-1.018 1.743-.582 3.34-1.453 4.795-2.47 1.31-1.163 2.324-2.47 3.051-4.069.72-1.598 1.023-3.488 1.023-5.522 0-2.18-.432-4.069-1.454-5.522-1.023-1.599-2.325-3.052-3.923-4.214a41.391 41.391 0 00-5.667-3.197c-2.034-1.018-4.214-2.035-6.394-3.052-2.325-1.017-4.359-2.18-6.539-3.342-2.034-1.309-3.925-2.761-5.523-4.36-1.598-1.744-3.052-3.632-4.069-5.958-1.023-2.325-1.452-4.94-1.452-8.137s.576-6.104 1.743-8.72c1.167-2.47 2.907-4.65 4.941-6.394 2.034-1.743 4.65-3.051 7.556-3.923 2.907-.872 5.96-1.308 9.3-1.308 1.744 0 3.489.145 5.232.436 1.744.292 3.343.727 4.941 1.163 1.598.582 2.906 1.017 4.069 1.744 1.311.581 2.034 1.018 2.47 1.453.288.437.576.727.734.872.145.291.145.582.289.872 0 .29.144.726.144 1.163 0 .582.144 1.162.144 1.889 0 .726-.144 1.453-.144 2.034 0 .437-.144 1.017-.288 1.308-.145.437-.289.727-.433.872-.288.146-.576.291-.864.291-.433 0-1.023-.29-2.035-.872-.879-.58-2.034-1.162-3.488-1.889-1.311-.726-2.906-1.308-4.795-1.889-1.89-.582-3.924-.871-6.25-.871-2.178 0-4.068.29-5.666.871-1.598.581-2.906 1.309-3.924 2.325-1.023.872-1.888 2.035-2.325 3.343a10.514 10.514 0 00-.879 4.214c0 2.18.576 4.069 1.6 5.667 1.022 1.454 2.323 2.906 3.923 4.07 1.743 1.307 3.632 2.324 5.667 3.341l6.54 3.052c2.178 1.017 4.358 2.18 6.393 3.342 2.18 1.163 4.069 2.616 5.667 4.36 1.745 1.598 3.051 3.633 4.069 5.812 1.023 2.325 1.599 4.942 1.599 8.138zm89.369-18.019c0 6.249-.72 11.916-2.324 17.002-1.454 5.087-3.633 9.3-6.54 12.933-3.052 3.488-6.684 6.249-11.188 8.138-4.36 1.89-9.592 2.761-15.55 2.761-5.813 0-10.899-.871-15.113-2.616-4.215-1.743-7.847-4.214-10.608-7.556-2.76-3.342-4.795-7.411-6.249-12.352-1.311-4.94-2.034-10.608-2.034-17.002 0-6.103.72-11.626 2.325-16.711 1.453-4.941 3.633-9.3 6.684-12.788 2.906-3.488 6.54-6.249 11.044-8.138 4.506-1.889 9.59-2.761 15.549-2.761 5.814 0 10.754.871 14.967 2.47 4.215 1.744 7.849 4.36 10.61 7.557 2.76 3.342 4.94 7.41 6.248 12.352 1.453 4.795 2.179 10.463 2.179 16.711zm-10.899.726c0-4.36-.432-8.573-1.167-12.352-.879-3.778-2.178-6.975-3.923-9.881-1.89-2.761-4.213-4.94-7.265-6.394-3.052-1.599-6.83-2.325-11.335-2.325-4.504 0-8.284.726-11.335 2.47-3.052 1.599-5.522 3.924-7.41 6.685-1.89 2.906-3.198 6.103-4.07 9.881-.879 3.779-1.167 7.702-1.167 11.77 0 4.506.288 8.72 1.023 12.644.865 3.778 2.18 7.12 3.924 9.881 1.743 2.761 4.214 4.94 7.266 6.54 3.052 1.598 6.83 2.325 11.334 2.325 4.505 0 8.283-.872 11.48-2.616 3.052-1.599 5.522-3.924 7.41-6.685 1.891-2.906 3.198-6.248 4.07-10.027.72-3.778 1.167-7.702 1.167-11.916z",
      stroke: "none"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M594.824 457.913c0 1.163-.144 2.033-.447 2.614-.288.582-.72.87-1.311.87H585.8v13.371c0 .293 0 .582-.144.728-.144.144-.289.288-.72.435a2.908 2.908 0 01-1.312.288c-.432 0-1.167.147-1.89.147-.865 0-1.453-.147-2.034-.147-.432 0-.864-.144-1.31-.288-.289-.147-.433-.293-.577-.435-.144-.147-.144-.435-.144-.728v-13.37H551.51c-.432 0-.72 0-1.023-.144-.288 0-.432-.293-.72-.44-.144-.288-.288-.723-.432-1.158-.145-.582-.145-1.163-.145-1.891s0-1.163.145-1.745c0-.435 0-.87.144-1.31.144-.435.144-.87.432-1.158.144-.44.288-.874.576-1.163l22.816-38.655c.144-.146.432-.437.72-.582.289-.291.735-.437 1.168-.58.432-.146 1.167-.146 1.89-.292h2.468c1.167 0 2.038 0 2.908.146.735 0 1.311.145 1.89.29.433.146.865.292 1.167.436.144.29.289.582.289.872v40.398h7.266c.432 0 1.023.288 1.31.87.29.582.448 1.456.448 2.619zm-17.148-38.22h-.144l-20.633 34.73h20.78z",
      fill: "none",
      strokeWidth: 7.266,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React159.createElement("path", {
      d: "M594.824 457.913c0 1.163-.144 2.033-.447 2.614-.288.582-.72.87-1.311.87H585.8v13.371c0 .293 0 .582-.144.728-.144.144-.289.288-.72.435a2.908 2.908 0 01-1.312.288c-.432 0-1.167.147-1.89.147-.865 0-1.453-.147-2.034-.147-.432 0-.864-.144-1.31-.288-.289-.147-.433-.293-.577-.435-.144-.147-.144-.435-.144-.728v-13.37H551.51c-.432 0-.72 0-1.023-.144-.288 0-.432-.293-.72-.44-.144-.288-.288-.723-.432-1.158-.145-.582-.145-1.163-.145-1.891s0-1.163.145-1.745c0-.435 0-.87.144-1.31.144-.435.144-.87.432-1.158.144-.44.288-.874.576-1.163l22.816-38.655c.144-.146.432-.437.72-.582.289-.291.735-.437 1.168-.58.432-.146 1.167-.146 1.89-.292h2.468c1.167 0 2.038 0 2.908.146.735 0 1.311.145 1.89.29.433.146.865.292 1.167.436.144.29.289.582.289.872v40.398h7.266c.432 0 1.023.288 1.31.87.29.582.448 1.456.448 2.619zm-17.148-38.22h-.144l-20.633 34.73h20.78z",
      stroke: "none"
    }));
  }
  var So4_default = SvgSo4;

  // build/lib-react-tsx/structure/StructuralIsomers.tsx
  var React160 = __toModule(require_react());
  function SvgStructuralIsomers({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React160.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React160.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React160.createElement("path", {
      d: "M91.996 338.219c-11.394 6.58-15.407 21.185-8.827 32.74 6.58 11.395 21.185 15.087 32.58 8.507zm0 0l391.436-225.97 23.753 41.245-391.436 225.972zm415.189-184.725c11.395-6.74 15.407-21.344 8.827-32.74-6.58-11.394-21.185-15.245-32.58-8.505zM664.463 802.137H329.201l.321-47.825h335.265zm-335.102-23.911l-.16 23.91c-13.321 0-23.914-10.75-23.753-23.91.16-13.32 10.913-23.914 24.234-23.914zm-20.542-11.878L476.37 478.912l41.247 23.751L349.904 790.1zm188.255-275.56l-20.704-11.876c6.74-11.557 21.346-15.41 32.74-8.829 11.395 6.58 15.247 21.185 8.507 32.58zm20.543-12.198L685.328 766.03l-41.245 24.396-167.713-287.44zm147.008 299.636l20.703-12.198c6.742 11.394 2.731 26-8.667 32.74-11.394 6.74-26.16 3.05-32.74-8.343zM876.313 472.87c11.232 6.58 25.999 2.73 32.74-8.666 6.579-11.556 2.887-26.16-8.507-32.74zm0 0L484.876 246.9l24.235-41.407 391.435 225.972zM509.111 205.493c-11.235-6.58-26-2.566-32.74 8.827-6.58 11.396-2.89 26 8.505 32.58z",
      stroke: "none"
    }), /* @__PURE__ */ React160.createElement("path", {
      d: "M876.313 379.466c11.232 6.58 25.999 2.727 32.74-8.668 6.579-11.555 2.887-26.16-8.507-32.74zm0 0L484.876 153.494l24.235-41.405 391.435 225.97zM509.111 112.089c-11.235-6.58-26-2.569-32.74 8.827-6.58 11.393-2.89 25.998 8.505 32.578z",
      stroke: "none"
    }));
  }
  var StructuralIsomers_default = SvgStructuralIsomers;

  // build/lib-react-tsx/structure/StructuralIsomers2.tsx
  var React161 = __toModule(require_react());
  function SvgStructuralIsomers2({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React161.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React161.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React161.createElement("path", {
      d: "M797.952 261.166c0 13.929-1.729 26.394-5.188 37.395-3.463 11.001-8.608 20.361-15.481 28.036-6.832 7.628-15.304 13.484-25.375 17.521-10.115 4.037-21.779 6.034-35.041 6.034-13.087 0-24.485-1.686-34.247-5.102-9.757-3.416-17.876-8.649-24.351-15.66-6.523-7.052-11.401-15.969-14.641-26.792-3.236-10.824-4.88-23.644-4.88-38.459 0-13.618 1.731-25.861 5.236-36.73 3.459-10.867 8.604-20.094 15.436-27.725 6.829-7.628 15.303-13.484 25.417-17.564 10.069-4.081 21.824-6.079 35.131-6.079 12.775 0 23.997 1.686 33.759 5.057 9.711 3.373 17.876 8.562 24.396 15.57 6.563 7.054 11.488 15.881 14.815 26.616 3.376 10.689 5.014 23.29 5.014 37.882h0zm-35.84 1.819c0-8.873-.709-16.9-2.084-24.132-1.375-7.229-3.771-13.441-7.099-18.585-3.327-5.146-7.763-9.139-13.306-11.932-5.548-2.839-12.466-4.26-20.806-4.26-8.383 0-15.437 1.598-21.07 4.747-5.589 3.194-10.16 7.407-13.619 12.687-3.463 5.278-5.899 11.444-7.364 18.497-1.422 7.098-2.13 14.551-2.13 22.447 0 9.183.71 17.433 2.084 24.751 1.378 7.32 3.727 13.574 7.013 18.763 3.283 5.19 7.719 9.181 13.262 11.887 5.542 2.751 12.51 4.126 20.937 4.126 8.387 0 15.39-1.597 21.024-4.703 5.638-3.106 10.205-7.363 13.664-12.731 3.463-5.366 5.9-11.622 7.319-18.763 1.466-7.14 2.175-14.769 2.175-22.799h0zm195.842 79.534a3.46 3.46 0 01-.842 2.308c-.578.708-1.51 1.287-2.794 1.685-1.288.444-3.018.799-5.189 1.065-2.175.266-4.881.4-8.208.4-3.369 0-6.163-.134-8.382-.4-2.171-.265-3.948-.62-5.19-1.065-1.239-.398-2.171-.977-2.705-1.685a3.456 3.456 0 01-.845-2.308v-68H860.9v68c0 .844-.268 1.641-.798 2.308-.531.708-1.421 1.287-2.752 1.685-1.286.444-3.016.799-5.188 1.065-2.175.266-4.925.4-8.296.4-3.283 0-6.031-.134-8.251-.4-2.215-.265-3.993-.62-5.276-1.065-1.289-.398-2.22-.977-2.795-1.685a3.456 3.456 0 01-.845-2.308V183.673c0-.843.268-1.64.845-2.307.575-.708 1.507-1.288 2.795-1.686 1.284-.445 3.062-.8 5.276-1.065 2.22-.267 4.968-.4 8.251-.4 3.372 0 6.121.133 8.296.4 2.172.265 3.901.62 5.188 1.065 1.332.398 2.221.978 2.752 1.686.53.667.798 1.465.798 2.307v61.745h62.898v-61.745c0-.843.268-1.64.845-2.307.534-.708 1.467-1.288 2.705-1.686 1.242-.445 3.02-.8 5.19-1.065 2.219-.267 5.013-.4 8.382-.4 3.327 0 6.033.133 8.208.4 2.172.265 3.902.62 5.189 1.065 1.285.398 2.216.978 2.794 1.686.575.667.842 1.465.842 2.307v158.846zM584.268 503.718c0 13.926-1.73 26.394-5.188 37.394-3.459 11-8.604 20.359-15.481 28.034-6.832 7.63-15.303 13.483-25.372 17.521-10.114 4.038-21.778 6.035-35.044 6.035-13.086 0-24.488-1.686-34.245-5.104-9.76-3.413-17.876-8.648-24.354-15.656-6.52-7.054-11.399-15.968-14.64-26.793-3.238-10.824-4.879-23.645-4.879-38.456 0-13.622 1.73-25.861 5.235-36.729 3.459-10.869 8.604-20.096 15.435-27.724 6.831-7.631 15.304-13.486 25.418-17.569 10.068-4.081 21.824-6.076 35.133-6.076 12.774 0 24.001 1.686 33.759 5.057 9.714 3.371 17.875 8.561 24.396 15.569 6.568 7.052 11.489 15.882 14.816 26.615 3.37 10.69 5.011 23.287 5.011 37.882h0zm-35.841 1.816c0-8.87-.711-16.9-2.085-24.129-1.376-7.23-3.771-13.441-7.1-18.587-3.322-5.145-7.759-9.138-13.307-11.934-5.542-2.836-12.464-4.256-20.804-4.256-8.385 0-15.44 1.597-21.072 4.747-5.589 3.192-10.158 7.406-13.619 12.687-3.458 5.276-5.899 11.443-7.364 18.496-1.417 7.098-2.128 14.549-2.128 22.444 0 9.187.713 17.434 2.086 24.752 1.375 7.32 3.726 13.576 7.008 18.766 3.283 5.19 7.719 9.181 13.262 11.887 5.546 2.752 12.51 4.127 20.941 4.127 8.384 0 15.393-1.598 21.026-4.702 5.634-3.108 10.204-7.364 13.663-12.731 3.459-5.37 5.9-11.622 7.321-18.766 1.461-7.141 2.172-14.771 2.172-22.801z"
    }), /* @__PURE__ */ React161.createElement("g", {
      fill: "none",
      strokeWidth: 32.63,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React161.createElement("path", {
      d: "M600.127 188.254L372.785 57M38.672 250.33L372.785 57M38.672 698.881l325.454-193.326M960.28 698.881L634.823 505.555"
    })));
  }
  var StructuralIsomers2_default = SvgStructuralIsomers2;

  // build/lib-react-tsx/structure/UnsaturationFormula.tsx
  var React162 = __toModule(require_react());
  function SvgUnsaturationFormula({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React162.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React162.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React162.createElement("g", {
      style: {
        lineHeight: 1.25
      },
      fontWeight: 400,
      fontSize: 40,
      fontFamily: "sans-serif",
      letterSpacing: 0,
      wordSpacing: 0,
      stroke: "none"
    }, /* @__PURE__ */ React162.createElement("path", {
      d: "M304.813 630.063q0 5.859-.47 10.078-.234 3.984-.937 7.03-.703 2.813-1.875 4.923-1.172 2.11-3.75 4.922-2.578 2.578-10.078 6.797-7.265 4.218-18.047 8.203-10.547 3.75-24.375 6.328-13.594 2.578-29.531 2.578-31.172 0-56.25-9.61-25.078-9.609-42.656-28.593Q99.266 623.5 89.89 594.906q-9.375-28.593-9.375-66.562 0-38.672 10.312-68.672 10.313-30 28.828-50.39 18.516-20.391 44.297-30.938 26.016-10.547 57.188-10.547 12.656 0 24.375 2.11 11.718 2.109 21.562 5.624 10.078 3.281 18.047 7.735 7.969 4.453 11.016 7.734 3.28 3.047 4.453 5.156 1.172 2.11 1.875 5.39.703 3.282.937 7.735.469 4.453.469 11.016 0 7.031-.469 11.953t-1.64 7.969q-1.172 3.047-2.813 4.453-1.64 1.406-3.75 1.406-3.515 0-8.906-3.984-5.39-4.219-14.063-9.14-8.437-5.157-20.39-9.141-11.719-4.22-28.125-4.22-18.047 0-32.344 7.5-14.063 7.266-24.14 21.094-9.844 13.594-15 33.047-5.157 19.454-5.157 43.829 0 26.718 5.39 46.406 5.626 19.453 15.704 32.11 10.312 12.655 24.61 18.984 14.53 6.093 32.577 6.093 16.407 0 28.36-3.75 11.953-3.984 20.39-8.672 8.672-4.687 14.063-8.437 5.625-3.75 8.672-3.75 2.344 0 3.75.937 1.406.938 2.344 3.75.937 2.813 1.406 7.97.469 4.921.469 13.359z"
    }), /* @__PURE__ */ React162.createElement("path", {
      d: "M465.688 706.188q0 14.93-4.57 27.726-4.571 12.645-13.407 21.938-8.836 9.14-21.785 14.472-12.95 5.18-29.86 5.18-13.71 0-23.918-3.2-10.207-3.046-17.671-8.835-7.465-5.942-12.188-14.32-4.723-8.38-7.617-18.891-2.742-10.512-3.809-22.852-1.066-12.34-1.066-26.203 0-11.578 1.066-24.223 1.219-12.644 4.418-24.832 3.352-12.187 9.293-23.156 5.942-11.12 15.235-19.347 9.445-8.38 22.699-13.254 13.406-4.875 31.687-4.875 5.79 0 11.578.761 5.942.61 10.97 1.676 5.027 1.067 8.53 2.438 3.504 1.37 4.57 2.437 1.22.914 1.829 2.133.61 1.219.914 2.742.457 1.371.61 3.504.152 2.133.152 5.18 0 4.722-.305 7.922-.152 3.046-.762 4.875-.61 1.675-1.676 2.437-1.066.762-2.59.762-1.827 0-4.722-.914-2.895-1.067-7.008-2.285-4.113-1.22-9.75-2.133-5.484-.914-12.797-.914-12.34 0-20.87 4.57-8.532 4.57-13.864 12.492-5.332 7.77-7.77 18.13-2.437 10.359-2.59 21.937 3.352-2.133 7.618-4.266 4.418-2.133 9.445-3.656 5.18-1.524 11.121-2.438 5.942-1.066 12.645-1.066 14.93 0 25.593 4.113 10.664 4.113 17.368 11.73 6.855 7.618 10.054 18.434 3.2 10.817 3.2 24.07zm-39.305 3.808q0-7.77-1.371-13.559-1.371-5.94-4.418-9.902-3.047-4.113-8.074-6.094-5.028-2.132-12.188-2.132-4.266 0-8.379.761-4.113.762-8.074 2.133-3.961 1.371-7.617 3.352-3.657 1.828-6.856 3.96 0 16.301 1.828 27.27 1.828 10.817 5.332 17.215 3.657 6.398 8.989 9.14 5.484 2.59 12.644 2.59 7.008 0 12.188-2.59 5.332-2.59 8.836-7.312 3.504-4.723 5.332-10.969 1.828-6.398 1.828-13.863z",
      fontSize: "65%",
      baselineShift: "sub"
    }), /* @__PURE__ */ React162.createElement("path", {
      d: "M745.203 667.563q0 2.343-1.64 4.218-1.407 1.875-4.922 3.047-3.516 1.172-9.375 1.875-5.86.703-14.766.703-9.14 0-15.234-.703-5.86-.703-9.375-1.875-3.282-1.172-4.922-3.047-1.407-1.875-1.407-4.218V544.984H570.125v122.578q0 2.344-1.406 4.22-1.407 1.874-4.922 3.046-3.516 1.172-9.375 1.875-5.86.703-15 .703-8.906 0-15-.703-5.86-.703-9.375-1.875-3.516-1.172-5.156-3.047-1.407-1.875-1.407-4.218V381.156q0-2.344 1.407-4.219 1.64-1.875 5.156-3.046 3.515-1.172 9.375-1.875 6.094-.704 15-.704 9.14 0 15 .704 5.86.703 9.375 1.875 3.515 1.171 4.922 3.046 1.406 1.875 1.406 4.22v111.327h113.438V381.156q0-2.344 1.406-4.219 1.64-1.875 4.922-3.046 3.515-1.172 9.375-1.875 6.093-.704 15.234-.704 8.906 0 14.766.704 5.859.703 9.375 1.875 3.515 1.171 4.922 3.046 1.64 1.875 1.64 4.22v286.406z"
    }), /* @__PURE__ */ React162.createElement("path", {
      d: "M926.938 706.188q0 14.93-4.57 27.726-4.571 12.645-13.407 21.938-8.836 9.14-21.785 14.472-12.95 5.18-29.86 5.18-13.71 0-23.918-3.2-10.207-3.046-17.671-8.835-7.465-5.942-12.188-14.32-4.723-8.38-7.617-18.891-2.742-10.512-3.809-22.852-1.066-12.34-1.066-26.203 0-11.578 1.066-24.223 1.219-12.644 4.418-24.832 3.352-12.187 9.293-23.156 5.942-11.12 15.235-19.347 9.445-8.38 22.699-13.254 13.406-4.875 31.687-4.875 5.79 0 11.578.761 5.942.61 10.97 1.676 5.027 1.067 8.53 2.438 3.504 1.37 4.57 2.437 1.22.914 1.829 2.133.61 1.219.914 2.742.457 1.371.61 3.504.152 2.133.152 5.18 0 4.722-.305 7.922-.152 3.046-.762 4.875-.61 1.675-1.676 2.437-1.066.762-2.59.762-1.828 0-4.722-.914-2.895-1.067-7.008-2.285-4.113-1.22-9.75-2.133-5.484-.914-12.797-.914-12.34 0-20.87 4.57-8.532 4.57-13.864 12.492-5.332 7.77-7.77 18.13-2.437 10.359-2.59 21.937 3.352-2.133 7.618-4.266 4.418-2.133 9.445-3.656 5.18-1.524 11.121-2.438 5.942-1.066 12.645-1.066 14.93 0 25.593 4.113 10.664 4.113 17.368 11.73 6.855 7.618 10.054 18.434 3.2 10.817 3.2 24.07zm-39.305 3.808q0-7.77-1.371-13.559-1.371-5.94-4.418-9.902-3.047-4.113-8.074-6.094-5.028-2.132-12.188-2.132-4.266 0-8.379.761-4.113.762-8.074 2.133-3.961 1.371-7.617 3.352-3.657 1.828-6.856 3.96 0 16.301 1.828 27.27 1.828 10.817 5.332 17.215 3.657 6.398 8.989 9.14 5.484 2.59 12.644 2.59 7.008 0 12.188-2.59 5.332-2.59 8.836-7.312 3.504-4.723 5.332-10.969 1.828-6.398 1.828-13.863z",
      fontSize: "65%",
      baselineShift: "sub"
    })));
  }
  var UnsaturationFormula_default = SvgUnsaturationFormula;

  // build/lib-react-tsx/structure/UnsaturationStructure.tsx
  var React163 = __toModule(require_react());
  function SvgUnsaturationStructure({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React163.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React163.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React163.createElement("g", {
      fill: "none",
      strokeWidth: 43.255,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeMiterlimit: 22.926
    }, /* @__PURE__ */ React163.createElement("path", {
      d: "M529.4 586.817H47.701l240.852-372.074L529.4 586.817h0zM951.455 411.419H469.751L710.604 39.344l240.851 372.075h0zM290.169 212.852L710.378 38.395M534.877 586.905l415.025-171.863M50.906 585.358L472.405 409.6"
    })));
  }
  var UnsaturationStructure_default = SvgUnsaturationStructure;

  // build/lib-react-tsx/structure/Virtual.tsx
  var React164 = __toModule(require_react());
  function SvgVirtual({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React164.createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      stroke: "currentColor",
      fill: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React164.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React164.createElement("g", {
      transform: "rotate(113.866 257.648 239.32)"
    }, /* @__PURE__ */ React164.createElement("path", {
      strokeWidth: 60,
      strokeLinejoin: "round",
      d: "M133.234 116.347h170v170h-170z"
    }), /* @__PURE__ */ React164.createElement("circle", {
      cx: 568.114,
      cy: 201.347,
      r: 100,
      strokeWidth: 60,
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React164.createElement("path", {
      d: "M245.509 201.347h290.42",
      fill: "#000",
      stroke: "#000",
      strokeWidth: 100
    }), /* @__PURE__ */ React164.createElement("path", {
      strokeWidth: 60,
      strokeLinejoin: "round",
      d: "M133.234 116.347h170v170h-170z"
    }), /* @__PURE__ */ React164.createElement("circle", {
      cx: 568.114,
      cy: 201.347,
      r: 100,
      strokeWidth: 60,
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React164.createElement("path", {
      d: "M245.509 201.347h290.42",
      fill: "#000",
      stroke: "#000",
      strokeWidth: 100
    })), /* @__PURE__ */ React164.createElement("g", {
      transform: "rotate(-34.262 235.323 312.714)"
    }, /* @__PURE__ */ React164.createElement("circle", {
      cx: 820.135,
      cy: 570.359,
      r: 100,
      strokeWidth: 60,
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React164.createElement("path", {
      d: "M497.53 570.36h290.42",
      fill: "#000",
      stroke: "#000",
      strokeWidth: 100
    }), /* @__PURE__ */ React164.createElement("circle", {
      cx: 459.581,
      cy: 570.359,
      r: 100,
      strokeWidth: 60,
      strokeLinejoin: "round"
    })), /* @__PURE__ */ React164.createElement("path", {
      strokeWidth: 60,
      strokeLinejoin: "round",
      d: "M379.547 600.378l161.717 52.417-52.416 161.717-161.718-52.416z"
    }), /* @__PURE__ */ React164.createElement("path", {
      d: "M460.043 716.168l276.27 89.546",
      fill: "#000",
      stroke: "#000",
      strokeWidth: 100
    }), /* @__PURE__ */ React164.createElement("path", {
      strokeWidth: 60,
      strokeLinejoin: "round",
      d: "M737.394 714.35l161.718 52.416-52.417 161.718-161.717-52.417z"
    }));
  }
  var Virtual_default = SvgVirtual;

  // build/lib-react-tsx/tga/Assignment.tsx
  var React165 = __toModule(require_react());
  function SvgAssignment8({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React165.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React165.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React165.createElement("path", {
      d: "M111.034 811.033c0 12.99 8.7 23.41 19.543 23.41 10.724 0 19.423-10.42 19.423-23.41zm0 0V162.016H150v649.017zM150 162.016c0-12.849-8.699-23.265-19.423-23.265-10.844 0-19.543 10.416-19.543 23.265z",
      stroke: "none",
      strokeWidth: 1.094
    }), /* @__PURE__ */ React165.createElement("path", {
      d: "M130.577 131.362l49.928 65.896M80.648 197.258l49.929-65.896",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React165.createElement("path", {
      d: "M150 811.033c-14.708 0-26.506 8.7-26.506 19.423C123.494 841.3 135.292 850 150 850zm0 0h734.906V850H150zM884.906 850c14.545 0 26.345-8.7 26.345-19.544 0-10.723-11.8-19.423-26.345-19.423z",
      stroke: "none",
      strokeWidth: 1.165
    }), /* @__PURE__ */ React165.createElement("path", {
      d: "M918.637 830.456l-65.897 50.048M852.74 780.53l65.897 49.926",
      fill: "none",
      strokeWidth: 38.845421449999996,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /* @__PURE__ */ React165.createElement("path", {
      d: "M188.048 294.563c83.576 2.321 143.937 23.215 150.902 134.651 6.965 111.436 44.11 132.33 155.546 134.651 111.435 2.322 171.796 58.04 188.047 102.15 16.251 44.11 67.326 53.396 113.757 58.039 46.432 4.643 44.11 4.643 44.11 4.643",
      fill: "none",
      strokeWidth: 29.9991052
    }));
  }
  var Assignment_default8 = SvgAssignment8;

  // build/lib-react-tsx/xray/Request.tsx
  var React166 = __toModule(require_react());
  function SvgRequest4({
    title,
    titleId,
    ...props
  }) {
    return /* @__PURE__ */ React166.createElement("svg", {
      stroke: "currentColor",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props
    }, title ? /* @__PURE__ */ React166.createElement("title", {
      id: titleId
    }, title) : null, /* @__PURE__ */ React166.createElement("path", {
      d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235l-217.03 251.696-37.674-32.266 217.03-251.899zM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008l53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89l-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38V153.654l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307zM608.631 427.327c11.694-7.59 15.182-23.388 7.59-35.287-7.59-11.694-23.387-14.976-35.286-7.18zm0 0l-119.402 77.96-27.696-42.467 119.402-77.96zM461.533 462.82c-11.694 7.59-15.182 23.387-7.59 35.287 7.59 11.694 23.387 14.976 35.286 7.18zM315.872 296.437c18.258 0 34.876-7.591 46.98-19.49l35.698 35.697c-21.337 21.337-50.88 34.672-83.089 34.672zm46.775-19.696c12.105-12.104 19.695-28.516 19.695-46.775l50.88-.411c0 32.415-13.336 61.752-34.672 83.089zm19.695-46.775c0-18.465-7.59-35.287-19.695-47.392l36.108-36.108c21.131 21.337 34.466 50.674 34.466 83.09zm-19.695-47.392c-12.104-12.104-28.927-19.695-47.186-19.695l.41-50.879c32.21 0 61.547 13.335 82.884 34.467zm-47.186-19.695c-18.464 0-35.082 7.59-47.186 19.49l-35.698-35.697C253.914 125.335 283.457 112 315.872 112zm-47.186 19.49c-11.9 12.104-19.49 28.722-19.49 47.186l-50.88.411c0-32.415 13.336-61.958 34.672-83.294zm-19.49 47.186c0 18.26 7.59 35.082 19.695 47.186l-36.108 36.108c-21.131-21.336-34.466-50.674-34.466-82.883zm19.695 47.186c12.104 12.105 28.927 19.696 47.392 19.696l-.411 50.879c-32.415 0-61.753-13.335-83.09-34.467z",
      stroke: "none"
    }), /* @__PURE__ */ React166.createElement("path", {
      d: "M692.746 433.277c18.259 0 34.876-7.591 46.981-19.695l35.905 35.902c-21.339 21.337-50.676 34.672-83.296 34.672zm46.981-19.49c12.104-12.104 19.49-28.722 19.49-46.981l50.878-.411c0 32.21-13.13 61.753-34.463 83.089zm19.49-46.981c0-18.464-7.386-35.288-19.49-47.392l36.106-36.107c21.133 21.336 34.262 50.674 34.262 83.088zm-19.695-47.186c-12.104-12.31-28.927-19.696-47.186-19.696l.41-51.084c32.416 0 61.959 13.335 83.088 34.467zm-47.186-19.696c-18.26 0-34.877 7.386-46.982 19.285l-35.697-35.697c21.336-21.337 50.674-34.672 83.089-34.672zm-46.982 19.285c-12.104 12.105-19.49 28.722-19.49 47.186l-50.879.411c0-32.415 13.336-61.957 34.672-83.294zm-19.49 47.186c0 18.26 7.591 35.082 19.696 47.187l-36.108 36.107c-21.337-21.336-34.467-50.673-34.467-82.883zm19.696 47.187c12.104 12.104 28.927 19.695 47.186 19.695l-.411 50.88c-32.21 0-61.753-13.336-82.884-34.468zM386.856 580.17c18.259 0 34.877-7.386 46.98-19.49l35.699 35.902c-21.337 21.337-50.675 34.467-83.09 34.467zm46.98-19.49c11.9-12.105 19.49-28.722 19.49-46.982l50.88-.41c0 32.62-13.335 61.957-34.466 83.293zm19.49-46.982c0-18.259-7.59-34.876-19.694-47.185l36.312-36.108c21.132 21.131 34.262 50.469 34.262 82.884zm-19.694-47.185c-12.31-12.105-28.928-19.696-47.187-19.696l.411-50.879c32.415 0 61.753 13.13 83.089 34.467zm-47.187-19.696c-18.464 0-35.081 7.591-46.98 19.49l-35.903-35.697c21.336-21.336 50.879-34.672 83.294-34.672zm-46.98 19.696c-12.105 11.899-19.49 28.516-19.49 46.776l-50.88.41c0-32.414 13.13-61.957 34.467-83.088zm-19.49 46.776c0 18.464 7.385 35.081 19.694 47.39l-36.312 36.109c-21.131-21.337-34.261-50.674-34.261-83.09zm19.694 47.39c12.105 12.105 28.723 19.49 47.187 19.49l-.411 50.88c-32.415 0-61.752-13.13-83.089-34.261z",
      stroke: "none"
    }), /* @__PURE__ */ React166.createElement("path", {
      d: "M580.935 358.805c12.72 5.744 27.696.205 33.646-12.72 5.95-12.72.409-27.902-12.31-33.646zm0 0l-178.692-81.038 21.336-46.365 178.692 81.037zM423.58 231.402c-12.72-5.745-27.696 0-33.646 12.72-5.95 12.925-.41 27.9 12.31 33.645z",
      stroke: "none"
    }));
  }
  var Request_default4 = SvgRequest4;

  // build/react-docs.tsx
  (0, import_react_dom.render)(/* @__PURE__ */ import_react.default.createElement(App, null), document.getElementById("root"));
  function App() {
    return /* @__PURE__ */ import_react.default.createElement("div", {
      className: "w-screen flex flex-row flex-wrap"
    }, Object.entries(react_index_exports).map(([name, Component]) => /* @__PURE__ */ import_react.default.createElement("div", {
      key: name,
      className: "flex flex-col items-center justify-center p-4 border"
    }, /* @__PURE__ */ import_react.default.createElement("div", null, name), /* @__PURE__ */ import_react.default.createElement("div", {
      className: "text-red-500"
    }, /* @__PURE__ */ import_react.default.createElement(Component, {
      className: "w-16 h-16"
    })))));
  }
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
