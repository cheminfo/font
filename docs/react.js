"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React162 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React162.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React162.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React162 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React162.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys = Object.keys(props).filter(function(k) {
                    return k !== "key";
                  });
                  var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx162 = jsxWithValidationDynamic;
          var jsxs162 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx162;
          exports.jsxs = jsxs162;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // build/react-docs.tsx
  var import_react = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // build/react.index.ts
  var react_index_exports = {};
  __export(react_index_exports, {
    SvgBioDna: () => Dna_default,
    SvgBioEppendorf: () => Eppendorf_default,
    SvgBioFlowCytometry: () => FlowCytometry_default,
    SvgBioIsoelectricPoint: () => IsoelectricPoint_default,
    SvgBioMicroscopy: () => Microscopy_default,
    SvgBioPeptideCharge: () => PeptideCharge_default,
    SvgBioPetri: () => Petri_default,
    SvgBioProtein: () => Protein_default,
    SvgBioSeahorse: () => Seahorse_default,
    SvgBioSearchDna: () => SearchDna_default,
    SvgBioUnimod: () => Unimod_default,
    SvgBioUploadDna: () => UploadDna_default,
    SvgChartMonitoring: () => Monitoring_default,
    SvgChartMulti: () => Multi_default,
    SvgChartMulti2: () => Multi2_default,
    SvgChartScatter: () => Scatter_default,
    SvgChartScatterLine: () => ScatterLine_default,
    SvgChemConcentration: () => Concentration_default,
    SvgChemIsomers: () => Isomers_default,
    SvgChemIupacNameStructure: () => IupacNameStructure_default,
    SvgChemIupacStructureName: () => IupacStructureName_default,
    SvgChemMineralFormulaName: () => MineralFormulaName_default,
    SvgChemMineralNameFormula: () => MineralNameFormula_default,
    SvgChemPh: () => Ph_default,
    SvgChemPrecipitation: () => Precipitation_default,
    SvgCheminfoSdfTable: () => SdfTable_default,
    SvgCheminfoSearchSdf: () => SearchSdf_default,
    SvgCvAssignment: () => Assignment_default,
    SvgDscAssignment: () => Assignment_default2,
    SvgEaRequest: () => Request_default,
    SvgGlasswareBeaker: () => Beaker_default,
    SvgGlasswareBeaker2: () => Beaker2_default,
    SvgGlasswareErlen: () => Erlen_default,
    SvgGlasswareRoundFlask: () => RoundFlask_default,
    SvgGlasswareTitration: () => Titration_default,
    SvgIcpRequest: () => Request_default2,
    SvgInventoryAdd: () => Add_default,
    SvgInventoryEmpty: () => Empty_default,
    SvgInventoryFull: () => Full_default,
    SvgInventoryStatus: () => Status_default,
    SvgInventoryToxic: () => Toxic_default,
    SvgIrAssignment: () => Assignment_default3,
    SvgIrOverlay: () => Overlay_default,
    SvgIsothermAssignment: () => Assignment_default4,
    SvgIvAssignment: () => Assignment_default5,
    SvgLogoNmrium: () => Nmrium_default,
    SvgLogoWikipedia: () => Wikipedia_default,
    SvgLogoZakodium: () => Zakodium_default,
    SvgMassImpurities: () => Impurities_default,
    SvgMassMonoisotopic: () => Monoisotopic_default,
    SvgMassOverlay: () => Overlay_default2,
    SvgMassRequest: () => Request_default3,
    SvgMassRequestProtein: () => RequestProtein_default,
    SvgMassSum: () => Sum_default,
    SvgMassUpload: () => Upload_default,
    SvgMiscChromatography: () => Chromatography_default,
    SvgMiscCristal: () => Cristal_default,
    SvgMiscCristal2: () => Cristal2_default,
    SvgMiscCyclicVoltammetry: () => CyclicVoltammetry_default,
    SvgMiscEdit: () => Edit_default,
    SvgMiscElectronMicroscopy: () => ElectronMicroscopy_default,
    SvgMiscOctochemdb: () => Octochemdb_default,
    SvgMiscPeptide: () => Peptide_default,
    SvgMiscPercent: () => Percent_default,
    SvgMiscPolymer: () => Polymer_default,
    SvgMiscPubchem: () => Pubchem_default,
    SvgMiscSearchRequest: () => SearchRequest_default,
    SvgMiscWeight: () => Weight_default,
    SvgMiscXps: () => Xps_default,
    SvgMiscZenodo: () => Zenodo_default,
    SvgNmr13C: () => C_default,
    SvgNmr1H: () => H_default,
    SvgNmr1H13C: () => H13C_default,
    SvgNmr1H1H: () => H1H_default,
    SvgNmr2D: () => D_default,
    SvgNmrAddFilter: () => AddFilter_default,
    SvgNmrAlignBottom: () => AlignBottom_default,
    SvgNmrAlignCenter: () => AlignCenter_default,
    SvgNmrApodization: () => Apodization_default,
    SvgNmrAssignment: () => Assignment_default6,
    SvgNmrAssignment2: () => Assignment2_default,
    SvgNmrBaselineCorrection: () => BaselineCorrection_default,
    SvgNmrExportAsMatrix: () => ExportAsMatrix_default,
    SvgNmrFid: () => Fid_default,
    SvgNmrFourierTransform: () => FourierTransform_default,
    SvgNmrFt: () => Ft_default,
    SvgNmrImpurities: () => Impurities_default2,
    SvgNmrImpuritiesStars: () => ImpuritiesStars_default,
    SvgNmrIntegrate: () => Integrate_default,
    SvgNmrLineshapedeconvolution: () => Lineshapedeconvolution_default,
    SvgNmrMultipleAnalysis: () => MultipleAnalysis_default,
    SvgNmrMultiplet: () => Multiplet_default,
    SvgNmrOverlay: () => Overlay_default3,
    SvgNmrOverlay3: () => Overlay3_default,
    SvgNmrOverlay3Aligned: () => Overlay3Aligned_default,
    SvgNmrPeakPicking: () => PeakPicking_default,
    SvgNmrPeakPicking2: () => PeakPicking2_default,
    SvgNmrPeaks: () => Peaks_default,
    SvgNmrPeaksTopLabels: () => PeaksTopLabels_default,
    SvgNmrPhaseCorr: () => PhaseCorr_default,
    SvgNmrPhaseCorrection: () => PhaseCorrection_default,
    SvgNmrRangePicking: () => RangePicking_default,
    SvgNmrRealImag: () => RealImag_default,
    SvgNmrReference: () => Reference_default,
    SvgNmrResetScale: () => ResetScale_default,
    SvgNmrSameTop: () => SameTop_default,
    SvgNmrSearch: () => Search_default,
    SvgNmrSearchq: () => Searchq_default,
    SvgNmrSignals: () => Signals_default,
    SvgNmrSimulator: () => Simulator_default,
    SvgNmrSimulatormicro: () => Simulatormicro_default,
    SvgNmrSum: () => Sum_default2,
    SvgNmrTools: () => Tools_default,
    SvgNmrTree: () => Tree_default,
    SvgNmrZeroFilling: () => ZeroFilling_default,
    SvgPeriodicCarbon: () => Carbon_default,
    SvgPeriodicElectronegativity: () => Electronegativity_default,
    SvgPeriodicElectronicBoron: () => ElectronicBoron_default,
    SvgPeriodicElectronicLithium: () => ElectronicLithium_default,
    SvgPeriodicIsotopeCarbon: () => IsotopeCarbon_default,
    SvgPeriodicIsotopeFluor: () => IsotopeFluor_default,
    SvgPeriodicIsotopeHydrogen: () => IsotopeHydrogen_default,
    SvgPeriodicMass: () => Mass_default,
    SvgPeriodicOxidationState: () => OxidationState_default,
    SvgRamanAssignment: () => Assignment_default7,
    SvgRamanOverlay: () => Overlay_default4,
    SvgReactionEquilibrium: () => Equilibrium_default,
    SvgReactionSearch: () => Search_default2,
    SvgSafetyToxic: () => Toxic_default2,
    SvgSpectraAnalyse: () => Analyse_default,
    SvgSpectraCompare: () => Compare_default,
    SvgSpectraDeconvolution: () => Deconvolution_default,
    SvgSpectraPca: () => Pca_default,
    SvgSpectraPhylogram: () => Phylogram_default,
    SvgStructure3DModel: () => DModel_default,
    SvgStructure3DModelText: () => DModelText_default,
    SvgStructureAbundance: () => Abundance_default,
    SvgStructureAtomistic: () => Atomistic_default,
    SvgStructureAtomistic2: () => Atomistic2_default,
    SvgStructureAtomisticElectron: () => AtomisticElectron_default,
    SvgStructureAtomisticNeutron: () => AtomisticNeutron_default,
    SvgStructureBohr: () => Bohr_default,
    SvgStructureConformers: () => Conformers_default,
    SvgStructureDiastereotopic: () => Diastereotopic_default,
    SvgStructureLcao: () => Lcao_default,
    SvgStructureLewisNitrogen: () => LewisNitrogen_default,
    SvgStructureLewisOxygen: () => LewisOxygen_default,
    SvgStructureMagnifier5: () => Magnifier5_default,
    SvgStructureOrbital: () => Orbital_default,
    SvgStructureSearch: () => Search_default3,
    SvgStructureSearchLipinski: () => SearchLipinski_default,
    SvgStructureSo4: () => So4_default,
    SvgStructureStructuralIsomers: () => StructuralIsomers_default,
    SvgStructureStructuralIsomers2: () => StructuralIsomers2_default,
    SvgStructureUnsaturationFormula: () => UnsaturationFormula_default,
    SvgStructureUnsaturationStructure: () => UnsaturationStructure_default,
    SvgStructureVirtual: () => Virtual_default,
    SvgTgaAssignment: () => Assignment_default8,
    SvgXpsRequest: () => Request_default4,
    SvgXrayRequest: () => Request_default5
  });

  // build/lib-react-tsx/bio/Dna.tsx
  var React = __toESM(require_react(), 1);
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var SvgDna = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 73.439,
            d: "M740.423 738.693c-6.813-376.799-517.565-328.038-483.986-656.07"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 73.439,
            d: "M254.734 738.693C261.547 361.894 772.3 410.655 738.72 82.623"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 24.48,
            d: "M716.09 131.875H364.233M694.92 203.54H419.47m255.74 71.913H484.926M279.067 689.189h351.857m-330.93-71.666h275.694m-255.984-71.665h190.285"
          }
        )
      ]
    }
  );
  var Dna_default = SvgDna;

  // build/lib-react-tsx/bio/Eppendorf.tsx
  var React2 = __toESM(require_react(), 1);
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  var SvgEppendorf = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.188,
            d: "M405.1 65.978h192.897V480.29c0 53.27-28.518 249.475-93.31 249.475-65.82 0-99.586-189.474-99.586-249.475z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.302,
            d: "M521.797 170.81H405.101m116.696 123.769H405.101m116.696 123.768H405.101"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.188,
            d: "M595.374 501.62c-8.556 90.23-37.302 228.145-90.688 228.145-54.755 0-87.265-136.316-96.733-228.146z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M595.374 501.62c-8.556 90.23-37.302 228.145-90.688 228.145-54.755 0-87.265-136.316-96.733-228.146z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.302,
            d: "M585.563 92.67H367.457m262.024-30.913H350.916"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.188,
            d: "M605.412 61.643h51.56c11.636 0 21.218 10.837 21.218 23.955 0 14.031-8.213 25.666-21.218 25.666h-51.56c-2.623 0-5.133-.455-7.529-1.482V63.24c2.396-1.027 4.906-1.597 7.53-1.597"
          }
        )
      ]
    }
  );
  var Eppendorf_default = SvgEppendorf;

  // build/lib-react-tsx/bio/FlowCytometry.tsx
  var React3 = __toESM(require_react(), 1);
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var SvgFlowCytometry = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "path",
          {
            fillOpacity: 0.406,
            strokeWidth: 5.565,
            d: "m300.99 463.374 427.984-7.345s-13.282 19.095 0 51.41c13.282 32.313 44.274 51.408 44.274 51.408l-472.257-7.344s17.71-5.875 17.71-44.065-17.71-44.064-17.71-44.064z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 4.543,
            d: "M37.313 441.341c3.548-29.657 6.888-41.127 6.888-41.127l153.21-.46 103.58 63.62s-16.234 2.937-16.234 44.064 16.234 44.065 16.234 44.065l-103.643 64.774-148.72-.146s-7.38-14.688-11.315-57.284-1.967-58.753-1.967-58.753-2.952-17.626 1.967-58.753z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 301.164,
            cy: 506.835,
            fill: "none",
            strokeWidth: 5.331,
            rx: 17.403,
            ry: 42.868
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 300.97,
            cy: 507.349,
            strokeWidth: 1.329,
            rx: 4.364,
            ry: 10.62
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 37.574,
            cy: 548.819,
            fillOpacity: 0.012,
            strokeWidth: 4.965,
            rx: 92.25,
            ry: 84.774,
            transform: "matrix(.58553 -.81065 .81327 .58188 0 0)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 400.152,
            cy: 369.502,
            strokeWidth: 5.565,
            rx: 18.443,
            ry: 33.057,
            transform: "rotate(-13.36)skewX(.123)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: -628.913,
            cy: 431.468,
            strokeWidth: 4.965,
            rx: 92.219,
            ry: 84.802,
            transform: "matrix(-.52265 -.85255 .85474 -.51905 0 0)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: -177.303,
            cy: 745.862,
            fill: "#fff",
            stroke: "#fff",
            strokeWidth: 5.565,
            rx: 18.363,
            ry: 33.201,
            transform: "rotate(-80.478)skewX(.088)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: -783.104,
            cy: 686.763,
            fillOpacity: 0.506,
            strokeWidth: 4.965,
            rx: 92.118,
            ry: 84.895,
            transform: "rotate(-101.564)skewX(-.106)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: -132.915,
            cy: 1013.149,
            fillOpacity: 0.506,
            strokeWidth: 5.565,
            rx: 18.381,
            ry: 33.168,
            transform: "rotate(-60.528)skewX(.232)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 799.731,
            cy: -515.834,
            fillOpacity: 0.012,
            strokeWidth: 4.965,
            rx: 92.103,
            ry: 84.909,
            transform: "rotate(93.924)skewX(.037)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 281.522,
            cy: -933.526,
            strokeWidth: 5.565,
            rx: 18.404,
            ry: 33.128,
            transform: "matrix(-.70598 .70824 -.71157 -.70261 0 0)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 815.824,
            cy: 623.128,
            fillOpacity: 0.012,
            strokeWidth: 4.965,
            rx: 92.523,
            ry: 84.523,
            transform: "rotate(10.619)skewX(-.099)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 1052.179,
            cy: -100.988,
            strokeWidth: 5.565,
            rx: 18.394,
            ry: 33.145,
            transform: "matrix(.62384 .78155 -.78443 .62022 0 0)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 941.357,
            cy: 132.648,
            strokeWidth: 4.965,
            rx: 92.473,
            ry: 84.569,
            transform: "rotate(22.609)skewX(-.193)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 808.524,
            cy: -535.029,
            fill: "#fff",
            stroke: "#fff",
            strokeWidth: 5.565,
            rx: 18.378,
            ry: 33.175,
            transform: "matrix(.44676 .89466 -.89634 .44337 0 0)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 106.312,
            cy: 818.108,
            fillOpacity: 0.506,
            strokeWidth: 4.965,
            rx: 92.423,
            ry: 84.615,
            transform: "rotate(-30.823)skewX(.24)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "ellipse",
          {
            cx: 629.645,
            cy: 528.873,
            fillOpacity: 0.506,
            strokeWidth: 5.565,
            rx: 18.445,
            ry: 33.053,
            transform: "rotate(9.878)skewX(-.092)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 5.565,
            d: "M352.644 52.103v411.27m-154.96-63.159S160.79 419.31 160.79 507.438s36.895 108.693 36.895 108.693m154.959-64.628v396.583"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "path",
          {
            fillOpacity: 0.406,
            strokeWidth: 5.565,
            d: "m883.934 426.653 60.508-44.065s11.806 41.127 13.282 102.818-7.38 117.506-7.38 117.506l-73.79-44.065s32.468-39.658 30.992-73.441c-1.475-33.783-23.612-58.753-23.612-58.753z"
          }
        )
      ]
    }
  );
  var FlowCytometry_default = SvgFlowCytometry;

  // build/lib-react-tsx/bio/IsoelectricPoint.tsx
  var React4 = __toESM(require_react(), 1);
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  var SvgIsoelectricPoint = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 29.709,
            d: "M52 330.1c41.584-2.198 64.755 18.303 95.99 52.087 48.583 52.551 59.88 34.243 151.616 54.681C412.72 462.07 493.282 547.111 542.454 632.256c24.59 42.578 34.115 39.736 67.116 3.409C727.599 505.73 800.05 469.199 952 454.837",
            className: "fil0 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        )
      ]
    }
  );
  var IsoelectricPoint_default = SvgIsoelectricPoint;

  // build/lib-react-tsx/bio/Microscopy.tsx
  var React5 = __toESM(require_react(), 1);
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  var SvgMicroscopy = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "ellipse",
          {
            cx: 724.723,
            cy: 334.664,
            fill: "none",
            stroke: "#0e0000",
            strokeWidth: 24.49,
            rx: 73.05,
            ry: 67.343
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "path",
          {
            strokeWidth: 27.461,
            d: "M797.306 316.424s139.391 51.766 140.95 153.108c1.557 101.342-.141 475.439-.141 475.439l-873.625-.113.25-56.421 126.96 1.732.464-39.752-38.281-.646-.982-30.998 197.062-1.96-.688 30.63-41.163.56 1.056 43.96 569.815-2.703s-.584-346.789-2.218-414.41C875.13 407.226 798.9 361.571 798.9 361.571Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 26.562,
            d: "M367.929 672.04c0 60.018-54.044 108.672-120.71 108.672-66.667 0-120.71-48.654-120.71-108.672s54.043-108.671 120.71-108.671c15.668 0 46.863-77.125 46.863-77.125 1.406.5-44.336-18.657-44.336-18.657l155.937 60.97-45.991-18.037s-31.984 80.116-25.617 86.054c20.96 19.547 33.854 46.151 33.854 75.466z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "path",
          {
            fillOpacity: 0.99,
            stroke: "none",
            d: "M338.423 707.914c-19.403 42.83-76.67 63.894-127.91 47.046s-77.049-65.227-57.646-108.057c9.215-20.34 37.188 24.574 58.745 15.717 46.526-19.114 43.185 17.391 70.09 26.238 51.24 16.847 76.124-23.775 56.721 19.056"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "path",
          {
            fillOpacity: 0.022,
            strokeWidth: 34.345,
            d: "M251.723 491.46h346.926v135.624H251.723z",
            transform: "matrix(.87765 -.4793 .54039 .84141 0 0)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "ellipse",
          {
            cx: 724.084,
            cy: 333.435,
            fill: "#fff",
            stroke: "none",
            rx: 60.875,
            ry: 56.119
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "path",
          {
            stroke: "none",
            d: "m470.628 344.227 23.063-11.822 32.94 54.614-23.062 11.822zM835.109 53.439l114.767 182.026-53.205 28.509L781.904 81.948z"
          }
        )
      ]
    }
  );
  var Microscopy_default = SvgMicroscopy;

  // build/lib-react-tsx/bio/PeptideCharge.tsx
  var React6 = __toESM(require_react(), 1);
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  var SvgPeptideCharge = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 27.29,
            d: "M235.992 69.117a133.068 133.068 0 1 0 0 266.135 133.068 133.068 0 0 0 0-266.135m-54.103 133.067H290.08m-54.088-54.104v108.192M761.59 69.117a133.068 133.068 0 1 0 0 266.135 133.068 133.068 0 0 0 0-266.135m-54.088 133.067h108.176",
            className: "fil0 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 27.29,
            d: "M236.208 558.722a56.01 56.01 0 0 0 55.902-55.902 56.025 56.025 0 0 0-55.902-55.917 56.025 56.025 0 0 0-55.933 55.917 56.025 56.025 0 0 0 55.933 55.902m273.561 305.233-122.413-51.674m58.07-350.681a56.01 56.01 0 0 0 55.887-55.901 56.01 56.01 0 0 0-55.903-55.918 56.025 56.025 0 0 0-55.917 55.918A56.025 56.025 0 0 0 445.41 461.6m81.809 210.341a56.01 56.01 0 0 0 55.902-55.902 56.01 56.01 0 0 0-55.902-55.917 56.025 56.025 0 0 0-55.918 55.917 56.025 56.025 0 0 0 55.918 55.902m-186.264 154.5a56.025 56.025 0 0 0 55.902-55.902 56.025 56.025 0 0 0-55.917-55.918 56.025 56.025 0 0 0-55.918 55.918 56.025 56.025 0 0 0 55.918 55.902m226.699 103.964a56.01 56.01 0 0 0 55.917-55.903 56.01 56.01 0 0 0-55.917-55.917 56.025 56.025 0 0 0-55.918 55.917 56.025 56.025 0 0 0 55.918 55.903M514.812 560.03l-44.08-105.025M484 655.49l-89.449 80.533m.308-306.309L290.51 476.453m489.391 335.551a56.01 56.01 0 0 0 55.903-55.917 56.01 56.01 0 0 0-55.903-55.902 56.025 56.025 0 0 0-55.917 55.902 56.025 56.025 0 0 0 55.917 55.917m-60.637-229.589a56.025 56.025 0 0 0 55.902-55.902 56.025 56.025 0 0 0-55.918-55.933 56.025 56.025 0 0 0-55.917 55.917 56.025 56.025 0 0 0 55.917 55.902m6.872 203.638-101.964 56.286m141.447-142.4-31.795-119.507",
            className: "fil1 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        )
      ]
    }
  );
  var PeptideCharge_default = SvgPeptideCharge;

  // build/lib-react-tsx/bio/Petri.tsx
  var React7 = __toESM(require_react(), 1);
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  var SvgPetri = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 48.396,
            d: "M389.728 447.682v63.077h0v1.935c0 76.629 111.311 138.898 248.76 138.898 137.445 0 248.915-62.27 248.915-138.898 0-.644 0-1.29-.163-1.935h.163v-63.077z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M389.728 447.682v65.012c0 76.629 111.311 138.898 248.76 138.898 137.445 0 248.915-62.27 248.915-138.898 0-.644 0-1.29-.163-1.935h.163v-63.077z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 48.396,
            d: "M638.487 285.716c-137.448 0-248.76 71.788-248.76 160.191 0 88.566 111.312 160.353 248.76 160.353 137.446 0 248.916-71.787 248.916-160.353 0-88.403-111.47-160.191-248.916-160.191"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M638.487 285.716c-137.448 0-248.76 71.788-248.76 160.191 0 88.566 111.312 160.353 248.76 160.353 137.446 0 248.916-71.787 248.916-160.353 0-88.403-111.47-160.191-248.916-160.191"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M567.017 362.182c-10.324-2.742-20.968 3.387-23.713 13.712-2.74 10.325 3.39 20.972 13.714 23.876 10.324 2.742 20.974-3.388 23.714-13.712 2.902-10.486-3.386-21.134-13.715-23.876m189.071-.484c-10.487-2.904-21.131 3.226-23.876 13.712-2.74 10.325 3.39 20.972 13.714 23.714 10.482 2.743 21.132-3.387 23.876-13.712 2.74-10.324-3.39-20.971-13.714-23.714m-64.527 78.886c-10.324-2.743-20.973 3.388-23.876 13.712-2.744 10.486 3.386 21.133 13.873 23.876 10.324 2.742 20.973-3.388 23.713-13.712 2.745-10.325-3.386-20.972-13.71-23.876M507.17 477.043c-10.325-2.743-20.972 3.387-23.715 13.712-2.904 10.486 3.227 21.133 13.712 23.875 10.325 2.743 20.975-3.387 23.715-13.712 2.744-10.486-3.386-21.133-13.712-23.875"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 16.132,
            d: "M447.804 450.908c19.358-20.003 42.427-26.779 69.85-18.713m220.851 11.938c10.97 25.489 30.164 40.169 58.559 42.428m-104.537-86.146c-19.199 19.842-42.267 26.78-69.69 18.713m-45.491 132.767c19.195-20.003 42.262-26.779 69.691-18.713m-55.011-85.5c-10.486-2.742-21.135 3.388-23.876 13.874-2.744 10.324 3.386 20.971 13.71 23.714s20.974-3.388 23.876-13.713c2.745-10.324-3.385-20.971-13.71-23.875m231.816-38.394c-10.324-2.743-20.973 3.387-23.713 13.712-2.903 10.486 3.386 21.133 13.71 23.876 10.328 2.742 20.973-3.388 23.718-13.713 2.74-10.324-3.39-20.972-13.715-23.875m-160.838-69.691c-10.324-2.742-20.969 3.388-23.713 13.712-2.74 10.325 3.39 20.972 13.714 23.876 10.324 2.742 20.969-3.388 23.876-13.712 2.74-10.487-3.39-21.133-13.877-23.876m52.753 166.483c-10.324-2.742-20.973 3.388-23.875 13.713-2.74 10.324 3.39 20.972 13.714 23.875 10.482 2.742 21.131-3.388 23.876-13.874 2.74-10.324-3.39-20.971-13.715-23.714"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 48.396,
            d: "m116.611 423.645 19.682 36.136h0c.161.485.323.806.644 1.13 23.876 44.04 141.157 26.456 261.824-39.363 120.83-65.658 199.233-154.546 175.194-198.586-.163-.323-.32-.645-.646-1.13h.163l-19.844-36.135C409.086 264.26 261.155 344.92 116.61 423.646Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "m116.611 423.645 19.682 36.136c.161.485.323.806.644 1.13 23.876 44.04 141.157 26.456 261.824-39.363 120.83-65.658 199.233-154.546 175.194-198.586-.163-.323-.32-.645-.646-1.13h.163l-19.844-36.135C409.086 264.26 261.155 344.92 116.61 423.646Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 48.396,
            d: "M292.29 225.865C171.46 291.523 91.607 377.83 113.869 418.483c22.1 40.814 137.93 20.488 258.598-45.17 120.83-65.657 200.68-151.964 178.42-192.778-22.1-40.653-137.929-20.488-258.597 45.33"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M292.29 225.865C171.46 291.523 91.607 377.83 113.869 418.483c22.1 40.814 137.93 20.488 258.598-45.17 120.83-65.657 200.68-151.964 178.42-192.778-22.1-40.653-137.929-20.488-258.597 45.33"
          }
        )
      ]
    }
  );
  var Petri_default = SvgPetri;

  // build/lib-react-tsx/bio/Protein.tsx
  var React8 = __toESM(require_react(), 1);
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  var SvgProtein = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          "path",
          {
            d: "m15.49 11.852.456.586-.014.013-.014.012-.014.011-.015.01-.015.01-.016.008-.015.007-.016.007-.016.005-.016.005-.017.004-.016.003-.017.002h-.049l-.017-.002-.016-.002-.017-.004-.016-.004-.016-.005-.015-.006-.016-.007-.015-.008-.015-.008-.015-.01-.014-.01-.014-.012-.014-.012-.013-.013-.012-.014-.012-.015-.012-.015-.01-.016-.01-.016-.01-.017-.007-.017-.008-.017-.006-.018-.006-.018-.005-.018-.004-.019-.003-.018-.003-.019-.001-.018-.001-.02v-.037l.002-.018.002-.019.003-.018.004-.019.004-.018.006-.018.006-.017.007-.018.007-.017.009-.016.009-.016.01-.016.01-.016.012-.014.013-.015zm.697.345-.241.241-.457-.587.242-.24Zm1.615-7.582.398-.639.147.138.125.16.106.18.086.194.068.206.052.218.037.229.023.238.01.248-.001.256-.014.264-.026.271-.036.278-.048.284-.058.288-.069.293-.08.296-.089.298-.099.3-.11.3-.118.3-.129.298-.138.295-.147.293-.157.288-.166.282-.174.276-.184.27-.193.26-.202.25-.21.241-.219.23-.456-.588.196-.204.189-.216.182-.227.175-.237.168-.246.16-.253.153-.26.144-.265.136-.27.128-.274.119-.276.11-.277.1-.277.092-.276.082-.274.073-.271.063-.267.052-.26.043-.255.032-.246.023-.237.012-.227.001-.214-.008-.2-.018-.187-.028-.17-.036-.152-.044-.133-.05-.114-.055-.094-.06-.076zm-4.785 4.568-.669.193-.059-.342-.024-.34.01-.334.039-.328.069-.32.095-.311.118-.301.14-.291.16-.28.177-.27.193-.258.207-.247.219-.235.23-.224.238-.21.245-.199.252-.185.256-.171.258-.157.26-.143.26-.127.258-.111.255-.095.251-.078.246-.06.24-.04.232-.021h.225l.217.025.207.052.197.083.181.118-.398.639-.075-.049-.098-.04-.121-.03-.144-.017h-.163l-.18.016-.195.033-.207.05-.216.067-.223.083-.23.1-.231.113-.234.128-.233.142-.231.154-.227.167-.221.179-.214.189-.204.199-.194.208-.18.216-.167.223-.15.229-.134.234-.115.238-.095.241-.075.244-.053.246-.03.248-.007.249.018.252zm-.097 4.508.005-.782.188-.006.156-.02.123-.03.091-.035.063-.038.04-.035.024-.033.017-.036.013-.047.008-.063v-.083l-.01-.1-.022-.115-.032-.128-.043-.138-.053-.147-.062-.152-.068-.158-.075-.161-.079-.164-.082-.165-.085-.165-.085-.164-.085-.163-.084-.16-.08-.158-.076-.153-.07-.15-.065-.145-.058-.142-.048-.14-.038-.14.67-.192.02.073.032.093.044.11.054.122.064.134.07.143.078.15.081.158.085.162.087.167.088.171.086.173.085.175.082.177.077.177.07.178.065.177.055.178.045.177.033.18.018.18v.182l-.024.184-.052.182-.084.172-.115.153-.142.127-.163.098-.181.071-.199.049-.218.027zm-.85-9.64.667.199-.048.155-.067.164-.085.191-.103.22-.118.249-.132.276-.142.3-.15.322-.156.342-.157.357-.156.372-.153.381-.147.39-.137.393-.126.395-.11.393-.093.388-.073.379-.05.366-.025.35.002.33.03.307.057.281.087.254.118.228.151.204.192.182.238.16.293.134.352.103.415.067.481.026-.005.782-.54-.03-.485-.078-.432-.127-.382-.175-.332-.222-.281-.267-.229-.307-.175-.34-.125-.363-.08-.38-.037-.395-.002-.404.029-.412.057-.417.08-.422.102-.423.119-.423.133-.42.144-.414.154-.407.159-.397.162-.384.161-.368.16-.35.152-.328.144-.304.132-.277.117-.246.1-.211.077-.172.05-.124zm-8.958.816-.521-.512.276-.328.304-.302.327-.274.347-.249.366-.223.382-.2.396-.177.406-.155.416-.134.422-.113.427-.093.429-.074.429-.055.427-.037.422-.019.416-.002.407.015.396.03.384.048.367.062.351.077.332.093.31.108.288.124.264.14.238.159.21.18.179.206.14.236.093.268.03.29-.035.294-.667-.199.012-.104-.01-.09-.032-.092-.063-.105-.1-.115-.14-.118-.176-.118-.211-.112-.243-.104-.27-.094-.297-.083-.32-.07-.338-.058-.356-.043-.37-.03-.382-.013-.391.002-.398.018-.402.035-.403.051-.403.07-.4.087-.392.105-.385.124-.374.142-.36.161-.346.18-.326.2-.306.22-.284.237-.259.257zm3.164 2.509.095.774-.249.032-.246.016-.242.001-.239-.012-.234-.025-.229-.038-.223-.05-.217-.062-.211-.072-.204-.083-.196-.093-.189-.102-.18-.11-.171-.12-.162-.126-.152-.135-.141-.142-.13-.148-.12-.156-.106-.162-.093-.169-.08-.174-.064-.181-.047-.186-.03-.19-.01-.194.01-.195.033-.194.053-.191.076-.186.096-.178.117-.17.521.512-.07.104-.056.101-.04.1-.028.099-.016.098-.005.1.005.102.016.105.028.108.04.11.05.113.064.114.075.114.086.114.099.112.109.11.12.105.13.102.138.097.148.09.157.085.164.078.171.07.178.06.185.052.19.043.194.032.2.022.203.01h.207l.21-.015zm10.683.146-.575.432-.032-.038-.078-.06-.127-.069-.172-.066-.211-.06-.247-.052-.277-.043-.304-.034-.33-.025-.35-.016-.368-.008-.384-.001-.398.006-.408.012-.416.019-.422.023-.424.028-.426.033-.423.035-.42.04-.412.04-.403.043-.391.044-.377.044-.36.044-.342.044-.32.042-.296.04-.27.038-.24.035-.21.031-.175.027-.095-.774.179-.028.212-.031.243-.035.272-.039.299-.04.322-.043.345-.044.363-.045.38-.044.395-.044.407-.044.416-.04.424-.04.428-.036.431-.033.431-.029.429-.024.424-.018.416-.013.408-.006h.396l.382.01.366.017.348.026.328.037.306.047.284.06.26.074.235.091.211.114.188.149zm-11.171 2.81-.381-.651.271-.17.308-.136.34-.11.372-.089.401-.07.428-.056.453-.043.473-.03.49-.022.504-.014.515-.007.521-.003h1.048l.519.002.51-.001.499-.005.482-.01.462-.015.438-.025.41-.033.375-.045.339-.056.294-.07.245-.08.188-.087.124-.086.061-.069.02-.043.003-.056-.028-.115-.088-.183.575-.432.151.317.076.33-.021.336-.125.3-.197.23-.24.169-.273.129-.307.1-.34.08-.37.062-.402.047-.428.036-.452.025-.473.016-.49.01-.504.005H11.53l-.523-.002h-.522l-.517.003-.508.008-.495.013-.48.021-.457.03-.433.04-.404.053-.37.065-.33.08-.287.092-.236.104-.18.112zm1.156-2.797.293-.708 1.06.587.9.549.748.51.608.477.478.447.358.424.248.413.134.42.004.424-.135.382-.235.3-.297.226-.345.172-.387.131-.421.096-.45.065-.472.036-.484.009-.49-.018-.485-.042-.474-.067-.454-.09-.426-.114-.39-.138-.35-.165-.301-.197-.25-.247-.175-.326-.041-.397.118-.383.237-.33.339-.3.38.652-.244.216-.119.16-.026.08.005.036.046.077.125.12.21.137.28.131.337.12.383.102.418.083.44.062.455.04.458.016.45-.008.433-.033.406-.059.367-.083.316-.107.253-.125.177-.133.1-.122.039-.106-.002-.131-.067-.205-.17-.283-.292-.345-.426-.397-.567-.445-.716-.488-.873-.533zm-2.14-3.4.643.282-.027.094-.018.09-.009.088-.001.087.006.086.014.087.021.088.03.09.035.09.043.09.05.091.057.091.063.091.069.09.073.089.078.087.082.085.085.083.087.08.09.078.09.075.09.072.09.068.09.065.088.061.086.058.082.054.08.049.074.045.07.04.065.037.057.03-.293.709-.067-.037-.073-.04-.079-.046-.083-.05-.088-.056-.093-.06-.095-.063-.098-.069-.1-.073-.103-.077-.103-.082-.103-.085-.103-.09-.102-.094-.1-.099-.099-.102-.096-.107-.092-.112-.088-.116-.084-.12-.079-.126-.072-.131-.064-.137-.057-.141-.047-.147-.037-.153-.025-.158-.012-.161.002-.166.017-.167.033-.168Zm.643.282-.644-.282.007-.018.008-.018.008-.018.009-.016.01-.017.01-.015.01-.015.012-.014.012-.013.012-.013.013-.012.014-.01.014-.011.014-.01.014-.008.015-.008.016-.008.015-.006.016-.005.016-.005.017-.004.016-.003.017-.002h.016l.017-.001h.017l.017.003.017.002.017.004.017.005.017.005.017.007.016.008.016.009.015.009.015.01.014.01.014.012.013.013.012.013.012.013.011.014.01.015.01.015.01.016.008.016.008.017.007.017.006.017.006.018.005.018.004.018.003.018.003.019.001.019.001.019v.038l-.002.02-.002.018-.004.02-.004.019-.005.019z",
            transform: "matrix(58.61673 0 0 59.70826 -120.089 -16.89)"
          }
        )
      ]
    }
  );
  var Protein_default = SvgProtein;

  // build/lib-react-tsx/bio/Seahorse.tsx
  var React9 = __toESM(require_react(), 1);
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  var SvgSeahorse = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeWidth: 1.042,
            d: "M456.004 719.548c-11.381 22.261-24.085 58.21-11.6 95.902 1.903 5.744 31.48 96.863 121.72 97.09 36.694.091 105.806-30.092 85.418-108.025-1.059-4.047-15.125-41.083-55.24-35.104-40.466 6.03-60.343 54.09-69.442 46.293-10.588-9.072 10.714-68.523 68.91-78.57 76.02-13.123 109.703 24.84 121.263 57.35 10.481 29.471 3.057 61.889.303 69.27-25.324 67.871-83.314 125.204-197.943 123.513-114.723-1.692-227.125-104.538-237.12-195.559-1.508-13.723-4.824-53.624 3.824-89.356 7.766-32.084 21.835-51.574 19.192-61.535-1.266-4.769-2.39-5.057-7.675-5.643-21.858-2.422-75.385 17.817-86.739 15.413 0 0 25.38-31.509 9.59-43.533-15.667-11.93-61.325-13.598-61.325-13.598 11.792-10.467 64.623-18.559 62.273-38.683-2.19-18.75-44.96-15.125-64.817-26.895-4.106-2.434 65.18-6.456 73.075-30.879 5.166-15.978-34.43-44.607-35.48-53.467-.435-3.664 36.685 18.54 72.714 14.076 16.57-2.052 36.49-7.669 57.63-26.342 3.056-2.7 7.38 31.504 19.227 49.898 4.433 6.883 12.5 9.346 18.214 10.026 5.17.616 17.179-1.18 27.745-6.428 6.272-3.116 13.371-6.397 14.58-13.986 1.288-8.1-28.143-28.582-47.431-54.432-14.937-20.019-20.093-44.838-23.544-59.631-5.792-24.823 1.327-54.724 7.197-66.917 39.528-82.105 53.5-67.812 58.07-89.292 2.454-11.54-48.186-32.8-45.631-41.311.81-2.701 30.215-15.518 33.228-27.856 9.826-40.232-10.393-40.186-3.745-42.748 8.821-3.4 16.965 2.67 44.252-8.848 24.968-10.54 6.355-43.663 14.866-44.524 17.893-1.812 20.209 18.288 42.42 18.288 12.53 0 46.449-30.778 59.338-31.11 5.32-.136-3.557 21.049 1.688 21.062 2.34.006 2.78 2.82 7.639 2.454 12.696-.957 29.746-11.534 42.406-11.718 7.268-.106-11 25.294-3.903 25.656 2.172.111 3.447 1.81 5.657 1.92 21.986 1.105 33.829 6.121 52.578 19.71 4.932 3.576 16.257 18.591 23.785 37.26 8.997 22.309 14.52 53.136 23.815 60.402 7.805 6.102 14.244 24.39 29.734 39.047 29.342 27.764 72.219 53.339 85.316 67.688 4.67 5.117 3.55 9.977 1.75 15.493-3.86 11.828-9.226 11.66-35.717 18.874-3.998 1.088-19.319-2.821-33.093-9.177-10.754-4.962-18.182-11.884-34.176-16.007-20.74-5.346-45.561-5.19-64.107-7.385-25.116-2.972-20.671-.813-30.947-2.355-7.197-1.08-34.132-8.06-48.144-23.995-11.835-13.46-11.34-36.715-13.614-33.479-2.326 3.31-37.46 37.353-13.263 61.991 3.795 3.865 8.035 10.352 34.868 25.986 33.273 19.385 96.581 50.902 125.272 80.518 31.34 32.35 37.508 87.178 36.873 106.833-.369 11.413-9.309 29.58-12.95 37.043-3.293 6.75-29.309 38.095-63.182 59.611-32.771 20.816-93.015 35.895-129.511 55.599-52.081 28.117-73.34 58.743-76.09 64.122z"
          }
        )
      ]
    }
  );
  var Seahorse_default = SvgSeahorse;

  // build/lib-react-tsx/bio/SearchDna.tsx
  var React10 = __toESM(require_react(), 1);
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  var SvgSearchDna = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 46.91,
            d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 46.909,
            d: "m897.765 890.229-235.87-315.79-82.569 61.672 235.871 315.791m0 0c12.543 16.792 36.556 20.275 53.355 7.72m.001.002 21.484-16.054"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 46.909,
            d: "M890.037 943.57c16.795-12.541 20.277-36.542 7.728-53.342"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 21.586,
            d: "M419.367 610.974c-144.301 0-262.007-117.703-262.007-262.009 0-144.317 117.706-262.011 262.007-262.011 144.314 0 262.009 117.694 262.009 262.011.001 144.306-117.693 262.009-262.009 262.009"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.224,
            d: "M541.026 505.55c-3.216-183.57-244.391-159.814-228.535-319.628"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.224,
            d: "M311.687 505.55c3.217-183.571 244.391-159.815 228.535-319.629"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 11.741,
            d: "M529.536 209.916H363.391M519.54 244.83H389.474m120.759 35.036h-89.851m-97.205 201.567H489.32m-156.262-34.915H463.24m-120.875-34.914h89.852"
          }
        )
      ]
    }
  );
  var SearchDna_default = SvgSearchDna;

  // build/lib-react-tsx/bio/Unimod.tsx
  var React11 = __toESM(require_react(), 1);
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
  var SvgUnimod = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          "path",
          {
            strokeWidth: 24.122,
            d: "M612.58 150.608h212.953v411.77q0 61.248-19.316 115.9-18.846 54.18-59.834 95.169-40.518 40.517-85.275 57.007-62.19 23.085-149.35 23.085-50.411 0-110.245-7.067-59.363-7.067-99.41-27.796-40.046-21.202-73.496-59.834-32.98-38.633-45.23-79.622-19.787-65.959-19.787-116.841V150.608h212.953v421.665q0 56.536 31.095 88.573 31.566 31.566 87.16 31.566 55.122 0 86.217-31.095 31.566-31.566 31.566-89.044z"
          }
        )
      ]
    }
  );
  var Unimod_default = SvgUnimod;

  // build/lib-react-tsx/bio/UploadDna.tsx
  var React12 = __toESM(require_react(), 1);
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  var SvgUploadDna = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 73.439,
            d: "M740.423 738.693c-6.813-376.799-517.565-328.038-483.986-656.07"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 73.439,
            d: "M254.734 738.693C261.547 361.894 772.3 410.655 738.72 82.623"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 24.48,
            d: "M716.09 131.875H364.233M694.92 203.54H419.47m255.74 71.913H484.926M279.067 689.189h351.857m-330.93-71.666h275.694m-255.984-71.665h190.285"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("g", { transform: "translate(1031.815 214.854)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            "ellipse",
            {
              cx: -311.215,
              cy: 467.199,
              fill: "#fff",
              strokeWidth: 0.794,
              rx: 274,
              ry: 282,
              transform: "rotate(.457)skewX(.026)"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            "path",
            {
              strokeWidth: 7.895,
              d: "M-314.728 241.219c-123.42 0-223.487 100.083-223.487 223.488 0 123.436 100.067 223.48 223.487 223.48S-91.232 588.142-91.232 464.698c-.008-123.397-100.075-223.48-223.496-223.48zm112.913 243.927a24.2 24.2 0 0 1-17.456 7.39c-6.102 0-12.197-2.282-16.887-6.86l-53.985-52.383v138.152c0 13.421-10.919 24.308-24.316 24.308-13.414 0-24.285-10.887-24.285-24.308V433.293l-53.985 52.382c-9.624 9.324-24.995 9.111-34.358-.52-9.332-9.625-9.111-25.004.52-34.351l95.205-92.339c9.419-9.15 24.38-9.15 33.83 0l95.172 92.339c9.663 9.355 9.892 24.719.545 34.342z"
            }
          )
        ] })
      ]
    }
  );
  var UploadDna_default = SvgUploadDna;

  // build/lib-react-tsx/chart/Monitoring.tsx
  var React13 = __toESM(require_react(), 1);
  var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
  var SvgMonitoring = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.211,
            d: "M323.673 162.97H674.53c44.021 0 79.985 35.964 79.985 79.987v398.97c0 44.021-35.964 79.985-79.985 79.985H323.673c-43.903 0-79.987-35.964-79.987-79.985v-398.97c0-44.023 35.964-79.987 79.987-79.987"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.211,
            d: "M385.857 221.907c22.132 0 40.054-32.836 40.054-73.37s-17.922-73.371-40.054-73.371c-22.131 0-40.053 32.836-40.053 73.37m266.543 73.371c22.13 0 40.053-32.836 40.053-73.37s-17.923-73.371-40.053-73.371c-22.013 0-39.936 32.836-39.936 73.37"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 34.039,
            d: "M318.14 438.773h85.519l42.579 73.732 91.654-158.53 47.63 84.798h94.541"
          }
        )
      ]
    }
  );
  var Monitoring_default = SvgMonitoring;

  // build/lib-react-tsx/chart/Multi.tsx
  var React14 = __toESM(require_react(), 1);
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  var SvgMulti = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          "path",
          {
            stroke: "none",
            d: "M220.443 665.916c0 10.724 8.7 19.544 19.424 19.544 10.844 0 19.542-8.82 19.542-19.544zm0 0V124.09h38.966v541.827zm38.966-541.827c0-10.725-8.698-19.543-19.542-19.543-10.725 0-19.424 8.818-19.424 19.543z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.847,
            d: "m239.867 97.158 50.048 66.016m-99.977 0 49.929-66.016"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          "path",
          {
            stroke: "none",
            d: "M239.867 646.373c-10.725 0-19.424 8.82-19.424 19.543 0 10.844 8.7 19.544 19.424 19.544zm0 0h541.828v39.087H239.867zm541.828 39.087c10.844 0 19.54-8.7 19.54-19.544 0-10.724-8.696-19.543-19.54-19.543z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.847,
            d: "m808.624 665.916-65.896 49.928m0-99.855 65.896 49.927"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          "path",
          {
            stroke: "none",
            d: "M273.47 653.285c-1.668 6.316-8.222 10.127-14.537 8.46-6.316-1.788-10.01-8.34-8.342-14.655zm0 0 52.789-194.591-22.88-6.316-52.788 194.712zm41.35-197.81 11.439 3.219c1.668-6.436-2.026-12.988-8.342-14.655-6.315-1.788-12.87 2.024-14.537 8.34zm9.413 7.27 136.678-179.337-18.828-14.419-136.677 179.338zM451.497 276.14l9.414 7.269c4.051-5.243 2.98-12.632-2.145-16.683-5.243-4.051-12.63-2.979-16.683 2.264zm-8.222 8.46 116.539 114.753 16.566-17.04-116.542-114.635zm124.763 106.172-8.223 8.58c4.648 4.646 12.154 4.53 16.802-.239 4.529-4.647 4.409-12.154-.236-16.801zm8.223 8.58 113.8-109.39-16.446-17.16-113.68 109.51zm105.577-117.97 8.223 8.699c4.644-4.647 4.885-12.155.356-16.921-4.528-4.767-12.034-4.886-16.802-.358zm-9.77 6.792 30.147 43.256 19.423-13.585-30.147-43.255zm49.57 29.671c3.695 5.363 2.381 12.75-2.98 16.564-5.363 3.694-12.632 2.383-16.443-2.98z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          "path",
          {
            stroke: "none",
            d: "M253.094 462.625c-3.933 5.245-11.32 6.316-16.564 2.384s-6.315-11.44-2.383-16.682zm0 0 71.139-94.851-18.947-14.3-71.139 94.853zm61.725-102 9.414 7.149a11.946 11.946 0 0 0-2.264-16.682c-5.243-3.933-12.75-2.86-16.683 2.383zm-9.175 7.506 136.44 168.377 18.35-15.016-136.44-168.375zm145.614 160.867-9.176 7.51c4.171 5.121 11.56 5.838 16.683 1.667 5.124-4.051 5.839-11.557 1.669-16.683zm11.44 3.218 87.465-313.513-22.761-6.435-87.583 313.513zm76.144-316.73 11.32 3.217c1.788-6.435-1.906-12.989-8.222-14.776-6.195-1.787-12.751 1.907-14.538 8.341zm-10.607 5.362 108.558 211.273 20.97-10.844-108.434-211.273zm119.043 205.791-10.604 5.482c3.098 5.839 10.247 8.223 15.97 5.125 5.838-2.98 8.102-10.13 5.12-16.089zm-.593 11.918 64.702 3.097 1.074-23.714-64.706-3.098zm65.776-20.617a11.94 11.94 0 0 1 11.32 12.394c-.356 6.552-5.838 11.677-12.394 11.32zm5.482 91.041c5.598 3.335 7.506 10.604 4.171 16.206-3.338 5.719-10.487 7.626-16.206 4.288zm0 0L611.888 446.42l-12.034 20.377 106.053 62.678zM605.93 456.67l5.959-10.367c-5.602-3.338-12.871-1.43-16.206 4.288-3.338 5.602-1.43 12.988 4.172 16.326zm-9.177-7.51-145.606 141.4 18.35 15.016 145.61-141.52zM460.32 598.07l-9.173-7.51c-4.171 5.126-3.338 12.632 1.667 16.683 5.125 4.172 12.631 3.458 16.803-1.667zm-.236-11.917-93.906 4.213.715 23.715 93.784-4.097zm-93.548 16.01-.358-11.797c-6.554.121-11.678 5.602-11.559 12.275.239 6.555 5.72 11.677 12.274 11.44zm8.46-8.222-42.898-44.566-17.04 16.563 43.017 44.569zm-51.359-36.223 8.461-8.343c-4.528-4.764-12.035-4.885-16.802-.236-4.647 4.528-4.766 12.154-.238 16.8zm-9.77-6.792-77.336 113.796 19.542 13.348 77.336-113.68zM256.073 678.07c-3.694 5.482-11.082 6.913-16.444 3.098-5.481-3.694-6.792-11.08-3.098-16.446z"
          }
        )
      ]
    }
  );
  var Multi_default = SvgMulti;

  // build/lib-react-tsx/chart/Multi2.tsx
  var React15 = __toESM(require_react(), 1);
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  var SvgMulti2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          "path",
          {
            stroke: "none",
            d: "M220.445 665.913c0 10.725 8.697 19.422 19.543 19.422a19.426 19.426 0 0 0 19.421-19.422zm0 0V124.087h38.964v541.826zm38.964-541.826c0-10.844-8.699-19.545-19.421-19.545a19.474 19.474 0 0 0-19.545 19.545z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m239.988 97.156 49.926 66.013m-99.974 0 50.048-66.013"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          "path",
          {
            stroke: "none",
            d: "M239.988 646.37a19.474 19.474 0 0 0-19.545 19.54c0 10.728 8.699 19.427 19.545 19.427zm0 0h541.826v38.965H239.988zm541.826 38.965a19.426 19.426 0 0 0 19.424-19.424c0-10.844-8.699-19.538-19.424-19.538z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m808.624 665.913-65.897 49.93m0-99.859 65.897 49.927"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          "path",
          {
            stroke: "none",
            d: "M251.783 514.937a11.75 11.75 0 0 1-11.795-11.798c0-6.555 5.24-11.917 11.795-11.917zm0 0 84.367.237v-23.712l-84.367-.24zm84.367-11.68v11.915c6.555 0 11.796-5.241 11.796-11.915 0-6.554-5.241-11.917-11.796-11.917zm9.414 7.27 136.677-179.34-18.828-14.415L326.736 496.11zm127.263-186.609 9.414 7.27c4.052-5.242 2.978-12.75-2.144-16.681-5.244-4.052-12.632-2.978-16.684 2.144zm-9.532 6.913L579.833 493.13l19.19-13.822L482.478 317.01zm126.073 155.387-9.535 7.03c3.814 5.362 11.203 6.554 16.567 2.621 5.242-3.811 6.431-11.2 2.62-16.562zm0 11.915 71.377.717.237-23.834-71.495-.594zm71.498-11.2-.12 11.917c6.55.118 11.916-5.244 12.034-11.796a12.03 12.03 0 0 0-11.798-12.04zm-6.555 9.891 72.33 48.737 13.229-19.783-72.452-48.734zm85.559 28.957c5.362 3.692 6.792 11.08 3.215 16.44a11.9 11.9 0 0 1-16.443 3.34z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          "path",
          {
            stroke: "none",
            d: "M260.601 463.46a11.74 11.74 0 0 1-16.683.95c-4.885-4.29-5.241-11.796-.952-16.681zm0 0 84.367-94.854-17.636-15.729-84.366 94.852zm75.549-102.717 8.818 7.982c4.408-4.885 3.933-12.511-.955-16.924-4.885-4.286-12.392-3.93-16.68.955zm-9.176 7.504 136.44 168.377 18.35-15.016L345.326 353.23zM472.59 529.115l-9.177 7.51c4.17 5.124 11.559 5.836 16.684 1.666 5.122-4.172 5.84-11.677 1.667-16.683zm11.44 3.218 87.465-313.635-22.763-6.315L461.148 525.9zm76.144-316.848 11.321 3.213c1.786-6.315-1.91-12.867-8.224-14.653-6.196-1.788-12.753 1.907-14.539 8.222zm-10.368 5.956 97.71 171.115 20.62-11.796-97.717-171.115zm108.08 165.157-10.37 5.96c3.34 5.717 10.488 7.743 16.207 4.406 5.723-3.218 7.625-10.604 4.412-16.204zm4.05 11.204 75.43-27.767-8.223-22.401-75.426 27.883zm67.209-50.168a11.93 11.93 0 0 1 15.254 7.03c2.263 6.195-.955 13.108-7.032 15.371z"
          }
        )
      ]
    }
  );
  var Multi2_default = SvgMulti2;

  // build/lib-react-tsx/chart/ScatterLine.tsx
  var React16 = __toESM(require_react(), 1);
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  var SvgScatterLine = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            stroke: "none",
            d: "M256.905 424.731c-6.314 1.43-10.366 7.866-8.936 14.18a11.874 11.874 0 0 0 14.18 9.058zm0 0 116.064-26.574 5.125 23.235-115.945 26.575zm118.567-15.016-2.622-11.556c6.436-1.432 12.751 2.5 14.18 8.937a11.827 11.827 0 0 1-8.936 14.296zm7.866-8.815 91.636 82.46-15.734 17.635-91.633-82.338zm83.768 91.277 7.868-8.818c4.885 4.292 5.36 11.917.95 16.802a11.86 11.86 0 0 1-16.684.957zm-11.081-4.17 79.6-214.37 22.164 8.337-79.602 214.373zm90.683-210.198-11.083-4.173c2.263-6.08 9.055-9.295 15.251-6.913 6.08 2.263 9.298 9.058 6.911 15.251zm10.248-6.08 87.342 148.355-20.376 12.036-87.345-148.239zm77.216 154.432 10.126-6.08c3.34 5.605 1.55 12.99-4.168 16.328-5.602 3.339-12.871 1.43-16.208-4.17zm-8.82-7.98 93.664-104.15 17.514 15.846-93.66 104.147zm111.178-88.304c4.41-4.763 4.052-12.27-.831-16.68a11.73 11.73 0 0 0-16.686.838z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            stroke: "none",
            d: "M220.323 665.795a19.474 19.474 0 0 0 19.545 19.545c10.723 0 19.422-8.701 19.422-19.545zm0 0V123.968h38.967v541.827zm38.967-541.827a19.426 19.426 0 0 0-19.424-19.421c-10.844 0-19.543 8.694-19.543 19.421z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m239.866 97.156 49.929 65.898m-99.858 0 49.929-65.898"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            stroke: "none",
            d: "M239.866 646.374c-10.844 0-19.543 8.699-19.543 19.421a19.474 19.474 0 0 0 19.545 19.545zm0 0h541.827v38.966H239.866zm541.827 38.966c10.725 0 19.426-8.701 19.426-19.545a19.426 19.426 0 0 0-19.426-19.421z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m808.502 665.795-65.895 50.048m0-99.977 65.895 49.93"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M371.898 377.306c18.11 0 32.768 14.657 32.768 32.65 0 18.112-14.657 32.767-32.768 32.767s-32.77-14.653-32.77-32.768c0-17.992 14.657-32.65 32.77-32.65m91.038 77.573c18.113 0 32.773 14.657 32.773 32.773 0 17.992-14.66 32.768-32.773 32.768-18.111 0-32.769-14.776-32.769-32.768 0-18.113 14.658-32.773 32.769-32.773m83.651-207.458c18.113 0 32.768 14.658 32.768 32.769s-14.652 32.77-32.768 32.77c-17.992 0-32.652-14.658-32.652-32.773 0-18.108 14.66-32.766 32.655-32.766m89.489 144.187c17.994 0 32.65 14.653 32.65 32.768 0 17.992-14.656 32.65-32.65 32.65-18.113 0-32.773-14.658-32.773-32.65 0-18.113 14.66-32.768 32.773-32.768m90.204-104.268c18.115 0 32.77 14.655 32.77 32.768 0 18.116-14.655 32.769-32.768 32.769s-32.773-14.653-32.773-32.769c0-18.113 14.66-32.768 32.773-32.768"
          }
        )
      ]
    }
  );
  var ScatterLine_default = SvgScatterLine;

  // build/lib-react-tsx/chart/Scatter.tsx
  var React17 = __toESM(require_react(), 1);
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  var SvgScatter = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 43.438,
            d: "m207.87 67.966 55.83 73.818m-111.793 0 55.963-73.818"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 43.571,
            d: "M207.87 703.95h605.87m-605.87 0V98.08"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 43.438,
            d: "m843.718 703.95-73.685 55.828m0-111.658 73.685 55.83"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M357.772 485.825c26.116 0 47.302 21.186 47.302 47.17 0 26.116-21.186 47.302-47.302 47.302-25.983 0-47.17-21.186-47.17-47.302 0-25.984 21.187-47.17 47.17-47.17m128.048 50.5c26.118 0 47.17 21.186 47.17 47.301 0 25.985-21.052 47.171-47.17 47.171-26.115 0-47.168-21.186-47.168-47.17 0-26.116 21.053-47.302 47.169-47.302m-26.916-176.817c25.983 0 47.168 21.186 47.168 47.169 0 26.115-21.185 47.301-47.168 47.301-26.116 0-47.302-21.186-47.302-47.301 0-25.983 21.186-47.169 47.302-47.169m101.002 75.816c26.115 0 47.167 21.056 47.167 47.17 0 26.116-21.052 47.168-47.167 47.168-26.12 0-47.171-21.052-47.171-47.167s21.052-47.171 47.17-47.171m50.501-128.048c26.116 0 47.301 21.186 47.301 47.302 0 25.983-21.185 47.169-47.3 47.169-25.986 0-47.172-21.186-47.172-47.169 0-26.116 21.186-47.302 47.171-47.302M714.872 411.74c26.115 0 47.167 21.052 47.167 47.168 0 26.119-21.052 47.305-47.167 47.305-26.119 0-47.17-21.186-47.17-47.305 0-26.116 21.051-47.167 47.17-47.167m45.437-126.318c26.115 0 47.301 21.053 47.301 47.17 0 26.116-21.186 47.302-47.301 47.302-25.985 0-47.17-21.186-47.17-47.303s21.185-47.169 47.17-47.169M664.372 184.29c25.98 0 47.167 21.186 47.167 47.302 0 25.983-21.186 47.169-47.167 47.169-26.12 0-47.306-21.186-47.306-47.169 0-26.116 21.187-47.302 47.306-47.302m148.168-55.564c26.115 0 47.17 21.186 47.17 47.302 0 25.984-21.055 47.17-47.17 47.17s-47.171-21.186-47.171-47.17c0-26.116 21.055-47.302 47.17-47.302"
          }
        )
      ]
    }
  );
  var Scatter_default = SvgScatter;

  // build/lib-react-tsx/chem/Concentration.tsx
  var React18 = __toESM(require_react(), 1);
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  var SvgConcentration = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("path", { d: "M372.06 636.583q0 13.021-2.344 18.23t-6.771 5.208h-80.469q-4.427 0-8.073-1.302t-6.25-3.907-4.167-6.77-1.562-9.896V225.125q0-5.469 1.562-9.635 1.563-4.167 4.167-6.771 2.604-2.865 6.25-3.907 3.646-1.302 8.073-1.302h80.469q2.083 0 3.906 1.302 1.823 1.042 2.865 3.907 1.302 2.604 1.822 7.031.521 4.427.521 11.198 0 13.281-2.343 18.49-2.344 4.947-6.771 4.947h-39.323v362.76h39.323q2.083 0 3.906 1.042t2.865 3.907q1.302 2.864 1.822 7.291.521 4.427.521 11.198zm396.874 1.563q0 5.729-1.823 9.896-1.562 4.166-4.166 6.77-2.604 2.605-6.25 3.907t-8.073 1.302h-80.73q-4.426 0-6.77-5.209t-2.344-18.229q0-6.77.52-11.198.782-4.427 1.824-7.291 1.302-2.865 2.864-3.907 1.823-1.041 3.907-1.041h39.583v-362.76h-39.583q-4.427 0-6.771-4.949-2.344-5.208-2.344-18.49 0-6.77.52-11.197.782-4.427 1.824-7.031 1.302-2.865 2.864-3.907 1.823-1.302 3.907-1.302h80.729q4.427 0 8.073 1.302 3.646 1.042 6.25 3.907 2.604 2.604 4.166 6.77 1.823 4.167 1.823 9.636z" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          "path",
          {
            stroke: "none",
            d: "M439.305 859.243q0 .938-.562 1.688-.563.656-1.875 1.125t-3.563.656q-2.25.281-5.718.281-3.563 0-5.813-.281-2.25-.187-3.656-.656-1.313-.469-1.875-1.125-.469-.75-.469-1.688V809.65q0-4.22-.844-7.688-.75-3.469-2.437-5.906-1.594-2.531-4.125-3.844-2.438-1.406-5.906-1.406-4.22 0-8.532 3.281t-9.375 9.563v55.593q0 .938-.562 1.688-.563.656-1.969 1.125-1.312.469-3.562.656-2.25.281-5.625.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688V809.65q0-4.22-.844-7.688-.75-3.469-2.343-5.906-1.594-2.531-4.125-3.844-2.532-1.406-5.907-1.406-4.312 0-8.625 3.281t-9.28 9.563v55.593q0 .938-.563 1.688-.563.656-1.97 1.125-1.312.469-3.562.656-2.25.281-5.718.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688v-83.625q0-.937.469-1.593.469-.75 1.687-1.22 1.22-.468 3.094-.655 1.969-.282 4.875-.282 3 0 4.969.282 1.969.187 3 .656 1.125.469 1.594 1.219.468.656.468 1.593v9.657q6.938-7.5 13.782-11.25 6.937-3.75 14.437-3.75 5.156 0 9.281 1.125 4.125 1.03 7.313 3.093 3.281 1.969 5.625 4.782t3.937 6.28q3.75-4.03 7.313-6.937 3.656-2.906 7.125-4.687 3.562-1.875 7.031-2.719 3.563-.937 7.219-.937 8.344 0 14.062 2.812 5.72 2.813 9.188 7.688 3.562 4.78 5.062 11.25 1.5 6.468 1.5 13.687zm107.532-42.656q0 10.688-2.813 19.5-2.812 8.813-8.531 15.188t-14.344 9.843-20.156 3.469q-11.156 0-19.406-3.094t-13.688-9-8.062-14.531-2.625-19.687q0-10.688 2.812-19.5 2.906-8.907 8.625-15.188 5.719-6.375 14.25-9.844 8.625-3.468 20.156-3.468 11.25 0 19.5 3.093 8.25 3 13.594 8.907 5.438 5.906 8.063 14.53 2.625 8.626 2.625 19.782m-24.282.938q0-6.188-1.03-11.344-.938-5.25-3.282-9.094t-6.281-6q-3.844-2.156-9.75-2.156-5.25 0-9.188 1.969-3.937 1.875-6.469 5.625-2.53 3.656-3.843 8.906-1.22 5.156-1.22 11.812 0 6.188 1.032 11.438 1.031 5.156 3.281 9 2.344 3.844 6.282 6 3.937 2.062 9.75 2.062 5.343 0 9.28-1.875 3.938-1.968 6.47-5.625 2.53-3.656 3.75-8.812 1.218-5.25 1.218-11.906m66.469 41.718q0 .938-.562 1.688-.563.656-1.97 1.125-1.312.469-3.562.656-2.25.281-5.718.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688V735.962q0-.937.563-1.687t1.875-1.22q1.406-.562 3.656-.843t5.719-.281 5.718.281 3.563.844q1.406.469 1.969 1.219.562.75.562 1.687zm35.063 27.469q-.47 1.219-1.22 1.969t-2.155 1.219q-1.313.468-3.375.656-1.97.281-5.063.281-3.844 0-6.281-.375-2.438-.375-3.75-1.125-1.219-.75-1.406-1.969-.188-1.125.375-2.718l56.062-157.407q.375-1.218 1.125-1.968.75-.844 2.063-1.313 1.312-.469 3.375-.656 2.156-.281 5.156-.281 3.937 0 6.281.375 2.438.375 3.656 1.125 1.22.75 1.407 1.968.187 1.125-.282 2.719zm94.313-27.469q0 .938-.563 1.688-.563.656-1.97 1.125-1.312.469-3.562.656-2.25.281-5.718.281-3.47 0-5.72-.281-2.25-.187-3.655-.656-1.313-.469-1.875-1.125-.563-.75-.563-1.688V735.962q0-.937.563-1.687t1.875-1.22q1.406-.562 3.656-.843t5.719-.281 5.718.281 3.563.844q1.406.469 1.969 1.219.562.75.562 1.687z",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var Concentration_default = SvgConcentration;

  // build/lib-react-tsx/chem/Isomers.tsx
  var React19 = __toESM(require_react(), 1);
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  var SvgIsomers = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("path", { d: "M510.482 36.393a27.5 27.5 0 0 0-13.181 3.439l-372.125 205.88a27.53 27.53 0 0 0-14.2 24.015l-1.101 436.533a27.53 27.53 0 0 0 13.002 23.45l370.475 230.102a27.53 27.53 0 0 0 27.873.688l372.127-206.432a27.53 27.53 0 0 0 14.171-23.998l1.102-435.982a27.53 27.53 0 0 0-13.002-23.451L525.148 40.535a27.53 27.53 0 0 0-14.666-4.142zm-.66 59.423L853.54 309.3l-1.021 404.47L508.66 904.52l-343.7-213.472 1.022-405z" }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "text",
          {
            x: 237.157,
            y: 835.702,
            strokeWidth: 1.496,
            fontFamily: "Helvetica",
            fontSize: 822.844,
            style: {
              lineHeight: "0%"
            },
            transform: "scale(1.06928 .93521)",
            children: "?"
          }
        )
      ]
    }
  );
  var Isomers_default = SvgIsomers;

  // build/lib-react-tsx/chem/IupacNameStructure.tsx
  var React20 = __toESM(require_react(), 1);
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  var SvgIupacNameStructure = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "path",
          {
            stroke: "none",
            d: "M602.475 401.935c6.064 3.5 13.834 1.451 17.418-4.61 3.586-6.149 1.538-13.918-4.526-17.42zm0 0L394.31 281.715l12.893-22.029 208.164 120.22zM407.203 259.686c-6.062-3.5-13.832-1.366-17.418 4.696s-1.536 13.832 4.525 17.333z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "path",
          {
            stroke: "none",
            d: "M88.382 436.771c-6.062 3.586-8.197 11.356-4.696 17.418 3.5 6.063 11.27 8.112 17.333 4.611zm0 0 306.014-177 12.637 21.944L101.02 458.8zm318.651-155.056c6.148-3.586 8.195-11.356 4.781-17.418-3.5-6.062-11.27-8.112-17.418-4.525z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 2.562,
            d: "M779.987 458.032c0 12.55-1.45 23.907-4.44 33.982-2.988 10.075-7.428 18.614-13.234 25.701-5.892 7.087-13.32 12.465-22.199 16.307-8.881 3.758-19.212 5.722-30.993 5.722-11.699 0-21.774-1.794-30.314-5.295-8.537-3.5-15.54-8.453-21.088-15.112-5.55-6.661-9.65-14.942-12.38-24.761-2.734-9.82-4.1-21.09-4.1-33.897 0-12.21 1.452-23.31 4.44-33.3 2.988-10.075 7.343-18.528 13.321-25.53 5.89-7 13.318-12.38 22.199-16.222 8.795-3.757 19.21-5.636 30.994-5.636 11.442 0 21.431 1.708 29.885 5.123 8.451 3.501 15.54 8.453 21.174 15.113 5.637 6.575 9.82 14.686 12.55 24.42 2.734 9.733 4.185 20.833 4.185 33.385m-21.771 1.451c0-8.794-.77-16.991-2.307-24.505-1.535-7.599-4.1-14.088-7.77-19.723-3.671-5.55-8.538-9.905-14.6-12.979s-13.576-4.696-22.54-4.696c-8.968 0-16.48 1.708-22.544 5.038-6.062 3.415-11.014 7.855-14.77 13.49-3.842 5.55-6.575 12.125-8.198 19.553-1.622 7.514-2.475 15.37-2.475 23.566 0 9.136.853 17.504 2.306 25.188 1.536 7.685 4.097 14.26 7.683 19.81 3.586 5.634 8.454 9.904 14.431 12.976q9.092 4.612 22.797 4.612c8.964 0 16.565-1.709 22.712-5.037 6.148-3.33 11.1-7.856 14.943-13.576 3.67-5.722 6.403-12.381 7.94-19.81 1.622-7.599 2.392-15.54 2.392-23.907M924.37 534.28a3.03 3.03 0 0 1-.516 1.706c-.254.514-.853.855-1.622 1.11-.854.343-1.879.512-3.245.77q-1.921.255-4.867.256c-2.047 0-3.67-.086-5.037-.256-1.194-.258-2.305-.427-3.072-.77-.77-.255-1.367-.597-1.708-1.11-.339-.512-.424-1.109-.424-1.706v-68.82H833.27v68.82a3.03 3.03 0 0 1-.516 1.706c-.34.514-.854.855-1.709 1.11-.77.343-1.792.512-3.159.77-1.28.17-2.989.256-4.95.256-1.965 0-3.587-.086-4.953-.256-1.28-.258-2.392-.427-3.159-.77-.856-.255-1.452-.597-1.708-1.11a3.1 3.1 0 0 1-.517-1.706V385.37c0-.597.17-1.195.517-1.707.254-.427.852-.854 1.708-1.11.77-.257 1.878-.512 3.159-.683 1.366-.171 2.988-.342 4.953-.342 1.961 0 3.67.171 4.95.342 1.367.17 2.392.426 3.16.683.854.255 1.366.683 1.708 1.11a3.1 3.1 0 0 1 .516 1.708v62.158h70.611v-62.158c0-.598.085-1.196.424-1.708.338-.427.939-.854 1.708-1.11.77-.257 1.878-.512 3.072-.683 1.367-.171 2.99-.342 5.037-.342 1.964 0 3.586.171 4.867.342a19 19 0 0 1 3.245.683c.77.255 1.366.683 1.622 1.11.339.512.516 1.11.516 1.708z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          "path",
          {
            stroke: "none",
            d: "M779.987 458.032c0 12.55-1.45 23.907-4.44 33.982-2.988 10.075-7.428 18.614-13.234 25.701-5.892 7.087-13.32 12.465-22.199 16.307-8.881 3.758-19.212 5.722-30.993 5.722-11.699 0-21.774-1.794-30.314-5.295-8.537-3.5-15.54-8.453-21.088-15.112-5.55-6.661-9.65-14.942-12.38-24.761-2.734-9.82-4.1-21.09-4.1-33.897 0-12.21 1.452-23.31 4.44-33.3 2.988-10.075 7.343-18.528 13.321-25.53 5.89-7 13.318-12.38 22.199-16.222 8.795-3.757 19.21-5.636 30.994-5.636 11.442 0 21.431 1.708 29.885 5.123 8.451 3.501 15.54 8.453 21.174 15.113 5.637 6.575 9.82 14.686 12.55 24.42 2.734 9.733 4.185 20.833 4.185 33.385m-21.771 1.451c0-8.794-.77-16.991-2.307-24.505-1.535-7.599-4.1-14.088-7.77-19.723-3.671-5.55-8.538-9.905-14.6-12.979s-13.576-4.696-22.54-4.696c-8.968 0-16.48 1.708-22.544 5.038-6.062 3.415-11.014 7.855-14.77 13.49-3.842 5.55-6.575 12.125-8.198 19.553-1.622 7.514-2.475 15.37-2.475 23.566 0 9.136.853 17.504 2.306 25.188 1.536 7.685 4.097 14.26 7.683 19.81 3.586 5.634 8.454 9.904 14.431 12.976q9.092 4.612 22.797 4.612c8.964 0 16.565-1.709 22.712-5.037 6.148-3.33 11.1-7.856 14.943-13.576 3.67-5.722 6.403-12.381 7.94-19.81 1.622-7.599 2.392-15.54 2.392-23.907M924.37 534.28a3.03 3.03 0 0 1-.516 1.706c-.254.514-.853.855-1.622 1.11-.854.343-1.879.512-3.245.77q-1.921.255-4.867.256c-2.047 0-3.67-.086-5.037-.256-1.194-.258-2.305-.427-3.072-.77-.77-.255-1.367-.597-1.708-1.11-.339-.512-.424-1.109-.424-1.706v-68.82H833.27v68.82a3.03 3.03 0 0 1-.516 1.706c-.34.514-.854.855-1.709 1.11-.77.343-1.792.512-3.159.77-1.28.17-2.989.256-4.95.256-1.965 0-3.587-.086-4.953-.256-1.28-.258-2.392-.427-3.159-.77-.856-.255-1.452-.597-1.708-1.11a3.1 3.1 0 0 1-.517-1.706V385.37c0-.597.17-1.195.517-1.707.254-.427.852-.854 1.708-1.11.77-.257 1.878-.512 3.159-.683 1.366-.171 2.988-.342 4.953-.342 1.961 0 3.67.171 4.95.342 1.367.17 2.392.426 3.16.683.854.255 1.366.683 1.708 1.11a3.1 3.1 0 0 1 .516 1.708v62.158h70.611v-62.158c0-.598.085-1.196.424-1.708.338-.427.939-.854 1.708-1.11.77-.257 1.878-.512 3.072-.683 1.367-.171 2.99-.342 5.037-.342 1.964 0 3.586.171 4.867.342a19 19 0 0 1 3.245.683c.77.255 1.366.683 1.622 1.11.339.512.516 1.11.516 1.708z"
          }
        )
      ]
    }
  );
  var IupacNameStructure_default = SvgIupacNameStructure;

  // build/lib-react-tsx/chem/IupacStructureName.tsx
  var React21 = __toESM(require_react(), 1);
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  var SvgIupacStructureName = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "path",
          {
            stroke: "none",
            d: "M182.965 456.404c0 4.185-.916 7.324-2.877 9.285-1.831 2.093-4.447 3.008-7.716 3.008H97.309c0 5.362.653 10.07 1.83 14.385 1.308 4.185 3.27 7.846 6.016 10.854s6.146 5.362 10.462 6.8c4.315 1.57 9.415 2.485 15.431 2.485 6.146 0 11.377-.524 15.954-1.438 4.708-.785 8.631-1.831 12.031-2.877 3.27-1.047 6.146-1.962 8.37-2.877 2.092-.916 3.923-1.308 5.361-1.308.785 0 1.57.131 1.962.523.654.261 1.046.784 1.439 1.7q.587 1.176.784 3.53c.131 1.439.262 3.4.262 5.754 0 1.962-.13 3.662-.262 5.1 0 1.439-.13 2.616-.391 3.662a7.7 7.7 0 0 1-.785 2.615c-.393.654-.784 1.308-1.438 1.962s-2.223 1.57-4.97 2.616c-2.615 1.046-6.016 2.223-10.2 3.269q-6.277 1.569-14.124 2.746c-5.361.784-11.115 1.177-17.13 1.177-10.986 0-20.663-1.438-28.901-4.185-8.108-2.746-15.04-6.93-20.532-12.554-5.623-5.623-9.677-12.685-12.423-21.185-2.617-8.63-4.055-18.7-4.055-30.208 0-10.854 1.438-20.793 4.315-29.555 2.877-8.761 6.931-16.215 12.424-22.362 5.362-6.146 12.03-10.854 19.746-13.992 7.847-3.27 16.609-4.839 26.286-4.839 10.33 0 19.223 1.439 26.547 4.577 7.323 3.008 13.338 7.193 17.916 12.554 4.708 5.362 8.238 11.77 10.461 19.224 2.223 7.323 3.27 15.3 3.27 23.931zm-33.74-9.938c.262-9.808-1.57-17.524-5.885-23.016-4.184-5.624-10.592-8.37-19.354-8.37-4.446 0-8.238.785-11.508 2.485-3.269 1.57-6.015 3.923-8.108 6.67-2.223 2.746-3.792 6.146-4.969 9.938s-1.83 7.847-2.092 12.293zm133.258 62.901c0 4.054-.131 7.062-.654 9.285-.524 2.223-1.177 3.662-2.092 4.577-.785.916-1.962 1.7-3.662 2.354a35.4 35.4 0 0 1-5.623 1.83 57 57 0 0 1-7.062 1.178 74 74 0 0 1-7.585.392c-6.93 0-12.946-.915-18.046-2.616-5.1-1.83-9.154-4.446-12.554-8.107-3.27-3.662-5.754-8.239-7.324-13.732q-2.353-8.238-2.353-19.615v-63.164H200.75q-2.55 0-3.923-3.138c-.916-2.223-1.439-5.754-1.439-10.854 0-2.616.131-4.97.393-6.8s.523-3.27 1.047-4.316a5.5 5.5 0 0 1 1.7-2.354c.653-.393 1.438-.653 2.485-.653h14.515v-27.462c0-.916.262-1.7.785-2.485.522-.785 1.438-1.308 2.746-1.831s3.139-.915 5.362-1.177c2.354-.131 5.1-.262 8.37-.262 3.4 0 6.276.131 8.5.262 2.223.261 4.053.653 5.361 1.177 1.308.522 2.223 1.046 2.746 1.83.523.785.785 1.57.785 2.486v27.462h26.808c.916 0 1.7.262 2.485.653.653.523 1.177 1.308 1.7 2.354.392 1.046.784 2.485 1.046 4.316s.262 4.184.262 6.8c0 5.1-.392 8.63-1.308 10.854-.915 2.092-2.223 3.138-4.054 3.138h-26.939v57.933c0 6.67 1.046 11.77 3.27 15.039 2.092 3.4 5.884 5.1 11.246 5.1 1.83 0 3.53-.131 4.969-.524 1.438-.262 2.877-.654 3.923-1.047 1.178-.392 2.093-.784 3.008-1.177a5.9 5.9 0 0 1 2.092-.392 3.5 3.5 0 0 1 1.57.392q.784.589 1.177 1.961.393 1.57.785 3.924c.261 1.7.261 3.792.261 6.408zm142.803 12.162q0 1.374-.784 2.354a7.05 7.05 0 0 1-2.746 1.7c-1.308.524-3.139.916-5.362 1.047-2.223.261-5.1.391-8.37.391-3.4 0-6.277-.13-8.5-.391-2.223-.132-4.054-.523-5.362-1.047-1.177-.392-2.223-1.046-2.746-1.7q-.784-.98-.784-2.354v-70.355c0-5.885-.393-10.593-1.308-13.993s-2.092-6.408-3.792-8.762c-1.7-2.484-3.793-4.315-6.408-5.754-2.615-1.308-5.754-1.962-9.285-1.962-4.315 0-8.762 1.57-13.339 4.84q-6.67 4.902-14.123 14.122v81.864c0 .916-.131 1.7-.785 2.354-.522.654-1.438 1.308-2.746 1.7-1.438.524-3.138.916-5.362 1.047-2.223.261-4.97.391-8.5.391-3.4 0-6.146-.13-8.37-.391-2.223-.132-3.922-.523-5.23-1.047-1.439-.392-2.354-1.046-2.877-1.7s-.916-1.438-.916-2.354V340.017c0-1.047.392-1.83.916-2.616.524-.653 1.438-1.307 2.877-1.83 1.308-.523 3.007-.785 5.23-1.178 2.224-.262 4.97-.393 8.37-.393 3.53 0 6.277.131 8.5.393 2.224.392 3.924.654 5.362 1.178 1.308.522 2.223 1.177 2.746 1.83.654.785.785 1.57.785 2.616v68.002c6.015-5.885 12.162-10.331 18.439-13.208 6.146-2.877 12.554-4.316 19.354-4.316 8.37 0 15.431 1.308 21.185 4.185 5.754 2.746 10.331 6.539 13.993 11.246 3.53 4.839 6.015 10.331 7.585 16.74 1.57 6.407 2.354 14.122 2.354 23.277zm139.012.392c0 1.308-.392 2.354-1.306 3.008-.918.784-2.357 1.308-4.45 1.57-1.962.392-4.838.522-8.76.522-4.055 0-7.063-.132-9.025-.523q-2.744-.392-3.923-1.57c-.783-.653-1.175-1.699-1.175-3.007v-9.808c-5.1 5.362-10.853 9.677-17.393 12.685-6.407 3.008-13.73 4.577-21.58 4.577-6.535 0-12.551-.915-18.044-2.615s-10.202-4.185-14.253-7.585c-3.923-3.27-7.063-7.454-9.288-12.423-2.221-4.97-3.268-10.854-3.268-17.393 0-7.193 1.438-13.47 4.187-18.7 2.876-5.362 7.059-9.678 12.551-13.209 5.625-3.4 12.556-5.885 20.793-7.585 8.241-1.7 17.917-2.485 28.902-2.485h11.9v-7.453c0-3.924-.263-7.324-1.178-10.2-.655-2.878-1.961-5.231-3.791-7.193s-4.186-3.4-7.195-4.316c-3.008-.915-6.667-1.307-11.113-1.307-5.756 0-10.986.522-15.564 1.83-4.446 1.308-8.5 2.747-12.028 4.316-3.531 1.57-6.411 3.008-8.764 4.316s-4.315 1.83-5.753 1.83c-1.046 0-1.962-.261-2.748-.915-.651-.654-1.307-1.569-1.83-2.746s-.914-2.616-1.179-4.447c-.391-1.7-.391-3.661-.391-5.754 0-2.876.132-5.1.654-6.8.392-1.569 1.307-3.138 2.617-4.446 1.306-1.308 3.531-2.877 6.667-4.446a80 80 0 0 1 11.377-4.446c4.315-1.439 9.156-2.485 14.126-3.4 5.097-.916 10.462-1.308 15.823-1.308 9.676 0 17.917.915 24.848 2.746 6.799 1.962 12.42 4.839 16.866 8.762 4.45 3.923 7.586 9.023 9.679 15.17 1.961 6.146 3.008 13.47 3.008 21.838zm-34.131-52.701h-13.21c-5.622 0-10.331.393-14.382 1.177-3.927.915-7.063 2.092-9.68 3.792-2.484 1.57-4.182 3.662-5.36 6.016-1.18 2.354-1.702 4.969-1.702 7.977 0 5.23 1.57 9.285 4.841 12.162 3.268 3.007 7.846 4.446 13.599 4.446 4.837 0 9.415-1.177 13.47-3.662s8.237-6.146 12.424-10.984zm186.48 52.309q0 1.373-.783 2.354a6.7 6.7 0 0 1-2.876 1.7c-1.179.524-3.008.915-5.233 1.046-2.353.262-5.102.393-8.37.393-3.4 0-6.275-.131-8.5-.393-2.221-.131-4.055-.522-5.361-1.046-1.179-.393-2.222-1.047-2.745-1.7q-.787-.981-.787-2.354v-70.356c0-5.885-.391-10.592-1.306-13.993-.916-3.4-2.094-6.407-3.795-8.761-1.698-2.485-3.791-4.316-6.408-5.754-2.613-1.308-5.752-1.962-9.284-1.962-4.314 0-8.76 1.57-13.338 4.839q-6.669 4.904-14.122 14.123v81.864q0 1.373-.787 2.354c-.524.653-1.438 1.307-2.876 1.7-1.307.524-3.008.915-5.23 1.046-2.225.262-4.969.392-8.5.392-3.4 0-6.148-.131-8.37-.392-2.224-.131-4.054-.522-5.364-1.046-1.307-.392-2.222-1.047-2.745-1.7-.655-.654-.914-1.439-.914-2.354V398.34q0-1.373.783-2.354c.396-.785 1.179-1.307 2.485-1.83 1.179-.394 2.748-.785 4.578-1.047 1.961-.131 4.314-.262 7.194-.262 2.877 0 5.361.131 7.191.262 1.962.262 3.531.653 4.578 1.046 1.046.524 1.83 1.047 2.221 1.83.524.654.655 1.44.655 2.355v14.254c6.931-7.323 13.862-12.946 20.793-16.608 7.062-3.662 14.385-5.492 22.1-5.492 8.368 0 15.43 1.307 21.187 4.185 5.753 2.746 10.33 6.407 13.862 11.246 3.528 4.708 6.144 10.2 7.714 16.608s2.353 13.993 2.353 22.885zm158.628-62.902c0 10.593-1.438 20.14-4.186 28.77q-4.118 12.947-12.552 22.362c-5.624 6.277-12.555 11.116-21.056 14.516-8.5 3.4-18.44 5.1-29.685 5.1-10.986 0-20.53-1.57-28.639-4.577-8.109-3.008-14.776-7.454-20.138-13.208-5.364-5.885-9.287-12.946-11.9-21.447-2.616-8.369-3.795-18.046-3.795-29.031 0-10.462 1.438-20.008 4.187-28.77 2.744-8.631 7.062-16.085 12.555-22.362 5.753-6.147 12.684-10.985 21.184-14.385 8.37-3.4 18.177-5.1 29.554-5.1 11.117 0 20.661 1.438 28.77 4.446 8.11 3.008 14.777 7.454 20.01 13.208 5.361 5.754 9.284 12.946 11.9 21.447 2.485 8.37 3.791 18.177 3.791 29.031m-35.7 1.439c0-6.016-.525-11.64-1.57-16.74-.916-5.1-2.485-9.546-4.838-13.338s-5.361-6.8-9.156-8.893q-5.687-3.138-14.513-3.138c-5.102 0-9.548.915-13.47 2.877-3.924 1.83-7.064 4.577-9.548 8.239-2.485 3.661-4.315 7.977-5.621 13.077-1.179 5.1-1.834 10.985-1.834 17.523 0 6.016.525 11.64 1.57 16.74.916 5.1 2.617 9.545 4.838 13.338 2.357 3.792 5.361 6.67 9.288 8.762 3.79 2.092 8.629 3.139 14.253 3.139 5.23 0 9.807-1.047 13.73-2.877 3.923-1.831 7.063-4.578 9.548-8.24 2.484-3.53 4.314-7.846 5.492-13.077 1.175-4.969 1.83-10.854 1.83-17.392m97.947 61.463q0 1.373-.783 2.354c-.524.653-1.438 1.307-2.876 1.7-1.31.524-3.008.915-5.233 1.046-2.221.262-4.97.392-8.501.392-3.4 0-6.144-.131-8.37-.392-2.22-.131-4.054-.522-5.36-1.046-1.307-.392-2.221-1.047-2.745-1.7-.655-.654-.918-1.439-.918-2.354V340.016c0-1.046.264-1.83.918-2.615.524-.654 1.438-1.308 2.745-1.83 1.306-.523 3.14-.785 5.36-1.178 2.226-.262 4.97-.393 8.37-.393 3.531 0 6.28.131 8.5.393 2.226.392 3.924.653 5.234 1.177 1.438.523 2.353 1.178 2.876 1.831.524.784.783 1.57.783 2.615z"
          }
        )
      ]
    }
  );
  var IupacStructureName_default = SvgIupacStructureName;

  // build/lib-react-tsx/chem/MineralFormulaName.tsx
  var React22 = __toESM(require_react(), 1);
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  var SvgMineralFormulaName = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          "path",
          {
            stroke: "none",
            d: "M367.42 727.473q0 3.357-1.83 6.104-1.526 2.441-6.409 4.272-4.577 1.526-12.817 2.442-8.24.915-20.752.915-19.837 0-28.687-1.526-8.545-1.526-12.512-4.577-3.662-3.052-5.798-7.325L159.29 540.4v187.378q0 3.357-1.831 5.799-1.831 2.441-6.409 4.272-4.577 1.526-12.207 2.442-7.63.915-19.531.915-11.597 0-19.531-.915-7.63-.916-12.207-2.442-4.578-1.83-6.714-4.272-1.831-2.442-1.831-5.799V355.77q0-3.357 1.83-5.798 2.137-2.442 6.715-3.968t12.207-2.441q7.934-.916 19.531-.916 11.902 0 19.531.916 7.63.916 12.207 2.441 4.578 1.526 6.409 3.968 1.831 2.441 1.831 5.798v168.152l115.662-167.847q2.136-3.967 5.188-6.408 3.051-2.747 7.934-4.273t12.512-2.136q7.63-.61 19.532-.61 12.207 0 20.141.915 7.935.916 12.512 2.747 4.883 1.525 6.714 3.967 1.831 2.441 1.831 5.493 0 5.188-2.746 10.681t-10.376 17.395L239.857 525.752 357.96 704.28q6.714 12.512 7.935 16.784 1.526 3.968 1.526 6.41m339.355-106.507q0 21.057-5.798 38.147t-16.174 30.212q-10.071 13.123-24.414 22.583-14.038 9.46-31.128 15.564t-36.621 9.155q-19.226 2.747-43.03 2.747H444.63q-10.071 0-17.09-5.798-6.714-6.104-6.714-19.532V369.807q0-13.428 6.714-19.226 7.019-6.103 17.09-6.103h99.182q36.315 0 61.34 6.103 25.33 6.104 42.42 18.616 17.394 12.207 26.55 31.128 9.155 18.92 9.155 44.555 0 14.344-3.662 27.161-3.662 12.512-10.681 22.888-7.02 10.376-17.395 18.31-10.071 7.935-23.194 12.818 16.785 3.052 30.823 10.681 14.343 7.63 24.72 19.837 10.68 11.902 16.784 28.076t6.103 36.316m-103.76-166.321q0-11.902-3.662-21.362t-10.986-15.564q-7.324-6.409-18.616-9.766-10.986-3.357-29.602-3.357h-40.588v102.54h44.86q17.396 0 27.772-3.968 10.376-4.273 17.09-11.292 7.019-7.324 10.376-16.784 3.357-9.766 3.357-20.447m20.447 169.067q0-13.733-4.577-24.414-4.578-10.986-13.428-18.31t-22.583-11.292-35.706-3.967h-47.607v112.305h57.983q16.785 0 28.077-3.357 11.596-3.662 19.836-10.376 8.545-7.02 13.123-17.09 4.882-10.376 4.882-23.499m317.994-141.601q0 10.986-.61 18.005-.611 7.02-1.832 10.987-1.22 3.967-3.357 5.493-1.83 1.526-4.883 1.526-2.441 0-5.493-.916-3.052-1.22-7.019-2.441-3.662-1.221-8.24-2.137-4.577-1.22-10.07-1.22-6.409 0-12.818 2.746-6.408 2.442-13.427 7.935-6.714 5.493-14.344 14.648-7.324 9.156-15.869 22.583V729q0 3.052-1.83 5.493-1.832 2.136-6.41 3.662-4.272 1.526-11.596 2.137-7.325.915-18.616.915t-18.616-.915q-7.324-.61-11.902-2.137-4.272-1.526-6.103-3.662-1.831-2.441-1.831-5.493V456.782q0-3.052 1.526-5.188 1.526-2.441 5.493-3.967t10.07-2.136q6.41-.916 15.87-.916 9.765 0 16.174.916 6.409.61 9.766 2.136 3.662 1.526 5.188 3.967 1.526 2.136 1.526 5.188v33.875q10.68-15.259 20.141-25.025 9.46-10.07 18.006-15.869t17.09-7.934q8.544-2.442 17.09-2.442 3.967 0 8.544.61 4.578.306 9.46 1.526 4.883.916 8.546 2.442 3.662 1.22 5.188 2.746 1.83 1.526 2.441 3.357.915 1.831 1.526 5.188.61 3.052.915 9.46.306 6.41.306 17.396",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var MineralFormulaName_default = SvgMineralFormulaName;

  // build/lib-react-tsx/chem/MineralNameFormula.tsx
  var React23 = __toESM(require_react(), 1);
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  var SvgMineralNameFormula = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          "path",
          {
            stroke: "none",
            d: "M419.776 386.85q0 8.85-.916 15.26-.61 6.103-2.136 10.07-1.526 3.662-3.968 5.493-2.136 1.831-4.882 1.831h-98.877v318.299q0 3.051-2.137 5.493-1.83 2.441-6.408 3.967t-12.512 2.442q-7.63.915-19.227.915-11.596 0-19.53-.915-7.63-.916-12.208-2.442-4.577-1.526-6.714-3.967-1.83-2.442-1.83-5.493V419.504h-98.878q-3.051 0-5.188-1.83-2.136-1.832-3.662-5.494-1.526-3.967-2.441-10.07-.61-6.41-.61-15.26 0-9.155.61-15.563.915-6.41 2.441-10.071 1.526-3.967 3.662-5.493 2.137-1.831 5.188-1.831h278.32q2.747 0 4.883 1.83 2.442 1.527 3.968 5.494 1.526 3.662 2.136 10.07.916 6.41.916 15.565m119.628 351.562q0 3.052-1.83 5.493-1.832 2.136-6.41 3.662-4.272 1.526-11.596 2.137-7.324.915-18.616.915t-18.615-.915q-7.325-.61-11.902-2.137-4.273-1.526-6.104-3.662-1.83-2.441-1.83-5.493V466.807q0-3.052 1.83-5.188 1.831-2.442 6.104-3.968 4.577-1.83 11.902-2.746t18.615-.916q11.292 0 18.616.916 7.324.915 11.597 2.746 4.577 1.526 6.408 3.968 1.831 2.136 1.831 5.188zm5.799-364.38q0 23.194-9.46 32.044t-35.096 8.85q-25.94 0-35.095-8.545-8.85-8.545-8.85-30.823 0-23.193 9.155-32.043 9.46-9.156 35.4-9.156 25.635 0 34.79 8.85 9.156 8.545 9.156 30.823m332.337 364.38q0 3.052-1.832 5.493-1.83 2.136-6.103 3.662t-11.902 2.137q-7.324.915-18.31.915-11.292 0-18.922-.915-7.324-.61-11.596-2.137-4.273-1.526-6.104-3.662-1.83-2.441-1.83-5.493V583.08q0-19.837-3.053-31.128-2.746-11.292-8.24-19.226-5.493-8.24-14.343-12.513-8.545-4.577-20.141-4.577-14.649 0-29.602 10.68-14.954 10.682-31.128 31.129v180.97q0 3.05-1.831 5.492-1.831 2.136-6.409 3.662-4.272 1.526-11.597 2.137-7.324.915-18.615.915-11.292 0-18.616-.915-7.324-.61-11.902-2.137-4.272-1.526-6.104-3.662-1.83-2.441-1.83-5.493V466.196q0-3.051 1.525-5.188 1.526-2.441 5.493-3.967t10.071-2.136q6.409-.916 15.87-.916 9.765 0 16.174.916 6.408.61 9.765 2.136 3.662 1.526 5.188 3.967 1.526 2.137 1.526 5.188v31.433q22.583-24.414 45.777-36.62 23.498-12.208 48.828-12.208 27.77 0 46.692 9.156 19.226 9.155 30.822 25.024 11.902 15.564 17.09 36.621t5.188 50.66z",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var MineralNameFormula_default = SvgMineralNameFormula;

  // build/lib-react-tsx/chem/Ph.tsx
  var React24 = __toESM(require_react(), 1);
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  var SvgPh = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          "path",
          {
            stroke: "none",
            d: "M470.347 550.178q0 30.99-6.77 55.99-6.511 24.74-19.272 42.188-12.76 17.447-31.77 26.822t-43.49 9.375q-10.156 0-18.75-2.083-8.333-1.823-16.406-5.73-7.813-4.166-15.625-10.155-7.813-5.99-16.146-14.063v109.375q0 2.604-1.563 4.688t-5.468 3.385q-3.646 1.563-9.896 2.344t-15.886.781-15.885-.781-10.156-2.344q-3.646-1.302-5.209-3.385-1.562-2.084-1.562-4.688V437.418q0-2.604 1.302-4.427 1.302-2.083 4.427-3.385 3.385-1.303 8.594-1.823 5.469-.782 13.541-.782 7.813 0 13.021.782 5.47.52 8.594 1.823 3.385 1.302 4.688 3.385 1.302 1.823 1.302 4.427v27.344q10.156-10.417 19.791-18.23 9.896-8.072 20.052-13.28 10.157-5.47 20.834-8.074 10.937-2.604 23.177-2.604 25.52 0 43.49 10.157 17.968 9.895 29.166 27.343 11.458 17.448 16.667 40.625 5.208 23.177 5.208 49.48m-68.23 4.688q0-14.844-2.343-28.385-2.083-13.803-7.552-24.48-5.208-10.677-14.062-16.927-8.594-6.51-21.615-6.51-6.51 0-13.02 2.083-6.25 1.823-13.022 6.25-6.51 4.427-13.541 11.459-7.032 7.03-14.844 17.447v76.563q13.802 17.448 26.302 27.083 12.5 9.375 26.042 9.375 12.76 0 21.614-6.51 9.115-6.51 14.844-16.927 5.73-10.677 8.333-23.959 2.865-13.28 2.865-26.562m387.76 114.322q0 2.604-1.823 4.687-1.562 2.084-5.468 3.386-3.907 1.302-10.417 2.083t-16.406.781q-10.157 0-16.927-.78-6.51-.782-10.417-2.084-3.646-1.302-5.469-3.386-1.562-2.083-1.562-4.687V532.99H595.347v136.198q0 2.604-1.562 4.687t-5.47 3.386q-3.905 1.302-10.416 2.083-6.51.781-16.667.781-9.895 0-16.666-.78-6.51-.782-10.417-2.084t-5.729-3.386q-1.563-2.083-1.563-4.687v-318.23q0-2.603 1.563-4.687 1.823-2.083 5.73-3.385 3.905-1.302 10.416-2.084 6.77-.78 16.666-.78 10.157 0 16.667.78 6.51.782 10.417 2.084t5.469 3.385 1.562 4.688v123.698H721.39V350.96q0-2.604 1.562-4.688 1.823-2.083 5.469-3.385 3.906-1.302 10.417-2.084 6.77-.78 16.927-.78 9.896 0 16.406.78 6.51.782 10.417 2.084t5.468 3.385q1.823 2.084 1.823 4.688z",
            fontFamily: "sans-serif",
            fontSize: 693.333,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var Ph_default = SvgPh;

  // build/lib-react-tsx/chem/Precipitation.tsx
  var React25 = __toESM(require_react(), 1);
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var SvgPrecipitation = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeWidth: 0.882,
            d: "M10.6 1.557 8.997 2.77",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision",
            transform: "matrix(-48.73938 58.7678 57.8907 48.01196 838.661 32.817)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 0.882,
            d: "M8.997.343 10.6 1.557",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision",
            transform: "matrix(-48.73938 58.7678 57.8907 48.01196 838.661 32.817)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeWidth: 60,
            d: "m204.243 233.03 609.9-1.415-400 500"
          }
        )
      ]
    }
  );
  var Precipitation_default = SvgPrecipitation;

  // build/lib-react-tsx/cheminfo/SdfTable.tsx
  var React26 = __toESM(require_react(), 1);
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  var SvgSdfTable = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
          "path",
          {
            fill: "none",
            stroke: "#000",
            strokeWidth: 66.667,
            d: "M247.934 446.281h684.77m-684.77 156.631h684.77m-684.77 156.631h684.77m-684.77 156.632h684.77M280.992 451.004v472.255M639.906 425.03v472.255m258.559-446.281v472.255"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
          "path",
          {
            fill: "#000",
            stroke: "none",
            d: "M253.27 252.045q0 35.808-30.436 58.269-30.274 22.298-82.357 22.298-30.11 0-52.571-5.209-22.299-5.37-41.83-13.509V255.79h6.836q19.369 15.462 43.294 23.763 24.089 8.3 46.224 8.3 5.697 0 14.974-.976t15.137-3.255q7.161-2.93 11.719-7.324 4.72-4.395 4.72-13.021 0-7.975-6.836-13.672-6.673-5.86-19.694-8.952-13.672-3.255-28.972-6.022-15.136-2.93-28.483-7.324-30.599-9.928-44.108-26.856-13.346-17.09-13.346-42.317 0-33.854 30.273-55.176 30.437-21.484 78.125-21.484 23.926 0 47.2 4.72 23.438 4.557 40.528 11.556v55.827h-6.673q-14.648-11.72-35.97-19.532-21.159-7.975-43.294-7.975-7.813 0-15.625 1.14-7.65.976-14.811 3.906-6.348 2.441-10.905 7.487-4.558 4.882-4.558 11.23 0 9.603 7.325 14.811 7.324 5.046 27.669 9.278 13.346 2.766 25.553 5.37 12.37 2.605 26.53 7.162 27.832 9.115 41.016 24.902 13.346 15.625 13.346 40.69m271.972-44.76q0 33.855-15.462 60.71-15.462 26.693-39.062 41.016-17.741 10.742-38.9 14.973-21.159 4.232-50.13 4.232h-85.45V85.867h87.891q29.623 0 51.107 5.046 21.484 4.883 36.133 13.997 25.065 15.3 39.388 41.341 14.485 25.88 14.485 61.035m-64.615-.488q0-23.926-8.79-40.853-8.626-17.09-27.506-26.692-9.603-4.72-19.694-6.348-9.928-1.79-30.11-1.79h-15.788v151.692h15.787q22.299 0 32.715-1.953 10.417-2.116 20.345-7.487 17.09-9.766 25.065-26.042 7.976-16.438 7.976-40.527m285.969-74.056h-111.49v45.085h103.352v46.875H635.106v103.515H572.93V85.867h173.665z",
            "aria-label": "SDF",
            fontSize: 40,
            style: {
              lineHeight: 1.25
            }
          }
        )
      ]
    }
  );
  var SdfTable_default = SvgSdfTable;

  // build/lib-react-tsx/cheminfo/SearchSdf.tsx
  var React27 = __toESM(require_react(), 1);
  var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
  var SvgSearchSdf = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
                "path",
                {
                  strokeWidth: 46.91,
                  d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
                "path",
                {
                  strokeWidth: 46.908,
                  d: "m897.764 890.229-235.87-315.79-82.568 61.672 235.871 315.791m0 0c21.303 26.598 23.303 26.598 53.354 7.72m.001.002 21.485-16.054m0 0c29.463-22.07 29.463-23.07 7.728-53.342"
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
          "path",
          {
            fill: "#000",
            stroke: "none",
            d: "M307.172 377.27q0 25.78-21.915 41.953-21.796 16.054-59.296 16.054-21.68 0-37.852-3.75-16.055-3.867-30.117-9.726v-41.836h4.922q13.945 11.133 31.172 17.11 17.343 5.976 33.28 5.976 4.102 0 10.782-.703t10.899-2.344q5.156-2.11 8.437-5.273 3.398-3.165 3.398-9.375 0-5.743-4.921-9.844-4.805-4.219-14.18-6.446-9.844-2.343-20.86-4.335-10.898-2.11-20.507-5.274-22.032-7.148-31.758-19.336-9.61-12.305-9.61-30.469 0-24.375 21.797-39.726 21.914-15.469 56.25-15.469 17.227 0 33.985 3.399 16.875 3.28 29.18 8.32v40.195h-4.805q-10.547-8.437-25.899-14.062-15.234-5.743-31.172-5.743-5.625 0-11.25.82-5.507.704-10.664 2.813-4.57 1.758-7.851 5.39-3.281 3.517-3.281 8.087 0 6.914 5.273 10.664 5.273 3.633 19.922 6.68 9.61 1.992 18.398 3.867 8.907 1.875 19.102 5.156 20.039 6.563 29.531 17.93 9.61 11.25 9.61 29.297m195.82-32.227q0 24.375-11.133 43.711-11.133 19.219-28.125 29.531-12.773 7.735-28.008 10.781t-36.094 3.047H338.11V257.621h63.281q21.328 0 36.797 3.633 15.469 3.516 26.016 10.078 18.047 11.016 28.36 29.766 10.429 18.633 10.429 43.945m-46.524-.352q0-17.226-6.328-29.414-6.21-12.304-19.804-19.218-6.914-3.399-14.18-4.57-7.149-1.29-21.68-1.29H383.11v109.219h11.367q16.055 0 23.555-1.406 7.5-1.524 14.648-5.39 12.305-7.032 18.047-18.75 5.742-11.837 5.742-29.18m205.898-53.321h-80.274v32.461h74.414v33.75h-74.414v74.531h-44.765V257.621h125.039z",
            "aria-label": "SDF",
            fontSize: 40,
            style: {
              lineHeight: 1.25
            }
          }
        )
      ]
    }
  );
  var SearchSdf_default = SvgSearchSdf;

  // build/lib-react-tsx/cv/Assignment.tsx
  var React28 = __toESM(require_react(), 1);
  var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M250 710.809a19.66 19.66 0 0 0-19.662 19.662A19.66 19.66 0 0 0 250 750.133h683.604a19.66 19.66 0 0 0 19.66-19.662 19.66 19.66 0 0 0-19.66-19.662z" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M947.408 710.81a19.66 19.66 0 0 0-11.734 4.004l-51.27 38.956a19.66 19.66 0 0 0-3.761 27.55 19.66 19.66 0 0 0 27.55 3.76l51.27-38.955a19.66 19.66 0 0 0 3.76-27.549 19.66 19.66 0 0 0-15.815-7.765z" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M896.352 672.04a19.66 19.66 0 0 0-15.737 7.802 19.66 19.66 0 0 0 3.824 27.54l51.27 38.77a19.66 19.66 0 0 0 27.541-3.822 19.66 19.66 0 0 0-3.822-27.54l-51.272-38.772a19.66 19.66 0 0 0-11.804-3.979zM199.373 261.646h-37.218l-9.657-28.219h-51.75l-9.656 28.22H54.811l51.562-139.595h41.438zm-55.593-53.812-17.157-50.063-17.156 50.063zm720.299 608.504-50.907 139.594H772.86l-50.906-139.594h37.78l33.75 98.063 33.75-98.063zM230.34 733.603A19.66 19.66 0 0 0 250 753.265a19.66 19.66 0 0 0 19.662-19.662V50a19.66 19.66 0 0 0-19.663-19.66A19.66 19.66 0 0 0 230.34 50z" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M230.34 36.195a19.66 19.66 0 0 0 4.005 11.734L273.3 99.2a19.66 19.66 0 0 0 27.55 3.761 19.66 19.66 0 0 0 3.76-27.55l-38.954-51.27a19.66 19.66 0 0 0-27.551-3.76 19.66 19.66 0 0 0-7.766 15.815z" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("path", { d: "M191.568 87.252a19.66 19.66 0 0 0 7.803 15.736 19.66 19.66 0 0 0 27.54-3.824l38.772-51.27a19.66 19.66 0 0 0-3.824-27.54 19.66 19.66 0 0 0-27.541 3.821l-38.77 51.272a19.66 19.66 0 0 0-3.98 11.805z" }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "path",
          {
            fill: "none",
            stroke: "#000",
            strokeWidth: 50,
            d: "M350 650s107.143-254.286 157.143-254.286c100 0 130 1.429 180 1.429s138.571-244.286 188.571-244.286C875.714 152.857 820 530 770 530H528.571C416.768 530 350 650 350 650"
          }
        )
      ]
    }
  );
  var Assignment_default = SvgAssignment;

  // build/lib-react-tsx/dsc/Assignment.tsx
  var React29 = __toESM(require_react(), 1);
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "path",
          {
            stroke: "none",
            d: "M111.035 811.032c0 12.99 8.7 23.41 19.543 23.41 10.725 0 19.421-10.42 19.421-23.408zm0 0V162.018H150v649.018zM150 162.016c0-12.848-8.696-23.266-19.421-23.266-10.844 0-19.545 10.418-19.545 23.266z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m130.575 131.361 49.93 65.898m-99.856 0 49.929-65.898"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "path",
          {
            stroke: "none",
            d: "M150.002 811.032c-14.71 0-26.508 8.701-26.508 19.426 0 10.841 11.798 19.543 26.505 19.543zm0 0h734.904V850H150zM884.906 850c14.546 0 26.344-8.702 26.344-19.545 0-10.723-11.798-19.422-26.344-19.422z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m918.636 830.458-65.895 50.045m0-99.974 65.895 49.927"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 29.999,
            d: "M211.263 544.97c83.576 2.323 58.809-201.228 124.404-198.3 55.382 2.475 47.376 220.412 158.83 219.196 163.145-1.783 118.444 102.361 188.046 102.147 39.232-.213 41.712-104.403 88.313-102.016 66.088 3.389 122.267 4.987 148.35 3.002"
          }
        )
      ]
    }
  );
  var Assignment_default2 = SvgAssignment2;

  // build/lib-react-tsx/ea/Request.tsx
  var React30 = __toESM(require_react(), 1);
  var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
  var SvgRequest = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "path",
          {
            stroke: "none",
            d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235-217.03 251.696-37.674-32.266 217.03-251.899ZM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008 53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38v-449.49l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107Zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447Zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307zM336.331 208.886c-9.922 11.001-14.883 25.67-14.883 40.554l-53.711.43c.216-27.825 9.922-55.436 29.336-76.791zm-14.883 40.554c-.216 14.883 4.961 29.551 14.883 40.768l-39.905 36.023c-19.198-21.14-28.69-48.965-28.69-76.36Zm14.883 40.768q1.942 2.265 3.883 3.883l-36.239 39.69c-2.588-2.373-5.177-4.746-7.55-7.55zm3.883 3.883c8.628 7.765 19.198 11.864 29.552 11.864l-.648 53.495c-23.296 0-46.377-8.628-65.143-25.669zm29.552 11.864c10.354 0 20.708-3.883 29.337-11.649l35.591 39.475c-18.982 17.257-42.278 25.67-65.575 25.67zm29.337-11.649a29.4 29.4 0 0 0 3.667-3.667l39.474 35.808c-2.373 2.588-4.962 5.177-7.55 7.334zm3.667-3.667c10.138-11 15.099-25.67 15.099-40.552l53.495-.432c0 27.61-9.706 55.436-29.12 76.792zm15.099-40.552c0-14.884-4.961-29.768-15.1-40.985l39.906-36.023c19.198 21.355 28.69 48.966 28.69 76.576zm-15.1-40.985-3.666-3.667 36.023-39.906c2.803 2.373 5.176 4.961 7.55 7.55zm-3.666-3.667c-8.845-7.981-19.198-11.864-29.768-11.864l.864-53.495c23.08 0 46.161 8.412 64.927 25.453zm-29.768-11.864c-10.139 0-20.493 3.667-29.12 11.433l-35.808-39.475c18.982-17.04 42.279-25.67 65.79-25.453zm-29.12 11.433-3.884 3.882-39.258-35.807c2.372-2.804 4.745-5.177 7.334-7.55zm47.886 384.821c-5.824 13.59.648 29.337 14.237 34.946 13.805 5.608 29.336-1.078 35.16-14.669zm0 0 180.98-433.14 49.396 20.061-180.979 433.356Zm230.376-413.079c5.824-13.59-.648-29.336-14.237-34.73-13.59-5.607-29.336.863-35.16 14.67zm-14.668 299.402c-9.923 11-14.884 25.67-15.1 40.553l-53.495.216c.216-27.61 9.922-55.22 29.336-76.576zm-15.1 40.553c0 14.883 5.177 29.552 15.1 40.768l-39.906 36.023c-19.198-21.139-28.69-48.965-28.69-76.575zm15.1 40.768c1.294 1.51 2.588 2.59 3.883 3.883l-36.24 39.69a125 125 0 0 1-7.55-7.55zm3.883 3.883c8.628 7.766 19.197 11.864 29.551 11.864l-.648 53.496c-23.296 0-46.377-8.629-65.143-25.67zm29.551 11.864c10.355 0 20.708-3.883 29.337-11.648l35.591 39.475c-18.982 17.256-42.278 25.669-65.575 25.669zm29.337-11.648a29.4 29.4 0 0 0 3.667-3.667l39.474 35.808c-2.373 2.588-4.961 5.176-7.55 7.334zm3.667-3.667c9.922-11 15.099-25.67 15.099-40.553l53.496-.432c0 27.61-9.707 55.437-29.12 76.792zm15.099-40.553c0-14.884-4.961-29.768-15.1-40.985l39.907-36.023c19.198 21.355 28.689 48.966 28.689 76.577zm-15.1-40.985-3.666-3.667 36.023-39.905c2.804 2.372 5.177 4.96 7.55 7.55zm-3.666-3.667c-8.845-7.98-19.198-11.863-29.768-11.863l.862-53.712c23.08.216 46.162 8.628 64.928 25.67zm-29.768-11.863c-10.138-.216-20.492 3.667-29.12 11.432l-35.808-39.474c18.982-17.042 42.279-25.67 65.79-25.67zm-29.12 11.432-3.883 3.883-39.26-35.808c2.374-2.804 4.746-5.177 7.335-7.55z"
          }
        )
      ]
    }
  );
  var Request_default = SvgRequest;

  // build/lib-react-tsx/glassware/Beaker2.tsx
  var React31 = __toESM(require_react(), 1);
  var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
  var SvgBeaker2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("path", { d: "M305.834 420.256H666.58v208.723H305.834z" }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.668,
            d: "M708.795 174.282h-402.96v454.697H666.58V231.243z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.475,
            d: "M305.834 250.75h69.98m-69.98 57.45h69.98m-69.98 57.452h69.98"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "path",
          {
            fill: "#FEFEFE",
            d: "m641.5 420.5 8 21-2 186-29 17 18-22 1-183zm-37 1 8 21-2 186-29 17 8-22 1-183z"
          }
        )
      ]
    }
  );
  var Beaker2_default = SvgBeaker2;

  // build/lib-react-tsx/glassware/Beaker.tsx
  var React32 = __toESM(require_react(), 1);
  var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
  var SvgBeaker = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M305.834 420.256H666.58v208.722H305.834z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.668,
            d: "M708.796 174.281H305.834v454.697H666.58V231.242z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M612.096 482.021c-10.267-2.842-20.918 3.432-23.674 14.018-2.76 10.689 3.421 21.569 13.692 24.414 10.267 2.842 20.823-3.432 23.58-14.118 2.758-10.59-3.33-21.472-13.597-24.314m-32.613 52.939c-14.264-4.02-28.906 4.707-32.71 19.412-3.803 14.707 4.658 29.804 18.922 33.724 14.169 3.923 28.81-4.803 32.709-19.41 3.802-14.706-4.66-29.803-18.92-33.726"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.475,
            d: "M305.834 250.751h69.98m-69.98 57.449h69.98m-69.98 57.452h69.98"
          }
        )
      ]
    }
  );
  var Beaker_default = SvgBeaker;

  // build/lib-react-tsx/glassware/Erlen.tsx
  var React33 = __toESM(require_react(), 1);
  var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
  var SvgErlen = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.475,
            d: "M557.846 307.003V97.791H442.793v209.212h-.285l-135.114 288.23c-.284.686-.473 1.275-.758 2.057-8.083 24.51-8.272 53.137-.38 76.861 7.604 22.845 21.487 36.669 37.175 36.669h313.68c15.691 0 29.572-13.63 37.275-36.57 7.796-23.626 7.604-52.352-.38-76.762-.192-.687-.476-1.276-.666-1.863L557.941 307.003Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "m351.323 501.606-43.929 93.627c-.284.686-.473 1.275-.758 2.057-8.083 24.51-8.272 53.137-.38 76.861 7.604 22.845 21.487 36.669 37.175 36.669h313.68c15.691 0 29.572-13.63 37.275-36.57 7.796-23.626 7.604-52.352-.38-76.762-.192-.687-.476-1.276-.666-1.863l-44.12-94.019z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M626.686 563.764c-10.27-2.846-20.825 3.527-23.582 14.117-2.756 10.586 3.329 21.47 13.597 24.311 10.27 2.845 20.825-3.432 23.582-14.018 2.756-10.587-3.329-21.569-13.597-24.41m-32.615 52.938c-14.261-3.92-28.903 4.804-32.708 19.511-3.802 14.606 4.659 29.705 18.923 33.725 14.262 3.92 28.903-4.804 32.708-19.511 3.802-14.705-4.659-29.802-18.923-33.725"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.475,
            d: "M443.839 156.809h69.982m-69.982 57.45h69.982m-69.982 57.45h69.982"
          }
        )
      ]
    }
  );
  var Erlen_default = SvgErlen;

  // build/lib-react-tsx/glassware/RoundFlask.tsx
  var React34 = __toESM(require_react(), 1);
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var SvgRoundFlask = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 28.596,
            d: "M448.326 388.312c-81.754 23.07-141.578 98.158-141.578 187.282 0 69.648 36.666 130.788 91.754 165.173h205.7c55.09-34.385 91.754-95.525 91.754-165.173 0-89.124-59.824-164.211-141.49-187.282V192.349h-106.14z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M308.064 553.313a187 187 0 0 0-1.316 22.28c0 69.649 36.666 130.789 91.754 165.174h205.7c55.09-34.385 91.754-95.525 91.754-165.173 0-7.546-.437-15-1.227-22.281z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M621.833 590.68c-9.472-2.543-19.21 3.07-21.753 12.631-2.545 9.475 3.071 19.21 12.544 21.756 9.475 2.543 19.298-3.07 21.841-12.546 2.546-9.56-3.157-19.296-12.632-21.841m-30.086 47.37c-13.157-3.51-26.667 4.21-30.175 17.366-3.51 13.16 4.298 26.667 17.455 30.175 13.16 3.51 26.667-4.21 30.175-17.367 3.51-13.159-4.298-26.667-17.455-30.174"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M581.396 50.946c-14.65-3.948-29.824 4.824-33.771 19.561-3.947 14.65 4.823 29.825 19.56 33.772 14.65 3.947 29.825-4.825 33.772-19.561 3.947-14.65-4.824-29.825-19.561-33.772m-29.385 70.087c-10.616-2.895-21.492 3.421-24.387 14.035-2.807 10.614 3.509 21.579 14.122 24.386 10.614 2.895 21.493-3.421 24.387-14.035 2.808-10.614-3.508-21.579-14.122-24.386M520.08 82.875c-8.245-2.28-16.754 2.632-18.947 10.878-2.193 8.333 2.72 16.754 10.965 19.035 8.246 2.193 16.754-2.72 18.947-10.965 2.193-8.246-2.72-16.755-10.965-18.948m-17.456 61.755c-5.614-1.492-11.403 1.842-12.894 7.456-1.58 5.614 1.754 11.403 7.456 12.982 5.614 1.491 11.403-1.842 12.894-7.544 1.492-5.614-1.842-11.403-7.456-12.895"
          }
        )
      ]
    }
  );
  var RoundFlask_default = SvgRoundFlask;

  // build/lib-react-tsx/glassware/Titration.tsx
  var React35 = __toESM(require_react(), 1);
  var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
  var SvgTitration = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { fill: "none", d: "M469.9 100h150v50h-150z" }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 17.094,
            d: "M610.371 722.195V581.683h29.402v140.512Zm-211.169-53.562h201.255v-33.388H399.202Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          "path",
          {
            fill: "#fff",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.265,
            d: "M403.418 122.078h192.708v388.605l-47.864 56.981v182.454l-48.433 68.716-48.548-68.716V567.664l-47.863-56.98z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.265,
            d: "M520 205.953H403.418M520 277.977H403.418M520 350H403.418M520 422.024H403.418"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          "path",
          {
            fill: "#fff",
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 17.094,
            d: "M597.608 684.476h55.043v-65.074h-55.043z"
          }
        )
      ]
    }
  );
  var Titration_default = SvgTitration;

  // build/lib-react-tsx/icp/Request.tsx
  var React36 = __toESM(require_react(), 1);
  var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
  var SvgRequest2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
          "path",
          {
            stroke: "none",
            d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235-217.03 251.696-37.674-32.266 217.03-251.899ZM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008 53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38v-449.49l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107Zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447Zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307zM134 516.944v-264.14c0-13.66 3.084-24.013 9.473-30.843 6.168-6.829 14.32-10.354 24.233-10.354 10.134 0 18.285 3.305 24.674 10.134s9.473 17.184 9.473 31.062v264.14c0 13.88-3.084 24.234-9.473 31.064s-14.54 10.353-24.674 10.353c-9.693 0-17.844-3.524-24.233-10.353-6.169-7.05-9.473-17.405-9.473-31.063m429.586-70.276c0 10.795-2.643 22.25-7.93 34.587-5.288 12.557-13.439 24.674-24.895 36.79-11.235 11.896-25.555 21.59-43.178 29.08-17.404 7.49-37.892 11.235-61.244 11.235-17.624 0-33.706-1.763-48.246-5.067s-27.758-8.591-39.434-15.64c-11.896-7.05-22.69-16.523-32.604-27.98-8.812-10.573-16.523-22.25-22.69-35.468-6.17-12.997-11.016-26.876-14.1-41.636s-4.627-30.622-4.627-47.145c0-26.876 3.966-51.11 11.676-72.479q11.896-32.053 33.706-54.854c14.76-14.98 31.944-26.657 51.55-34.587 19.607-7.931 40.757-11.897 63.007-11.897 27.097 0 51.11 5.508 72.478 16.303 21.15 10.794 37.451 24.233 48.687 40.094s16.963 31.063 16.963 45.162c0 7.71-2.864 14.54-8.372 20.488-5.507 5.948-12.116 9.032-19.827 9.032-8.591 0-15.2-2.203-19.606-6.168-4.406-4.186-9.253-11.236-14.54-21.37-8.812-16.522-19.166-29.08-31.062-37.23-12.117-8.152-26.877-12.337-44.28-12.337q-41.97 0-66.752 31.723c-16.522 21.37-24.894 51.33-24.894 90.323 0 26.216 3.745 47.806 11.015 65.21 7.27 17.183 17.624 30.18 31.063 38.772 13.438 8.371 29.3 12.778 47.144 12.778q29.411 0 49.567-14.54c13.439-9.693 23.573-23.793 30.622-42.738 2.864-8.812 6.389-15.862 10.795-21.59 4.186-5.507 11.015-8.371 20.488-8.371 8.151 0 14.98 2.864 20.708 8.591 5.948 5.508 8.812 12.558 8.812 20.929m191-24.674h-62.124v94.95c0 13.658-3.084 23.792-9.693 30.842-6.389 7.05-14.32 10.574-24.233 10.574-10.134 0-18.285-3.524-24.674-10.353-6.168-7.05-9.253-17.184-9.253-30.622V258.972c0-14.98 3.305-25.555 10.355-31.944 6.829-6.609 17.624-9.693 32.604-9.693h87.017c25.775 0 45.606 1.983 59.483 5.948 13.66 3.745 25.553 10.134 35.687 18.946 9.913 8.812 17.403 19.607 22.693 32.384 5.289 12.998 7.712 27.317 7.712 43.4 0 34.146-10.579 59.92-31.502 77.545-21.151 17.624-52.437 26.436-94.073 26.436m-16.302-153.77h-45.822v102.66h45.822c15.863 0 29.302-1.762 40.097-5.066 10.572-3.305 18.944-8.812 24.449-16.523 5.733-7.71 8.593-17.624 8.593-29.96 0-14.76-4.407-26.877-12.995-36.13-9.913-9.913-29.96-14.98-60.144-14.98"
          }
        )
      ]
    }
  );
  var Request_default2 = SvgRequest2;

  // build/lib-react-tsx/inventory/Add.tsx
  var React37 = __toESM(require_react(), 1);
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
  var SvgAdd = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 46.702,
            d: "M424.176 303.053V170.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H356.46c-30.357 0-55.108-24.752-55.108-55.106V450.163c0-3.425.312-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29M391.33 170.42h219.34"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          "path",
          {
            stroke: "none",
            d: "M539.53 402.527c.155-21.327-17.125-38.606-38.452-38.45s-38.606 17.59-38.762 38.917zm0 0v217.32l-77.215.62V402.994zm-77.215 217.939c0 21.328 17.28 38.452 38.607 38.3 21.328-.158 38.607-17.595 38.607-38.919zm147.11-70.361c21.328-.158 38.763-17.438 38.919-38.761.156-21.328-17.124-38.609-38.451-38.453zm0 0H391.953l.624-77.214h217.317zm-216.85-77.214c-21.327 0-38.763 17.282-38.918 38.605-.156 21.328 16.968 38.609 38.295 38.609z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M418.105 54.133h165.79c14.01 0 28.956 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H430.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53"
          }
        )
      ]
    }
  );
  var Add_default = SvgAdd;

  // build/lib-react-tsx/inventory/Empty.tsx
  var React38 = __toESM(require_react(), 1);
  var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
  var SvgEmpty = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 46.702,
            d: "M426.176 299.053V166.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H358.46c-30.356 0-55.108-24.752-55.108-55.106V446.163c0-3.425.311-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M694.65 652.426v20.552c0 30.198-24.908 55.106-55.109 55.106H350.46c-30.2 0-55.108-24.752-55.108-55.106v-20.552c141.194-24.281 259.66 19.616 399.298 0"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 46.702,
            d: "M385.33 166.42h219.34"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M412.105 50.133h165.79c14.01 0 28.955 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H424.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53"
          }
        )
      ]
    }
  );
  var Empty_default = SvgEmpty;

  // build/lib-react-tsx/inventory/Full.tsx
  var React39 = __toESM(require_react(), 1);
  var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
  var SvgFull = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 46.702,
            d: "M424.176 301.053V168.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H356.46c-30.357 0-55.108-24.752-55.108-55.106V448.163c0-3.425.312-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M700.65 358.651v316.327c0 30.354-24.908 55.106-55.108 55.106H356.459c-30.356 0-55.108-24.752-55.108-55.106V358.651c141.194-24.285 259.66 19.615 399.298 0"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 46.702,
            d: "M391.33 168.42h219.34"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M418.105 52.133h165.79c14.01 0 28.956 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H430.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53"
          }
        )
      ]
    }
  );
  var Full_default = SvgFull;

  // build/lib-react-tsx/inventory/Status.tsx
  var React40 = __toESM(require_react(), 1);
  var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
  var SvgStatus = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 34.798,
            d: "M344.382 172.769h311.365c39.067 0 70.982 31.916 70.982 70.983V640.51c0 38.961-31.915 70.985-70.982 70.985H344.382c-38.96 0-70.983-32.024-70.983-70.985V243.752c0-39.067 31.916-70.983 70.983-70.983"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "#fff",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 34.798,
            d: "M500.118 65.493c33.944 0 62.23 24.124 68.85 56.04H636v90.837H364.129v-90.837h67.034c6.618-31.916 35.011-56.04 68.955-56.04"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M508.23 100.932c-16.758-4.484-33.943 5.444-38.427 22.202-4.483 16.652 5.444 33.837 22.203 38.32 16.651 4.483 33.837-5.444 38.32-22.095 4.483-16.759-5.444-33.944-22.096-38.427"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M503.427 118.65c-6.938-1.92-14.09 2.242-15.904 9.18-1.922 6.939 2.241 14.09 9.18 15.905 6.938 1.921 14.09-2.241 16.01-9.18 1.815-6.938-2.348-14.09-9.286-15.904"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.011,
            d: "M646.034 331.814H419.528"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M356.87 313.347a18.98 18.98 0 0 0-23.376 13.557c-2.775 10.14 3.31 20.708 13.45 23.375 10.247 2.775 20.708-3.306 23.483-13.448 2.669-10.247-3.309-20.708-13.556-23.484"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.011,
            d: "M646.034 418.809H419.528"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M356.87 400.34c-10.246-2.774-20.707 3.31-23.376 13.558-2.775 10.14 3.31 20.709 13.45 23.376 10.247 2.775 20.708-3.31 23.483-13.45 2.669-10.245-3.309-20.706-13.556-23.484"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.011,
            d: "M646.034 505.804H419.528"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M356.87 487.335c-10.246-2.774-20.707 3.31-23.376 13.558-2.775 10.141 3.31 20.706 13.45 23.376 10.247 2.775 20.708-3.31 23.483-13.558 2.669-10.137-3.309-20.6-13.556-23.376"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.011,
            d: "M646.034 592.796H419.528"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M356.87 574.33c-10.246-2.774-20.707 3.31-23.376 13.558-2.775 10.138 3.31 20.706 13.45 23.376 10.247 2.775 20.708-3.31 23.483-13.557 2.669-10.141-3.309-20.602-13.556-23.376"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "none",
            stroke: "#fefefe",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 74.719,
            d: "m561.067 685.476 62.657 62.658 161.714-168.226"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.011,
            d: "m561.067 685.476 62.657 62.658 161.714-168.226"
          }
        )
      ]
    }
  );
  var Status_default = SvgStatus;

  // build/lib-react-tsx/inventory/Toxic.tsx
  var React41 = __toESM(require_react(), 1);
  var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
  var SvgToxic = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 46.702,
            d: "M424.176 303.053V170.42h153.493v132.633c71.764 14.321 122.046 48.258 122.046 87.799 0 19.614.934 39.54.934 59.31v226.816c0 30.354-24.907 55.106-55.108 55.106H356.46c-30.357 0-55.108-24.752-55.108-55.106V450.163c0-3.425.312-53.551.934-56.82-2.958-54.174 80.95-82.04 121.89-90.29M391.33 170.42h219.34"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M418.105 54.133h165.79c14.01 0 28.956 11.987 25.375 25.53l-12.765 50.283c-3.425 13.699-11.52 25.53-25.53 25.53H430.87c-14.01 0-21.95-11.831-25.375-25.53l-12.92-50.282c-3.425-13.544 11.52-25.53 25.53-25.53m146.02 589.219c-.466 1.399-.934 2.801-1.09 4.204L529.41 632.92l37.984-16.501.156.313c3.58 8.094 12.92 11.675 21.016 8.25 8.095-3.58 11.83-12.92 8.25-21.018-1.867-4.356-5.292-7.314-9.34-8.716a18.21 18.21 0 0 0 2.18-18.057c-3.892-8.873-14.322-13.077-23.352-9.187-8.873 3.895-13.076 14.323-9.184 23.354a15.3 15.3 0 0 0 2.335 3.737L502.324 620l-1.402.624-1.401-.624-56.976-24.904c.934-1.093 1.556-2.34 2.18-3.737 3.891-9.03-.157-19.46-9.185-23.354-8.874-3.89-19.304.313-23.351 9.187-2.647 6.225-1.557 13.077 2.335 18.057-4.048 1.403-7.628 4.36-9.496 8.716-3.425 8.098.311 17.438 8.406 21.019 8.095 3.424 17.435-.158 21.016-8.25v-.314l38.14 16.501-33.625 14.637c-.156-1.403-.624-2.806-1.246-4.204-3.892-9.03-14.322-13.077-23.351-9.187-8.873 3.894-13.076 14.323-9.184 23.354 2.801 6.068 8.561 9.962 14.788 10.585-1.712 3.89-2.024 8.56-.156 12.764 3.581 8.093 12.921 11.83 21.172 8.407 8.095-3.58 11.675-13.077 8.25-21.171l-.155-.157 51.838-22.574 51.995 22.574-.156.157c-3.58 8.094.156 17.59 8.25 21.171 8.096 3.424 17.592-.313 21.017-8.407 1.867-4.204 1.712-8.874 0-12.764 6.226-.624 11.986-4.517 14.632-10.585 3.892-9.03-.156-19.46-9.184-23.354-8.873-3.89-19.303.157-23.351 9.187zM551.983 484.1c-20.549 0-37.05-16.658-37.05-37.05 0-20.55 16.501-37.206 37.05-37.206s37.205 16.657 37.205 37.206c0 20.392-16.656 37.05-37.205 37.05m-65.071 4.514 16.501-19.46 17.124 19.46zm-32.536-4.515c-20.548 0-37.205-16.657-37.205-37.05 0-20.548 16.657-37.205 37.205-37.205 20.55 0 37.206 16.657 37.206 37.206 0 20.392-16.657 37.05-37.206 37.05M563.97 360.34H438.03c-22.883 0-41.563 18.68-41.563 41.564v89.358c0 22.883 18.68 41.562 41.564 41.562h4.67v20.239c0 6.072 4.982 10.895 11.053 10.895h.934c6.071 0 10.897-4.823 10.897-10.895v-20.239h8.406v20.239c0 6.072 4.826 10.895 10.897 10.895h1.09c5.916 0 10.897-4.823 10.897-10.895v-20.239h8.25v20.239c0 6.072 4.982 10.895 10.898 10.895h1.09c5.915 0 10.896-4.823 10.896-10.895v-20.239h8.25v20.239c0 6.072 4.983 10.895 10.898 10.895h1.09c6.07 0 10.896-4.823 10.896-10.895v-20.239h4.826c22.884 0 41.565-18.68 41.565-41.562v-89.358c0-22.883-18.68-41.564-41.565-41.564z"
          }
        )
      ]
    }
  );
  var Toxic_default = SvgToxic;

  // build/lib-react-tsx/ir/Assignment.tsx
  var React42 = __toESM(require_react(), 1);
  var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment3 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 730.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M97.35 114.927c87.832-20.764 119.621 79.197 124.583 157.475 11.576 179.157 25.725 256.15 86.179 252.84 158.21 1.105 12.679-436.775 212.233-419.503 95.92 8.27 85.445 76.992 90.222 155.822 4.962 83.974 6.062 143.326 16.171 209.66 37.85-109.516-11.394-356.845 162.804-360.337 35.649-.734 64.68.919 96.653 2.573"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
          "path",
          {
            stroke: "none",
            d: "M326.284 588.229c0-7.485-6.092-13.576-13.402-13.576-7.485 0-13.576 6.091-13.576 13.576zm0 0v90.333h-26.978V588.23zm-26.978 90.333c0 7.31 6.091 13.402 13.576 13.402 7.31 0 13.402-6.092 13.402-13.402zm344.868-144.986c0-7.484-6.092-13.576-13.576-13.576-7.31 0-13.402 6.092-13.402 13.576zm0 0v90.334h-26.978v-90.334zm-26.978 90.334c0 7.31 6.091 13.402 13.402 13.402 7.484 0 13.576-6.092 13.576-13.402zM447.477 902.976c0 3.312-1.102 6.803-2.94 10.474-2.021 3.677-4.962 7.353-9.004 10.66-4.043 3.306-9.004 6.062-15.252 8.083-6.063 2.205-12.862 3.126-20.58 3.126-16.17 0-28.848-4.777-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.655 2.021-20.213 6.248-28.482 4.042-8.268 10.106-14.7 18.008-19.292 7.9-4.412 17.456-6.798 28.48-6.798 6.8 0 13.047 1.1 18.744 3.121 5.512 1.841 10.473 4.412 14.332 7.533 4.043 3.312 6.983 6.618 9.004 10.11 2.205 3.676 3.124 6.982 3.124 9.923 0 3.306-1.102 5.878-3.491 8.083s-5.145 3.307-8.453 3.307q-3.308 0-5.512-1.651c-1.47-1.106-2.94-2.941-4.778-5.512-3.308-4.962-6.615-8.454-10.106-11.03-3.491-2.385-7.902-3.671-13.414-3.671-7.718 0-13.965 3.121-18.743 9.183q-7.166 9.1-7.166 24.81c0 4.962.734 9.554 1.837 13.78 1.287 4.042 3.124 7.533 5.33 10.475 2.388 2.941 5.144 5.147 8.452 6.612 3.307 1.656 6.798 2.391 10.84 2.391 5.146 0 9.74-1.286 13.415-3.676 3.859-2.571 7.166-6.248 9.923-11.21 1.654-2.936 3.49-5.327 5.328-6.982 1.838-1.651 4.043-2.386 6.8-2.386 3.123 0 5.88 1.1 7.9 3.491 2.205 2.571 3.308 5.142 3.308 7.898m110.25-18.922v34.908c0 5.518-1.102 9.74-3.674 12.5-2.573 2.757-5.88 4.042-9.923 4.042-4.042 0-7.166-1.286-9.739-4.042-2.388-2.76-3.675-6.982-3.675-12.5v-41.89c0-6.618-.184-11.76-.734-15.437-.368-3.676-1.655-6.617-3.675-9.003-1.838-2.391-5.145-3.492-9.372-3.492-8.636 0-14.332 2.942-16.905 8.819-2.756 5.882-4.226 14.335-4.226 25.54v35.463c0 5.518-1.286 9.56-3.675 12.315-2.389 2.942-5.696 4.227-9.739 4.227-4.042 0-7.35-1.286-9.739-4.227-2.572-2.756-3.859-6.797-3.859-12.315v-75.149c0-4.962 1.103-8.823 3.492-11.394 2.205-2.571 5.145-3.862 9.004-3.862 3.491 0 6.43 1.29 9.003 3.677 2.39 2.39 3.492 5.697 3.492 9.924v2.57c4.593-5.512 9.555-9.553 14.7-12.124 5.145-2.576 11.025-3.862 17.273-3.862 6.615 0 12.311 1.47 17.088 4.042 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.513 9.188-9.37 14.333-11.945 4.961-2.571 10.658-4.042 16.722-4.042 7.166 0 13.414 1.47 18.556 4.227 5.332 2.941 9.188 6.983 11.764 12.31 2.201 4.597 3.307 12.13 3.307 22.419v51.264c0 5.518-1.287 9.74-3.677 12.5-2.57 2.757-5.877 4.042-9.924 4.042-4.041 0-7.347-1.286-9.739-4.227-2.57-2.756-3.856-6.797-3.856-12.315V874.68c0-5.512-.186-10.104-.736-13.595-.55-3.311-1.838-6.247-3.859-8.453-2.205-2.391-5.329-3.492-9.739-3.492-3.491 0-6.799 1.1-9.739 3.122-3.123 2.02-5.512 4.776-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.524m184.856-10.294v-67.802c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.57-1.656-1.657-2.39-3.492-2.39-5.698 0-2.571.735-4.412 2.39-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.941 10.845-5.882 14.521-9.004 3.491-3.126 6.798-6.617 9.554-10.474 2.756-3.861 4.592-6.247 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.777 1.106 6.247 3.126 1.656 2.021 2.391 4.962 2.391 8.449v85.628c0 9.924-3.311 14.886-10.109 14.886-3.121 0-5.512-.92-7.348-2.941-1.84-2.021-2.756-5.142-2.756-9.189M641.306 850c-4.412 0-7.903-4.042-7.903-9.189 0-4.961 3.491-9.183 7.903-9.183zm0 0H690v-18.372h-48.694ZM690 831.628c4.412 0 7.903 4.222 7.903 9.183 0 5.147-3.491 9.189-7.903 9.189Z"
          }
        )
      ]
    }
  );
  var Assignment_default3 = SvgAssignment3;

  // build/lib-react-tsx/ir/Overlay.tsx
  var React43 = __toESM(require_react(), 1);
  var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
  var SvgOverlay = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 730.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M448.044 905.942c0 3.311-1.102 6.802-2.94 10.474-2.021 3.676-4.962 7.353-9.004 10.66-4.043 3.305-9.004 6.061-15.252 8.082-6.063 2.206-12.862 3.126-20.58 3.126-16.17 0-28.849-4.776-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.654 2.021-20.213 6.248-28.481 4.042-8.268 10.106-14.7 18.008-19.293 7.9-4.411 17.456-6.797 28.48-6.797 6.8 0 13.047 1.1 18.744 3.12 5.512 1.842 10.473 4.413 14.332 7.534 4.043 3.311 6.983 6.618 9.004 10.109 2.205 3.676 3.124 6.983 3.124 9.924 0 3.306-1.102 5.877-3.491 8.083s-5.146 3.306-8.453 3.306q-3.308 0-5.512-1.65c-1.47-1.106-2.94-2.942-4.778-5.513-3.308-4.962-6.615-8.453-10.106-11.03-3.492-2.385-7.902-3.67-13.414-3.67-7.718 0-13.965 3.12-18.743 9.183q-7.166 9.1-7.166 24.81c0 4.962.734 9.553 1.837 13.78 1.286 4.042 3.124 7.533 5.33 10.474 2.388 2.941 5.144 5.147 8.451 6.613 3.308 1.656 6.8 2.39 10.842 2.39 5.145 0 9.739-1.285 13.414-3.676 3.858-2.57 7.166-6.247 9.922-11.21 1.655-2.935 3.492-5.326 5.329-6.982 1.838-1.65 4.043-2.386 6.8-2.386 3.123 0 5.879 1.1 7.9 3.492 2.205 2.57 3.308 5.142 3.308 7.898m110.25-18.922v34.908c0 5.517-1.102 9.739-3.675 12.5-2.572 2.756-5.88 4.042-9.922 4.042s-7.166-1.287-9.739-4.042c-2.389-2.761-3.675-6.983-3.675-12.5v-41.891c0-6.618-.184-11.76-.734-15.436-.369-3.677-1.655-6.618-3.675-9.004-1.838-2.39-5.145-3.491-9.372-3.491-8.636 0-14.333 2.941-16.905 8.818-2.756 5.883-4.226 14.336-4.226 25.54v35.464c0 5.517-1.286 9.559-3.675 12.315-2.389 2.941-5.696 4.227-9.739 4.227-4.042 0-7.35-1.287-9.739-4.227-2.572-2.756-3.859-6.798-3.859-12.315v-75.15c0-4.961 1.103-8.823 3.492-11.394 2.205-2.57 5.145-3.861 9.004-3.861 3.491 0 6.43 1.29 9.003 3.676 2.39 2.391 3.492 5.697 3.492 9.924v2.571c4.593-5.512 9.555-9.554 14.7-12.125 5.145-2.576 11.025-3.861 17.273-3.861 6.615 0 12.31 1.47 17.088 4.041 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.512 9.188-9.369 14.333-11.945 4.961-2.57 10.658-4.041 16.721-4.041 7.167 0 13.415 1.47 18.557 4.227 5.332 2.94 9.188 6.982 11.764 12.31 2.201 4.596 3.307 12.13 3.307 22.418v51.265c0 5.517-1.287 9.739-3.677 12.5-2.57 2.756-5.877 4.042-9.924 4.042-4.041 0-7.347-1.287-9.739-4.227-2.57-2.756-3.856-6.798-3.856-12.315v-44.282c0-5.512-.186-10.104-.736-13.595-.55-3.312-1.838-6.248-3.86-8.454-2.204-2.39-5.328-3.491-9.738-3.491-3.491 0-6.799 1.1-9.739 3.121-3.123 2.02-5.512 4.777-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.525m184.856-10.295v-67.801c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.571-1.656-1.656-2.391-3.492-2.391-5.698 0-2.57.736-4.411 2.391-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.94 10.844-5.882 14.521-9.003 3.491-3.126 6.798-6.618 9.554-10.474 2.756-3.862 4.592-6.248 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.776 1.106 6.247 3.126 1.656 2.02 2.391 4.962 2.391 8.448v85.629c0 9.923-3.311 14.885-10.109 14.885-3.121 0-5.512-.92-7.348-2.94-1.84-2.022-2.756-5.143-2.756-9.19m-101.277-23.759c-4.412 0-7.903-4.042-7.903-9.19 0-4.961 3.491-9.183 7.903-9.183zm0 0h48.694v-18.373h-48.694zm48.694-18.373c4.412 0 7.903 4.222 7.903 9.184 0 5.147-3.491 9.189-7.903 9.189z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M97.35 220.927c87.832-20.764 119.621 79.197 124.583 157.475 11.576 179.157 25.725 256.15 86.179 252.84 158.21 1.105 12.679-436.775 212.233-419.503 95.92 8.27 85.445 76.992 90.222 155.822 4.962 83.974 6.062 143.326 16.171 209.66 37.85-109.516-11.394-356.845 162.804-360.337 35.649-.734 64.68.919 96.653 2.573"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m94.042 91.75-.736.184-.735.183-.734.369-.55.184-.736.368-.55.368-.552.368-.55.368-.737.368-.368.55-.552.369-.552.552-.368.552-.55.552-.368.552-.368.552-.368.552-.184.734-.368.552-.184.552-.368.734-.184.735-.184.552v.734l-.184.734v.734l-.184.552v.735l.184.734v.734l.184.734.184.735.184.734.184.734.184.552.368.734.184.552.368.735.368.552.368.552.552.552.368.552.55.552.552.368.368.552.552.368.55.368.553.552.736.184.552.368.55.368.734.184.552.184.734.368h.735l.552.184.736.184h3.673l.552-.184.736-.184-6.431-27.93z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m126.75 89.36-1.838-.183h-2.389l-2.389-.184h-4.778l-2.204.184h-2.389l-2.389.184-2.389.368-2.388.184-2.39.368-2.388.552-2.388.368-2.39.552 6.432 27.93 1.837-.368 1.655-.368 1.837-.184 1.655-.368 1.654-.184 1.838-.184 1.654-.184h1.838l1.654-.184h3.492l1.654.184h1.838l1.837.184z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M124.912 118.026h2.206l.552-.184h.734l.736-.184.735-.183.552-.184.734-.369.552-.183.734-.369.552-.368.55-.368.55-.368.553-.368.55-.368.552-.552.552-.552.368-.368.368-.552.55-.55.368-.735.369-.552.184-.552.368-.734.368-.552.184-.734.184-.552.184-.734.184-.735v-.734l.184-.734v-1.469l-.184-.734v-.734l-.184-.734v-.552l-.184-.735-.368-.734-.184-.552-.184-.734-.368-.552-.368-.552-.369-.735-.368-.552-.368-.552-.552-.55-.368-.368-.552-.552-.55-.368-.552-.552-.552-.368-.55-.369-.552-.367-.55-.369-.737-.367-.55-.184-.734-.184-.736-.184-.734-.184-.55-.184-.737-.184h-.734l-1.838 28.666zm61.924-7.35-.55-.552-.735-.184-.55-.368-.736-.184-.552-.368-.734-.184-.734-.184h-.735l-.552-.184h-3.491l-.734.184-.736.184-.55.184-.734.184-.55.184-.737.183-.552.369-.55.367-.734.369-.552.368-.552.368-.55.552-.55.368-.369.552-.552.552-.55.552-.368.552-.368.552-.368.735-.368.552-.368.734-.184.734-.184.552-.184.734-.184.735-.184.552-.184.734v2.755l.184.734v.734l.184.552.184.735.184.734.184.552.368.734.184.55.368.552.368.735.368.552.368.552.55.552.368.552.552.368.55.552.55.368.553.552.736.368 15.067-24.256z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m211.643 129.051-1.47-1.286-1.839-1.654-2.02-1.47-1.838-1.655-1.838-1.47-2.021-1.47-1.837-1.471-2.022-1.47-2.02-1.287-2.022-1.47-2.021-1.286-1.838-1.286-2.021-1.103-15.068 24.256 1.47.918 1.655 1.102 1.654 1.102 1.838 1.287 1.654 1.102 1.655 1.286 1.654 1.286 1.654 1.103 1.655 1.47 1.654 1.286 1.47 1.287 1.655 1.286 1.47 1.286z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m192.9 150.734.55.552.736.366.55.369.552.367.735.369.55.366.736.184.552.366.734.184h.736l.552.184.735.184h3.49l.55-.184.737-.184.734-.184.55-.184.736-.184.55-.184.735-.366.552-.368.55-.368.736-.368.55-.368.55-.552.55-.368.553-.552.368-.553.55-.552.368-.55.368-.736.368-.552.368-.552.368-.734.184-.736.184-.55.184-.735.184-.552.184-.734.184-.734v-2.757l-.184-.734v-.552l-.184-.736-.184-.734-.184-.552-.184-.737-.368-.55-.184-.734-.368-.552-.368-.552-.368-.734-.368-.552-.55-.552-.368-.553-.552-.368-.55-.55-18.743 21.683zm58.984 23.704-.368-.552-.368-.552-.55-.552-.553-.552-.552-.369-.55-.55-.55-.368-.55-.368-.552-.366-.735-.368-.552-.184-.734-.368-.552-.184-.734-.184-.55-.184-.735-.184h-.736l-.55-.183h-2.205l-.552.183h-.736l-.734.184-.736.184-.55.184-.734.184-.736.368-.55.184-.735.368-.552.366-.552.368-.736.552-.55.368-.55.552-.369.552-.55.552-.368.552-.552.552-.368.553-.368.552-.184.552-.368.734-.184.55-.368.736-.184.552-.184.734v.737l-.184.734v1.286l-.184.736.184.552v1.47l.184.735.184.55.184.736.184.734.368.552.368.736.184.552.368.735.55.552 23.336-16.538z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m267.87 200.347-.918-1.654-1.102-2.205-1.286-2.021-1.287-2.205-1.102-2.022-1.286-2.205-1.286-2.02-1.47-2.022-1.287-2.206-1.286-2.02-1.47-2.022-1.287-2.02-.918-1.287-23.336 16.537.552.919 1.286 1.837 1.286 1.838 1.103 1.837 1.286 1.838 1.102 1.837 1.102 2.022 1.103 1.837 1.286 1.837 1.102 1.838.919 2.021 1.102 1.838.918 1.654z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m242.697 214.128.368.55.368.735.368.552.55.552.368.552.552.368.55.552.55.369.553.552.55.368.552.366.734.368.55.184.552.368.735.184.55.184.734.184.736.184.55.183h3.493l.734-.183h.736l.735-.184.55-.184.736-.184.734-.368.55-.184.736-.368.55-.368.735-.552.552-.368.55-.368.55-.552.553-.552.368-.368.552-.552.368-.552.368-.552.368-.735.368-.552.184-.55.368-.736.184-.552.184-.734.184-.735.184-.552.184-.734v-3.493l-.184-.734v-.552l-.184-.736-.184-.734-.184-.552-.368-.736-.184-.734-.368-.553-25.174 13.782zm47.04 43.365-.184-.734-.184-.736-.184-.734-.368-.55-.369-.735-.184-.552-.368-.552-.552-.734-.368-.552-.368-.552-.552-.368-.368-.552-.552-.369-.552-.552-.55-.368-.55-.368-.735-.368-.55-.368-.55-.184-.736-.368-.55-.183-.735-.184-.55-.184-.736-.184-.734-.184h-3.491l-.736.184-.734.184-.734.184-.737.184-.734.183-.55.368-.736.184-.55.368-.55.368-.735.368-.552.552-.368.368-.55.552-.552.368-.368.552-.55.552-.368.55-.368.552-.368.552-.368.737-.184.55-.369.552-.184.734-.184.736-.184.552-.184.734-.184.736v3.491l.184.735.184.736 27.93-6.248z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m293.044 280.095-.184-2.021-.184-2.206-.184-2.02-.184-2.022-.368-2.205-.184-2.021-.368-2.205-.368-2.021-.552-2.205-.368-2.022-.368-1.654-27.93 6.248.184 1.286.368 1.838.368 1.654.368 1.655.184 1.837.368 1.655.184 1.654.184 1.654.184 1.655.184 1.654v1.654z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m293.596 288.18-28.666 1.837-.55-8.085 28.665-1.837z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M264.93 290.017v.735l.185.736.183.552.185.734.184.736.184.734.184.55.368.737.368.552.368.55.368.552.368.552.368.552.552.552.55.552.368.368.55.552.55.368.553.369.734.368.55.368.552.368.736.184.55.184.735.368.736.184h.55l.734.184h.734l.736.184h1.471l.734-.184h.736l.734-.184.736-.184.55-.184.735-.184.55-.368.736-.368.552-.184.55-.368.735-.368.55-.552.552-.368.368-.366.55-.552.552-.553.368-.552.368-.552.368-.552.368-.552.368-.552.368-.734.184-.552.368-.736.184-.552.184-.734.184-.736v-.735l.184-.736v-2.022l-28.665 1.838zm31.055 55.861v-1.47l-.184-.735-.185-.552-.184-.736-.184-.734-.184-.552-.368-.736-.184-.552-.368-.734-.368-.553-.368-.552-.368-.55-.55-.552-.368-.552-.55-.366-.55-.552-.553-.368-.55-.369-.552-.368-.55-.368-.55-.368-.736-.368-.55-.184-.735-.184-.736-.368-.55-.184h-.734l-.736-.184h-3.675l-.734.184-.737.184-.55.184-.734.183-.736.184-.552.369-.734.183-.55.369-.55.368-.553.368-.55.368-.552.552-.552.368-.368.552-.552.55-.368.553-.55.55-.369.552-.368.552-.184.552-.368.736-.184.552-.368.734-.184.737-.184.552-.184.734v.736l-.184.734v1.47l28.665-.918z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m296.72 374.91-.185-5.329v-6.43l-.184-6.8-.184-6.798-.184-3.675-28.665.918.184 3.491.184 6.615v6.8l.184 6.43v5.146zm-28.85.368.185.735v1.47l.184.734.184.55.184.736.368.735.184.552.368.736.184.552.368.55.368.552.552.552.368.552.368.552.55.552.552.368.55.55.552.369.55.368.55.366.551.368.734.369.55.183.737.184.55.369.734.184h.736l.734.183h.736l.735.184h1.47l.734-.184h.55l.736-.183.735-.184.736-.184.55-.184.734-.366.55-.184.737-.368.55-.368.55-.369.552-.368.55-.552.55-.368.369-.55.55-.552.368-.552.55-.553.368-.552.368-.55.368-.552.184-.552.368-.734.184-.736.184-.552.184-.735.184-.736.184-.734v-1.286l.184-.734-28.849.368zm29.217 56.962v-1.469l-.184-.735v-.552l-.184-.736-.184-.734-.368-.552-.184-.736-.368-.552-.184-.734-.368-.55-.368-.553-.55-.552-.368-.55-.369-.552-.552-.552-.552-.368-.552-.552-.55-.368-.55-.368-.55-.368-.552-.366-.735-.368-.55-.184-.736-.366-.55-.184-.734-.184-.736-.184h-.735l-.55-.184h-2.941l-.736.184-.734.184h-.734l-.736.368-.55.184-.735.184-.55.368-.736.368-.55.368-.55.367-.55.368-.553.368-.55.552-.368.368-.55.552-.368.552-.55.552-.368.55-.368.552-.368.552-.184.735-.368.552-.184.734-.368.552-.185.734v.736l-.183.735-.185.736v1.47l28.666-.368z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m297.822 460.539-.184-3.675-.184-3.859v-4.042l-.184-4.227v-4.226l-.184-4.594v-3.675l-28.665.368v3.675l.184 4.594v4.594l.184 4.41v4.226l.184 4.043.184 3.49z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M269.156 461.64v.737l.184.734.184.736v.734l.184.737.368.552.185.734.368.552.184.736.368.552.368.552.368.552.55.55.368.552.55.552.368.552.55.369.55.367.55.553.553.368.734.184.552.366.55.368.736.184.55.183.735.368h.734l.736.184.735.184h2.758l.734-.184h.736l.734-.184.737-.184.552-.184.734-.368.734-.184.552-.368.55-.368.552-.368.552-.368.55-.368.55-.552.551-.368.552-.552.368-.552.368-.552.552-.552.368-.55.368-.552.184-.735.368-.552.184-.734.368-.552.184-.734.184-.736v-.55l.184-.735v-2.206l-28.665 1.102zm39.691 41.161-.55-.368-.736-.368-.55-.368-.735-.368-.55-.368-.736-.184-.55-.184-.734-.184-.737-.184-.55-.183h-.734l-.736-.184h-2.021l-.734.184h-.734l-.552.183-.734.184-.55.184-.735.184-.736.368-.552.184-.55.368-.736.368-.552.368-.55.552-.55.368-.55.55-.553.368-.368.552-.55.55-.368.734-.368.553-.368.552-.368.736-.368.552-.184.734-.184.736-.184.552-.184.734-.184.736-.184.552v2.757l.184.736v.734l.184.736.184.552.184.735.184.55.368.736.184.552.368.734.368.552.368.552.368.552.55.552.368.552.552.552.55.367.55.552 17.64-22.785z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m313.073 513.092 11.944-7.718-1.102.184h-4.226l-.918-.184h-1.836l-.736-.184-.735-.184h-.736l-.734-.184-.736-.184-.552-.183-.55-.184-.55-.184h-.55l-.369-.184-.55-.368-.368-.184-.368-.184-.368-.183-.368-.184-.368-.184.55.184-17.64 22.784.55.369 1.102.736 1.287.918 1.286.736 1.286.734 1.47.552 1.287.552 1.47.553 1.286.552 1.47.552 1.47.367 1.471.369 1.287.368 1.47.184 1.654.368 1.47.184 1.47.183 1.471.184h1.654l1.47.184h6.434l1.47-.184 12.128-7.717z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M326.487 534.04h.736l.734-.185h.736l.735-.184.734-.183.552-.369.734-.184.55-.368.736-.184.55-.368.55-.368.551-.366.55-.552.552-.366.552-.552.368-.552.55-.369.369-.552.368-.552.368-.736.368-.552.368-.552.184-.734.368-.552.184-.736.184-.55.184-.735.184-.736v-4.409l-.184-.736-.184-.552-.184-.734-.184-.736-.368-.55-.184-.735-.368-.552-.368-.552-.368-.736-.368-.552-.552-.552-.368-.368-.55-.552-.369-.552-.552-.368-.552-.55-.55-.369-.55-.368-.736-.368-.55-.184-.553-.368-.734-.184-.736-.184-.552-.184-.734-.183-.736-.184h-.734l-.737-.184h-1.47l1.47 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m313.808 511.805-.368.552-.368.734 25.542 13.23.55-1.286.368-.552z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m339.533 524.484.185-.734.368-.552.184-.736.184-.735.184-.736.184-.55v-.734l.184-.736v-2.021l-.184-.736v-.734l-.184-.552-.184-.736-.184-.734-.368-.55-.184-.737-.369-.55-.183-.552-.369-.552-.368-.734-.55-.552-.368-.552-.55-.368-.368-.55-.55-.552-.55-.367-.553-.368-.736-.55-.55-.368-.734-.368-.55-.184-.736-.368-.735-.184-.55-.184-.736-.184-.734-.184h-.734l-.736-.184h-1.285l-.736.184h-.734l-.552.184h-.736l-.735.184-.552.184-.736.367-.55.184-.734.368-.55.368-.55.184-.553.552-.55.368-.55.368-.552.552-.55.368-.368.55-.55.553-.369.552-.368.734-.368.552-.368.734 25.725 12.679zM323.73 461.09v2.206l.185.734v.736l.184.552.184.735.184.734.184.552.368.734.184.552.368.552.368.736.368.552.368.552.55.553.368.55.552.368.55.55.369.368.55.368.736.552.55.369.552.184.734.368.552.368.735.184.552.184.734.184.736.184h.734l.736.184h2.941l.734-.184.55-.184.735-.184.736-.184.55-.184.734-.368.552-.184.736-.368.55-.369.55-.368.551-.368.55-.552.552-.369.368-.552.55-.367.369-.552.368-.55.55-.553.368-.734.184-.552.368-.552.368-.734.184-.736.184-.552.184-.735.184-.734.184-.736v-.734l-28.665-2.206z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M325.201 433.16v3.858l-.184 3.86-.184 3.674-.184 3.675-.184 3.675-.368 3.676-.184 3.49-.184 2.022 28.665 2.205.184-2.205.184-3.675.366-3.859.184-3.859.184-3.858.184-3.86.184-3.858v-4.042zm28.665.919v-2.207l-.184-.734v-.736l-.184-.734-.368-.552-.184-.736-.184-.552-.368-.735-.368-.552-.368-.552-.368-.552-.368-.736-.368-.368-.552-.552-.366-.552-.552-.366-.55-.552-.553-.369-.552-.367-.55-.369-.734-.366-.552-.368-.55-.184-.737-.367-.734-.184-.55-.184-.736-.184h-.734l-.736-.184h-2.205l-.734.184h-.736l-.734.184-.55.184-.737.184-.734.184-.55.368-.736.184-.55.368-.553.368-.55.366-.552.368-.55.55-.55.368-.55.552-.369.552-.55.369-.368.552-.368.552-.368.734-.368.552-.368.552-.184.734-.184.55-.368.737-.184.734v.734l-.184.736v.734l-.184.736 28.665.919zm-27.379-58.249v1.47l.184.734v.734l.184.736.184.735.184.552.368.736.184.552.368.734.368.552.368.552.368.552.368.552.368.552.55.552.55.552.369.368.55.552.55.366.55.368.736.368.55.369.553.184.734.367.736.184.552.184.734.184.736.184h.735l.736.184h2.204l.734-.184h.553l.736-.184.734-.184.736-.184.552-.368.734-.184.55-.368.552-.368.737-.366.552-.369.55-.368.55-.368.368-.552.55-.368.55-.552.369-.552.368-.552.368-.552.368-.734.368-.55.368-.553.184-.736.184-.55.184-.734.184-.734.184-.736.184-.735v-1.47l-28.665-.55zm.735-28.85v.184l-.184 9.004-.368 9.004-.184 9.003v1.654l28.665.553v-1.47l.368-9.005.184-8.82.368-9.004zm28.849 1.103v-.919l-.184-.552v-.736l-.184-.734v-.736l-.184-.734-.184-.552-.368-.736-.184-.735-.368-.552-.184-.552-.368-.736-.368-.552-.55-.55-.368-.552-.368-.368-.552-.553-.55-.552-.553-.367-.552-.369-.55-.552-.55-.184-.55-.366-.735-.368-.55-.368-.736-.184-.55-.184-.734-.184-.737-.183-.734-.184h-3.675l-.736.184-.55.183-.734.184-.736.184-.55.184-.735.184-.552.366-.736.368-.552.368-.552.369-.55.368-.55.368-.552.552-.368.368-.552.552-.368.552-.55.552-.369.55-.368.552-.368.735-.184.552-.368.734-.184.552-.184.734-.184.736-.184.552-.184.735v.736l-.184.734 28.849 1.102zm-24.991-59.168-.183.734v.736l.184.735v1.288l.184.734.184.734.184.736.184.552.368.735.184.552.368.552.368.734.368.552.368.552.368.552.55.552.368.368.55.552.55.368.551.55.552.369.552.366.55.368.735.368.55.184.736.368.55.184.734.184.736.184h.735l.734.184h2.94l.737-.184h.552l.734-.184.736-.184.55-.184.734-.368.55-.184.737-.368.552-.368.55-.366.55-.369.55-.367.55-.55.553-.369.368-.55.55-.552.368-.552.368-.552.368-.552.368-.735.368-.552.184-.552.368-.734.184-.734.184-.552.184-.734.184-.735v-.736l-28.482-2.756zm3.676-29.216-.55 4.042-.735 4.594-.55 4.594-.55 4.594-.552 4.777-.55 4.594-.185 2.021 28.482 2.756.184-1.837.55-4.41.552-4.41.552-4.41.55-4.41.55-4.227.553-4.042z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m363.054 263.925.184-.735v-2.938l-.184-.736v-.552l-.184-.735-.184-.734-.368-.552-.184-.734-.184-.552-.368-.736-.369-.552-.368-.552-.368-.55-.368-.553-.552-.552-.55-.552-.368-.368-.552-.552-.552-.368-.55-.368-.55-.368-.737-.369-.55-.367-.734-.369-.55-.184-.736-.184-.735-.183-.736-.184-.55-.184h-.734l-.734-.184h-1.471l-.736.184h-.734l-.736.184-.55.184-.734.183-.737.184-.552.184-.734.369-.55.367-.552.369-.552.368-.55.368-.55.368-.553.368-.55.552-.55.552-.368.552-.368.552-.55.55-.368.553-.184.552-.368.736-.368.552-.185.734-.183.552-.369.734v.735l-.184.736 28.299 4.226zm-14.517-62.475-.184.734-.184.736-.184.552-.184.734v3.493l.184.734.184.734v.734l.368.552.184.737.184.552.368.734.368.552.184.552.55.552.368.552.368.55.55.552.369.552.552.369.55.552.55.367.552.369.55.368.735.368.55.368.736.184.734.366.734.184.736.184.553.184h.734l.736.184h2.204l.55-.184h.737l.734-.184.55-.184.736-.184.734-.184.55-.368.553-.184.736-.368.552-.368.55-.368.55-.368.55-.552.55-.368.553-.552.368-.368.55-.552.368-.552.368-.735.368-.55.368-.552.368-.736.184-.734.368-.552zm11.393-28.115-.736 1.655-.918 1.838-.919 2.02-.918 2.022-.918 2.021-.918 2.021-.735 2.022-.918 2.205-.734 2.021-.736 2.021-.918 2.022-.735 2.204-.736 2.022-.552 2.021 27.196 9.188.55-1.838.734-1.837.55-1.838.737-1.838.734-1.837.734-1.838.552-1.837.734-1.654.919-1.837.734-1.838.736-1.654.734-1.838.919-1.654.734-1.655z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m385.839 185.647.368-.736.184-.55.184-.735.184-.734.184-.736.184-.552v-.734l.184-.737v-1.47l-.184-.552v-.734l-.184-.736-.184-.734-.184-.552-.184-.737-.184-.552-.368-.734-.184-.552-.368-.552-.368-.552-.368-.736-.368-.552-.55-.368-.55-.552-.369-.552-.55-.367-.552-.552-.55-.366-.735-.368-.552-.368-.734-.368-.552-.368-.736-.184-.734-.184-.735-.184-.55-.184-.736-.183h-.734l-.736-.184h-1.286l-.736.184h-.735l-.736.183-.55.184-.734.184-.552.184-.736.184-.55.368-.735.184-.552.367-.55.367-.55.367-.55.369-.553.552-.55.367-.55.553-.368.552-.55.552-.368.55-.368.734-.368.552-.368.734 25.908 12.312zm11.025-62.659-.552.368-.55.552-.368.552-.552.552-.368.734-.368.552-.368.552-.184.735-.368.552-.185.734-.184.552-.184.734-.184.734-.184.552v3.491l.184.734v.735l.184.552.184.734.184.552.369.736.184.734.368.552.368.552.368.735.55.552.368.552.55.552.55.552.368.368.55.552.737.368.55.552.552.184.552.368.734.366.55.184.737.368.734.184.55.184h.736l.734.184h.552l.736.184h1.471l.552-.184h.734l.736-.184.552-.184.734-.184.736-.184.552-.184.735-.367.55-.369.552-.366.736-.368.55-.368.55-.552.55-.368-19.477-20.948z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m422.405 104.245-1.654.918-2.021 1.102-1.838 1.287-2.021 1.286-1.838 1.102-1.837 1.287-1.838 1.47-1.837 1.286-1.654 1.286-1.838 1.47-1.654 1.287-1.654 1.47-1.655 1.47-1.654 1.471-.55.552 19.477 20.947.184-.366 1.47-1.102 1.287-1.102 1.286-1.103 1.47-1.102 1.287-1.102 1.47-1.102 1.47-1.103 1.47-1.102 1.471-.918 1.47-1.103 1.47-.918 1.655-.918 1.47-.918 1.838-1.103zm14.701 24.622.552-.367.552-.369.55-.552.55-.367.55-.552.552-.552.368-.369.552-.734.368-.552.368-.552.368-.552.184-.552.368-.734.184-.552.184-.735.184-.734.184-.552.184-.734v-.734l.183-.553v-2.202l-.183-.552v-.735l-.184-.734-.184-.734-.184-.55-.368-.735-.184-.734-.368-.552-.368-.734-.368-.552-.368-.552-.552-.552-.368-.552-.552-.552-.55-.552-.55-.369-.55-.552-.552-.368-.55-.368-.553-.368-.734-.368-.55-.184-.736-.184-.552-.368-.735-.184h-.55l-.736-.184-.734-.184h-2.755l-.736.184h-.55l-.734.184-.736.184-.55.184-.735.183-.736.368-.55.368-.734.368 14.7 24.623zM481.757 84.4l-.736.184-.734.184-.736.183-.55.184-.735.369-.552.183-.736.368-.552.369-.55.367-.55.369-.552.552-.55.368-.553.552-.367.368-.552.552-.368.552-.369.552-.367.552-.369.735-.368.552-.184.552-.368.734-.184.734-.184.55-.184.735-.184.734v1.286l-.183.734.183.735v1.468l.184.734.184.735.184.734.184.734.368.552.184.734.368.552.369.553.367.734.369.552.552.552.368.368.552.552.368.552.55.369.553.368.55.552.55.368.736.184.55.368.553.368.734.184.736.184.55.184.734.184.736.184h.735l.55.183h1.47l.736-.183h.734l-4.226-28.482z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M512.26 82.195h-3.49l-2.94.184h-2.94l-2.94.183-2.757.184-2.756.184-2.757.368-2.756.184-2.756.368-2.756.368-1.655.184 4.226 28.481 1.287-.184 2.388-.368 2.39-.183 2.388-.369 2.389-.184 2.389-.183 2.572-.184 2.572-.184h2.39l2.755-.184h3.123z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M512.627 110.86h.736l.734-.184h.735l.736-.184.734-.184.55-.184.736-.184.735-.367.55-.184.55-.369.736-.368.55-.368.55-.368.553-.552.367-.368.552-.552.55-.368.368-.552.369-.552.552-.552.184-.734.367-.55.369-.553.367-.734.184-.552.184-.734.184-.734.184-.552v-.735l.184-.734v-2.937l-.184-.734-.184-.734-.184-.735-.184-.552-.184-.734-.183-.552-.369-.734-.367-.552-.369-.552-.368-.735-.368-.552-.368-.552-.55-.367-.368-.552-.552-.553-.55-.368-.552-.368-.55-.368-.55-.368-.735-.368-.55-.368-.55-.184-.737-.368-.734-.184-.552-.184-.736-.184h-.734l-.736-.184h-1.471l.369 28.665zm57.514-27.747h-1.472l-.736.184-.736.184h-.736l-.55.184-.736.184-.737.368-.55.184-.55.368-.736.368-.55.368-.556.368-.55.369-.55.367-.55.552-.37.552-.55.368-.365.552-.37.552-.55.735-.364.552-.186.552-.37.734-.182.552-.37.734-.186.552-.182.734-.186.735v1.468l-.186.734v.735l.186.734v.734l.186.734v.552l.182.735.37.734.186.55.182.736.37.55.364.552.37.735.364.552.37.552.55.552.364.368.556.552.55.552.55.367.55.369.55.368.557.368.55.368.736.368.55.184.736.184.55.367h.736l.736.184.737.184h1.472l.55-28.665zm28.666.552-.55 28.665-28.666-.552.55-28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M598.257 112.33h2.202l.737-.184.736-.184.556-.184.736-.184.73-.183.556-.368.55-.184.736-.368.55-.369.55-.367.551-.552.556-.369.55-.368.365-.552.555-.552.364-.552.365-.552.37-.552.364-.552.37-.735.364-.55.186-.552.37-.734.182-.734.186-.735v-.552l.186-.734v-.734l.186-.734v-.735l-.186-.734v-.734l-.186-.734-.186-.735v-.734l-.364-.552-.186-.734-.186-.552-.364-.734-.37-.552-.364-.552-.37-.553-.365-.552-.55-.552-.37-.552-.55-.552-.55-.367-.55-.369-.55-.552-.556-.368-.55-.368-.55-.184-.737-.368-.55-.368-.736-.184-.736-.184-.55-.183-.736-.184h-.737l-.736-.184h-.736l-.55 28.665zm57.878-27.563h-1.467l-.736.184h-.736l-.556.184-.73.184-.737.184-.555.368-.736.184-.55.368-.55.368-.737.368-.55.368-.55.368-.556.368-.364.552-.55.552-.55.369-.37.552-.365.552-.37.734-.364.552-.37.552-.364.734-.186.552-.186.734-.182.553-.186.734-.186.734-.186.734v3.671l.186.735.186.552.186.734.182.736.186.55.364.735.186.552.37.552.364.734.37.552.55.552.364.552.37.368.55.552.55.552.55.368.556.368.55.368.55.368.737.368.55.368.55.184.737.184.736.184.736.184.55.183.736.184h1.472l.55-28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m684.8 85.318-.55 28.666-28.666-.552.55-28.665zm-.55 28.666h2.209l.736-.184.736-.184.736-.184.55-.184.736-.184.55-.368.737-.184.55-.368.55-.368.556-.368.55-.552.55-.368.55-.368.55-.552.37-.552.55-.552.37-.553.365-.552.37-.552.364-.734.186-.552.364-.552.186-.734.186-.734.182-.735.186-.55v-.734l.186-.734v-2.203l-.186-.734v-.735l-.186-.734-.182-.734-.186-.552-.364-.734-.186-.552-.37-.735-.364-.552-.37-.552-.365-.552-.37-.552-.364-.552-.55-.552-.55-.552-.37-.368-.55-.368-.55-.552-.556-.368-.736-.369-.55-.183-.55-.369-.737-.368-.736-.184-.55-.184-.736-.184-.736-.184h-.736l-.736-.183h-.737l-.55 28.665zm58.068-27.563h-1.472l-.736.184h-.736l-.736.184-.736.184-.55.184-.736.367-.55.184-.737.369-.555.368-.55.368-.55.368-.55.368-.551.368-.556.552-.55.552-.365.368-.55.552-.37.552-.364.735-.37.552-.364.552-.186.734-.37.552-.182.734-.186.552-.186.734-.186.735v.734l-.183.734v2.203l.183.734v.736l.186.55.186.735.186.734.364.552.186.734.364.552.37.552.364.735.37.552.364.552.37.552.55.368.365.552.555.55.55.369.551.367.55.369.736.367.55.369.556.367.736.184.55.184.737.184.736.184.736.184.736.184h1.466l.556-28.665zm28.662.551-.55 28.665-28.667-.552.556-28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M770.43 115.637h2.207l.55-.183.737-.184.736-.184.736-.184.55-.184.736-.368.55-.184.556-.367.736-.369.55-.367.55-.552.55-.369.37-.368.55-.552.366-.55.555-.552.365-.552.37-.552.364-.552.364-.734.37-.552.186-.552.182-.735.186-.734.186-.734.186-.552.182-.734v-3.672l-.182-.734-.186-.734-.186-.734-.186-.552-.182-.735-.37-.552-.186-.734-.364-.552-.364-.55-.37-.552-.55-.552-.37-.552-.55-.552-.365-.552-.555-.368-.55-.368-.55-.553-.551-.367-.55-.369-.736-.183-.556-.369-.73-.368-.556-.183-.736-.184-.736-.184-.55-.184h-.737l-.736-.184h-.736l-.55 28.665zm57.882-27.562h-1.472l-.736.184h-.736l-.737.183-.55.184-.736.184-.736.184-.55.368-.55.369-.736.184-.55.368-.556.552-.55.368-.55.368-.551.552-.37.368-.55.552-.365.552-.37.552-.55.55-.364.552-.186.734-.37.552-.182.735-.37.552-.186.734-.182.734-.186.734v1.287l-.186.734v.734l.186.736v.735l.186.734v.734l.182.734.37.552.186.735.182.552.37.734.364.552.37.552.364.552.37.552.55.55.364.552.556.552.55.368.55.552.55.368.551.368.556.369.55.367.736.184.55.368.736.184.55.184.737.184.736.183h.736l.736.184h.736l.55-28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "m857.163 88.81-5.697-.184-5.882-.184-6.063-.184-5.882-.184h-5.327l-.55 28.666 5.327.183h5.882l5.877.184 5.698.184 5.697.184z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            stroke: "none",
            d: "M856.243 117.475h1.472l.736-.184h.736l.736-.184.736-.184.55-.184.736-.183.55-.369.737-.184.55-.368.55-.368.55-.368.556-.552.55-.368.55-.368.55-.552.37-.552.55-.55.365-.552.37-.553.364-.552.37-.552.364-.734.186-.552.186-.734.365-.734.186-.552v-.735l.186-.734v-.734l.182-.734v-.735l-.182-.734v-.734l-.186-.734v-.735l-.186-.552-.182-.734-.37-.552-.186-.734-.365-.552-.37-.734-.364-.553-.37-.55-.364-.552-.364-.552-.556-.552-.365-.368-.55-.552-.556-.368-.55-.552-.55-.368-.55-.368-.736-.368-.55-.184-.737-.368-.555-.184-.73-.184-.737-.184-.556-.184-.736-.184h-1.466l-.92 28.666z"
          }
        )
      ]
    }
  );
  var Overlay_default = SvgOverlay;

  // build/lib-react-tsx/isotherm/Assignment.tsx
  var React44 = __toESM(require_react(), 1);
  var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment4 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
          "path",
          {
            stroke: "none",
            d: "M111.035 811.032c0 12.99 8.7 23.41 19.543 23.41 10.725 0 19.421-10.42 19.421-23.408zm0 0V162.018H150v649.018zM150 162.016c0-12.848-8.696-23.266-19.421-23.266-10.844 0-19.545 10.418-19.545 23.266z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m130.575 131.361 49.93 65.898m-99.856 0 49.929-65.898"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
          "path",
          {
            stroke: "none",
            d: "M150.002 811.032c-14.71 0-26.508 8.701-26.508 19.426 0 10.841 11.798 19.543 26.505 19.543zm0 0h734.904V850H150zM884.906 850c14.546 0 26.344-8.702 26.344-19.545 0-10.723-11.798-19.422-26.344-19.422z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m918.636 830.458-65.895 50.045m0-99.974 65.895 49.927"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 31.633,
            d: "M219.63 767.864c76.235-2.828 156.833-70.087 163.185-205.926s-23.838-275.492 76.879-289.503c104.441-16.444 364.288-20.985 382.09-23.471"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-292.485 1123.486q0 4.46-1.397 8.382-1.37 3.922-3.654 6.663-2.31 2.82-5.373 4.46-3.062 1.611-6.528 1.611-2.418 0-4.46-.564-2.015-.537-3.68-1.585l-2.902 12.627h-5.05l9.483-41.078h5.05l-.725 3.144q2.499-1.747 4.917-2.848 2.418-1.129 5.346-1.129 4.38 0 6.663 2.714 2.31 2.713 2.31 7.603m-5.292.967q0-3.197-1.397-4.916-1.397-1.747-4.46-1.747-2.23 0-4.621 1.102-2.391 1.101-4.46 2.498l-3.922 17.006q1.746.94 3.331 1.397t3.842.457q2.767 0 4.97-1.343 2.23-1.344 3.68-3.493 1.532-2.257 2.284-5.024.753-2.767.753-5.937",
            fontFamily: "sans-serif",
            fontSize: 80.847,
            fontWeight: 400,
            style: {
              lineHeight: 1.25
            },
            transform: "translate(1485.641 -1771.974)scale(2.37485)"
          }
        )
      ]
    }
  );
  var Assignment_default4 = SvgAssignment4;

  // build/lib-react-tsx/iv/Assignment.tsx
  var React45 = __toESM(require_react(), 1);
  var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment5 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: "M250 710.809a19.66 19.66 0 0 0-19.662 19.662A19.66 19.66 0 0 0 250 750.133h683.604a19.66 19.66 0 0 0 19.66-19.662 19.66 19.66 0 0 0-19.66-19.662z" }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: "M947.408 710.81a19.66 19.66 0 0 0-11.734 4.004l-51.27 38.956a19.66 19.66 0 0 0-3.761 27.55 19.66 19.66 0 0 0 27.55 3.76l51.27-38.955a19.66 19.66 0 0 0 3.76-27.549 19.66 19.66 0 0 0-15.815-7.765z" }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: "M896.352 672.04a19.66 19.66 0 0 0-15.737 7.802 19.66 19.66 0 0 0 3.824 27.54l51.27 38.77a19.66 19.66 0 0 0 27.541-3.822 19.66 19.66 0 0 0-3.822-27.54l-51.272-38.772a19.66 19.66 0 0 0-11.804-3.979zM199.373 261.646h-37.218l-9.657-28.219h-51.75l-9.656 28.22H54.811l51.562-139.595h41.438zm-55.593-53.812-17.157-50.063-17.156 50.063zm720.299 608.504-50.907 139.594H772.86l-50.906-139.594h37.78l33.75 98.063 33.75-98.063zM230.34 733.603A19.66 19.66 0 0 0 250 753.265a19.66 19.66 0 0 0 19.662-19.662V50a19.66 19.66 0 0 0-19.663-19.66A19.66 19.66 0 0 0 230.34 50z" }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: "M230.34 36.195a19.66 19.66 0 0 0 4.005 11.734L273.3 99.2a19.66 19.66 0 0 0 27.55 3.761 19.66 19.66 0 0 0 3.76-27.55l-38.954-51.27a19.66 19.66 0 0 0-27.551-3.76 19.66 19.66 0 0 0-7.766 15.815z" }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: "M191.568 87.252a19.66 19.66 0 0 0 7.803 15.736 19.66 19.66 0 0 0 27.54-3.824l38.772-51.27a19.66 19.66 0 0 0-3.824-27.54 19.66 19.66 0 0 0-27.541 3.821l-38.77 51.272a19.66 19.66 0 0 0-3.98 11.805z" }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          "path",
          {
            fill: "none",
            stroke: "#000",
            strokeWidth: 50,
            d: "M300 650s161.104-239.59 235.714-322.857C627.73 224.452 750 188.57 800 188.57S850 650 850 650"
          }
        )
      ]
    }
  );
  var Assignment_default5 = SvgAssignment5;

  // build/lib-react-tsx/logo/Nmrium.tsx
  var React46 = __toESM(require_react(), 1);
  var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
  var SvgNmrium = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      "data-name": "Layer 1",
      viewBox: "0 0 120 120",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
          "path",
          {
            fill: "#ea580c",
            fillRule: "evenodd",
            d: "M24.1 10.06v68.17A13.36 13.36 0 0 0 28 87.7a13.39 13.39 0 0 0 22.85-9.47V55.42h-.06A31.6 31.6 0 0 1 60.1 33a31.64 31.64 0 0 1 44.79 0 31.6 31.6 0 0 1 9.31 22.4v18.7H95.9V55.42A13.36 13.36 0 0 0 92 46a13.44 13.44 0 0 0-18.93 0 13.26 13.26 0 0 0-3.82 8.19v24.04a31.7 31.7 0 0 1-54.12 22.42 31.6 31.6 0 0 1-9.31-22.4V10.06Z"
          }
        )
      ]
    }
  );
  var Nmrium_default = SvgNmrium;

  // build/lib-react-tsx/logo/Wikipedia.tsx
  var React47 = __toESM(require_react(), 1);
  var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
  var SvgWikipedia = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fillRule: "evenodd",
      strokeMiterlimit: 10,
      shapeRendering: "geometricPrecision",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("path", { d: "M959.383 225.814c0 3.326-1.054 6.327-3.082 9.085-2.109 2.677-4.299 4.055-6.813 4.055-20.197 1.947-36.825 8.436-49.64 19.548-12.897 11.031-26.118 32.201-39.826 63.348L650.756 793.43c-1.38 4.38-5.192 6.57-11.518 6.57-4.948 0-8.76-2.19-11.518-6.57L510.352 547.988 375.383 793.43c-2.757 4.38-6.57 6.57-11.517 6.57q-9.004 0-11.924-6.57L146.326 321.85q-19.224-43.922-40.637-61.32c-14.195-11.599-34.067-18.818-59.455-21.576-2.19 0-4.298-1.135-6.164-3.487-1.947-2.271-2.92-4.948-2.92-7.95 0-7.705 2.19-11.517 6.57-11.517 18.331 0 37.473.811 57.508 2.433 18.574 1.704 36.094 2.515 52.479 2.515 16.709 0 36.419-.811 59.13-2.515 23.765-1.622 44.854-2.433 63.185-2.433 4.38 0 6.57 3.812 6.57 11.518 0 7.624-1.379 11.436-4.055 11.436-18.331 1.38-32.77 6.084-43.314 13.952-10.544 7.948-15.816 18.33-15.816 31.227q0 9.855 6.57 24.577l169.927 383.737 96.442-182.176-89.872-188.421c-16.14-33.58-29.443-55.318-39.825-65.051-10.382-9.652-26.118-15.655-47.207-17.845-1.946 0-3.73-1.135-5.515-3.487-1.785-2.271-2.677-4.948-2.677-7.95 0-7.705 1.866-11.517 5.759-11.517 18.331 0 35.121.811 50.451 2.433 14.762 1.704 30.498 2.515 47.207 2.515 16.384 0 33.742-.811 52.073-2.515 18.899-1.622 37.473-2.433 55.804-2.433 4.38 0 6.57 3.812 6.57 11.518 0 7.624-1.297 11.436-4.055 11.436-36.662 2.515-54.993 12.897-54.993 31.228 0 8.192 4.217 20.927 12.734 38.122l59.454 120.694 59.13-110.392c8.193-15.574 12.33-28.714 12.33-39.42 0-25.145-18.332-38.528-54.994-40.232-3.326 0-4.948-3.812-4.948-11.436q0-4.137 2.434-7.787c1.703-2.514 3.325-3.731 4.947-3.731q19.71 0 48.424 2.433c18.33 1.704 33.417 2.515 45.179 2.515 8.435 0 20.926-.73 37.31-2.11 20.765-1.865 38.204-2.838 52.155-2.838 3.245 0 4.867 3.244 4.867 9.814q0 13.14-9.004 13.14c-21.332 2.19-38.527 8.112-51.505 17.683s-29.2 31.309-48.586 65.213l-78.84 145.757 106.743 217.459 157.598-366.46c5.435-13.384 8.193-25.713 8.193-36.906 0-26.848-18.331-41.042-54.994-42.746-3.325 0-4.947-3.812-4.947-11.436 0-7.706 2.433-11.518 7.38-11.518 13.384 0 29.282.811 47.613 2.433 16.952 1.704 31.228 2.515 42.664 2.515 12.086 0 26.037-.811 41.854-2.515 16.465-1.622 31.227-2.433 44.367-2.433 3.813 0 5.76 3.244 5.76 9.814" })
      ]
    }
  );
  var Wikipedia_default = SvgWikipedia;

  // build/lib-react-tsx/logo/Zakodium.tsx
  var React48 = __toESM(require_react(), 1);
  var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
  var SvgZakodium = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      id: "Layer_1",
      "data-name": "Layer 1",
      viewBox: "0 0 588.44 588.44",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("style", { children: ".cls-1{fill:#2b143e}" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("circle", { cx: 93.23, cy: 398.47, r: 56.95, className: "cls-1" }),
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
          "path",
          {
            d: "M528.16 397.39V455H279l-.46.46h-72.77l.47-.46 44.21-57.57 79.21-102.71 36.39-47 44.21-57.11H205.31V133h321.47l-44.67 57.6L402 294.68l-36.38 47-43.3 55.73Z",
            className: "cls-1"
          }
        )
      ]
    }
  );
  var Zakodium_default = SvgZakodium;

  // build/lib-react-tsx/mass/Impurities.tsx
  var React49 = __toESM(require_react(), 1);
  var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
  var SvgImpurities = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 45.698,
            d: "M42.643 722.441h889.73m14.06 0-51.622 39.223m0-78.259 51.622 39.036"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "path",
          {
            stroke: "none",
            d: "M285.195 53.989c0-8.88-7.216-16.096-16.096-16.096-8.696 0-15.912 7.215-15.912 16.096zm0 0v658.279h-32.008V53.989zm-32.008 658.279c0 8.879 7.216 16.096 15.912 16.096 8.88 0 16.096-7.217 16.096-16.096zM674.83 421.24c0-8.88-7.03-16.096-15.909-16.096s-15.91 7.215-15.91 16.096zm0 0v291.028h-31.819V421.24zm-31.819 291.028c0 8.879 7.031 16.096 15.91 16.096s15.91-7.217 15.91-16.096z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "path",
          {
            stroke: "none",
            d: "M605.225 953.334h-26.807v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.932-5.362-5.097 0-8.525 2.11-3.34 2.11-5.362 6.24-2.021 4.13-2.9 10.195t-.879 13.887v46.23H520.85v-98.261h20.478l3.604 12.568h1.494q2.11-3.78 5.01-6.504 2.988-2.724 6.503-4.482t7.471-2.55q3.955-.878 7.998-.878 10.108 0 17.139 3.516 7.119 3.427 10.898 10.898h2.197q2.11-3.78 5.098-6.504t6.592-4.482q3.603-1.758 7.559-2.55 4.043-.878 8.085-.878 15.82 0 23.819 8.613 8.086 8.526 8.086 27.422v64.072h-26.895v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.931-5.362-9.58 0-13.623 7.647-4.043 7.558-4.043 21.709zm144.492-128.496-47.9 128.496H677.47l47.9-128.496Zm78.134 128.496h-72.246v-15.82l40.166-61.963H758.33v-20.478h67.852v17.402l-38.848 60.38h40.517z",
            fontFamily: "sans-serif",
            fontSize: 180,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: "125%"
            },
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "path",
          {
            stroke: "none",
            d: "M834.83 640c0-2.266-7.03-4.107-15.909-4.107s-15.91 1.841-15.91 4.107zm0 0v74.257h-31.819V640Zm-31.819 74.257c0 2.265 7.031 4.107 15.91 4.107s15.91-1.842 15.91-4.107zM764.83 632c0-2.266-7.03-4.107-15.909-4.107s-15.91 1.841-15.91 4.107zm0 0v74.257h-31.819V632Zm-31.819 74.257c0 2.265 7.031 4.107 15.91 4.107s15.91-1.842 15.91-4.107zM581.82 650c0-2.266-7.032-4.107-15.91-4.107-8.88 0-15.91 1.841-15.91 4.107Zm0 0v74.257H550V650ZM550 724.257c0 2.265 7.03 4.107 15.91 4.107 8.878 0 15.91-1.842 15.91-4.107zM441.82 650c0-2.266-7.031-4.107-15.91-4.107S410 647.734 410 650Zm0 0v74.257H410V650ZM410 724.257c0 2.265 7.03 4.107 15.91 4.107 8.878 0 15.91-1.842 15.91-4.107zM161.82 650c0-2.266-7.031-4.107-15.91-4.107S130 647.734 130 650Zm0 0v74.257H130V650ZM130 724.257c0 2.265 7.03 4.107 15.91 4.107s15.91-1.842 15.91-4.107z"
          }
        )
      ]
    }
  );
  var Impurities_default = SvgImpurities;

  // build/lib-react-tsx/mass/Monoisotopic.tsx
  var React50 = __toESM(require_react(), 1);
  var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
  var SvgMonoisotopic = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeWidth: 1.176,
            d: "M49.263 749.728v49.904h762.035v49.905l138.552-71.668-138.552-78.045v49.904z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", { d: "M100 585v30h600v-30z" }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", { d: "M298.738 243.77v350h30v-350zM700 585v30h150v-30z" }),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
          "path",
          {
            stroke: "none",
            d: "M115.334 112.207q0 6.68-2.197 12.04-2.11 5.274-5.889 9.317-3.691 3.955-8.79 6.68-5.009 2.637-10.898 4.043v.527q15.557 1.934 23.555 9.492 7.998 7.471 7.998 20.215 0 8.438-3.076 15.645-2.988 7.119-9.316 12.392-6.24 5.274-15.82 8.262-9.493 2.9-22.413 2.9-10.37 0-19.511-1.757-9.141-1.67-17.051-5.186v-23.115q3.955 2.11 8.35 3.691 4.394 1.582 8.788 2.725 4.395 1.054 8.614 1.582 4.306.527 8.086.527 7.558 0 12.568-1.406t7.998-3.955 4.219-6.065q1.318-3.603 1.318-7.822 0-3.955-1.67-7.119-1.582-3.252-5.273-5.45-3.604-2.284-9.492-3.515-5.89-1.23-14.502-1.23h-9.141v-19.073h8.965q8.086 0 13.447-1.406 5.361-1.494 8.526-3.955 3.251-2.549 4.57-5.889 1.318-3.34 1.318-7.119 0-6.855-4.306-10.722-4.22-3.868-13.448-3.868-4.218 0-7.91.88-3.603.79-6.767 2.109-3.077 1.23-5.713 2.812-2.55 1.494-4.659 2.988l-13.71-18.105q3.69-2.725 7.998-5.01 4.394-2.285 9.492-3.955 5.097-1.758 10.986-2.724t12.568-.967q9.493 0 17.227 2.11 7.822 2.02 13.36 5.976 5.536 3.867 8.525 9.58 3.076 5.625 3.076 12.92m104.326 35.508q0 15.556-2.46 27.773-2.374 12.217-7.735 20.742-5.274 8.526-13.711 13.008-8.35 4.482-20.215 4.482-11.162 0-19.424-4.482t-13.71-13.008-8.175-20.742q-2.636-12.217-2.636-27.773 0-15.557 2.373-27.862 2.46-12.305 7.734-20.83t13.623-13.008q8.35-4.57 20.215-4.57 11.074 0 19.336 4.482t13.799 13.008 8.261 20.83 2.725 27.95m-60.996 0q0 21.972 3.78 33.046 3.779 11.075 13.095 11.075 9.14 0 13.096-10.987 4.043-10.986 4.043-33.134 0-22.061-4.043-33.135-3.955-11.162-13.096-11.162-4.658 0-7.91 2.812-3.164 2.813-5.186 8.35t-2.9 13.886q-.879 8.262-.879 19.249m160.136 0q0 15.556-2.46 27.773-2.373 12.217-7.735 20.742-5.273 8.526-13.71 13.008-8.35 4.482-20.215 4.482-11.162 0-19.424-4.482t-13.711-13.008-8.174-20.742q-2.637-12.217-2.637-27.773 0-15.557 2.373-27.862 2.461-12.305 7.735-20.83 5.273-8.525 13.623-13.008 8.35-4.57 20.215-4.57 11.074 0 19.336 4.482t13.798 13.008 8.262 20.83 2.725 27.95m-60.995 0q0 21.972 3.779 33.046 3.78 11.075 13.096 11.075 9.14 0 13.095-10.987 4.043-10.986 4.043-33.134 0-22.061-4.043-33.135-3.955-11.162-13.095-11.162-4.659 0-7.91 2.812-3.165 2.813-5.186 8.35t-2.9 13.886q-.88 8.262-.88 19.249m76.816 51.679q0-4.13 1.143-6.943 1.23-2.9 3.34-4.658t4.921-2.55 6.065-.79q3.076 0 5.8.79 2.813.792 4.922 2.55 2.11 1.757 3.34 4.658 1.23 2.812 1.23 6.943 0 3.955-1.23 6.768t-3.34 4.658-4.921 2.637q-2.725.879-5.801.879-3.252 0-6.065-.88-2.812-.79-4.922-2.636t-3.34-4.658q-1.142-2.813-1.142-6.768m112.852 12.569h-27.159v-79.806q.088-3.251.176-6.679.176-3.515.264-7.031.176-3.516.264-6.416-.44.527-1.495 1.582l-2.373 2.373q-1.318 1.23-2.724 2.549t-2.725 2.373l-14.766 11.865-13.183-16.348 41.396-32.959h22.325zm120.761 0h-86.22v-18.897l30.234-32.607q5.713-6.153 10.371-11.338 4.658-5.186 7.998-10.108t5.186-10.02q1.845-5.097 1.845-10.986 0-6.503-3.955-10.107-3.867-3.603-10.459-3.603-6.943 0-13.36 3.427-6.415 3.428-13.446 9.756l-14.766-17.49q3.955-3.604 8.262-6.856 4.306-3.34 9.492-5.888 5.186-2.55 11.426-4.043 6.24-1.582 13.974-1.582 9.229 0 16.524 2.549 7.383 2.548 12.568 7.295 5.186 4.658 7.91 11.337 2.813 6.68 2.813 15.03 0 7.558-2.637 14.502-2.637 6.855-7.207 13.535-4.57 6.592-10.635 13.183-5.976 6.504-12.832 13.272l-15.469 15.557v1.23h52.383zm94.131-99.756q0 6.68-2.197 12.04-2.11 5.274-5.889 9.317-3.691 3.955-8.789 6.68-5.01 2.637-10.898 4.043v.527q15.556 1.934 23.554 9.492 7.998 7.471 7.998 20.215 0 8.438-3.076 15.645-2.988 7.119-9.316 12.392-6.24 5.274-15.82 8.262-9.493 2.9-22.413 2.9-10.37 0-19.511-1.757-9.14-1.67-17.051-5.186v-23.115q3.955 2.11 8.35 3.691 4.394 1.582 8.789 2.725 4.394 1.054 8.613 1.582 4.307.527 8.086.527 7.558 0 12.568-1.406t7.998-3.955 4.219-6.065q1.318-3.603 1.318-7.822 0-3.955-1.67-7.119-1.582-3.252-5.273-5.45-3.604-2.284-9.492-3.515-5.889-1.23-14.502-1.23h-9.14v-19.073h8.964q8.086 0 13.447-1.406 5.362-1.494 8.526-3.955 3.252-2.549 4.57-5.889t1.318-7.119q0-6.855-4.306-10.722-4.219-3.868-13.447-3.868-4.22 0-7.91.88-3.604.79-6.768 2.109-3.076 1.23-5.713 2.812-2.549 1.494-4.658 2.988l-13.711-18.105q3.691-2.725 7.998-5.01 4.394-2.285 9.492-3.955 5.098-1.758 10.986-2.724t12.569-.967q9.492 0 17.226 2.11 7.822 2.02 13.36 5.976 5.537 3.867 8.525 9.58 3.076 5.625 3.076 12.92m-107.14 841.127h-26.807v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.932-5.362-5.097 0-8.525 2.11-3.34 2.11-5.362 6.24-2.021 4.13-2.9 10.195t-.879 13.887v46.23H470.85v-98.261h20.478l3.604 12.568h1.494q2.11-3.78 5.01-6.504 2.988-2.724 6.503-4.482t7.471-2.55q3.955-.878 7.998-.878 10.108 0 17.139 3.516 7.119 3.427 10.898 10.898h2.197q2.11-3.78 5.098-6.504t6.592-4.482q3.603-1.758 7.559-2.55 4.043-.878 8.085-.878 15.82 0 23.819 8.613 8.086 8.526 8.086 27.422v64.072h-26.895v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.931-5.362-9.58 0-13.624 7.647-4.042 7.558-4.042 21.709zm144.492-128.496-47.9 128.496H627.47l47.9-128.496zm78.134 128.496h-72.246v-15.82l40.166-61.963H708.33v-20.478h67.852v17.402l-38.848 60.38h40.517z",
            fontFamily: "sans-serif",
            fontSize: 180,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: "125%"
            },
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", { d: "M734.84 433.785v177.117h30V433.785z" })
      ]
    }
  );
  var Monoisotopic_default = SvgMonoisotopic;

  // build/lib-react-tsx/mass/Overlay.tsx
  var React51 = __toESM(require_react(), 1);
  var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
  var SvgOverlay2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          "path",
          {
            stroke: "none",
            d: "M354.945 655.836c0-8.88-6.846-16.096-15.171-16.096-8.51 0-15.357 7.217-15.357 16.096zm0 0v56.432h-30.528v-56.432zm-30.528 56.432c0 8.879 6.846 16.096 15.357 16.096 8.325 0 15.171-7.217 15.171-16.096zm30.528-153.562c0-8.882-6.846-16.097-15.171-16.097-8.51 0-15.357 7.215-15.357 16.097zm0 0v56.426h-30.528v-56.426zm-30.528 56.426c0 8.885 6.846 16.096 15.357 16.096 8.325 0 15.171-7.211 15.171-16.096zm30.528-153.559c0-8.88-6.846-16.096-15.171-16.096-8.51 0-15.357 7.215-15.357 16.096zm0 0v56.429h-30.528v-56.429zm-30.528 56.429c0 8.88 6.846 16.096 15.357 16.096 8.325 0 15.171-7.216 15.171-16.096zm30.528-153.562c0-8.88-6.846-16.095-15.171-16.095-8.51 0-15.357 7.216-15.357 16.096zm0 0v56.43h-30.528v-56.43zm-30.528 56.43c0 8.88 6.846 16.096 15.357 16.096 8.325 0 15.171-7.215 15.171-16.096zm30.528-153.561c0-8.88-6.846-16.096-15.171-16.096-8.51 0-15.357 7.215-15.357 16.096zm0 0v56.614h-30.528v-56.614zm-30.528 56.614c0 8.696 6.846 15.911 15.357 15.911 8.325 0 15.171-7.215 15.171-15.911zm516.556 331.913c0-8.88-6.844-16.096-15.17-16.096-8.51 0-15.168 7.217-15.168 16.096zm0 0v56.432h-30.338v-56.432zm-30.338 56.432c0 8.879 6.658 16.096 15.169 16.096 8.325 0 15.17-7.217 15.17-16.096zm30.338-153.562c0-8.882-6.844-16.097-15.17-16.097-8.51 0-15.168 7.215-15.168 16.097zm0 0v56.426h-30.338v-56.426zm-30.338 56.426c0 8.885 6.658 16.096 15.169 16.096 8.325 0 15.17-7.211 15.17-16.096zm30.338-153.559c0-8.88-6.844-16.096-15.17-16.096-8.51 0-15.168 7.215-15.168 16.096zm0 0v56.429h-30.338v-56.429zm-30.338 56.429c0 8.88 6.658 16.096 15.169 16.096 8.325 0 15.17-7.216 15.17-16.096z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 45.698,
            d: "M42.643 722.441h889.73m14.06 0-51.622 39.223m0-78.259 51.622 39.036"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          "path",
          {
            stroke: "none",
            d: "M285.195 53.989c0-8.88-7.216-16.096-16.096-16.096-8.696 0-15.912 7.215-15.912 16.096zm0 0v658.279h-32.008V53.989zm-32.008 658.279c0 8.879 7.216 16.096 15.912 16.096 8.88 0 16.096-7.217 16.096-16.096zM674.83 421.24c0-8.88-7.03-16.096-15.909-16.096s-15.91 7.215-15.91 16.096zm0 0v291.028h-31.819V421.24zm-31.819 291.028c0 8.879 7.031 16.096 15.91 16.096s15.91-7.217 15.91-16.096z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          "path",
          {
            stroke: "none",
            d: "M605.225 953.334h-26.807v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.932-5.362-5.097 0-8.525 2.11-3.34 2.11-5.362 6.24-2.021 4.13-2.9 10.195t-.879 13.887v46.23H520.85v-98.261h20.478l3.604 12.568h1.494q2.11-3.78 5.01-6.504 2.988-2.724 6.503-4.482t7.471-2.55q3.955-.878 7.998-.878 10.108 0 17.139 3.516 7.119 3.427 10.898 10.898h2.197q2.11-3.78 5.098-6.504t6.592-4.482q3.603-1.758 7.559-2.55 4.043-.878 8.085-.878 15.82 0 23.819 8.613 8.086 8.526 8.086 27.422v64.072h-26.895v-57.392q0-10.635-3.164-15.908-3.164-5.362-9.931-5.362-9.58 0-13.623 7.647-4.043 7.558-4.043 21.709zm144.492-128.496-47.9 128.496H677.47l47.9-128.496Zm78.134 128.496h-72.246v-15.82l40.166-61.963H758.33v-20.478h67.852v17.402l-38.848 60.38h40.517z",
            fontFamily: "sans-serif",
            fontSize: 180,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: "125%"
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var Overlay_default2 = SvgOverlay2;

  // build/lib-react-tsx/mass/RequestProtein.tsx
  var React52 = __toESM(require_react(), 1);
  var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
  var SvgRequestProtein = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          "path",
          {
            stroke: "none",
            d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235-217.03 251.696-37.674-32.266 217.03-251.899ZM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008 53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38v-449.49l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107Zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447Zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          "path",
          {
            d: "m15.49 11.852.456.586-.014.013-.014.012-.014.011-.015.01-.015.01-.016.008-.015.007-.016.007-.016.005-.016.005-.017.004-.016.003-.017.002h-.049l-.017-.002-.016-.002-.017-.004-.016-.004-.016-.005-.015-.006-.016-.007-.015-.008-.015-.008-.015-.01-.014-.01-.014-.012-.014-.012-.013-.013-.012-.014-.012-.015-.012-.015-.01-.016-.01-.016-.01-.017-.007-.017-.008-.017-.006-.018-.006-.018-.005-.018-.004-.019-.003-.018-.003-.019-.001-.018-.001-.02v-.037l.002-.018.002-.019.003-.018.004-.019.004-.018.006-.018.006-.017.007-.018.007-.017.009-.016.009-.016.01-.016.01-.016.012-.014.013-.015zm.697.345-.241.241-.457-.587.242-.24Zm1.615-7.582.398-.639.147.138.125.16.106.18.086.194.068.206.052.218.037.229.023.238.01.248-.001.256-.014.264-.026.271-.036.278-.048.284-.058.288-.069.293-.08.296-.089.298-.099.3-.11.3-.118.3-.129.298-.138.295-.147.293-.157.288-.166.282-.174.276-.184.27-.193.26-.202.25-.21.241-.219.23-.456-.588.196-.204.189-.216.182-.227.175-.237.168-.246.16-.253.153-.26.144-.265.136-.27.128-.274.119-.276.11-.277.1-.277.092-.276.082-.274.073-.271.063-.267.052-.26.043-.255.032-.246.023-.237.012-.227.001-.214-.008-.2-.018-.187-.028-.17-.036-.152-.044-.133-.05-.114-.055-.094-.06-.076zm-4.785 4.568-.669.193-.059-.342-.024-.34.01-.334.039-.328.069-.32.095-.311.118-.301.14-.291.16-.28.177-.27.193-.258.207-.247.219-.235.23-.224.238-.21.245-.199.252-.185.256-.171.258-.157.26-.143.26-.127.258-.111.255-.095.251-.078.246-.06.24-.04.232-.021h.225l.217.025.207.052.197.083.181.118-.398.639-.075-.049-.098-.04-.121-.03-.144-.017h-.163l-.18.016-.195.033-.207.05-.216.067-.223.083-.23.1-.231.113-.234.128-.233.142-.231.154-.227.167-.221.179-.214.189-.204.199-.194.208-.18.216-.167.223-.15.229-.134.234-.115.238-.095.241-.075.244-.053.246-.03.248-.007.249.018.252zm-.097 4.508.005-.782.188-.006.156-.02.123-.03.091-.035.063-.038.04-.035.024-.033.017-.036.013-.047.008-.063v-.083l-.01-.1-.022-.115-.032-.128-.043-.138-.053-.147-.062-.152-.068-.158-.075-.161-.079-.164-.082-.165-.085-.165-.085-.164-.085-.163-.084-.16-.08-.158-.076-.153-.07-.15-.065-.145-.058-.142-.048-.14-.038-.14.67-.192.02.073.032.093.044.11.054.122.064.134.07.143.078.15.081.158.085.162.087.167.088.171.086.173.085.175.082.177.077.177.07.178.065.177.055.178.045.177.033.18.018.18v.182l-.024.184-.052.182-.084.172-.115.153-.142.127-.163.098-.181.071-.199.049-.218.027zm-.85-9.64.667.199-.048.155-.067.164-.085.191-.103.22-.118.249-.132.276-.142.3-.15.322-.156.342-.157.357-.156.372-.153.381-.147.39-.137.393-.126.395-.11.393-.093.388-.073.379-.05.366-.025.35.002.33.03.307.057.281.087.254.118.228.151.204.192.182.238.16.293.134.352.103.415.067.481.026-.005.782-.54-.03-.485-.078-.432-.127-.382-.175-.332-.222-.281-.267-.229-.307-.175-.34-.125-.363-.08-.38-.037-.395-.002-.404.029-.412.057-.417.08-.422.102-.423.119-.423.133-.42.144-.414.154-.407.159-.397.162-.384.161-.368.16-.35.152-.328.144-.304.132-.277.117-.246.1-.211.077-.172.05-.124zm-8.958.816-.521-.512.276-.328.304-.302.327-.274.347-.249.366-.223.382-.2.396-.177.406-.155.416-.134.422-.113.427-.093.429-.074.429-.055.427-.037.422-.019.416-.002.407.015.396.03.384.048.367.062.351.077.332.093.31.108.288.124.264.14.238.159.21.18.179.206.14.236.093.268.03.29-.035.294-.667-.199.012-.104-.01-.09-.032-.092-.063-.105-.1-.115-.14-.118-.176-.118-.211-.112-.243-.104-.27-.094-.297-.083-.32-.07-.338-.058-.356-.043-.37-.03-.382-.013-.391.002-.398.018-.402.035-.403.051-.403.07-.4.087-.392.105-.385.124-.374.142-.36.161-.346.18-.326.2-.306.22-.284.237-.259.257zm3.164 2.509.095.774-.249.032-.246.016-.242.001-.239-.012-.234-.025-.229-.038-.223-.05-.217-.062-.211-.072-.204-.083-.196-.093-.189-.102-.18-.11-.171-.12-.162-.126-.152-.135-.141-.142-.13-.148-.12-.156-.106-.162-.093-.169-.08-.174-.064-.181-.047-.186-.03-.19-.01-.194.01-.195.033-.194.053-.191.076-.186.096-.178.117-.17.521.512-.07.104-.056.101-.04.1-.028.099-.016.098-.005.1.005.102.016.105.028.108.04.11.05.113.064.114.075.114.086.114.099.112.109.11.12.105.13.102.138.097.148.09.157.085.164.078.171.07.178.06.185.052.19.043.194.032.2.022.203.01h.207l.21-.015zm10.683.146-.575.432-.032-.038-.078-.06-.127-.069-.172-.066-.211-.06-.247-.052-.277-.043-.304-.034-.33-.025-.35-.016-.368-.008-.384-.001-.398.006-.408.012-.416.019-.422.023-.424.028-.426.033-.423.035-.42.04-.412.04-.403.043-.391.044-.377.044-.36.044-.342.044-.32.042-.296.04-.27.038-.24.035-.21.031-.175.027-.095-.774.179-.028.212-.031.243-.035.272-.039.299-.04.322-.043.345-.044.363-.045.38-.044.395-.044.407-.044.416-.04.424-.04.428-.036.431-.033.431-.029.429-.024.424-.018.416-.013.408-.006h.396l.382.01.366.017.348.026.328.037.306.047.284.06.26.074.235.091.211.114.188.149zm-11.171 2.81-.381-.651.271-.17.308-.136.34-.11.372-.089.401-.07.428-.056.453-.043.473-.03.49-.022.504-.014.515-.007.521-.003h1.048l.519.002.51-.001.499-.005.482-.01.462-.015.438-.025.41-.033.375-.045.339-.056.294-.07.245-.08.188-.087.124-.086.061-.069.02-.043.003-.056-.028-.115-.088-.183.575-.432.151.317.076.33-.021.336-.125.3-.197.23-.24.169-.273.129-.307.1-.34.08-.37.062-.402.047-.428.036-.452.025-.473.016-.49.01-.504.005H11.53l-.523-.002h-.522l-.517.003-.508.008-.495.013-.48.021-.457.03-.433.04-.404.053-.37.065-.33.08-.287.092-.236.104-.18.112zm1.156-2.797.293-.708 1.06.587.9.549.748.51.608.477.478.447.358.424.248.413.134.42.004.424-.135.382-.235.3-.297.226-.345.172-.387.131-.421.096-.45.065-.472.036-.484.009-.49-.018-.485-.042-.474-.067-.454-.09-.426-.114-.39-.138-.35-.165-.301-.197-.25-.247-.175-.326-.041-.397.118-.383.237-.33.339-.3.38.652-.244.216-.119.16-.026.08.005.036.046.077.125.12.21.137.28.131.337.12.383.102.418.083.44.062.455.04.458.016.45-.008.433-.033.406-.059.367-.083.316-.107.253-.125.177-.133.1-.122.039-.106-.002-.131-.067-.205-.17-.283-.292-.345-.426-.397-.567-.445-.716-.488-.873-.533zm-2.14-3.4.643.282-.027.094-.018.09-.009.088-.001.087.006.086.014.087.021.088.03.09.035.09.043.09.05.091.057.091.063.091.069.09.073.089.078.087.082.085.085.083.087.08.09.078.09.075.09.072.09.068.09.065.088.061.086.058.082.054.08.049.074.045.07.04.065.037.057.03-.293.709-.067-.037-.073-.04-.079-.046-.083-.05-.088-.056-.093-.06-.095-.063-.098-.069-.1-.073-.103-.077-.103-.082-.103-.085-.103-.09-.102-.094-.1-.099-.099-.102-.096-.107-.092-.112-.088-.116-.084-.12-.079-.126-.072-.131-.064-.137-.057-.141-.047-.147-.037-.153-.025-.158-.012-.161.002-.166.017-.167.033-.168Zm.643.282-.644-.282.007-.018.008-.018.008-.018.009-.016.01-.017.01-.015.01-.015.012-.014.012-.013.012-.013.013-.012.014-.01.014-.011.014-.01.014-.008.015-.008.016-.008.015-.006.016-.005.016-.005.017-.004.016-.003.017-.002h.016l.017-.001h.017l.017.003.017.002.017.004.017.005.017.005.017.007.016.008.016.009.015.009.015.01.014.01.014.012.013.013.012.013.012.013.011.014.01.015.01.015.01.016.008.016.008.017.007.017.006.017.006.018.005.018.004.018.003.018.003.019.001.019.001.019v.038l-.002.02-.002.018-.004.02-.004.019-.005.019z",
            className: "fil0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision",
            transform: "matrix(45.35208 0 0 46.1966 11.084 23.48)"
          }
        )
      ]
    }
  );
  var RequestProtein_default = SvgRequestProtein;

  // build/lib-react-tsx/mass/Request.tsx
  var React53 = __toESM(require_react(), 1);
  var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
  var SvgRequest3 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
          "path",
          {
            stroke: "none",
            d: "M160.44 546.832c-13.627.2-24.85 11.222-25.05 25.049 0 13.627 11.022 24.849 24.649 24.647zm0 0h679.747l-.202 49.696H160.039zm679.545 49.696c13.627 0 24.848-11.02 25.05-24.848 0-13.626-11.02-24.848-24.848-24.848z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
          "path",
          {
            stroke: "none",
            d: "M469.05 568.274c0 13.627 11.022 24.648 24.65 24.648 13.827-.203 25.05-11.422 25.05-25.05zm0 0v-438.87l49.7-.4v438.868zm49.7-439.27c0-13.827-11.023-24.85-24.85-24.649-13.627 0-24.85 11.223-24.85 25.05zm144.687 439.27c0 13.627 11.02 24.648 24.848 24.648 13.627-.203 24.848-11.422 24.848-25.05zm0 0v-181.36l49.696-.4v181.358zm49.696-181.76c0-13.828-11.02-24.85-24.848-24.649-13.627 0-24.848 11.222-24.848 25.05zm260.719-233.262V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235-217.03 251.696-37.674-32.266 217.03-251.899ZM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008 53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38v-449.49l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107Zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447Zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307z"
          }
        )
      ]
    }
  );
  var Request_default3 = SvgRequest3;

  // build/lib-react-tsx/mass/Sum.tsx
  var React54 = __toESM(require_react(), 1);
  var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
  var SvgSum = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
          "path",
          {
            fill: "#c8c8c8",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 28.395,
            d: "M97.296 689.637H883.16",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
          "path",
          {
            fill: "#80afaf",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 28.395,
            d: "m895.679 689.637-45.668 34.59",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
          "path",
          {
            fill: "#c8c8c8",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 28.395,
            d: "m850.011 655.048 45.668 34.59",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M313.532 413.34h-25.408l.022-.655.044-.654.087-.633.11-.632.152-.61.174-.612.197-.588.218-.567.261-.567.284-.568.305-.523.327-.523.35-.502.37-.48.414-.436.415-.458.436-.436.458-.393.48-.37.501-.371.524-.327.523-.306.545-.283.567-.262.59-.218.588-.218.589-.153.61-.152.655-.11.61-.065.655-.065h1.308l.655.065.632.066.61.109.611.152.611.175.589.196.589.218.545.262.545.283.545.306.502.327.502.37.48.371.457.393.437.436.436.436.392.458.393.48.349.502.327.523.305.523.284.568.261.567.219.567.196.588.174.611.131.61.131.633.065.654.044.633zm-25.408 84.77v-84.77h25.408v84.77zm0 0h25.408v.655l-.066.654-.065.633-.109.632-.153.61-.174.611-.196.59-.219.566-.261.567-.284.546-.305.545-.327.523-.35.48-.392.502-.392.436-.436.458-.437.436-.436.393-.501.37-.48.35-.524.348-.523.305-.567.284-.545.24-.59.218-.588.218-.61.175-.611.13-.611.131-.654.066-.654.043-.633.022h-.654l-.654-.065-.633-.066-.61-.13-.633-.131-.589-.175-.589-.218-.589-.218-.567-.24-.545-.284-.523-.305-.524-.349-.48-.349-.501-.37-.436-.415-.436-.414-.437-.436-.392-.458-.393-.502-.349-.48-.327-.523-.305-.545-.284-.546-.261-.567-.218-.567-.219-.589-.152-.61-.153-.61-.109-.655-.087-.61-.044-.655zm351.369 332.06v30.925q0 7.33-3.317 10.996c-2.24 2.444-5.148 3.666-8.786 3.666-3.548 0-6.4-1.222-8.582-3.666-2.181-2.444-3.288-6.11-3.288-10.996V824.03c0-5.875-.202-10.414-.61-13.643-.378-3.23-1.455-5.906-3.228-7.972-1.747-2.066-4.539-3.113-8.35-3.113-7.622 0-12.626 2.618-15.041 7.856-2.414 5.206-3.637 12.713-3.637 22.487v31.45c0 4.829-1.104 8.494-3.288 10.967-2.181 2.473-5.061 3.695-8.64 3.695-3.52 0-6.4-1.222-8.64-3.695s-3.375-6.138-3.375-10.968v-66.562c0-4.365 1.018-7.71 3.027-9.979 2.006-2.27 4.683-3.404 7.97-3.404 3.172 0 5.82 1.077 7.972 3.2 2.123 2.124 3.2 5.063 3.2 8.815v2.211c4.015-4.83 8.349-8.379 12.946-10.647q6.894-3.404 15.36-3.404 8.772 0 15.1 3.49 6.282 3.492 10.385 10.561c3.927-4.77 8.117-8.29 12.626-10.59 4.48-2.298 9.454-3.461 14.894-3.461 6.372 0 11.84 1.25 16.438 3.752q6.895 3.754 10.299 10.735c2.007 4.189 2.995 10.822 2.995 19.87v45.414q.001 7.33-3.316 10.996c-2.21 2.444-5.15 3.666-8.785 3.666-3.52 0-6.4-1.222-8.64-3.695s-3.375-6.138-3.375-10.967v-39.13c0-5.003-.205-8.99-.64-12.014-.437-2.997-1.571-5.529-3.433-7.595-1.89-2.036-4.713-3.054-8.524-3.054-3.084 0-5.993.902-8.728 2.736-2.764 1.802-4.887 4.247-6.43 7.33-1.715 3.899-2.559 10.85-2.559 20.802m110.026-66.302-23.855 98.245c-.816 3.257-1.514 5.788-2.096 7.679-.61 1.861-1.513 3.345-2.734 4.393q-1.833 1.571-5.324 1.572c-5.79 0-8.7-2.502-8.7-7.506 0-1.31.583-4.568 1.719-9.804l23.766-98.244q1.878-7.854 3.58-10.736c1.163-1.95 3.374-2.909 6.662-2.909 2.85 0 5.032.669 6.516 2.037 1.513 1.368 2.27 3.258 2.27 5.644 0 1.746-.611 4.975-1.804 9.63zm79.275 43.958-42.62 47.653h45.588c3.695 0 6.488.873 8.35 2.589 1.89 1.745 2.822 3.986 2.822 6.692 0 2.618-.932 4.741-2.764 6.4-1.861 1.659-4.654 2.473-8.408 2.473h-63.07c-4.423 0-7.74-.96-9.922-2.91-2.182-1.92-3.286-4.567-3.286-7.912 0-1.98.756-3.986 2.297-6.023 1.542-2.006 4.714-5.701 9.543-11.112 5.12-5.675 9.774-10.822 13.935-15.42 4.189-4.597 8.059-8.901 11.636-12.917 3.579-4.015 6.547-7.388 8.903-10.181q3.536-4.19 5.673-7.158h-34.59c-4.771 0-8.38-.436-10.823-1.28q-3.665-1.264-3.665-6.72c0-2.676.902-4.8 2.763-6.4 1.832-1.6 4.48-2.385 7.884-2.385h53.443c4.945 0 8.727.727 11.374 2.181 2.648 1.425 3.957 4.044 3.957 7.797 0 1.25-.262 2.532-.757 3.869-.523 1.338-1.077 2.415-1.716 3.288-.61.843-1.483 1.89-2.56 3.113a219 219 0 0 1-3.986 4.363z",
            className: "fil1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
          "path",
          {
            fill: "#c8c8c8",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 28.395,
            d: "M97.296 498.11H883.16M97.296 306.584H883.16M97.296 115.036H883.16",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M600.778 413.34h-25.43v-.655l.066-.654.066-.633.13-.632.131-.61.175-.612.196-.588.218-.567.262-.567.283-.568.306-.523.327-.523.349-.502.392-.48.393-.436.436-.458.436-.436.436-.393.502-.37.48-.371.523-.327.524-.306.567-.283.545-.262.589-.218.589-.218.61-.153.61-.152.612-.11.654-.065.654-.065h1.309l.632.065.633.066.61.109.633.152.588.175.59.196.588.218.567.262.545.283.524.306.523.327.502.37.48.371.436.393.436.436.436.436.415.458.37.48.35.502.326.523.306.523.283.568.262.567.218.567.218.588.153.611.152.61.11.633.065.654.065.633zm-25.408 84.77v-84.77h25.408v84.77zm0 0h25.408l-.022.655-.043.654-.088.633-.109.632-.152.61-.153.611-.218.59-.218.566-.262.567-.262.546-.327.545-.327.523-.349.48-.37.502-.415.436-.414.458-.437.436-.458.393-.48.37-.501.35-.523.348-.524.305-.545.284-.567.24-.567.218-.589.218-.61.175-.611.13-.633.131-.654.066-.632.043-.655.022h-.654l-.654-.065-.61-.066-.633-.13-.611-.131-.61-.175-.59-.218-.567-.218-.567-.24-.545-.284-.545-.305-.502-.349-.501-.349-.48-.37-.458-.415-.436-.414-.436-.436-.393-.458-.37-.502-.371-.48-.328-.523-.305-.545-.283-.546-.24-.567-.218-.567-.218-.589-.175-.61-.13-.61-.11-.655-.087-.61-.044-.655zm25.408-276.297h-25.43v-.655l.066-.654.066-.654.13-.61.131-.611.175-.611.196-.589.218-.589.262-.567.283-.545.306-.523.327-.524.349-.501.392-.48.393-.458.436-.436.436-.437.436-.392.502-.393.48-.349.523-.327.524-.305.567-.284.545-.261.589-.218.589-.219.61-.152.61-.153.612-.109.654-.087.654-.044h1.309l.632.044.633.087.61.11.633.152.588.174.59.197.588.218.567.261.545.284.524.305.523.327.502.35.48.392.436.392.436.437.436.436.415.458.37.48.35.501.326.524.306.523.283.545.262.567.218.59.218.588.153.61.152.611.11.633.065.632.065.654zm-25.408 84.771v-84.771h25.408v84.771zm0 0h25.408l-.022.654-.043.655-.088.632-.109.61-.152.633-.153.59-.218.588-.218.589-.262.567-.262.545-.327.545-.327.502-.349.502-.37.48-.415.457-.414.437-.437.436-.458.414-.48.37-.501.35-.523.327-.524.305-.545.284-.567.261-.567.219-.589.218-.61.174-.611.131-.633.109-.654.087-.632.044h-1.309l-.654-.044-.61-.087-.633-.109-.611-.13-.61-.175-.59-.218-.567-.219-.567-.261-.545-.284-.545-.305-.502-.327-.501-.35-.48-.37-.458-.414-.436-.436-.436-.437-.393-.436-.37-.501-.371-.502-.328-.502-.305-.545-.283-.545-.24-.567-.218-.589-.218-.589-.175-.589-.13-.632-.11-.61-.087-.655-.044-.654zM313.532 30.264h-25.408l.022-.654.044-.654.087-.633.11-.61.152-.633.174-.589.197-.588.218-.59.261-.566.284-.545.305-.546.327-.501.35-.502.37-.48.414-.458.415-.436.436-.436.458-.414.48-.371.501-.35.524-.326.523-.306.545-.283.567-.262.59-.218.588-.218.589-.174.61-.131.655-.11.61-.087.655-.043.654-.022h.654l.655.065.632.088.61.109.611.13.611.175.589.218.589.218.545.262.545.283.545.306.502.327.502.349.48.37.457.415.437.436.436.436.392.437.393.501.349.502.327.501.305.546.284.545.261.567.219.589.196.588.174.59.131.632.131.61.065.655.044.654zm-25.408 84.772V30.264h25.408v84.772zm0 0h25.408v.654l-.066.654-.065.655-.109.61-.153.611-.174.61-.196.59-.219.588-.261.567-.284.546-.305.523-.327.523-.35.502-.392.48-.392.458-.436.436-.437.436-.436.393-.501.392-.48.35-.524.326-.523.306-.567.283-.545.262-.59.218-.588.218-.61.153-.611.152-.611.11-.654.087-.654.043h-1.287l-.654-.043-.633-.087-.61-.11-.633-.152-.589-.175-.589-.196-.589-.218-.567-.262-.545-.283-.523-.306-.524-.327-.48-.349-.501-.392-.436-.393-.436-.436-.437-.436-.392-.458-.393-.48-.349-.502-.327-.523-.305-.523-.284-.546-.261-.567-.218-.588-.219-.59-.152-.61-.153-.61-.109-.633-.087-.633-.044-.654zm171.005 53.104H433.72l.022-.653.044-.655.087-.632.109-.61.153-.633.174-.59.196-.61.218-.567.262-.567.284-.545.305-.545.327-.502.349-.502.37-.48.415-.48.414-.435.437-.436.458-.393.48-.37.501-.35.523-.349.524-.305.545-.284.567-.24.567-.218.61-.218.59-.174.61-.13.633-.11.654-.087.633-.044.654-.022h.654l.654.066.611.087.654.11.59.13.61.174.589.218.567.219.567.24.545.283.545.305.502.35.501.348.48.371.458.414.436.437.436.436.393.436.37.501.372.502.327.502.305.545.284.545.24.567.218.567.218.61.174.59.13.632.11.61.087.655.044.654zm-25.408 84.772v-84.771h25.408v84.771zm0 0h25.408v.655l-.066.654-.065.654-.11.61-.152.611-.174.611-.197.589-.218.589-.261.545-.284.567-.305.523-.327.524-.35.501-.392.48-.393.458-.436.436-.436.437-.436.392-.502.37-.48.372-.523.327-.523.305-.567.284-.546.261-.588.218-.59.219-.61.152-.61.153-.611.109-.654.087-.655.044h-1.286l-.655-.044-.632-.087-.61-.11-.633-.152-.59-.174-.588-.197-.589-.218-.567-.261-.545-.284-.524-.305-.523-.327-.48-.371-.501-.37-.437-.393-.436-.437-.436-.436-.392-.458-.393-.48-.349-.501-.327-.524-.305-.523-.284-.567-.262-.545-.218-.59-.218-.588-.152-.61-.153-.611-.11-.633-.065-.654-.065-.632z",
            className: "fil1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M488.81 223.23v-25.407l.655.022.654.043.654.088.611.109.61.152.611.175.59.196.588.218.567.262.545.283.524.306.523.327.502.349.48.37.458.415.436.414.436.436.392.458.393.48.349.502.327.523.305.524.284.545.262.567.218.589.218.589.153.588.152.611.11.654.086.61.044.655v1.309l-.044.654-.087.61-.109.655-.152.589-.175.61-.196.59-.218.566-.262.567-.284.546-.305.545-.327.501-.349.502-.393.48-.392.458-.436.436-.436.436-.458.393-.48.392-.502.35-.523.326-.524.306-.545.283-.567.24-.589.218-.589.218-.61.175-.61.13-.633.131-.633.066-.654.065zm-84.75-25.407h84.75v25.407h-84.75zm0 0v25.407h-.653l-.655-.065-.654-.087-.61-.11-.633-.13-.589-.175-.589-.218-.588-.218-.568-.24-.545-.283-.545-.306-.502-.327-.501-.349-.48-.392-.458-.393-.436-.436-.436-.436-.393-.436-.392-.502-.35-.502-.327-.501-.305-.545-.283-.546-.262-.567-.218-.567-.218-.589-.175-.61-.13-.61-.11-.633-.087-.633-.043-.654v-1.309l.043-.632.087-.633.11-.632.13-.61.175-.59.218-.588.218-.59.262-.566.283-.545.305-.524.328-.523.349-.502.37-.48.415-.436.436-.458.436-.436.436-.393.502-.37.501-.35.502-.326.545-.306.545-.283.568-.262.588-.218.59-.218.588-.153.632-.152.633-.11.632-.087.655-.043zm84.75 197.829v-25.407h.655l.654.065.654.087.611.11.61.13.611.175.59.218.588.218.567.262.545.261.524.306.523.349.502.348.48.371.458.393.436.436.436.436.392.458.393.48.349.502.327.523.305.523.284.546.262.567.218.567.218.589.153.61.152.61.11.633.086.633.044.654v1.309l-.044.654-.087.61-.109.633-.152.61-.175.611-.196.59-.218.566-.262.567-.284.545-.305.524-.327.523-.349.502-.393.48-.392.458-.436.436-.436.436-.458.393-.48.37-.502.35-.523.348-.524.305-.545.262-.567.262-.589.218-.589.218-.61.175-.61.13-.633.11-.633.087-.654.043zm-84.75-25.407h84.75v25.407h-84.75zm0 0v25.407h-.653l-.655-.065-.654-.088-.61-.109-.633-.13-.589-.175-.589-.218-.588-.218-.568-.24-.545-.284-.545-.305-.502-.327-.501-.349-.48-.392-.458-.393-.436-.436-.436-.436-.393-.437-.392-.501-.35-.502-.327-.501-.305-.546-.283-.545-.262-.567-.218-.567-.218-.589-.175-.61-.13-.611-.11-.633-.087-.632-.043-.654v-1.309l.043-.632.087-.633.11-.632.13-.61.175-.59.218-.589.218-.588.262-.567.283-.546.305-.523.328-.523.349-.502.37-.48.415-.436.436-.458.436-.436.436-.393.502-.37.501-.35.502-.327.545-.305.545-.283.568-.262.588-.218.59-.218.588-.153.632-.153.633-.109.632-.087.655-.044zm84.75 67.76v-25.407l.655.021.654.044.654.087.611.11.61.152.611.175.59.196.588.218.567.262.545.283.524.305.523.328.502.349.48.37.458.415.436.414.436.436.392.458.393.48.349.502.327.523.305.523.284.546.262.567.218.567.218.61.153.59.152.61.11.632.086.655.044.632v1.309l-.044.654-.087.61-.109.655-.152.589-.175.61-.196.59-.218.566-.262.567-.284.545-.305.546-.327.501-.349.502-.393.48-.392.458-.436.436-.436.436-.458.393-.48.37-.502.371-.523.327-.524.306-.545.283-.567.24-.589.218-.589.218-.61.175-.61.13-.633.11-.633.087-.654.043zm-84.75-25.407h84.75v25.407h-84.75zm0 0v25.407h-.653l-.655-.065-.654-.066-.61-.109-.633-.152-.589-.175-.589-.196-.588-.218-.568-.262-.545-.283-.545-.306-.502-.327-.501-.349-.48-.392-.458-.393-.436-.436-.436-.436-.393-.437-.392-.501-.35-.48-.327-.523-.305-.524-.283-.567-.262-.545-.218-.589-.218-.589-.175-.61-.13-.611-.11-.61-.087-.655-.043-.654v-1.287l.043-.654.087-.633.11-.61.13-.633.175-.589.218-.588.218-.59.262-.566.283-.546.305-.523.328-.523.349-.48.37-.48.415-.48.436-.436.436-.436.436-.37.502-.393.501-.35.502-.327.545-.305.545-.283.568-.262.588-.218.59-.218.588-.153.632-.153.633-.109.632-.065.655-.066z",
            className: "fil1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        )
      ]
    }
  );
  var Sum_default = SvgSum;

  // build/lib-react-tsx/mass/Upload.tsx
  var React55 = __toESM(require_react(), 1);
  var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
  var SvgUpload = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 45.698,
            d: "M60.271 750h889.73m14.061 0-51.622 39.223m0-78.259L964.062 750"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
          "path",
          {
            stroke: "none",
            d: "M302.823 289.827c0-6.138-7.215-11.125-16.096-11.125-8.696 0-15.911 4.987-15.911 11.125zm0 0v454.971h-32.007V289.827Zm-32.007 454.971c0 6.137 7.215 11.125 15.911 11.125 8.88 0 16.096-4.988 16.096-11.125zm421.643-604.971c0-17.815-7.03-32.289-15.91-32.289s-15.91 14.474-15.91 32.289zm0 0v583.807h-31.82V139.827Zm-31.82 583.807c0 17.811 7.031 32.289 15.91 32.289s15.91-14.478 15.91-32.289z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
          "path",
          {
            fill: "#fff",
            strokeWidth: 0.794,
            d: "M965.061 524.058a274 282 0 0 1-274 282 274 282 0 0 1-274-282 274 282 0 0 1 274-282 274 282 0 0 1 274 282Z",
            transform: "rotate(.457)skewX(.026)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
          "path",
          {
            strokeWidth: 7.895,
            d: "M687.088 306.072c-123.42 0-223.488 100.084-223.488 223.488 0 123.436 100.067 223.48 223.488 223.48 123.42 0 223.495-100.044 223.495-223.488-.008-123.396-100.075-223.48-223.495-223.48zM800 550a24.2 24.2 0 0 1-17.456 7.39c-6.102 0-12.197-2.282-16.887-6.861l-53.985-52.382v138.152c0 13.421-10.918 24.308-24.316 24.308-13.413 0-24.285-10.887-24.285-24.308V498.147l-53.985 52.382c-9.623 9.324-24.995 9.11-34.358-.521-9.332-9.624-9.11-25.003.521-34.35l95.204-92.339c9.419-9.15 24.38-9.15 33.83 0l95.172 92.338c9.664 9.356 9.892 24.72.545 34.343Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeWidth: 91.745,
            d: "M656.432 877.294v33.598q0 7.962-3.604 11.947c-2.432 2.654-5.593 3.982-9.545 3.982-3.855 0-6.953-1.328-9.323-3.982-2.37-2.656-3.572-6.639-3.572-11.947v-40.269c0-6.383-.22-11.313-.663-14.822-.412-3.508-1.582-6.417-3.508-8.66-1.898-2.245-4.93-3.383-9.071-3.383-8.281 0-13.718 2.844-16.342 8.535-2.622 5.657-3.95 13.811-3.95 24.43v34.169c0 5.246-1.2 9.229-3.573 11.915-2.37 2.686-5.499 4.014-9.387 4.014-3.824 0-6.953-1.328-9.387-4.014-2.432-2.686-3.666-6.669-3.666-11.915v-72.317c0-4.742 1.106-8.377 3.288-10.84 2.18-2.467 5.088-3.7 8.659-3.7 3.446 0 6.322 1.17 8.66 3.477 2.307 2.308 3.477 5.5 3.477 9.577v2.402c4.363-5.246 9.071-9.103 14.066-11.567q7.489-3.699 16.688-3.698 9.53 0 16.404 3.792 6.826 3.793 11.283 11.473c4.266-5.182 8.819-9.007 13.717-11.505 4.867-2.496 10.272-3.76 16.182-3.76 6.923 0 12.864 1.358 17.858 4.076q7.491 4.078 11.19 11.663c2.18 4.551 3.254 11.758 3.254 21.587v49.34q0 7.962-3.602 11.947c-2.403 2.654-5.595 3.982-9.546 3.982-3.824 0-6.952-1.328-9.387-4.014-2.434-2.686-3.666-6.669-3.666-11.915V868.38c0-5.437-.222-9.767-.696-13.054-.475-3.256-1.707-6.006-3.729-8.25-2.054-2.213-5.12-3.319-9.261-3.319-3.35 0-6.51.98-9.483 2.972-3.002 1.959-5.309 4.615-6.985 7.963-1.864 4.237-2.78 11.79-2.78 22.6zm119.536-72.032-25.917 106.736c-.886 3.539-1.644 6.289-2.276 8.343-.664 2.022-1.644 3.635-2.97 4.773q-1.992 1.707-5.785 1.708c-6.29 0-9.45-2.719-9.45-8.155 0-1.422.631-4.963 1.865-10.651l25.821-106.737q2.04-8.534 3.889-11.663c1.264-2.119 3.666-3.16 7.238-3.16 3.097 0 5.467.726 7.08 2.212 1.643 1.486 2.465 3.54 2.465 6.132 0 1.896-.664 5.405-1.96 10.461zm86.128 47.757-46.303 51.772h49.527c4.015 0 7.05.948 9.071 2.812 2.055 1.897 3.067 4.33 3.067 7.271 0 2.844-1.012 5.15-3.003 6.953-2.022 1.802-5.056 2.686-9.135 2.686h-68.522c-4.804 0-8.408-1.042-10.779-3.16-2.37-2.086-3.57-4.963-3.57-8.597 0-2.15.822-4.33 2.496-6.543 1.675-2.18 5.12-6.195 10.367-12.073 5.563-6.165 10.62-11.758 15.14-16.752a1706 1706 0 0 0 12.642-14.034c3.888-4.362 7.112-8.027 9.672-11.061q3.84-4.552 6.163-7.777h-37.58c-5.183 0-9.103-.474-11.757-1.39q-3.983-1.375-3.983-7.301c0-2.908.98-5.215 3.002-6.953 1.99-1.738 4.867-2.592 8.565-2.592h58.063c5.373 0 9.481.79 12.357 2.37 2.877 1.548 4.299 4.393 4.299 8.471 0 1.358-.284 2.75-.822 4.203-.568 1.454-1.17 2.624-1.864 3.572-.665.917-1.612 2.054-2.783 3.382a239 239 0 0 1-4.33 4.741z",
            className: "fil1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        )
      ]
    }
  );
  var Upload_default = SvgUpload;

  // build/lib-react-tsx/misc/Chromatography.tsx
  var React56 = __toESM(require_react(), 1);
  var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
  var SvgChromatography = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 850.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 33.181,
            d: "M48.778 730.872c10.983 2.796 44.153 4.518 55.796-25.61 14.843-38.405 7.204-118.945 9.394-210.846 2.852-119.688-3.897-252.065 23.641-273.178C173.235 229.121 150 639.35 180.1 694.107c27.336 49.632 62.365 34.56 106.272 24.677C400 693.205 400.605 521.04 400 477.784c-1.019-79.373 13.328-371.297 11.429-370.944 0 0 5.496 245.006 11.95 360.616C430.392 593.107 450 756.182 520.344 750c79.132-.038 90.787-82.775 90.222-167.836-.753-93.527-5.052-203.405 24.743-207.362 37.396-1.067 33.21 90.955 45.112 195.07 10.722 93.797-4.404 184.937 109.12 174.586 35.53-3.218 113.251 2.089 145.224.307"
          }
        )
      ]
    }
  );
  var Chromatography_default = SvgChromatography;

  // build/lib-react-tsx/misc/Cristal.tsx
  var React57 = __toESM(require_react(), 1);
  var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
  var SvgCristal = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "path",
          {
            stroke: "none",
            d: "M984.712 452.914 830.281 808.322l-43.442-18.375L941.51 434.296ZM808.56 799.25l21.72 9.311c-5.25 11.936-19.336 17.667-31.265 12.41-11.936-5.01-17.426-19.096-12.176-31.025zm7.4 22.202-359.946 121.49-14.798-44.631 359.943-121.496Zm-367.345 99.054 7.4 22.676c-12.412 4.061-26.018-2.625-30.075-15.035-4.058-12.417 2.864-25.782 15.276-30.077zm-4.296 23.391L69.098 879.931l8.354-46.782 375.22 64.208ZM73.155 856.54l-4.296 23.39c-12.89-2.15-21.482-14.32-19.095-27.451 2.387-12.885 14.798-21.48 27.688-19.33Zm-23.391 3.58-31.03-214.105 47.022-7.161 30.791 214.105zm-7.4-217.686-23.63 3.58c-1.91-12.888 7.16-25.062 20.05-27.21 13.128-1.91 25.063 6.922 26.972 20.05zm-23.391-4.774L94.16 275.568l46.306 9.308L65.517 646.97zm98.34-357.319-23.153-4.773c2.626-12.89 15.276-21.244 27.927-18.618 12.889 2.625 21.243 15.037 18.618 27.926zM98.218 266.26l142.26-191.91 37.951 27.927-142.02 191.907ZM259.573 88.434l-19.096-14.083c7.877-10.502 22.676-12.889 33.178-5.251 10.503 7.877 12.65 22.676 4.774 33.178zm4.773-23.392 430.84 85.69-9.79 46.545-430.836-85.69zM690.17 174.124l5.017-23.392c12.65 2.626 21 15.037 18.374 27.927-2.865 12.889-15.275 21.244-28.164 18.618zm16.712-16.947 273.056 269.481-33.65 33.894-272.825-269.72zm256.11 286.428 16.946-16.947c9.31 9.07 9.31 24.108 0 33.656-9.305 9.309-24.346 9.547-33.65.239z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "path",
          {
            stroke: "none",
            d: "M282.248 94.64c-.954-12.89-12.412-22.437-25.54-21.244s-22.676 12.651-21.72 25.779zm0 0 22.198 265.185-47.26 4.296-22.199-264.946zm-1.432 267.334 23.63-2.15c.956 12.89-8.593 24.586-21.72 25.78-13.128 1.192-24.585-8.355-25.54-21.483zm-9.07-21.722L684.68 165.77l17.9 43.442-412.932 174.483zm430.834-131.04c12.176-5.013 17.907-18.857 12.89-31.03-4.775-11.935-18.614-17.664-30.79-12.413zM55.254 841.264c-8.593 9.785-7.639 24.82 2.386 33.417 9.787 8.355 24.824 7.16 33.417-2.625zm0 0 110.513-128.177 35.804 30.793L91.057 872.056Zm128.415-112.663-17.902-15.514c8.593-10.025 23.63-11.219 33.417-2.626 9.786 8.354 10.98 23.394 2.387 33.42zm14.083-19.334 260.411 190-28.166 38.185-260.41-189.758Zm232.245 228.185c10.503 7.882 25.301 5.49 33.178-5.25 7.877-10.5 5.49-25.3-5.012-32.935z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "path",
          {
            stroke: "none",
            d: "M160.277 727.647c-3.342 12.653 4.297 25.537 16.948 28.643 12.412 3.34 25.539-4.295 28.88-16.945zm0 0 98.34-373.55 45.83 11.695-98.341 373.553zm144.17-361.855c3.34-12.65-4.059-25.54-16.71-28.881-12.65-3.104-25.778 4.535-29.12 17.185z"
          }
        )
      ]
    }
  );
  var Cristal_default = SvgCristal;

  // build/lib-react-tsx/misc/Cristal2.tsx
  var React58 = __toESM(require_react(), 1);
  var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
  var SvgCristal2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            stroke: "none",
            d: "M284.74 723.59c-6.913 2.359-10.453 9.775-8.093 16.522 2.192 6.912 9.779 10.45 16.523 8.261zm0 0 181.074-61.54 8.43 24.783-181.074 61.54zm189.504-36.757c6.913-2.36 10.453-9.776 8.093-16.522-2.36-6.912-9.779-10.455-16.523-8.261zM616.54 537.96c-1.348 6.916 3.204 13.828 10.286 15.177 7.081 1.515 13.823-3.038 15.342-10.12zm0 0 39.287-200.967 25.457 5.057-39.116 200.967zm64.744-195.91c1.35-6.912-3.203-13.825-10.285-15.174-7.081-1.517-13.828 3.036-15.172 10.117z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            stroke: "none",
            d: "M634.752 74.317c34.393-29.168 82.44-35.069 132.176-21.075l-7.077 25.29c-41.475-11.802-80.93-7.419-108.242 15.679Zm132.176-21.075c48.222 13.656 98.128 46.027 138.758 93.909l-19.895 16.86c-37.257-43.836-82.61-73.34-125.94-85.48Zm138.758 93.909-19.895 16.86zm-9.945 8.43 9.27-9.273c5.058 5.058 5.058 13.488 0 18.546s-13.488 5.058-18.545 0zm9.945-8.43c40.635 47.882 64.404 102.508 69.801 152.075l-25.967 2.866c-5.058-44.678-26.637-94.246-63.73-138.081zm69.801 152.075c5.733 51.591-7.926 97.956-42.32 127.123l-16.856-20.063c27.312-23.098 37.932-61.2 33.21-104.194zm-42.32 127.123c-34.223 29.168-82.274 35.07-132.18 20.907l7.081-25.29c41.475 11.802 80.926 7.587 108.243-15.68zm-132.18 20.906c-48.052-13.656-98.123-45.858-138.758-93.74l20.065-17.028c37.092 43.835 82.445 73.34 125.774 85.48zm-138.758-93.74c-40.46-47.882-64.234-102.676-69.797-152.244l26.133-2.866c4.887 44.679 26.637 94.246 63.73 138.082zm-69.797-152.244c-5.732-51.422 7.922-97.787 42.32-126.954l16.857 19.894c-27.142 23.098-37.932 61.201-33.044 104.194z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M874.496 134q6.071 3.54 10.62 9.105c28.326 33.382 1.184 102.845-60.526 155.11-61.705 52.265-134.54 67.608-162.866 34.225-3.034-3.54-5.562-7.586-7.247-11.97 33.214 20.569 97.278 3.203 152.242-43.33 54.963-46.701 82.445-107.06 67.777-143.14"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M608.11 118.995c2.364-5.058 5.567-9.442 9.61-12.982 37.432-32.877 132.181 14.837 211.593 106.554 79.407 91.718 113.465 192.708 76.038 225.584a39 39 0 0 1-14.163 7.924c19.895-41.643-14.838-130.832-85.648-212.602-70.811-81.939-153.761-128.64-197.43-114.478"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            stroke: "none",
            d: "M451.99 485.022c26.469-19.558 61.536-21.58 96.943-8.936l-8.765 24.615c-27.317-9.61-53.616-8.598-72.668 5.564zm96.943-8.936c33.55 11.802 67.608 37.26 94.245 73.173l-21.075 15.508c-23.434-31.525-52.94-53.781-81.935-64.066zm83.625 80.93 10.62-7.757c4.383 5.732 3.038 13.993-2.694 18.376-5.902 4.213-13.998 3.034-18.38-2.868zm8.43-10.12-16.691 20.234zm-8.26 10.12 9.27-9.276c5.058 5.227 5.058 13.488 0 18.546-5.227 5.227-13.488 5.227-18.546 0zm10.45-7.757c26.642 35.908 40.97 76.038 42.49 111.611l-26.133 1.01c-1.35-30.685-13.993-65.414-37.432-97.113zm42.49 111.611c1.684 37.427-10.456 70.306-36.923 90.032l-15.682-21.075c19.05-14.163 27.651-38.946 26.472-67.947zm-44.68 79.407 7.757 10.625c-5.732 4.213-13.993 3.033-18.38-2.869-4.214-5.732-3.034-13.993 2.698-18.206zm7.757 10.625-15.682-21.075zm0 0c-26.472 19.555-61.54 21.58-96.948 9.105l8.77-24.788c27.143 9.61 53.615 8.601 72.496-5.392zm-96.948 9.105c-33.549-11.974-67.774-37.431-94.244-73.344l21.075-15.508c23.433 31.525 52.939 53.784 81.94 64.064zm-94.244-73.344c-26.639-35.908-40.97-75.868-42.487-111.441l26.133-1.18c1.349 30.685 13.994 65.413 37.429 97.112zm-42.487-111.441c-1.686-37.597 10.453-70.474 36.923-90.032l15.511 20.906c-18.883 14.162-27.65 38.945-26.301 67.946zm44.679-79.578-7.756-10.622c5.732-4.215 13.994-3.035 18.377 2.866 4.215 5.732 3.035 13.994-2.866 18.377z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M606.93 524.98c3.204 2.695 6.238 5.733 8.766 9.271 23.774 32.035 6.242 85.48-39.111 119.033-45.523 33.719-101.666 34.898-125.439 2.699-2.529-3.374-4.72-7.082-6.238-10.96 26.976 22.084 76.039 17.871 116.5-12.14 40.635-30.01 58.841-75.703 45.522-107.902"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M433.612 518.234a36.3 36.3 0 0 1 8.261-9.271c30.516-23.267 96.775 12.645 148.03 80.252 51.251 67.607 68.113 141.287 37.597 164.55-3.203 2.53-6.911 4.383-11.129 5.568 18.211-30.01-.167-95.09-45.858-155.45-45.688-60.191-103.35-95.258-136.9-85.649"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            stroke: "none",
            d: "M141.431 563.082c38.272-4.552 75.026 13.824 103.857 47.208l-19.895 17.196c-23.098-26.807-51.928-41.644-80.758-38.271zm103.857 47.208c27.481 32.034 47.713 78.062 53.952 130.497l-26.133 3.203c-5.564-47.207-23.436-88.347-47.714-116.504zm53.952 130.497c6.237 52.6-2.53 102.17-21.75 139.767l-23.266-12.139c16.86-33.044 24.615-77.218 18.883-124.425zm-21.75 139.767c-20.063 39.111-51.591 65.584-89.694 70.136l-3.204-26.132c29-3.373 53.446-24.618 69.632-56.143zm-89.694 70.136c-38.272 4.553-75.195-13.823-103.857-47.037l19.895-17.197c23.098 26.807 51.76 41.64 80.758 38.102zM83.939 903.653c-27.481-32.035-47.713-78.062-53.951-130.667l25.964-3.033c5.732 47.207 23.604 88.347 47.882 116.503zM29.988 772.986c-6.238-52.6 2.529-102 21.75-139.597l23.266 11.969c-17.029 33.214-24.616 77.218-19.052 124.595Zm21.75-139.597c20.062-39.117 51.59-65.754 89.693-70.307l3.204 26.133c-29 3.543-53.446 24.618-69.631 56.143z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M280.02 706.393c1.685 4.213 2.865 8.596 3.371 12.98 5.058 41.644-45.353 81.77-112.624 89.696-67.102 8.09-125.605-19.051-130.495-60.696-.504-4.383-.504-8.936.17-13.319 14.33 34.054 67.27 54.964 127.29 47.712 59.853-7.081 106.386-39.79 112.287-76.373z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M102.485 584.157c4.384-2.359 9.105-4.048 13.994-4.722 45.521-6.067 93.066 70.306 106.216 170.962 13.152 100.651-12.981 187.14-58.503 193.382-4.89.675-9.779.334-14.668-.845 36.586-20.4 56.143-98.797 44.341-188.659-11.633-89.696-50.748-160.172-91.38-170.117z"
          }
        )
      ]
    }
  );
  var Cristal2_default = SvgCristal2;

  // build/lib-react-tsx/misc/CyclicVoltammetry.tsx
  var React59 = __toESM(require_react(), 1);
  var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
  var SvgCyclicVoltammetry = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 46.832,
            d: "M50 474.653c421.86 20.506 370.03-347.871 472.43-355.986 76.377 1.839-34.996 293.312 402.439 293.312 54.679 0 0 62.674-218.717 62.674-109.359 0-164.038 376.041-273.397 376.041S378.075 550 50 550"
          }
        )
      ]
    }
  );
  var CyclicVoltammetry_default = SvgCyclicVoltammetry;

  // build/lib-react-tsx/misc/Edit.tsx
  var React60 = __toESM(require_react(), 1);
  var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
  var SvgEdit = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(
          "g",
          {
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision",
            transform: "translate(162 62)scale(3.32556)",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                "path",
                {
                  fill: "none",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 11.55,
                  d: "M49.627 5.775h103.35c12.963 0 23.57 10.608 23.57 23.57v145.87c0 12.961-10.609 23.57-23.57 23.57H49.626c-12.962 0-23.57-10.606-23.57-23.57V29.344c0-12.964 10.605-23.57 23.57-23.57",
                  className: "fil0 str0"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                "path",
                {
                  d: "m151.591 33.47.187.007.183.023.181.037.179.05.175.066.171.078.168.091.165.104.16.116.156.128.152.14.147.151.141.162.137.172.132.183.125.192.12.201.114.211.107.22.101.227.094.236.087.243.08.25.073.257.065.264.057.27.048.275.04.28.032.286.023.29.014.296.005.298-.005.3-.014.294-.023.29-.031.286-.04.281-.05.275-.056.27-.065.264-.073.257-.08.25-.087.243-.094.236-.1.227-.108.22-.114.21-.12.202-.125.192-.132.182-.137.173-.141.162-.147.15-.152.14-.156.128-.16.117-.165.104-.168.09-.171.08-.175.064-.179.051-.18.037-.184.023-.187.007zM51.011 45.08V33.47h100.58v11.61zm0 0-.186-.008-.184-.023-.18-.036-.179-.051-.175-.065-.172-.079-.168-.09-.164-.105-.16-.116-.157-.128-.151-.14-.147-.15-.142-.163-.136-.172-.132-.183-.126-.192-.12-.201-.113-.211-.108-.22-.1-.227-.094-.235-.088-.244-.08-.25-.072-.257-.065-.264-.057-.27-.048-.275-.04-.28-.033-.286-.023-.29-.014-.295-.004-.3.004-.298.014-.295.023-.29.032-.286.04-.28.05-.276.056-.27.065-.263.072-.258.08-.25.088-.243.093-.235.101-.228.108-.22.113-.21.12-.202.126-.192.132-.182.136-.172.142-.162.147-.151.151-.14.156-.128.16-.117.165-.104.168-.09.172-.079.175-.065.178-.05.181-.038.184-.022.186-.008zm100.58 14.64.187.008.183.022.181.037.179.051.175.065.171.078.168.091.165.104.16.117.156.128.152.14.147.15.141.162.137.173.132.182.125.192.12.202.114.21.107.22.101.227.094.236.087.243.08.25.073.257.065.264.057.27.048.275.04.281.032.286.023.29.014.295.005.299-.005.298-.014.295-.023.29-.031.286-.04.281-.05.276-.056.27-.065.263-.073.257-.08.25-.087.243-.094.236-.1.227-.108.22-.114.21-.12.202-.125.192-.132.183-.137.172-.141.162-.147.15-.152.14-.156.129-.16.116-.165.104-.168.091-.171.078-.175.065-.179.051-.18.037-.184.023-.187.007zM51.011 71.33V59.72h100.58v11.61zm0 0-.186-.008-.184-.022-.18-.037-.179-.051-.175-.065-.172-.078-.168-.091-.164-.104-.16-.117-.157-.128-.151-.14-.147-.15-.142-.163-.136-.172-.132-.182-.126-.192-.12-.202-.113-.21-.108-.22-.1-.228-.094-.235-.088-.243-.08-.25-.072-.258-.065-.263-.057-.27-.048-.275-.04-.281-.033-.286-.023-.29-.014-.295-.004-.299.004-.299.014-.294.023-.291.032-.286.04-.28.05-.276.056-.27.065-.263.072-.257.08-.25.088-.244.093-.235.101-.228.108-.22.113-.21.12-.201.126-.193.132-.182.136-.172.142-.162.147-.151.151-.14.156-.128.16-.117.165-.103.168-.091.172-.079.175-.065.178-.05.181-.037.184-.023.186-.007zm100.58 14.64.187.008.183.022.181.037.179.051.175.065.171.078.168.091.165.104.16.117.156.128.152.14.147.15.141.163.137.172.132.182.125.192.12.202.114.21.107.22.101.228.094.235.087.243.08.25.073.258.065.263.057.27.048.275.04.281.032.286.023.29.014.295.005.299-.005.299-.014.294-.023.29-.031.287-.04.28-.05.276-.056.27-.065.263-.073.257-.08.25-.087.244-.094.235-.1.228-.108.219-.114.21-.12.202-.125.192-.132.183-.137.172-.141.162-.147.151-.152.14-.156.128-.16.116-.165.104-.168.091-.171.079-.175.065-.179.05-.18.037-.184.023-.187.007zM51.011 97.58V85.97h100.58v11.61zm0 0-.186-.008-.184-.022-.18-.037-.179-.051-.175-.065-.172-.078-.168-.091-.164-.104-.16-.117-.157-.128-.151-.14-.147-.15-.142-.162-.136-.173-.132-.182-.126-.192-.12-.202-.113-.21-.108-.22-.1-.227-.094-.236-.088-.243-.08-.25-.072-.257-.065-.264-.057-.27-.048-.275-.04-.281-.033-.286-.023-.29-.014-.295-.004-.299.004-.298.014-.295.023-.29.032-.286.04-.281.05-.276.056-.27.065-.263.072-.257.08-.25.088-.243.093-.236.101-.227.108-.22.113-.21.12-.202.126-.192.132-.183.136-.172.142-.162.147-.15.151-.14.156-.129.16-.116.165-.104.168-.091.172-.078.175-.065.178-.051.181-.037.184-.023.186-.007z",
                  className: "fil1"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                "rect",
                {
                  width: 44.549,
                  height: 90.161,
                  x: -55.056,
                  y: 79.964,
                  fill: "#fefefe",
                  fillRule: "evenodd",
                  className: "fil2",
                  rx: 6.733,
                  ry: 13.627,
                  transform: "rotate(-36.303)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                "path",
                {
                  fill: "none",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 11.55,
                  d: "m89.143 176.707.493-33.873m-32.965 24.217 32.472 9.656",
                  className: "fil0 str0"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
                "path",
                {
                  d: "M36.644 79.409 11.988 97.523l-6.782-9.23 24.657-18.115zm11.017-6.543-9.308 6.839-.042-.054-.042-.049-.044-.046-.046-.044-.045-.038-.045-.036-.051-.035-.053-.033-.052-.029-.056-.028-.056-.024-.055-.022-.06-.02-.064-.017-.06-.014-.06-.01-.062-.008-.064-.005-.061-.003-.056.001-.063.004-.06.007-.05.008-.058.012-.055.014-.051.017-.051.019-.05.021-.048.024-.05.027-.049.03-.05.036-6.781-9.232.537-.374.552-.343.565-.314.577-.282.586-.252.593-.22.601-.19.604-.158.606-.128.617-.099.61-.067.61-.039.615-.009.61.02.606.05.603.077.6.107.593.135.583.16.58.192.573.22.56.246.55.274.54.302.524.33.51.356.498.385.48.411.46.437.44.462.42.488.395.512zm35.811 68.254L38.353 79.705l9.308-6.839 45.12 61.415zm6.553 10.95-6.781-9.232.048-.037.043-.037.041-.04.038-.039.034-.04.034-.044.032-.046.03-.046.025-.047.026-.05.024-.056.022-.058.018-.056.016-.057.014-.062.01-.06.009-.062.005-.064.002-.06-.001-.064-.004-.063-.007-.06-.01-.062-.011-.058-.016-.057-.019-.06-.02-.057-.024-.055-.026-.053-.031-.055-.035-.057-.04-.056 9.31-6.839.37.532.338.544.31.559.28.572.25.58.218.587.187.593.158.601.127.605.097.608.068.61.038.609.01.607-.021.611-.05.605-.076.603-.107.6-.134.592-.164.59-.192.582-.218.57-.248.563-.275.554-.307.546-.332.53-.36.515-.387.5-.415.484-.442.466-.467.445-.495.425zm-31.438 8.883 24.656-18.115 6.782 9.231-24.656 18.115zm-11.017 6.543 9.308-6.839.042.054.042.049.044.046.046.043.045.039.046.035.05.035.053.033.052.03.056.028.056.024.056.022.059.019.064.018.061.013.06.011.062.008.06.005.062.002h.061l.06-.005.057-.006.057-.009.054-.011.055-.014.052-.016.048-.018.052-.023.048-.023.05-.027.049-.031.05-.035 6.782 9.231-.538.374-.551.344-.566.313-.576.283-.584.25-.596.222-.6.19-.604.158-.61.128-.61.098-.614.068-.612.038-.61.01-.61-.02-.608-.05-.604-.077-.6-.107-.593-.135-.583-.16-.579-.192-.573-.22-.561-.246-.55-.274-.54-.302-.524-.33-.51-.356-.498-.385-.48-.412-.459-.436-.44-.462-.42-.488zM11.76 99.242l45.119 61.415-9.309 6.839L2.45 106.08zm-6.554-10.95 6.782 9.231-.049.038-.044.038-.04.038-.037.04-.036.041-.033.043-.031.044-.028.046-.029.05-.026.053-.023.052-.021.056-.019.057-.016.057-.013.06-.011.063-.009.062-.004.064-.003.063.002.061.003.063.007.06.01.061.012.059.015.057.019.06.02.057.024.055.026.053.031.055.035.057.04.056-9.31 6.839-.37-.532-.338-.544-.31-.559-.28-.572-.25-.58-.217-.587-.188-.593-.158-.601-.127-.606-.097-.606-.068-.61-.038-.61-.009-.61.02-.608.05-.605.077-.603.106-.597.134-.595.164-.59.192-.581.22-.573.247-.565.276-.553.304-.541.333-.531.36-.517.388-.5.414-.483.443-.466.468-.446.493-.424.518-.4z",
                  className: "fil1"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var Edit_default = SvgEdit;

  // build/lib-react-tsx/misc/ElectronMicroscopy.tsx
  var React61 = __toESM(require_react(), 1);
  var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
  var SvgElectronMicroscopy = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
          "path",
          {
            stroke: "none",
            d: "M957.549 841.063c-66.235 43.629-139.481 78.247-217.722 101.458l-13.81-47.425c73.644-22.013 142.281-54.234 204.518-95.455ZM739.827 942.521c-75.643 22.612-155.892 34.82-238.94 34.82l.4-49.626c78.246 0 153.887-11.407 224.73-32.619zm-238.94 34.82c-83.048 0-163.495-12.208-239.138-34.82l14.808-47.425c71.041 21.212 146.485 32.62 224.73 32.62zm-239.138-34.82c-78.045-23.211-151.288-57.83-217.526-101.458l27.816-41.422c62.036 41.025 130.876 73.442 204.518 95.455ZM58.03 820.451l-13.808 20.814c-11.407-7.605-14.408-23.016-6.804-34.618 7.604-11.407 23.214-14.61 34.62-7.006zm-13.408-20.81c66.238-43.628 139.481-78.247 217.726-101.458l13.808 47.425c-73.642 22.013-142.282 54.43-204.518 95.455ZM262.35 698.183c75.644-22.612 155.89-34.82 238.938-34.82l-.4 49.626c-78.246 0-153.89 11.407-224.73 32.62zm238.938-34.82c83.048 0 163.496 12.208 239.139 34.82l-14.812 47.425c-71.04-21.212-146.482-32.619-224.727-32.619Zm239.139 34.82c78.045 23.211 151.285 57.83 217.526 101.458l-27.815 41.422c-62.04-41.024-130.88-73.442-204.523-95.455ZM943.94 820.45l14.01-20.809c11.408 7.403 14.41 22.814 6.805 34.417-7.605 11.407-23.212 14.61-34.619 7.207zM511.493 62.814C511.493 49.006 500.487 38 486.68 38c-13.608.2-24.815 11.407-24.815 25.014Zm0 0v500.09l-49.629.399V63.012zm-49.629 500.49c0 13.608 11.007 24.614 24.815 24.614 13.607-.2 24.814-11.407 24.814-25.014z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
          "path",
          {
            stroke: "none",
            d: "M467.068 589.52c-8.405 11.007-6.404 26.413 4.602 34.616 10.806 8.21 26.415 6.009 34.82-5zm0 0 72.041-95.456 39.423 29.817-72.042 95.255zm111.464-65.639c8.405-11.007 6.403-26.416-4.603-34.82-10.806-8.205-26.415-5.803-34.82 5.003z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
          "path",
          {
            stroke: "none",
            d: "M434.249 493.864c-8.205-10.807-23.814-12.808-34.62-4.403-11.007 8.205-13.208 23.814-4.803 34.82zm0 0 72.241 95.255-39.623 30.42-72.041-95.258zm32.618 125.675c8.405 10.802 23.814 12.807 34.82 4.401 11.007-8.405 13.008-23.816 4.803-34.821zm269.157-416.643h-104.66c.202 12.207 2.598 23.013 7.402 32.218 4.805 9.405 11.205 16.21 19.012 21.012 7.806 4.603 16.609 7.004 26.212 7.004 6.407 0 12.208-.801 17.41-2.201 5.404-1.601 10.41-3.802 15.411-7.004 5.006-3.202 9.604-6.604 13.81-10.406 4.2-3.602 9.603-8.605 16.205-14.809 2.806-2.4 6.608-3.602 11.81-3.602 5.404 0 10.008 1.601 13.407 4.603 3.203 3.002 5.006 7.204 5.006 12.607 0 4.803-2.005 10.606-5.606 17.01-3.802 6.404-9.603 12.608-17.208 18.61-7.605 6.004-17.214 10.807-28.817 14.81-11.608 4.002-24.818 5.803-39.826 5.803-34.417 0-61.234-9.806-80.246-29.217-19.01-19.611-28.615-46.227-28.615-79.846 0-15.81 2.401-30.618 7.004-44.026 4.803-13.608 11.604-25.014 20.615-34.82 9.004-9.605 20.21-17.01 33.414-22.213q19.815-7.804 43.83-7.804c21.01 0 38.818 4.402 53.831 13.207 15.008 9.005 26.012 20.212 33.616 34.22 7.403 14.008 11.205 28.217 11.205 42.825 0 13.407-3.998 22.013-11.602 26.215-7.807 3.802-18.614 5.804-32.62 5.804m-104.66-30.218h97.056c-1.205-18.411-6.205-32.019-14.812-41.024-8.601-9.205-19.812-13.808-33.817-13.808-13.406 0-24.214 4.803-32.821 13.808-8.601 9.205-13.81 23.013-15.607 41.024"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 55.632,
            d: "M789.856 66.216h100.058"
          }
        )
      ]
    }
  );
  var ElectronMicroscopy_default = SvgElectronMicroscopy;

  // build/lib-react-tsx/misc/Octochemdb.tsx
  var React62 = __toESM(require_react(), 1);
  var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
  var SvgOctochemdb = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
          "path",
          {
            fill: "#000",
            strokeWidth: 2,
            d: "M288.36 27.616C59.4 26.468 8.418 397.516 329.488 451.864c-59 1.068-110.764 16.22-183.5 51.94C-50.54 600.302-10.81 913.608 189.609 879.676c68.96-11.676 102.42-100.65 1.75-130.75 33.03 59.22-55.936 94.2-83.812 3.876-22.524-72.98 42.29-149.828 104.936-170 61-19.64 110.488-21.72 164.94-11.688-73.17 68.494-113.094 160.93-84.752 247.248 89.044 271.19 384.292 165.04 325.688-13.44-20.692-63.012-82.816-93.01-136-20.31 70.328-17.708 100.9 77.5 36.376 98.684-52.71 17.31-120.424-27.054-132.064-82.686-15.64-74.78 39.54-154.39 109.56-190.5 44.352 70.74 77.624 97.36 166.44 144.372 171.686 90.872 425.914-73.08 287.812-221.06-45.252-48.488-109.148-60.04-135 26.248 60.376-40.18 121.496 53.6 67.75 95.126-43.9 33.92-123.006 38.27-172.874 11-61.594-33.684-107.58-75.596-140.376-133.064 114.14 27.38 239.168-2.13 286-90.684 91.44-172.9-14.092-304.934-118.25-306.75-40.756-.712-81.308 18.474-109.75 63-35.7 55.892-19.63 123.066 70.314 118.248-58.22-43.256-3.8-127.246 53.434-90.686 46.756 29.864 44.988 103.76 19.5 154.56-30.33 60.46-121.146 101.476-190.124 49.314-6.016-11.42-11.126-23.366-15.56-35.686 17.98-12.98 29.748-34.056 29.748-57.75 0-35.544-26.504-65.28-60.69-70.436-19.526-94.268-46.68-185.296-169.688-225.188-27.28-8.848-52.874-12.944-76.56-13.06zm235.689 274.81c18.926 0 33.874 14.948 33.874 33.876 0 18.926-14.946 33.874-33.872 33.874s-33.812-14.948-33.812-33.876c0-18.926 14.886-33.874 33.812-33.874zm-130.812 21c18.926 0 33.874 14.948 33.874 33.876 0 18.926-14.948 33.874-33.876 33.874-18.926 0-33.874-14.948-33.874-33.876 0-18.926 14.948-33.874 33.876-33.874z"
          }
        )
      ]
    }
  );
  var Octochemdb_default = SvgOctochemdb;

  // build/lib-react-tsx/misc/Peptide.tsx
  var React63 = __toESM(require_react(), 1);
  var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
  var SvgPeptide = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 50.719,
            d: "M122.51 335.96c42.683 0 77.33-34.825 77.33-77.329s-34.647-77.15-77.33-77.15c-42.504 0-77.15 34.646-77.15 77.15s34.646 77.33 77.15 77.33m377.896 421.47-169.124-71.434m80.186-484.157c42.505 0 77.15-34.825 77.15-77.33s-34.645-77.15-77.15-77.15c-42.504 0-77.15 34.646-77.15 77.15s34.646 77.33 77.15 77.33m113.05 290.386c42.503 0 77.146-34.646 77.146-77.15s-34.643-77.33-77.146-77.33c-42.507 0-77.332 34.825-77.332 77.33s34.825 77.15 77.332 77.15m-257.35 213.416c42.504 0 77.329-34.827 77.329-77.33s-34.825-77.152-77.329-77.152c-42.505 0-77.15 34.648-77.15 77.151 0 42.504 34.645 77.331 77.15 77.331M580.235 849.05c42.503 0 77.33-34.648 77.33-77.151 0-42.504-34.827-77.151-77.33-77.151s-77.15 34.647-77.15 77.15 34.646 77.152 77.15 77.152M507.37 337.746l-60.899-145.014m18.395 276.813-123.584 111.26m.358-423.077-144.122 64.47m675.784 463.439c42.683 0 77.326-34.647 77.326-77.15s-34.643-77.327-77.326-77.327c-42.504 0-77.151 34.823-77.151 77.326 0 42.504 34.647 77.151 77.15 77.151m-83.582-316.995c42.508 0 77.151-34.646 77.151-77.15 0-42.683-34.643-77.33-77.151-77.33-42.684 0-77.326 34.647-77.326 77.33 0 42.504 34.642 77.15 77.326 77.15m9.465 281.098L658.28 727.427M853.657 530.8l-43.933-165.015"
          }
        )
      ]
    }
  );
  var Peptide_default = SvgPeptide;

  // build/lib-react-tsx/misc/Percent.tsx
  var React64 = __toESM(require_react(), 1);
  var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
  var SvgPercent = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 100.803,
            d: "M127.434 119.309c-57.771 63.662-57.973 167.047-.439 230.936 57.526 63.88 150.991 64.055 208.761.393 57.765-63.669 57.961-167.055.434-230.934-57.534-63.875-150.986-64.056-208.756-.395M316.6 924.229 672.977 71.633M653.829 645.28c-57.765 63.654-57.968 167.04-.439 230.925 57.517 63.881 150.985 64.061 208.754.394 57.762-63.664 57.96-167.044.43-230.925-57.534-63.887-150.984-64.055-208.745-.394"
          }
        )
      ]
    }
  );
  var Percent_default = SvgPercent;

  // build/lib-react-tsx/misc/Polymer.tsx
  var React65 = __toESM(require_react(), 1);
  var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
  var SvgPolymer = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 50,
            d: "M100 200c150-50 300-100 421.429-68.571C704.945 178.927 894.769 164.709 950 150M50 450c182.696-142.115 350-88.4 450-38.4C589.443 456.32 850 450 950 550M50 800c150 100 250 100 350 50s150-50 227.143-92.857C724.877 702.846 900 750 950 700"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 50,
            d: "M344.286 138.571c150 50 55.326 255.413 144.285 267.143m-232.857-32.857C300 450 340.797 708.987 150 850m667.143-677.143C750 250 650 400 700 450m-153.571-19.286C600 500 550 700 567.857 772.143"
          }
        )
      ]
    }
  );
  var Polymer_default = SvgPolymer;

  // build/lib-react-tsx/misc/Pubchem.tsx
  var React66 = __toESM(require_react(), 1);
  var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
  var SvgPubchem = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", { d: "M510.482 36.393a27.5 27.5 0 0 0-13.181 3.439l-372.125 205.88a27.53 27.53 0 0 0-14.2 24.015l-1.101 436.533a27.53 27.53 0 0 0 13.002 23.45l370.475 230.102a27.53 27.53 0 0 0 27.873.688l372.127-206.432a27.53 27.53 0 0 0 14.171-23.998l1.102-435.982a27.53 27.53 0 0 0-13.002-23.451L525.148 40.535a27.53 27.53 0 0 0-14.666-4.142zm-.66 59.423L853.54 309.3l-1.021 404.47L508.66 904.52l-343.7-213.472 1.022-405z" }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("path", { d: "M632.283 416.225h106.793c-3.302-29.726-11.01-56.15-23.67-79.27s-28.625-42.387-48.443-58.35c-19.267-15.414-41.286-27.525-66.058-35.232-24.771-8.257-50.644-12.66-78.719-12.66-38.533 0-73.214 7.156-104.04 20.918-30.277 14.312-56.7 33.029-77.619 57.8-20.918 24.222-37.433 53.397-48.442 85.876-11.56 33.029-17.065 68.81-17.065 107.344 0 37.433 5.505 72.113 17.065 104.591 11.01 32.479 27.524 61.104 48.442 84.775 20.918 24.22 47.342 42.937 77.618 56.7 30.827 13.761 65.508 20.367 104.041 20.367 31.378 0 59.452-4.404 85.325-14.312 25.873-9.358 48.443-23.671 67.71-41.837q28.9-27.249 46.24-66.058c12.11-25.873 19.267-55.048 22.02-87.527H636.686c-4.404 34.68-15.964 62.755-35.231 83.674-18.717 21.469-45.14 31.928-79.27 31.928-24.771 0-45.69-4.955-63.305-14.863-17.616-9.909-31.378-23.12-42.387-39.085-10.46-16.514-18.717-35.23-23.671-55.598s-7.156-41.286-7.156-62.755c0-22.57 2.202-44.59 7.156-65.508 4.954-21.469 13.212-40.185 23.67-56.7 11.01-16.514 24.772-29.725 42.388-39.634 17.615-9.909 38.534-14.863 63.305-14.863 13.762 0 26.974 2.202 39.085 7.156 12.66 4.404 23.67 10.46 33.579 18.716 9.909 8.258 18.166 17.616 24.772 28.626s10.459 22.57 12.66 35.78z" })
      ]
    }
  );
  var Pubchem_default = SvgPubchem;

  // build/lib-react-tsx/misc/SearchRequest.tsx
  var React67 = __toESM(require_react(), 1);
  var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
  var SvgSearchRequest = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.85,
            d: "M423.177 667.09c-166.181 0-301.72-135.541-301.72-301.721 0-166.183 135.538-301.726 301.72-301.726 166.18 0 301.725 135.544 301.725 301.726 0 166.18-135.544 301.72-301.725 301.72",
            className: "fil0 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.868,
            d: "M875.32 876.926 652.38 578.482l-78.036 58.23 222.94 298.444",
            className: "fil0 str1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.849,
            d: "M797.267 935.193c11.855 15.876 34.551 19.165 50.425 7.306m.002-.001L868 927.33m0 0c15.874-11.858 19.162-34.545 7.304-50.418",
            className: "fil0 str1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 24.319,
            d: "M423.177 612.992c-136.382 0-247.623-111.241-247.623-247.623 0-136.389 111.241-247.623 247.623-247.623 136.387 0 247.623 111.234 247.623 247.623 0 136.382-111.236 247.623-247.623 247.623",
            className: "fil0 str2",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(
          "path",
          {
            stroke: "none",
            d: "M584.777 262.134v151.73L568 414V262.27Zm0 151.73c0 11.906-5.141 22.728-13.53 30.577l-11.432-12.178C564.888 427.53 568 421.034 568 414Zm-13.53 30.577c-8.252 7.643-19.549 12.446-31.929 12.446l.136-16.776c7.981 0 15.22-3.043 20.36-7.848zm-31.929 12.446H383.462l.135-16.776h155.857Zm-155.788-8.388-.068 8.388a8.343 8.343 0 0 1-8.388-8.388 8.5 8.5 0 0 1 8.523-8.388zm6.358 5.48-73.26 84.963-12.718-10.892 73.26-85.031zm-79.62 79.551 6.36 5.412c-3.045 3.585-8.389 3.99-11.906.946-3.45-2.975-3.856-8.32-.812-11.838zm-8.184-1.69 18.061-84.965 16.37 3.248-18.061 85.031zm26.246-83.341-8.253-1.69c.948-4.534 5.412-7.51 10.012-6.563 4.532.946 7.441 5.344 6.426 9.943zm-.067 8.388h-17.927l.136-16.776h17.926zm-17.927 0c-12.379 0-23.676-4.735-31.86-12.378l11.567-12.312c5.208 4.87 12.446 7.914 20.429 7.914zm-31.86-12.378c-8.321-7.78-13.53-18.604-13.53-30.509l16.844-.136c0 7.036 3.111 13.597 8.253 18.333zM264.945 414V262.27l16.844-.136v151.73Zm0-151.73c0-11.974 5.209-22.797 13.597-30.577l11.432 12.177c-5.074 4.735-8.185 11.161-8.185 18.264zm13.597-30.577c8.185-7.711 19.482-12.514 31.929-12.514l-.136 16.844c-7.982 0-15.22 2.976-20.361 7.847zm31.929-12.514h228.982l-.136 16.844H310.336Zm228.982 0c12.378 0 23.675 4.803 31.86 12.447l-11.567 12.311c-5.208-4.938-12.446-7.914-20.429-7.914zm31.86 12.447c8.322 7.779 13.463 18.602 13.463 30.508L568 262.27c0-7.103-3.112-13.597-8.253-18.332z"
          }
        )
      ]
    }
  );
  var SearchRequest_default = SvgSearchRequest;

  // build/lib-react-tsx/misc/Weight.tsx
  var React68 = __toESM(require_react(), 1);
  var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
  var SvgWeight = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
          "path",
          {
            stroke: "none",
            d: "M407.416 576.172H125.817l.484-47.956h281.438zm-281.438-23.978-.161 23.978c-13.356 0-23.976-10.785-23.815-23.978.16-13.356 10.942-24.136 24.298-24.136zm-22.045-9.335 140.8-330.193 44.09 18.505-140.8 330.195zm162.845-321.02-22.045-9.173c5.149-12.23 19.31-18.022 31.539-12.873 12.229 4.988 17.861 19.149 12.55 31.378zm22.045-9.495 140.8 330.196-44.091 19.15-140.8-330.197Zm118.754 339.85 22.045-9.654c5.31 12.23-.482 26.39-12.712 31.7-12.23 5.147-26.229-.324-31.378-12.55z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M431.392 553.162v1.283c0 93.01-73.698 168.317-164.614 168.317s-164.615-75.306-164.615-168.317v-1.283z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
          "path",
          {
            stroke: "none",
            d: "M875.835 576.172h-281.6l.324-47.956h281.6zm-281.437-23.978-.163 23.978c-13.356 0-23.973-10.785-23.816-23.978.163-13.356 10.947-24.136 24.302-24.136zm-22.046-9.335 140.8-330.193 44.091 18.505-140.8 330.195zm162.845-321.02-22.046-9.173c5.152-12.23 19.313-18.022 31.538-12.873 12.23 4.988 17.863 19.149 12.554 31.378zm22.046-9.495 140.8 330.196-44.092 19.15-140.8-330.197Zm118.754 339.85 22.046-9.654c5.309 12.23-.482 26.39-12.711 31.7-12.23 5.147-26.23-.324-31.38-12.55z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M899.813 553.162v1.283c0 93.01-73.698 168.317-164.616 168.317-90.917 0-164.615-75.306-164.615-168.317v-1.283z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
          "path",
          {
            stroke: "none",
            d: "M269.03 194.322c-13.195.161-23.976 10.781-24.137 24.137a23.76 23.76 0 0 0 23.815 23.815zm0 0h464.236l-.32 47.952H268.71zm463.916 47.952c13.193 0 24.135-10.78 24.135-23.976.163-13.195-10.46-23.976-23.815-23.976z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
          "path",
          {
            stroke: "none",
            d: "M524.883 89.085c.161-13.195-10.62-23.816-23.815-23.655-13.195 0-23.976 10.781-23.976 24.137zm0 0v126.478l-47.791.322V89.568zm-47.791 126.8c0 13.355 10.62 23.976 23.815 23.815 13.356-.161 23.976-10.942 23.976-24.137z"
          }
        )
      ]
    }
  );
  var Weight_default = SvgWeight;

  // build/lib-react-tsx/misc/Xps.tsx
  var React69 = __toESM(require_react(), 1);
  var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
  var SvgXps = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      id: "svg4152",
      x: 0,
      y: 0,
      enableBackground: "new 0 0 1000 1000",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("style", { children: ".st0{fill:none;stroke:#000;stroke-width:38.8466;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:9.4994}" }),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
          "filter",
          {
            id: "filter907",
            width: 1.079,
            height: 1.248,
            x: -0.04,
            y: -0.124,
            colorInterpolationFilters: "sRGB",
            children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("feGaussianBlur", { id: "feGaussianBlur909", stdDeviation: 1.527 })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("g", { id: "g6050", transform: "translate(1485.641 -1771.974)scale(2.37485)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
            "path",
            {
              id: "path5963",
              d: "M-578.8 1087.7c0 5.5 3.7 9.9 8.2 9.9s8.2-4.4 8.2-9.9zm0 0V814.4h16.4v273.3zm16.4-273.3c0-5.4-3.7-9.8-8.2-9.8-4.6 0-8.2 4.4-8.2 9.8z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("path", { id: "path5965", d: "m-570.6 801.5 21 27.7", className: "st0" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("path", { id: "path5967", d: "m-591.6 829.2 21-27.7", className: "st0" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
            "path",
            {
              id: "path5969",
              d: "M-562.4 1087.7c-6.2 0-11.2 3.7-11.2 8.2 0 4.6 5 8.2 11.2 8.2zm0 0H-253v16.4h-309.5v-16.4zm309.4 16.4c6.1 0 11.1-3.7 11.1-8.2s-5-8.2-11.1-8.2z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("path", { id: "path5971", d: "m-238.8 1095.8-27.7 21.1", className: "st0" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("path", { id: "path5973", d: "m-266.5 1074.8 27.7 21", className: "st0" }),
          /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
            "path",
            {
              id: "path857",
              fill: "none",
              stroke: "#000",
              strokeMiterlimit: 9.499,
              strokeWidth: 30,
              d: "M-551.6 1040c7.1 1.1 22 2.3 38.5-4.5 3.1-1.3 12.3-5.2 20-12.6 17-16.4 12-36.4 19.6-65.6 6.1-23.4 22.5-61 39.5-61 21.7 0 39.9 61.1 41.8 67.6 11.2 37.6 5.1 55.6 21 67.1 8.7 6.3 21.6 6.6 47.5 7.2 18.6.5 33.9-.8 44.2-1.9"
            }
          )
        ] })
      ]
    }
  );
  var Xps_default = SvgXps;

  // build/lib-react-tsx/misc/Zenodo.tsx
  var React70 = __toESM(require_react(), 1);
  var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
  var SvgZenodo = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 101.085,
            d: "M248.634 72.657h495.169l-495.17 671.945h501.03",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        )
      ]
    }
  );
  var Zenodo_default = SvgZenodo;

  // build/lib-react-tsx/nmr/13C.tsx
  var React71 = __toESM(require_react(), 1);
  var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
  var Svg13C = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("path", { d: "M959.838 645.911c0 8.223-.169 15.101-.665 20.795a128 128 0 0 1-2.185 14.756c-.999 4.185-2.348 7.712-4.019 10.559-1.681 3.015-4.193 6.366-7.878 10.06-3.524 3.853-10.569 8.546-20.795 14.579-10.396 5.873-22.968 11.57-37.889 16.935-14.92 5.363-31.848 9.892-51.132 13.418-19.114 3.684-39.733 5.531-62.034 5.531-43.586 0-82.819-6.875-117.862-20.284-35.035-13.419-64.871-33.361-89.349-60.02-24.647-26.828-43.418-60.021-56.505-100.09-13.075-39.902-19.78-86.337-19.78-139.481 0-53.99 7.208-101.937 21.629-143.854 14.42-41.906 34.535-77.114 60.521-105.62 25.816-28.498 56.835-50.127 93.049-64.874 36.208-14.756 75.94-22.13 119.534-22.13 17.772 0 34.71 1.502 51.132 4.527 16.433 2.848 31.521 6.699 45.434 11.563 13.918 4.695 26.484 10.225 37.559 16.433 11.068 6.198 18.945 11.562 23.298 15.925 4.531 4.361 7.551 8.045 9.055 11.062 1.682 3.026 3.018 6.708 4.028 11.238 1.004 4.694 1.671 10.06 2.17 16.257.514 6.208.675 13.92.675 23.143 0 9.716-.329 18.104-.844 24.981-.666 6.865-1.833 12.395-3.514 16.759-1.679 4.194-3.519 7.377-5.868 9.225-2.348 2.013-4.861 3.014-7.886 3.014-4.86 0-11.059-2.848-18.606-8.546-7.544-5.698-17.269-12.24-29.342-19.283-11.895-7.043-26.149-13.419-42.581-19.115q-24.89-8.549-59.344-8.548c-25.15 0-47.616 5.196-67.4 15.423-19.951 10.39-36.72 25.147-50.629 44.263-13.92 19.107-24.478 42.242-31.689 69.402-7.208 27.328-10.894 57.838-10.894 91.877 0 37.387 3.86 69.745 11.561 97.063 7.72 27.329 18.781 49.795 33.037 67.564 14.242 17.604 31.344 30.855 51.465 39.569 20.114 8.556 42.918 12.907 68.063 12.907q34.448 0 59.354-8.046c16.768-5.363 31.177-11.405 43.083-17.937 11.905-6.544 21.798-12.407 29.508-17.771 7.714-5.197 13.576-7.711 17.939-7.711 3.186 0 5.863.502 7.71 1.846 2.012 1.337 3.683 4.019 5.032 7.879 1.336 4.016 2.179 9.381 2.846 16.424.674 7.046 1.008 16.428 1.008 28.333zM205.28 297.133c0 4.263-.234 7.83-.695 10.767-.463 2.946-1.082 5.343-1.935 7.042-.855 1.711-1.777 3.026-2.871 3.724-1 .778-2.236 1.159-3.634 1.159H34.219a5.5 5.5 0 0 1-3.41-1.159c-1.079-.698-2.015-2.013-2.867-3.724-.849-1.698-1.467-4.096-1.938-7.042-.457-2.938-.696-6.504-.696-10.767 0-4.411.239-8.057.618-10.992.392-2.947.934-5.343 1.791-7.122.853-1.858 1.777-3.184 2.867-4.026a5.85 5.85 0 0 1 3.634-1.241h54.667V82.709L41.654 108.81c-3.487 1.699-6.276 2.703-8.517 3.095-2.173.384-3.88-.077-5.195-1.396-1.306-1.237-2.164-3.486-2.634-6.658-.38-3.171-.619-7.674-.619-13.401 0-3.632.078-6.581.239-8.978.076-2.326.459-4.341 1.077-5.962.632-1.708 1.475-3.026 2.479-4.106 1.091-1.08 2.561-2.171 4.339-3.409L95.94 27.188c.694-.628 1.621-1.091 2.789-1.474 1.159-.392 2.626-.695 4.413-.93 1.855-.238 4.183-.384 7.197-.463 2.95-.078 6.739-.078 11.466-.078 5.728 0 10.372.078 13.937.305 3.557.238 6.19.63 8.054 1.168 1.779.463 3.017 1.24 3.638 2.095.537.923.852 2.082.852 3.397v242.546h47.86c1.397 0 2.634.465 3.794 1.241 1.081.844 2.093 2.169 2.945 4.026.844 1.78 1.384 4.174 1.778 7.122.384 2.935.617 6.581.617 10.99zm236.813-63.262c0 14.638-2.791 27.643-8.37 39.028-5.567 11.309-13.401 20.837-23.389 28.576-9.994 7.663-21.906 13.548-35.856 17.575-13.93 4.028-29.114 5.963-45.608 5.963-9.994 0-19.355-.699-28.106-2.094-8.754-1.462-16.494-3.25-23.233-5.343-6.739-2.161-12.32-4.331-16.728-6.582-4.342-2.316-7.202-4.018-8.599-5.265-1.394-1.16-2.404-2.554-3.016-4.026-.696-1.542-1.315-3.331-1.863-5.335-.541-2.094-.926-4.648-1.16-7.751-.225-3.096-.315-6.816-.315-11.228 0-7.281.632-12.31 1.79-15.099 1.238-2.79 3.094-4.185 5.497-4.185 1.466 0 4.097 1.011 7.82 3.103 3.713 2.006 8.44 4.175 14.167 6.582 5.736 2.318 12.477 4.49 20.214 6.582 7.665 2.016 16.494 3.018 26.327 3.018 8.292 0 15.64-1.002 21.996-2.937 6.346-1.946 11.77-4.725 16.177-8.292 4.498-3.567 7.829-7.818 10-12.927 2.163-5.039 3.332-10.687 3.332-16.885 0-6.819-1.394-12.928-4.036-18.351-2.626-5.5-6.583-10.146-11.771-14.018-5.186-3.803-11.769-6.816-19.746-8.908-7.895-2.171-17.27-3.173-28.027-3.173h-25.4c-1.939 0-3.646-.305-4.961-.855-1.399-.463-2.557-1.62-3.401-3.251-.935-1.701-1.553-3.95-1.947-6.887-.38-3.025-.536-6.817-.536-11.462 0-4.42.156-7.977.536-10.847.393-2.779 1.011-4.949 1.791-6.423.843-1.553 1.933-2.555 3.17-3.173 1.319-.618 2.872-.932 4.65-.932h25.625c8.833 0 16.571-1.004 23.393-3.017 6.816-2.092 12.544-4.959 17.111-8.753 4.646-3.793 8.133-8.36 10.607-13.702 2.396-5.424 3.569-11.308 3.569-17.821 0-5.03-.779-9.754-2.487-14.164-1.622-4.49-4.097-8.369-7.359-11.621-3.252-3.249-7.428-5.805-12.614-7.663-5.118-1.934-11.16-2.868-18.124-2.868-7.898 0-15.257 1.161-22.23 3.487-6.965 2.397-13.163 4.96-18.736 7.74-5.498 2.79-10.225 5.425-14.014 7.83-3.874 2.398-6.739 3.635-8.519 3.635-1.237 0-2.328-.306-3.184-.776-.921-.542-1.7-1.542-2.317-3.095-.542-1.472-1.012-3.71-1.316-6.583-.314-2.866-.463-6.581-.463-11.079 0-3.792.07-6.965.225-9.441.16-2.483.47-4.568.935-6.276.382-1.619 1.003-3.095 1.7-4.255.619-1.246 1.785-2.562 3.252-4.026 1.548-1.394 4.646-3.565 9.292-6.435 4.724-2.857 10.606-5.647 17.74-8.36 7.124-2.79 15.256-5.028 24.63-6.964 9.292-1.866 19.349-2.789 30.277-2.789 14.162 0 26.796 1.621 37.789 4.95q16.37 4.996 27.641 14.413c7.516 6.266 13.162 14.008 17.042 23.152 3.794 9.136 5.729 19.431 5.729 30.974 0 8.911-1.091 17.19-3.41 24.932-2.25 7.75-5.58 14.638-9.911 20.679-4.412 6.041-9.91 11.149-16.493 15.412-6.58 4.254-14.175 7.436-22.771 9.53v.687c10.227 1.169 19.517 3.803 27.642 7.83 8.214 4.017 15.109 9.056 20.758 15.099 5.651 6.041 10.07 12.846 13.084 20.521 3.032 7.577 4.508 15.789 4.508 24.619z" })
      ]
    }
  );
  var C_default = Svg13C;

  // build/lib-react-tsx/nmr/1H.tsx
  var React72 = __toESM(require_react(), 1);
  var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
  var Svg1H = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("path", { d: "M953.102 865.157c0 3.837-1.218 7.457-3.836 10.49-2.628 3.245-6.879 5.87-12.742 7.695-5.848 2.012-13.735 3.625-23.629 4.83-9.912 1.229-22.238 1.822-37.394 1.822-15.355 0-28.085-.594-38.183-1.822-9.91-1.204-17.991-2.818-23.649-4.83-5.662-1.825-9.896-4.45-12.321-7.695-2.633-3.032-3.839-6.653-3.839-10.49V555.371H510.967v309.787c0 3.838-1.209 7.457-3.632 10.49-2.43 3.244-6.464 5.87-12.53 7.695-5.861 2.014-13.748 3.625-23.641 4.831-9.902 1.229-22.43 1.822-37.799 1.822-14.956 0-27.476-.594-37.579-1.822-10.099-1.204-18.187-2.817-24.049-4.831-5.861-1.825-10.095-4.451-12.724-7.695-2.634-3.031-3.837-6.652-3.837-10.49V141.536c0-3.834 1.203-7.485 3.837-10.515 2.627-3.221 6.861-5.848 12.724-7.673 5.862-2.036 13.951-3.645 24.049-4.852 10.102-1.208 22.624-1.822 37.579-1.822 15.369 0 27.897.615 37.799 1.822 9.894 1.207 17.779 2.816 23.641 4.852 6.066 1.825 10.101 4.452 12.53 7.673 2.423 3.029 3.632 6.68 3.632 10.515V422.81h286.542V141.536c0-3.834 1.205-7.485 3.839-10.515 2.427-3.221 6.661-5.848 12.321-7.673 5.658-2.036 13.737-3.645 23.649-4.852 10.098-1.208 22.829-1.822 38.183-1.822 15.155 0 27.481.615 37.394 1.822 9.894 1.207 17.779 2.816 23.629 4.852 5.863 1.825 10.114 4.452 12.742 7.673 2.617 3.029 3.836 6.68 3.836 10.515zM259.367 349.994c0 5.14-.286 9.425-.849 12.978-.563 3.55-1.312 6.44-2.327 8.5-1.03 2.036-2.153 3.623-3.458 4.477-1.217.923-2.711 1.397-4.391 1.397H53.178a6.7 6.7 0 0 1-4.109-1.397c-1.312-.854-2.422-2.441-3.452-4.477-1.023-2.059-1.775-4.95-2.333-8.5-.557-3.553-.84-7.839-.84-12.978 0-5.327.283-9.709.744-13.26.476-3.553 1.124-6.44 2.146-8.572 1.025-2.252 2.149-3.838 3.455-4.853a7.06 7.06 0 0 1 4.389-1.494h65.893V91.547L62.13 122.995c-4.192 2.062-7.556 3.268-10.265 3.744-2.603.447-4.665-.098-6.25-1.682-1.588-1.492-2.616-4.214-3.173-8.029-.474-3.834-.747-9.234-.747-16.15 0-4.38.095-7.934.273-10.823.094-2.811.568-5.238 1.314-7.189.745-2.062 1.776-3.647 2.983-4.952 1.312-1.299 3.091-2.615 5.236-4.107l76.059-49.184c.842-.745 1.963-1.314 3.361-1.776 1.395-.475 3.175-.843 5.327-1.126 2.239-.284 5.033-.461 8.68-.553 3.544-.098 8.121-.098 13.807-.098 6.914 0 12.511.098 16.812.369 4.288.284 7.458.76 9.695 1.41 2.155.555 3.646 1.491 4.393 2.522.654 1.113 1.019 2.522 1.019 4.107v292.338h57.685c1.68 0 3.173.544 4.58 1.494 1.304 1.016 2.512 2.603 3.541 4.853 1.033 2.13 1.688 5.019 2.158 8.572.463 3.55.749 7.931.749 13.259z" })
      ]
    }
  );
  var H_default = Svg1H;

  // build/lib-react-tsx/nmr/1H13C.tsx
  var React73 = __toESM(require_react(), 1);
  var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
  var Svg1H13C = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 30.004,
            d: "m363.105 35.888 53.128 70.154m-106.259 0 53.131-70.154"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 41.53,
            d: "M363.114 640.841h576.354m-576.363 0V64.487"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 30.004,
            d: "m968.07 640.841-70.158 53.127m0-106.255 70.158 53.128"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", { d: "M480.425 505.72c27.762 0 50.405-14.576 50.405-32.437 0-17.87-22.644-32.435-50.405-32.435-27.769 0-50.41 14.565-50.41 32.435 0 17.862 22.641 32.437 50.41 32.437zM284.782 291.987c0 2.158-.043 3.961-.175 5.458a34 34 0 0 1-.572 3.875q-.397 1.652-1.057 2.774c-.441.795-1.101 1.672-2.071 2.642-.921 1.012-2.772 2.244-5.459 3.83-2.729 1.542-6.03 3.035-9.947 4.446-3.917 1.406-8.361 2.598-13.423 3.521-5.018.969-10.433 1.454-16.289 1.454-11.442 0-21.743-1.804-30.944-5.327-9.201-3.52-17.036-8.759-23.462-15.756-6.468-7.045-11.398-15.76-14.835-26.281-3.433-10.476-5.192-22.667-5.192-36.624 0-14.171 1.896-26.761 5.677-37.764 3.785-11.005 9.069-20.25 15.89-27.729 6.782-7.485 14.925-13.161 24.433-17.036 9.507-3.874 19.939-5.812 31.38-5.812 4.668 0 9.113.396 13.429 1.188 4.314.75 8.275 1.764 11.931 3.039 3.65 1.231 6.953 2.687 9.855 4.315 2.908 1.629 4.979 3.035 6.122 4.179q1.781 1.716 2.376 2.909c.44.791.791 1.761 1.056 2.949.262 1.23.441 2.642.571 4.27.131 1.628.175 3.65.175 6.075 0 2.549-.087 4.749-.217 6.554-.175 1.808-.485 3.258-.926 4.406-.441 1.101-.925 1.935-1.542 2.418-.615.529-1.275.792-2.065.792q-1.92.001-4.886-2.245c-1.982-1.493-4.537-3.209-7.704-5.061-3.126-1.847-6.869-3.521-11.178-5.018-4.358-1.499-9.556-2.244-15.586-2.244-6.602 0-12.501 1.362-17.694 4.047-5.24 2.729-9.638 6.603-13.293 11.62q-5.482 7.525-8.318 18.227c-1.896 7.171-2.861 15.185-2.861 24.119q.002 14.725 3.036 25.486c2.025 7.18 4.93 13.074 8.672 17.742 3.742 4.621 8.231 8.096 13.511 10.384 5.284 2.25 11.271 3.393 17.873 3.393 6.031 0 11.223-.707 15.581-2.113 4.402-1.411 8.188-2.996 11.314-4.712 3.122-1.716 5.721-3.257 7.747-4.664 2.026-1.366 3.563-2.027 4.708-2.027.838 0 1.542.131 2.026.485.528.354.969 1.056 1.318 2.07.354 1.057.571 2.463.75 4.309.177 1.846.265 4.315.265 7.437z" }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          "path",
          {
            strokeMiterlimit: 22.926,
            strokeWidth: 0.966,
            d: "M75.202 200.414c0 1.117-.06 2.052-.183 2.825-.122.772-.283 1.403-.507 1.851-.227.446-.471.791-.755.975-.262.206-.59.307-.956.307H30.29c-.328 0-.633-.101-.896-.307-.284-.184-.529-.529-.75-.975-.223-.448-.388-1.079-.51-1.851-.122-.774-.181-1.708-.181-2.825 0-1.162.059-2.114.163-2.887.1-.774.245-1.406.467-1.875.222-.484.467-.834.75-1.057.267-.201.589-.324.956-.324h14.354v-50.162l-12.402 6.856c-.917.446-1.646.707-2.236.811-.572.1-1.017-.021-1.362-.367-.35-.328-.571-.913-.692-1.747-.103-.835-.163-2.013-.163-3.521 0-.956.021-1.729.06-2.358.023-.611.122-1.14.284-1.568.162-.445.388-.791.65-1.074.284-.284.672-.572 1.139-.896l16.569-10.717c.188-.162.428-.284.733-.384.305-.105.689-.183 1.162-.245.484-.06 1.096-.101 1.891-.122.77-.023 1.769-.023 3.009-.023 1.501 0 2.726.023 3.659.083.934.06 1.625.162 2.114.305.466.122.794.324.956.546.14.245.222.55.222.895v63.682h12.563c.367 0 .693.123.996.324.289.223.551.571.774 1.057.227.466.367 1.101.471 1.874.102.78.162 1.732.162 2.894zm62.175-16.612q-.002 5.763-2.196 10.249a21.35 21.35 0 0 1-6.141 7.498c-2.625 2.013-5.755 3.559-9.414 4.621-3.66 1.057-7.646 1.563-11.974 1.563-2.625 0-5.083-.184-7.385-.551q-3.445-.576-6.096-1.403c-1.768-.567-3.236-1.139-4.393-1.729-1.139-.612-1.891-1.057-2.258-1.38a2.8 2.8 0 0 1-.791-1.056 10 10 0 0 1-.489-1.405q-.215-.817-.305-2.03a41 41 0 0 1-.083-2.952c0-1.908.167-3.233.471-3.961.324-.733.812-1.101 1.441-1.101.388 0 1.078.267 2.052.812.979.533 2.218 1.1 3.721 1.729 1.505.612 3.275 1.18 5.31 1.729 2.013.529 4.329.791 6.909.791 2.179 0 4.109-.262 5.777-.773 1.669-.507 3.091-1.235 4.25-2.175 1.179-.934 2.053-2.053 2.625-3.393.567-1.324.873-2.809.873-4.433 0-1.791-.367-3.397-1.057-4.822-.689-1.441-1.729-2.663-3.092-3.676-1.362-1-3.091-1.791-5.183-2.341-2.075-.567-4.533-.834-7.363-.834h-6.668c-.507 0-.956-.079-1.302-.224-.362-.122-.672-.427-.896-.851-.245-.45-.407-1.041-.507-1.812-.105-.795-.145-1.791-.145-3.009 0-1.158.039-2.091.145-2.846.1-.729.262-1.302.467-1.687.222-.405.506-.672.834-.833q.517-.243 1.217-.244h6.73c2.317 0 4.354-.267 6.139-.795 1.791-.546 3.297-1.297 4.493-2.296a10 10 0 0 0 2.787-3.6c.633-1.424.935-2.964.935-4.678 0-1.318-.201-2.558-.65-3.72a8.15 8.15 0 0 0-1.93-3.047c-.855-.857-1.951-1.524-3.314-2.013-1.341-.507-2.926-.751-4.755-.751-2.075 0-4.008.305-5.834.913-1.833.633-3.458 1.302-4.92 2.036-1.446.733-2.687 1.423-3.683 2.053-1.018.632-1.768.956-2.237.956-.322 0-.61-.083-.834-.205-.243-.141-.445-.407-.611-.812-.139-.385-.262-.975-.346-1.729-.083-.75-.122-1.725-.122-2.904q.002-1.502.062-2.484.063-.97.244-1.646a4.2 4.2 0 0 1 .445-1.117c.167-.324.472-.668.856-1.057.406-.367 1.219-.934 2.441-1.686 1.24-.751 2.785-1.484 4.655-2.196 1.87-.733 4.004-1.322 6.463-1.83 2.441-.489 5.084-.734 7.952-.734 3.72 0 7.034.429 9.921 1.301q4.302 1.31 7.258 3.782c1.973 1.647 3.458 3.682 4.476 6.08.996 2.402 1.501 5.105 1.501 8.135 0 2.337-.283 4.51-.896 6.546-.59 2.035-1.463 3.843-2.603 5.429-1.158 1.585-2.602 2.93-4.331 4.048-1.725 1.117-3.721 1.951-5.973 2.498v.184c2.681.306 5.123.996 7.257 2.053 2.153 1.062 3.966 2.38 5.45 3.964 1.485 1.59 2.642 3.375 3.433 5.391.799 1.989 1.187 4.142 1.187 6.46z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", { d: "M849.393 917.236c0 .839-.262 1.634-.834 2.289-.572.706-1.497 1.275-2.774 1.676-1.279.438-2.996.786-5.153 1.058-2.156.262-4.843.392-8.139.392q-5.018 0-8.325-.392c-2.153-.271-3.916-.621-5.149-1.058-1.23-.4-2.157-.97-2.685-1.676-.571-.655-.834-1.45-.834-2.289V849.76h-62.42v67.477c0 .839-.264 1.634-.792 2.289-.527.706-1.409 1.275-2.728 1.676-1.277.438-2.997.786-5.154 1.058-2.157.262-4.887.392-8.231.392q-4.886 0-8.184-.392c-2.199-.271-3.961-.621-5.239-1.058-1.276-.4-2.201-.97-2.773-1.676-.571-.655-.835-1.45-.835-2.289V759.609c0-.838.264-1.633.835-2.287.57-.708 1.497-1.275 2.773-1.678 1.28-.437 3.04-.785 5.239-1.057q3.297-.392 8.184-.392c3.345 0 6.074.132 8.231.392q3.237.405 5.154 1.057c1.318.402 2.2.97 2.728 1.678.528.654.792 1.45.792 2.287v61.27h62.419v-61.27c0-.838.263-1.633.834-2.287.527-.708 1.454-1.275 2.685-1.678 1.231-.437 2.996-.785 5.149-1.057q3.307-.392 8.325-.392c3.296 0 5.982.132 8.139.392q3.235.405 5.153 1.057c1.277.402 2.2.97 2.774 1.678.572.654.834 1.45.834 2.287z" }),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
          "path",
          {
            strokeMiterlimit: 22.926,
            strokeWidth: 0.966,
            d: "M686.806 805.017c0 1.118-.062 2.053-.184 2.83-.121.769-.283 1.397-.506 1.843-.223.453-.468.796-.752.979-.266.208-.59.305-.955.305h-42.517c-.323 0-.629-.095-.896-.305-.284-.184-.528-.524-.751-.979-.221-.446-.388-1.074-.51-1.843-.118-.777-.179-1.711-.179-2.83 0-1.161.061-2.113.162-2.883.1-.776.243-1.406.466-1.879.223-.479.468-.829.752-1.055.267-.203.59-.325.957-.325h14.354v-50.158l-12.402 6.848c-.913.453-1.646.717-2.237.82-.566.096-1.017-.027-1.362-.367-.345-.33-.571-.916-.688-1.747-.104-.839-.167-2.017-.167-3.52 0-.961.022-1.729.061-2.357.021-.612.122-1.146.284-1.574.166-.444.388-.786.65-1.074.288-.288.672-.566 1.139-.89l16.573-10.717c.182-.165.429-.288.729-.385a6 6 0 0 1 1.161-.244 19 19 0 0 1 1.892-.122c.772-.026 1.767-.026 3.008-.026 1.503 0 2.726.026 3.659.087.935.062 1.63.158 2.115.306.468.114.795.325.956.542.144.246.223.551.223.901v63.676h12.566c.367 0 .69.121.997.324.283.226.55.575.773 1.055.223.472.366 1.103.467 1.879.1.771.162 1.723.162 2.885z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", { d: "M480.425 333.943c27.762 0 50.405-14.566 50.405-32.433 0-17.865-22.644-32.433-50.405-32.433-27.769 0-50.41 14.568-50.41 32.433s22.641 32.433 50.41 32.433zm309.513-3.239c27.766 0 50.406-14.566 50.406-32.433s-22.641-32.433-50.406-32.433c-27.769 0-50.411 14.568-50.411 32.433s22.642 32.433 50.411 32.433zm0-149.085c27.766 0 50.406-14.568 50.406-32.434 0-17.864-22.641-32.432-50.406-32.432-27.769 0-50.411 14.568-50.411 32.432-.001 17.866 22.642 32.434 50.411 32.434z" })
      ]
    }
  );
  var H13C_default = Svg1H13C;

  // build/lib-react-tsx/nmr/1H1H.tsx
  var React74 = __toESM(require_react(), 1);
  var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
  var Svg1H1H = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("path", { d: "M449.391 578.71c33.109 0 60.112-27.008 60.112-60.127 0-33.114-27.003-60.119-60.112-60.119-33.12 0-60.125 27.005-60.125 60.119-.001 33.119 27.005 60.127 60.125 60.127z" }),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 31.354,
            d: "m329.713 40.214 55.516 73.307m-111.039 0 55.523-73.307"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 43.399,
            d: "M329.722 672.385h602.284m-602.293 0V70.096"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 31.354,
            d: "m961.896 672.385-73.316 55.518m0-111.037 73.316 55.519"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("path", { d: "M837.877 961.217c0 .878-.272 1.698-.871 2.393-.598.729-1.565 1.332-2.898 1.742-1.337.465-3.131.83-5.386 1.104-2.254.281-5.061.419-8.506.419q-5.243.001-8.698-.419c-2.251-.275-4.093-.641-5.382-1.104-1.286-.41-2.254-1.013-2.805-1.742a3.58 3.58 0 0 1-.873-2.393v-70.514h-65.227v70.514c0 .878-.275 1.698-.827 2.393-.553.729-1.474 1.332-2.852 1.742-1.333.465-3.132.83-5.387 1.104-2.253.281-5.105.419-8.602.419-3.401 0-6.257-.138-8.552-.419-2.3-.275-4.137-.641-5.474-1.104-1.334-.41-2.3-1.013-2.899-1.742-.597-.694-.871-1.515-.871-2.393V796.5c0-.877.274-1.708.871-2.4.598-.731 1.565-1.336 2.899-1.744 1.337-.457 3.174-.831 5.474-1.105q3.444-.409 8.552-.409c3.496 0 6.349.138 8.602.409 2.255.275 4.054.649 5.387 1.105 1.378.408 2.299 1.013 2.852 1.744.552.692.827 1.523.827 2.4v64.022h65.227V796.5c0-.877.276-1.708.873-2.4.551-.731 1.519-1.336 2.805-1.744 1.287-.457 3.131-.831 5.382-1.105q3.456-.409 8.698-.409c3.445 0 6.252.138 8.506.409 2.255.275 4.049.649 5.386 1.105 1.333.408 2.299 1.013 2.898 1.744.599.692.871 1.523.871 2.4z" }),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          "path",
          {
            strokeMiterlimit: 22.926,
            strokeWidth: 1.009,
            d: "M667.976 843.948c0 1.168-.064 2.145-.191 2.958-.129.803-.297 1.462-.529 1.925-.233.475-.488.831-.785 1.024a1.63 1.63 0 0 1-1 .318h-44.429c-.337 0-.657-.109-.936-.318-.297-.193-.553-.548-.783-1.024-.232-.465-.406-1.122-.534-1.925-.123-.813-.188-1.788-.188-2.958 0-1.215.064-2.21.169-3.022.104-.803.256-1.461.486-1.953.233-.51.489-.866.786-1.104.277-.209.615-.338.999-.338h14.999v-52.413l-12.957 7.153c-.956.468-1.721.748-2.338.849-.593.111-1.064-.019-1.423-.382-.36-.339-.598-.949-.722-1.826-.109-.867-.173-2.099-.173-3.669 0-1.005.022-1.807.063-2.475.024-.628.128-1.186.297-1.633.174-.465.405-.83.681-1.122.302-.302.702-.593 1.189-.941l17.317-11.187c.193-.175.449-.302.764-.412.318-.101.724-.19 1.214-.256a23 23 0 0 1 1.977-.128c.807-.019 1.849-.019 3.144-.019 1.57 0 2.848.019 3.825.083.975.063 1.702.174 2.208.319.489.128.831.338 1.001.575.15.256.232.574.232.939v66.543h13.131c.384 0 .721.129 1.042.338.296.237.574.594.806 1.104.233.492.384 1.15.489 1.953.104.816.169 1.81.169 3.024z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("path", { d: "M247.864 344.398c0 .876-.274 1.698-.872 2.392-.597.73-1.564 1.333-2.899 1.744-1.336.466-3.13.83-5.385 1.104-2.253.281-5.061.42-8.505.42q-5.25 0-8.699-.42c-2.255-.274-4.093-.639-5.381-1.104-1.286-.41-2.253-1.014-2.806-1.744a3.58 3.58 0 0 1-.876-2.392v-70.523h-65.224v70.523c0 .876-.274 1.698-.827 2.392-.551.73-1.474 1.333-2.851 1.744-1.339.466-3.131.83-5.385 1.104-2.255.281-5.107.42-8.602.42q-5.108 0-8.552-.42c-2.3-.274-4.145-.639-5.476-1.104-1.333-.41-2.301-1.014-2.898-1.744a3.6 3.6 0 0 1-.877-2.392V179.679c0-.876.28-1.707.877-2.402.596-.729 1.565-1.332 2.898-1.743 1.333-.465 3.176-.831 5.476-1.104q3.443-.41 8.552-.41c3.494 0 6.346.136 8.602.41 2.254.274 4.046.639 5.385 1.104 1.377.411 2.299 1.014 2.851 1.743.552.693.827 1.525.827 2.402v64.023h65.224v-64.023c0-.876.278-1.707.876-2.402.553-.729 1.52-1.332 2.806-1.743 1.287-.465 3.126-.831 5.381-1.104q3.448-.41 8.699-.41c3.444 0 6.252.136 8.505.41 2.255.274 4.049.639 5.385 1.104 1.334.411 2.3 1.014 2.899 1.743.598.693.872 1.525.872 2.402z" }),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
          "path",
          {
            strokeMiterlimit: 22.926,
            strokeWidth: 1.009,
            d: "M77.962 227.13c0 1.167-.064 2.144-.191 2.948-.129.812-.297 1.469-.53 1.935-.232.466-.488.831-.784 1.023a1.62 1.62 0 0 1-1.001.32H31.028q-.516-.002-.936-.32c-.295-.192-.552-.557-.784-1.023s-.406-1.123-.533-1.935c-.122-.804-.187-1.778-.187-2.948 0-1.214.065-2.209.168-3.021.105-.805.256-1.46.488-1.953.233-.512.488-.867.784-1.105a1.65 1.65 0 0 1 1-.338h15.001v-52.415l-12.96 7.156c-.96.466-1.721.749-2.337.847-.598.109-1.063-.019-1.424-.383-.359-.338-.597-.95-.72-1.825-.109-.867-.174-2.099-.174-3.679 0-.995.024-1.797.064-2.464.024-.63.129-1.188.296-1.633.174-.466.406-.831.68-1.123.3-.301.703-.602 1.191-.94l17.317-11.19c.191-.174.443-.301.762-.41.32-.1.725-.191 1.214-.256a23 23 0 0 1 1.977-.127c.807-.02 1.847-.02 3.144-.02 1.57 0 2.848.02 3.825.083.978.062 1.703.173 2.208.318.488.127.832.338 1 .575.151.257.232.576.232.94v66.543h13.131c.385 0 .722.127 1.041.338.296.238.571.593.809 1.105.232.493.377 1.15.486 1.953.107.814.171 1.81.171 3.024z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("path", { d: "M610.655 427.34c33.108 0 60.111-27.005 60.111-60.117 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.007-60.127 60.126 0 33.112 27.006 60.117 60.127 60.117zm182.484 0c33.111 0 60.116-27.005 60.116-60.117 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.007-60.126 60.126 0 33.112 27.005 60.117 60.126 60.117zM610.655 260.415c33.108 0 60.111-27.007 60.111-60.118 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.005-60.127 60.126 0 33.111 27.006 60.118 60.127 60.118zm182.484 0c33.111 0 60.116-27.007 60.116-60.118 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.005-60.126 60.126 0 33.111 27.005 60.118 60.126 60.118z" })
      ]
    }
  );
  var H1H_default = Svg1H1H;

  // build/lib-react-tsx/nmr/2D.tsx
  var React75 = __toESM(require_react(), 1);
  var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
  var Svg2D = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("path", { d: "M290.592 768.97c33.109 0 60.112-27.008 60.112-60.127 0-33.114-27.003-60.12-60.112-60.12-33.12 0-60.125 27.006-60.125 60.12-.001 33.119 27.005 60.127 60.125 60.127z" }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 31.354,
            d: "m109.491 73.172 55.516 73.307m-111.039 0 55.523-73.307"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.573,
            d: "M115.061 891.109h754.456"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.065,
            d: "M109.491 884.987V115.169"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 31.354,
            d: "m912.458 891.109-73.316 55.518m0-111.037 73.316 55.519"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("path", { d: "M510.655 527.34c33.108 0 60.111-27.005 60.111-60.117 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.007-60.127 60.126 0 33.112 27.006 60.117 60.127 60.117zm282.484 0c33.111 0 60.116-27.005 60.116-60.117 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.007-60.126 60.126 0 33.112 27.005 60.117 60.126 60.117zM510.655 260.415c33.108 0 60.111-27.007 60.111-60.118 0-33.121-27.003-60.126-60.111-60.126-33.121 0-60.127 27.005-60.127 60.126 0 33.111 27.006 60.118 60.127 60.118zm282.484 0c33.111 0 60.116-27.007 60.116-60.118 0-33.121-27.005-60.126-60.116-60.126-33.121 0-60.126 27.005-60.126 60.126 0 33.111 27.005 60.118 60.126 60.118z" })
      ]
    }
  );
  var D_default = Svg2D;

  // build/lib-react-tsx/nmr/AddFilter.tsx
  var React76 = __toESM(require_react(), 1);
  var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
  var SvgAddFilter = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 50.126,
            d: "M38.416 887.681c558.451 0 148.174-1.283 633.454-1.283 10.578 0 47.87-38 57.844-55l44.9-345.78 44.857 347.78 26.927 54 113.692.283"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          "path",
          {
            d: "m687.492 282.78-51.858 100.095 24.17 110.116c-42.727-48.433-115.375-98.433-175.081-129.992",
            "data-name": "Path 9"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M624.301 376.896c68.882 3.825 102.461 21.904 132.651 76.103",
            "data-name": "Path 11"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("path", { d: "M629.812 76.248c18.317 5.053 34.108 20.212 40.424 38.4 2.021 5.937 2.4 10.738 2.4 33.6 0 28.8-1.011 35.876-6.822 47.246a72 72 0 0 1-7.706 11.369c-4.169 4.8-75.8 61.521-79.585 62.91-1.642.632-20.844-23.876-20.844-26.528 0-.884 17.054-14.906 37.9-31.076 26.655-20.717 38.4-30.571 39.793-33.476 1.516-3.285 1.895-9.222 1.895-29.56 0-28.676-.884-32.592-7.832-36.382-4.042-2.148-14.654-2.274-244.819-2.274s-240.777.126-244.819 2.274c-6.948 3.79-7.832 7.706-7.832 36.255 0 18.7.505 26.4 1.769 29.56 1.39 3.411 19.581 17.054 101.313 75.922 54.825 39.414 100.934 72.89 102.324 74.406 2.653 2.527 3.032 7.706 11.117 120.767 4.674 64.931 8.716 119.63 9.1 121.4a13.9 13.9 0 0 0 3.79 6.316c3.158 2.905 3.916 3.032 23.244 3.032 19.454 0 20.086-.126 23.244-3.032a14.8 14.8 0 0 0 3.916-6.948c.253-2.148 2.021-24.886 3.916-50.657 1.769-25.644 3.411-46.867 3.663-47.246.758-.632 33.6 2.148 34.361 2.905 1.011 1.011-5.937 95.5-7.453 101.187-3.79 14.654-14.148 26.655-29.687 34.361l-9.727 4.8h-22.112c-21.6 0-22.486-.126-29.687-3.411-10.738-5.053-19.075-11.622-24.633-19.454-4.927-6.948-5.306-8.337-8.969-31.076-.632-4.421-4.421-52.93-8.211-107.756-3.916-54.952-7.327-100.934-7.58-102.45-.379-1.895-29.813-23.749-93.1-69.353-50.909-36.634-95.25-69.227-98.534-72.385-6.948-6.7-12.759-17.054-15.538-27.413-2.906-11.5-2.653-57.226.379-67.205 4.8-15.159 15.917-27.665 31.455-35.371l9.727-4.8 241.914-.253c193.021-.124 243.177.128 247.846 1.396Z" }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("path", { fill: "none", d: "M.5.5h997.512l2.488 1000H.5Z" })
      ]
    }
  );
  var AddFilter_default = SvgAddFilter;

  // build/lib-react-tsx/nmr/AlignBottom.tsx
  var React77 = __toESM(require_react(), 1);
  var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
  var SvgAlignBottom = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            clipPath: "url(#clip-align-bottom)",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                "path",
                {
                  strokeWidth: 39.653,
                  d: "M74.308 889.139c44.876-.388 119.418-1.382 207.014-.9 81.54-1.168 55.647-252.189 61.657-307.029l.006-.055c9.134 83.481-10.239 291.374 86.758 307.083 22.56 3.653 107.859 5.114 132.337 0 96.267-19.911 67.725-129.929 76.859-213.41 6.028 53.888-9.874 194.965 79.957 214.313 60.223.9 136.628.994 206.9 0"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                "path",
                {
                  strokeWidth: 35,
                  d: "M640.001 338.057 499.86 478.198 359.719 338.057",
                  "data-name": "Path 6"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                "path",
                {
                  strokeWidth: 20,
                  d: "M612.142 295.383 499.76 407.765l3.764-338.977-3.764 338.977-112.382-112.382",
                  "data-name": "Path 7"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                "path",
                {
                  strokeWidth: 35,
                  d: "M640.001 338.057 499.86 478.198 359.719 338.057",
                  "data-name": "Path 8"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var AlignBottom_default = SvgAlignBottom;

  // build/lib-react-tsx/nmr/AlignCenter.tsx
  var React78 = __toESM(require_react(), 1);
  var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
  var SvgAlignCenter = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            clipPath: "url(#clip-align-center)",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                "path",
                {
                  strokeWidth: 39.653,
                  d: "M74.308 610.139c44.876-.388 119.418-1.382 207.014-.9 81.7-1.17 55.543-253.2 61.663-307.085 9.134 83.481-10.239 291.374 86.758 307.083 22.56 3.653 107.859 5.114 132.337 0 96.267-19.911 67.725-129.929 76.859-213.41 6.028 53.888-9.874 194.965 79.957 214.313 60.223.9 136.628.994 206.9 0"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                "path",
                {
                  strokeWidth: 35,
                  d: "M640.002 862.524 499.861 722.383 359.72 862.524",
                  "data-name": "Path 6"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                "path",
                {
                  strokeWidth: 20,
                  d: "M612.142 905.199 499.76 792.817 387.378 905.199",
                  "data-name": "Path 7"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                "path",
                {
                  strokeWidth: 35,
                  d: "M640.001 145.057 499.86 285.198 359.719 145.057",
                  "data-name": "Path 6"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                "path",
                {
                  strokeWidth: 20,
                  d: "M612.142 102.383 499.76 214.765 387.378 102.383",
                  "data-name": "Path 7"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var AlignCenter_default = SvgAlignCenter;

  // build/lib-react-tsx/nmr/Apodization.tsx
  var React79 = __toESM(require_react(), 1);
  var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
  var SvgApodization = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "m27.989 24.288 24.468 939.363 52.128-677.659 29.787 456.383 44.681-297.873 23.404 202.128 38.298-108.511 26.596 42.339h698.936"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "50,50",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M293.947 55.51v886.864"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime79.jsx)("path", { d: "M650.938 63.47h67.1l148.5 390.5h-78.1l-36.3-97.35h-136.4l-35.75 97.35h-78.1Zm87.45 239.8-53.9-153.45-56.1 153.45Z" })
      ]
    }
  );
  var Apodization_default = SvgApodization;

  // build/lib-react-tsx/nmr/Assignment.tsx
  var React80 = __toESM(require_react(), 1);
  var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment6 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
                "path",
                {
                  strokeWidth: 50.126,
                  d: "M45.332 634.783h614.323l66.347-389.362 59.074 389.362h99.105"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { strokeWidth: 44.208, d: "M724.551 73.495v85.48" }),
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
                "path",
                {
                  strokeWidth: 61.89,
                  d: "M45.332 809.969h882.592m27.267-.01-99.571 75.414m0-150.813 99.571 75.399"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
                "path",
                {
                  strokeWidth: 50.126,
                  d: "m158.572 160.25 150.263-86.755 150.262 86.755v173.504l-150.262 86.752-150.263-86.752z"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var Assignment_default6 = SvgAssignment6;

  // build/lib-react-tsx/nmr/Assignment2.tsx
  var React81 = __toESM(require_react(), 1);
  var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment22 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("path", { d: "m821.53 292.639-83.455 53.397-29.992 94.432c-11.238-55.639-44.56-125.618-76.135-175.875" }),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 50.126,
            d: "M45.332 934.783c559.962 0 148.575-1.283 635.168-1.283 10.607 0 48-38 58-55l50-379 40 381 27 54 114 .283M58.363 250.85 328.835 94.691 599.306 250.85v312.307L328.835 719.311 58.363 563.157z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M709.996 313.94C770.5 353.5 791.5 387.5 790.5 452.5"
          }
        )
      ]
    }
  );
  var Assignment2_default = SvgAssignment22;

  // build/lib-react-tsx/nmr/BaselineCorrection.tsx
  var React82 = __toESM(require_react(), 1);
  var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
  var SvgBaselineCorrection = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(
          "g",
          {
            fill: "none",
            strokeWidth: 45,
            clipPath: "url(#clip-baseline_correction)",
            "data-name": "baseline correction",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(
                "path",
                {
                  strokeDasharray: "5 100",
                  strokeLinecap: "square",
                  strokeLinejoin: "bevel",
                  d: "M27.265 648.5h961.746"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  d: "M33.737 698.735c14.928 4.584 51.09 39.489 112.8 39.489s76.691-53.427 127.581-62.8 98.841-30.237 108.461-30.181c76.9-1.17 58.063-490.423 63.823-544.308 8.6 83.481-21.07 528.6 70.224 544.306 21.234 3.653-15.192 5.114 7.847 0 90.607-19.911 79.3-392.121 79.3-392.121s-6.906 293.146 51.71 355.345 84.549-41.324 148.667-31.625 107.807 70.415 107.807 70.415 40.428 51.7 55.4 51.478"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var BaselineCorrection_default = SvgBaselineCorrection;

  // build/lib-react-tsx/nmr/ExportAsMatrix.tsx
  var React83 = __toESM(require_react(), 1);
  var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
  var SvgExportAsMatrix = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("g", { "data-name": "matrix-group", children: [
          /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("g", { "data-name": "Group 1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
              "path",
              {
                d: "m726.324 382.369 42.232 129.055-65.809 111.873c73.311-37.31 188.443-65.248 280.26-77.75",
                "data-name": "Path 9"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
              "path",
              {
                fill: "rgba(0,0,0,0)",
                strokeLinejoin: "round",
                strokeMiterlimit: 22.926,
                strokeWidth: 60.006,
                d: "M788.538 516.872c-18.263-6.046-202.212-27.71-214.417-25.723-67.023 10.912-119.093 136.624-136.565 160.707-3.238 4.463-10.934-45.332-10.934-45.332L342.05 75.93l-82.685 558.027-134.978-.023",
                "data-name": "Path 11"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
            "path",
            {
              fill: "none",
              strokeLinecap: "round",
              strokeWidth: 60,
              d: "M623.293 640.639v296.849H505",
              "data-name": "Path 17"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
            "path",
            {
              fill: "none",
              strokeLinecap: "round",
              strokeWidth: 60,
              d: "M623.293 361.415V73.494H505",
              "data-name": "Path 18"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
            "path",
            {
              fill: "none",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 60,
              d: "M179.092 73.494H60.319v863.994h118.773",
              "data-name": "Path 19"
            }
          )
        ] })
      ]
    }
  );
  var ExportAsMatrix_default = SvgExportAsMatrix;

  // build/lib-react-tsx/nmr/Fid.tsx
  var React84 = __toESM(require_react(), 1);
  var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
  var SvgFid = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M149.053 29.608 178.84 963.65l65.958-774.467 40.425 600 65.957-396.809 51.064 286.17 67.022-175.532 70.213 115.958 61.701-73.405 72.767 34.893h176.596"
          }
        )
      ]
    }
  );
  var Fid_default = SvgFid;

  // build/lib-react-tsx/nmr/FourierTransform.tsx
  var React85 = __toESM(require_react(), 1);
  var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
  var SvgFourierTransform = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "m444.092 954.83 260.101.898s18.906-3.57 32.399-15.299c11.067-9.619 16.2-13.5 22.5-26.1.244-.832 16.859-45.973 17.101-46.801 9-37.801 6.299-23.4 16.199-90.9 15.443-190.23 18.9-309.6 18.9-309.6m.9.001c0-137.7 3.456 119.369 18.899 309.6 9.899 67.5 7.2 53.1 16.2 90.9.24.828 16.854 45.969 17.1 46.801 6.301 12.6 11.434 16.48 22.5 26.1 13.494 11.729 32.4 15.299 32.4 15.299l50.4-.898"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("path", { d: "m494.573 832.361 84.332-51.996 31.562-93.917c10.312 55.815 42.461 126.343 73.191 177.118-56.408-18.446-132.387-33.795-189.085-31.205z" }),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "m462.253 673.862 118.259 106.22"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 80,
            d: "M536.969 53.506c51.065-19.271 334.979 22.168 390.4 0m-290 33.2c-8.012 84.916 1.6 315.199-71.2 404m71.394-217.481c.967-.04 86.205 16.681 149.405 10.281"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M29.053 29.608 58.84 963.65l65.958-774.467 40.425 600 65.957-396.809 51.064 286.17 67.022-175.532 70.213 115.958 61.701-73.405 72.767 34.893h176.596"
          }
        )
      ]
    }
  );
  var FourierTransform_default = SvgFourierTransform;

  // build/lib-react-tsx/nmr/Ft.tsx
  var React86 = __toESM(require_react(), 1);
  var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
  var SvgFt = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "m444.092 954.83 260.101.898s18.906-3.57 32.399-15.299c11.067-9.619 16.2-13.5 22.5-26.1.244-.832 16.859-45.973 17.101-46.801 9-37.801 6.299-23.4 16.199-90.9 15.443-190.23 18.9-309.6 18.9-309.6m.9.001c0-137.7 3.456 119.369 18.899 309.6 9.899 67.5 7.2 53.1 16.2 90.9.24.828 16.854 45.969 17.1 46.801 6.301 12.6 11.434 16.48 22.5 26.1 13.494 11.729 32.4 15.299 32.4 15.299l50.4-.898",
            transform: "matrix(1.5417 0 0 1.40189 -584.35 -473.718)"
          }
        )
      ]
    }
  );
  var Ft_default = SvgFt;

  // build/lib-react-tsx/nmr/ImpuritiesStars.tsx
  var React87 = __toESM(require_react(), 1);
  var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
  var SvgImpuritiesStars = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M43.528 957.101H159.71l28.61-77.773 29.083 76.971 242.097.084 39-57.883 50.907-846.347L603.5 896.5l43 60.601h70.667l50.082-116.9 52.511 116.9h133.575"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "square",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 39.19,
            d: "M188.5 618.1v126.4"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("path", { d: "M188.5 839.106c-16.518-44.521-44.7-99.75-74.537-133.979l74.537 26.958 74.537-26.958C233.2 739.356 205.01 794.589 188.5 839.106z" }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "square",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 39.19,
            d: "M766.5 585.1v126.4"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("path", { d: "M766.5 806.106c-16.518-44.521-44.7-99.75-74.537-133.979l74.537 26.958 74.537-26.958c-29.836 34.229-58.027 89.462-74.537 133.979zm-477.422-480.57-75.804 99.897v1.6l120.489-15.984v54.346L213.274 450.21v2.396l76.602 95.905-50.27 28.771-48.674-111.888h-1.597l-51.07 112.685-45.485-28.77 75.807-97.501v-2.398l-118.1 15.985v-54.346l117.301 15.185v-1.6l-75.012-98.302 48.678-27.971 49.474 111.889h1.596L241.2 297.562zm574.732-30.359-74.812 98.438v1.576l118.912-15.75v53.552L788.998 418.03v2.361l75.599 94.504-49.612 28.351-48.041-110.253h-1.57l-50.401 111.039-44.893-28.352 74.815-96.075v-2.363l-116.555 15.75V379.44l115.767 14.963v-1.576l-74.027-96.865 48.041-27.562 48.823 110.254h1.576l48.041-111.042z" })
      ]
    }
  );
  var ImpuritiesStars_default = SvgImpuritiesStars;

  // build/lib-react-tsx/nmr/Impurities.tsx
  var React88 = __toESM(require_react(), 1);
  var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
  var SvgImpurities2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M43.528 787.101h93.182l51.61-99.773 51.083 98.971 255.948.113 54.056-734.259 57.363 734.948h87.397l63.082-96.9 64.511 96.9h131.575"
          }
        )
      ]
    }
  );
  var Impurities_default2 = SvgImpurities2;

  // build/lib-react-tsx/nmr/Integrate.tsx
  var React89 = __toESM(require_react(), 1);
  var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
  var SvgIntegrate = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "M40.677 920.5H142.5l36-5 25-28 14-59 15-87 19-284s3.841 52.633 21 264c11 75 8 59 18 101 .268.921 18.728 51.077 19 52 7 14 12.703 18.312 25 29 14.993 13.033 36 17 36 17l590-1"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "M64.5 419.5c197 5 187-13.598 186-190.397-1-176.8-15-207.205 156-202.603"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "ellipse",
          {
            cx: 811.5,
            cy: 117,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60,
            rx: 35,
            ry: 28.5
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60,
            d: "M807.5 87.5c-110-2-156 237-164 349"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60,
            d: "M810.5 90.5c-110-2-105 234-113 346"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "ellipse",
          {
            cx: 529.5,
            cy: 747.98,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60,
            rx: 35,
            ry: 28.5
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60,
            d: "M533.5 777.48c110 2 156-227 164-339"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60,
            d: "M530.5 774.48c110 2 105-224 113-336"
          }
        )
      ]
    }
  );
  var Integrate_default = SvgIntegrate;

  // build/lib-react-tsx/nmr/Lineshapedeconvolution.tsx
  var React90 = __toESM(require_react(), 1);
  var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
  var SvgLineshapedeconvolution = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "M211.5 287.5s3.841 43.633 21 255c11 75 19 146 41 213 20 37 72 66 92 78 37 13 61 53 88 79 6 8 33 9 33 9l434-2m-885 0 56 1s21.007-3.967 36-17c12.297-10.688 18-15 25-29 .272-.923 18.732-51.079 19-52 10-42 7-26 18-101 17.159-211.367 21-587 21-434"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "M472.5 76.5s3.841 132.633 21 344c11 75 8 59 18 101 .268.921 18.728 51.077 19 52 7 14 12.703 18.312 25 29 14.993 13.033 36 17 36 17l289-1m-584 0 56 1s21.007-3.967 36-17c12.297-10.688 18-15 25-29 .272-.923 18.732-51.079 19-52 10-42 7-26 18-101 17.159-211.367 21-497 21-344"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)("path", { d: "m708.897 831.817-78.271-60.741-99.021 3.379c48.656-29.23 103.428-84.072 140.201-130.658 2.508 59.295 14.781 135.83 37.091 188.02z" }),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "m583.5 881.5 58-148"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
          "circle",
          {
            cx: 762.5,
            cy: 238.5,
            r: 197,
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
          "circle",
          {
            cx: 762.5,
            cy: 131.5,
            r: 18,
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
          "circle",
          {
            cx: 762.5,
            cy: 339.5,
            r: 18,
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M667.5 235.5h190"
          }
        )
      ]
    }
  );
  var Lineshapedeconvolution_default = SvgLineshapedeconvolution;

  // build/lib-react-tsx/nmr/MultipleAnalysis.tsx
  var React91 = __toESM(require_react(), 1);
  var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
  var SvgMultipleAnalysis = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 991.323 980.387",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "1, 70",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M24.612 594.712h305.673l61.025-399.9 61.127 399.9h338.338"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M199.548 953.651h371.673l61.024-399.9 63.127 399.9h271.339"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "50, 30",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M116.665 775.367c60.181 0 342.086.408 342.086.408l61.025-399.9 62.127 399.9h330.782"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.653,
            d: "M213.446 229.43v-152h527v151",
            "data-name": "Path 5"
          }
        )
      ]
    }
  );
  var MultipleAnalysis_default = SvgMultipleAnalysis;

  // build/lib-react-tsx/nmr/Multiplet.tsx
  var React92 = __toESM(require_react(), 1);
  var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
  var SvgMultiplet = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("path", { d: "M235.272 294.355c0 1.324-.394 2.506-1.192 3.506-.792 1.045-2.045 1.907-3.883 2.635-1.786.722-4.225 1.245-7.325 1.639-3.101.405-7 .536-11.809.536-4.748 0-8.64-.131-11.739-.536-3.102-.393-5.61-.915-7.455-1.639-1.848-.727-3.171-1.59-3.891-2.635a6.3 6.3 0 0 1-1.057-3.506v-81.914c-4.611 4.276-9.104 7.968-13.526 11.14-4.345 3.168-8.769 5.743-13.123 7.717a62.4 62.4 0 0 1-13.519 4.355c-4.622.921-9.567 1.313-14.721 1.313-12.592 0-23.345-2.51-32.252-7.583-8.906-5.077-16.154-11.939-21.77-20.585-5.6-8.64-9.689-18.724-12.264-30.266-2.578-11.544-3.832-23.687-3.832-36.417 0-15.373 1.648-29.155 5.016-41.361 3.366-12.263 8.244-22.687 14.711-31.329 6.399-8.64 14.318-15.237 23.748-19.856 9.362-4.684 20.321-6.993 32.653-6.993 4.74 0 9.36.464 13.718 1.454 4.352.983 8.775 2.634 13.131 5.003 4.413 2.38 8.966 5.479 13.655 9.312 4.681 3.821 9.894 8.433 15.563 13.982V53.585c0-1.254.325-2.439 1.056-3.364.662-.979 1.846-1.771 3.427-2.441 1.649-.655 3.761-1.117 6.338-1.44 2.577-.328 5.935-.465 10.022-.465 3.891 0 7.128.137 9.766.465 2.637.323 4.749.785 6.271 1.44 1.58.67 2.635 1.461 3.297 2.441.654.926.987 2.111.987 3.364zm-48.354-183.571c-6.932-8.775-13.594-15.441-19.985-20.053-6.398-4.68-13.063-6.997-19.994-6.997-6.329 0-11.733 1.587-16.352 4.756-4.553 3.16-8.246 7.388-11.019 12.66-2.774 5.274-4.818 11.147-6.201 17.672a101 101 0 0 0-1.984 19.996c0 7.193.602 14.24 1.718 21.17 1.194 6.863 3.04 12.994 5.737 18.268 2.646 5.282 6.141 9.508 10.496 12.734 4.416 3.241 9.963 4.818 16.619 4.818 3.367 0 6.604-.458 9.765-1.448 3.17-.929 6.399-2.507 9.697-4.683 3.236-2.25 6.664-5.083 10.091-8.641 3.494-3.504 7.325-7.85 11.413-13.072v-57.18z" }),
        /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.859,
            d: "M34.5 703.843h96.845l51.151-146.426 56.134 146.426h87.82l59.601-530.531 58.111 530.531h108.67l58.109-530.531 59.603 530.531h87.825l56.134-146.426 51.154 146.426H962.5"
          }
        )
      ]
    }
  );
  var Multiplet_default = SvgMultiplet;

  // build/lib-react-tsx/nmr/Overlay.tsx
  var React93 = __toESM(require_react(), 1);
  var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
  var SvgOverlay3 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60.777,
            d: "M53.64 725.878h866.719m26.777-.01-97.782 74.059m0-148.103 97.782 74.044"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("path", { d: "M69.844 454.67c13.192 0 23.943-10.758 23.943-23.942 0-13.198-10.753-23.947-23.943-23.947-13.186 0-23.945 10.749-23.945 23.947 0 13.182 10.76 23.942 23.945 23.942zm216.452 0c13.193 0 23.945-10.758 23.945-23.942 0-13.198-10.751-23.947-23.945-23.947s-23.944 10.749-23.944 23.947c.001 13.182 10.751 23.942 23.944 23.942zm-72.147 0c13.184 0 23.945-10.758 23.945-23.942 0-13.198-10.761-23.947-23.945-23.947-13.193 0-23.953 10.749-23.953 23.947 0 13.182 10.758 23.942 23.953 23.942zm-72.15 0c13.187 0 23.945-10.758 23.945-23.942 0-13.198-10.758-23.947-23.945-23.947-13.193 0-23.943 10.749-23.943 23.947 0 13.182 10.75 23.942 23.943 23.942zm268.218 0c13.188 0 23.947-10.758 23.947-23.942 0-13.198-10.759-23.947-23.947-23.947-13.185 0-23.943 10.749-23.943 23.947 0 13.182 10.758 23.942 23.943 23.942zm216.443 0c13.193 0 23.943-10.758 23.943-23.942 0-13.198-10.75-23.947-23.943-23.947-13.186 0-23.945 10.749-23.945 23.947 0 13.182 10.761 23.942 23.945 23.942zm-72.139 0c13.185 0 23.944-10.758 23.944-23.942 0-13.198-10.76-23.947-23.944-23.947-13.193 0-23.945 10.749-23.945 23.947-.001 13.182 10.751 23.942 23.945 23.942zm-72.152 0c13.189 0 23.939-10.758 23.939-23.942 0-13.198-10.75-23.947-23.939-23.947-13.193 0-23.946 10.749-23.946 23.947-.002 13.182 10.752 23.942 23.946 23.942zm360.746 0c13.193 0 23.941-10.758 23.941-23.942 0-13.198-10.748-23.947-23.941-23.947-13.195 0-23.948 10.749-23.948 23.947 0 13.182 10.753 23.942 23.948 23.942zm-72.151 0c13.189 0 23.944-10.758 23.944-23.942 0-13.198-10.757-23.947-23.944-23.947-13.185 0-23.944 10.749-23.944 23.947 0 13.182 10.76 23.942 23.944 23.942zm-72.147 0c13.185 0 23.942-10.758 23.942-23.942 0-13.198-10.76-23.947-23.942-23.947-13.193 0-23.943 10.749-23.943 23.947 0 13.182 10.75 23.942 23.943 23.942zM347.174 99.073c13.195 0 23.945-10.751 23.945-23.945 0-13.183-10.75-23.945-23.945-23.945-13.182 0-23.942 10.762-23.942 23.945 0 13.193 10.76 23.945 23.942 23.945zm-60.132 185.372c2.238-13.034 14.616-21.793 27.643-19.561 13.041 2.229 21.798 14.609 19.569 27.642-2.239 13.032-14.609 21.79-27.643 19.562-13.04-2.231-21.789-14.611-19.569-27.643zm-12.167 71.114c2.23-13.034 14.609-21.793 27.643-19.562 13.03 2.238 21.79 14.61 19.56 27.643-2.24 13.042-14.609 21.79-27.643 19.56-13.038-2.229-21.789-14.608-19.56-27.641zm36.518-213.343c2.239-13.041 14.611-21.792 27.643-19.569 13.042 2.237 21.791 14.616 19.562 27.641-2.231 13.04-14.609 21.8-27.643 19.569-13.03-2.239-21.789-14.62-19.562-27.641zm-12.172 71.114c2.238-13.033 14.606-21.801 27.642-19.561 13.039 2.231 21.79 14.601 19.569 27.643-2.238 13.03-14.617 21.787-27.649 19.56-13.035-2.231-21.795-14.61-19.562-27.642zm107.952 71.115c-2.238-13.034-14.618-21.793-27.639-19.561-13.042 2.229-21.801 14.609-19.572 27.642 2.239 13.032 14.609 21.79 27.643 19.562 13.041-2.231 21.791-14.611 19.568-27.643zm12.168 71.114c-2.23-13.034-14.609-21.793-27.642-19.562-13.031 2.238-21.792 14.61-19.561 27.643 2.238 13.042 14.609 21.79 27.642 19.56 13.041-2.229 21.794-14.608 19.561-27.641z" }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("path", { d: "M382.821 142.216c-2.236-13.041-14.607-21.792-27.64-19.569-13.042 2.237-21.792 14.616-19.561 27.641 2.23 13.04 14.611 21.8 27.642 19.569 13.031-2.239 21.791-14.62 19.559-27.641zm12.178 71.114c-2.239-13.033-14.609-21.801-27.641-19.561-13.042 2.231-21.791 14.601-19.57 27.643 2.239 13.03 14.618 21.787 27.65 19.56 13.032-2.231 21.79-14.61 19.561-27.642z" }),
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M72.744 560.332h372.673l61.025-358.899 62.127 358.899h271.338"
          }
        )
      ]
    }
  );
  var Overlay_default3 = SvgOverlay3;

  // build/lib-react-tsx/nmr/Overlay3Aligned.tsx
  var React94 = __toESM(require_react(), 1);
  var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
  var SvgOverlay3Aligned = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime94.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime94.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "1,70",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M29.127 687.461H334.8l61.025-399.9 61.127 399.9H795.29"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M204.063 686.396h371.673l61.024-399.898 63.127 399.898h271.339"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "50,30",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M121.18 688.116c60.181 0 342.086.408 342.086.408l61.025-399.899 62.127 399.899H917.2"
          }
        )
      ]
    }
  );
  var Overlay3Aligned_default = SvgOverlay3Aligned;

  // build/lib-react-tsx/nmr/Overlay3.tsx
  var React95 = __toESM(require_react(), 1);
  var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
  var SvgOverlay32 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "1,70",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M29.127 465.651H334.8l61.025-399.899 61.127 399.899H795.29"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M204.063 911.396h371.673l61.025-399.898 63.127 399.898h271.338"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "50,30",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.224,
            d: "M121.18 688.116c60.181 0 342.087.408 342.087.408l61.025-399.899 62.127 399.899h330.782"
          }
        )
      ]
    }
  );
  var Overlay3_default = SvgOverlay32;

  // build/lib-react-tsx/nmr/PeakPicking.tsx
  var React96 = __toESM(require_react(), 1);
  var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
  var SvgPeakPicking = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
                "path",
                {
                  strokeWidth: 47.417,
                  d: "M54.005 697.855H280.66l59.528-364.132 57.24 364.132h249.553L717.95 214.67l59.528 483.185h176.733"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
                "path",
                {
                  strokeWidth: 41.819,
                  d: "M337.901 171.258v80.862M715.664 47.484v80.86"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
                "path",
                {
                  strokeWidth: 58.546,
                  d: "M54.005 863.579h834.889m25.794-.007-94.193 71.336m0-142.664 94.193 71.328"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var PeakPicking_default = SvgPeakPicking;

  // build/lib-react-tsx/nmr/PeakPicking2.tsx
  var React97 = __toESM(require_react(), 1);
  var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
  var SvgPeakPicking2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.653,
            d: "M43.556 943.061c64.942-.561 18.942-.561 145.707.133 118.237-1.694 85.253-402.71 94.11-480.694 13.218 120.809-19.692 457.958 120.678 480.692 32.647 5.286 156.088 7.401 191.512 0C734.876 914.378 696.282 608.309 709.5 487.5c8.724 77.984-17 429 113 457 87.151 1.308 27.312 0 129-1.439M244.5 106.5c79 59 397 144 425 190s26 82 26 82"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.653,
            d: "M239.5 114.5c89 59 238.867 336.803 289.497 355.152 50.629 18.35 85.522 9.27 85.522 9.27"
          }
        )
      ]
    }
  );
  var PeakPicking2_default = SvgPeakPicking2;

  // build/lib-react-tsx/nmr/PeaksTopLabels.tsx
  var React98 = __toESM(require_react(), 1);
  var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
  var SvgPeaksTopLabels = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
                "path",
                {
                  strokeWidth: 47.417,
                  d: "M54.005 697.855H280.66l59.528-364.132 57.24 364.132h249.553L717.95 214.67l59.528 483.185h176.733",
                  transform: "matrix(1.00767 0 0 .72453 -3.864 335.688)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
                "path",
                {
                  strokeWidth: 48.577,
                  d: "M337.901 235.705v109.111m387.813-113.657v109.11m84.291-195.988-77.153 77.152m-480-71.438 77.153 77.153"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var PeaksTopLabels_default = SvgPeaksTopLabels;

  // build/lib-react-tsx/nmr/Peaks.tsx
  var React99 = __toESM(require_react(), 1);
  var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
  var SvgPeaks = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime99.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
                "path",
                {
                  strokeWidth: 47.417,
                  d: "M54.005 837.855H280.66l59.528-364.132 57.24 364.132h249.553L717.95 354.67l59.528 483.185h176.733"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
                "path",
                {
                  strokeWidth: 41.819,
                  d: "M337.901 251.258v80.862m377.763-204.636v80.86"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var Peaks_default = SvgPeaks;

  // build/lib-react-tsx/nmr/PhaseCorr.tsx
  var React100 = __toESM(require_react(), 1);
  var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
  var SvgPhaseCorr = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime100.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M23.903 784.146 176.5 781.5l34-26 15-96 51-629 41 751 18 185 24-113 17-54 28-13 65-3 504 1.447"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "25,25",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M534.5 345.5c80 1 126 12 182 54"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M667.5 102.5c106.948-3.868 176.044 18.818 258 82"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("path", { d: "m736.882 5.431-30.309 94.326 37.043 91.894c-44.108-35.725-114.376-68.437-170.73-87.059 54.862-22.636 122.583-60.345 163.996-99.161z" }),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "25,25",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 50,
            d: "M574.5 617.5 885 197"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M549.5 654.5v-609"
          }
        )
      ]
    }
  );
  var PhaseCorr_default = SvgPhaseCorr;

  // build/lib-react-tsx/nmr/PhaseCorrection.tsx
  var React101 = __toESM(require_react(), 1);
  var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
  var SvgPhaseCorrection = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime101.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "m23.903 784.146 153.596.09L225.5 712.5l52-683 37 737L339 970.348l63-186 134.26.599h223.575"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          "circle",
          {
            cx: 577.5,
            cy: 464.5,
            r: 194.5,
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M824.5 193.5c64 62 84 158 82 265"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime101.jsx)("path", { d: "M904.291 576.736c-19.604-56.021-53.537-125.708-90.025-169.186l92.525 35.434 93.783-31.95c-38.088 42.082-74.609 110.452-96.283 165.702z" }),
        /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "25,25",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 50,
            d: "M575.5 478.5 809 245"
          }
        )
      ]
    }
  );
  var PhaseCorrection_default = SvgPhaseCorrection;

  // build/lib-react-tsx/nmr/RangePicking.tsx
  var React102 = __toESM(require_react(), 1);
  var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
  var SvgRangePicking = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.653,
            d: "M43.556 943.061c64.939-.561 128.939-.561 255.707.136C417.5 941.5 384.515 640.484 393.373 562.5c13.218 120.809-19.69 357.958 120.678 380.692 23.449.308 21.449-.692 41.512 0C694.876 914.378 656.282 682.309 669.5 561.5c8.724 77.984-17 355 113 383 87.151 1.308 57.312 0 159-1.439M67.5 24.5c79 59 397 144 425 190s26 82 26 82m-456-264c89 59 238.867 336.803 289.497 355.152 50.629 18.35 85.521 9.27 85.521 9.27"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("path", { d: "m609.5 329.5 31-168c5.5-29 9-54.5 12-75.5H703l-5.5 42.5h1c22.5-32.5 53-48 85-48 38 0 55 24.5 57 50 22-33 52.5-49.5 86.5-50 33 0 59 21.5 59 65 0 10.5-2 28.5-4 41.5l-26.5 142.5H899l25-136c2-9.5 3.5-21 3.5-30.5 0-21-8.5-35-29.5-35-27 0-56.5 33.5-66 85l-21.5 116.5H754l26.5-138c1.5-10 3-19.5 3-28.5 0-18-5.5-35-29.5-35-27 0-58 37-67 86.5l-21 115z" }),
        /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.653,
            d: "M267.5 635.5v-152h527v151"
          }
        )
      ]
    }
  );
  var RangePicking_default = SvgRangePicking;

  // build/lib-react-tsx/nmr/RealImag.tsx
  var React103 = __toESM(require_react(), 1);
  var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
  var SvgRealImag = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.653,
            d: "M38.5 28.5v934h933"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
          "text",
          {
            fontFamily: "'MyriadPro-Regular'",
            fontSize: 500,
            transform: "translate(467.5 896.5)",
            children: "Re"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
          "text",
          {
            fontFamily: "'MyriadPro-Regular'",
            fontSize: 500,
            transform: "translate(57.5 354.5)",
            children: "Im"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", { fill: "none", strokeWidth: 50, d: "M763.5 233.5c79 0 196 41 196 211" }),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", { d: "M595.297 237.352c85.194-31.611 190.897-85.547 256.406-142.646l-51.592 142.646 51.592 142.646c-65.508-57.1-171.211-111.052-256.406-142.646z" }),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", { fill: "none", strokeWidth: 50, d: "M309.5 729.5c-79 0-196-41-196-211" }),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("path", { d: "M475.703 728.647c-85.194 31.611-190.897 85.547-256.405 142.647l51.591-142.647-51.592-142.646c65.507 57.1 171.211 111.051 256.406 142.646z" })
      ]
    }
  );
  var RealImag_default = SvgRealImag;

  // build/lib-react-tsx/nmr/Reference.tsx
  var React104 = __toESM(require_react(), 1);
  var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
  var SvgReference = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 47.417,
            d: "M54.005 897.855H280.66l59.528-364.132 57.24 364.132h249.553L717.95 414.67l59.528 483.185h176.733"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 41.819,
            d: "M715.664 247.484v80.86"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
          "path",
          {
            stroke: "none",
            d: "M29.136 55.701h154.818v35.807q-20.183 18.23-33.724 39.454-16.407 25.78-25.912 57.422-7.552 24.609-10.156 58.203H61.297q6.25-46.745 19.662-78.386t42.448-67.708H29.136Zm182.422 137.761h56.64v53.125h-56.64zm239.062 53.125H291.507q2.734-23.568 16.536-44.271 13.933-20.834 52.084-49.089 23.307-17.318 29.817-26.302t6.51-17.057q0-8.724-6.51-14.844-6.38-6.25-16.145-6.25-10.157 0-16.667 6.38-6.38 6.38-8.594 22.526l-53.125-4.297q3.125-22.395 11.458-34.895 8.334-12.63 23.438-19.271 15.234-6.771 42.057-6.771 27.995 0 43.49 6.38 15.625 6.38 24.479 19.662 8.984 13.15 8.984 29.557 0 17.448-10.286 33.333-10.156 15.886-37.11 34.896-16.015 11.068-21.484 15.495-5.338 4.427-12.63 11.588h82.813zm23.829-190.886h154.818v35.807q-20.183 18.23-33.724 39.454-16.407 25.78-25.912 57.422-7.552 24.609-10.156 58.203H506.61q6.25-46.745 19.662-78.386t42.448-67.708h-94.271z",
            fontFamily: "sans-serif",
            fontSize: 266.667,
            fontWeight: 400,
            style: {
              lineHeight: 1.25
            }
          }
        )
      ]
    }
  );
  var Reference_default = SvgReference;

  // build/lib-react-tsx/nmr/ResetScale.tsx
  var React105 = __toESM(require_react(), 1);
  var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
  var SvgResetScale = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("g", { "data-name": "Group 1", children: /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          "path",
          {
            d: "m448.722 988.7-285.93-242.377c-17.662-14.972-17.662-38.984 0-53.956 8.665-7.627 20-11.3 31.66-11.3a49.67 49.67 0 0 1 31.658 11.3l209.282 177.4v-338.53h-398.4S.068 527.554.005 489.846s36.987-40.427 36.987-40.427h398.4V130.227l-209.281 177.4c-17.329 14.689-45.989 14.689-63.319 0-17.662-14.972-17.662-38.984 0-53.956l285.93-242.377c8.331-7.345 19.662-11.3 31.659-11.3a49.9 49.9 0 0 1 31.659 11.3l285.93 242.382c17.662 14.972 17.662 38.984 0 53.956-8.665 7.627-20 11.3-31.659 11.3a49.67 49.67 0 0 1-31.659-11.3L525.37 130.227v319.191h441.847S1000 454.846 1000 489.845s-32.783 41.391-32.783 41.391H525.37v338.535l209.282-177.4c17.329-14.689 45.989-14.689 63.318 0 17.662 14.972 17.662 38.984 0 53.956L512.04 988.7c-8.331 7.344-19.662 11.3-31.659 11.3a49.9 49.9 0 0 1-31.659-11.3Z",
            "data-name": "Union 1"
          }
        ) })
      ]
    }
  );
  var ResetScale_default = SvgResetScale;

  // build/lib-react-tsx/nmr/SameTop.tsx
  var React106 = __toESM(require_react(), 1);
  var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
  var SvgSameTop = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("g", { "data-name": "Group 1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
            "path",
            {
              d: "M967.216 0H36.987S-.063 2.979 0 44.3s36.987 45.35 36.987 45.35h930.229s32.783-7 32.783-45.352S967.216 0 967.216 0Z",
              "data-name": "Path 1"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
            "path",
            {
              d: "m235.001 515.329 218.112-174.663v621.787c0 20.859 20.839 37.547 46.887 37.547s46.887-16.687 46.887-37.547V340.666l218.111 174.663c9.03 7.231 21.186 11.125 32.995 11.125 12.156 0 23.964-3.616 32.995-11.125 18.407-14.741 18.407-38.381 0-53.122L532.994 223.575c-8.683-6.953-20.839-11.125-32.995-11.125-12.5 0-24.312 3.894-32.995 11.125L169.012 462.207c-18.408 14.741-18.408 38.381 0 53.122 18.06 14.463 47.929 14.463 65.989 0Z",
              "data-name": "Path 2"
            }
          )
        ] })
      ]
    }
  );
  var SameTop_default = SvgSameTop;

  // build/lib-react-tsx/nmr/Search.tsx
  var React107 = __toESM(require_react(), 1);
  var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
  var SvgSearch = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
                "path",
                {
                  strokeWidth: 46.91,
                  d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
                "path",
                {
                  strokeWidth: 46.908,
                  d: "m897.765 890.229-235.87-315.79-82.569 61.672 235.871 315.791m0 0c12.543 16.792 36.556 20.275 53.355 7.72m.001.002 21.484-16.054"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
                "path",
                {
                  strokeWidth: 46.908,
                  d: "M890.037 943.57c16.795-12.541 20.277-36.542 7.728-53.342"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
                "path",
                {
                  strokeWidth: 21.586,
                  d: "M419.367 610.974c-144.301 0-262.007-117.703-262.007-262.009 0-144.317 117.706-262.011 262.007-262.011 144.314 0 262.009 117.694 262.009 262.011.001 144.306-117.693 262.009-262.009 262.009"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
                "path",
                {
                  strokeWidth: 40.745,
                  d: "M228.175 400.361h228.784l43.774-204.311 47.223 204.311h50.245"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var Search_default = SvgSearch;

  // build/lib-react-tsx/nmr/Searchq.tsx
  var React108 = __toESM(require_react(), 1);
  var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
  var SvgSearchq = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime108.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime108.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(
                "path",
                {
                  strokeWidth: 46.91,
                  d: "M419.367 668.216c-175.831 0-319.25-143.418-319.25-319.251 0-175.839 143.417-319.264 319.25-319.264 175.84 0 319.259 143.423 319.259 319.264 0 175.833-143.418 319.251-319.259 319.251"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(
                "path",
                {
                  strokeWidth: 46.908,
                  d: "m897.764 890.229-235.87-315.79-82.568 61.672 235.871 315.791m0 0c21.303 26.598 23.303 26.598 53.354 7.72m.001.002 21.485-16.054m0 0c29.463-22.07 29.463-23.07 7.728-53.342"
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(
          "text",
          {
            fontFamily: "'Helvetica'",
            fontSize: 550,
            transform: "translate(258.5 538.5)",
            children: "?"
          }
        )
      ]
    }
  );
  var Searchq_default = SvgSearchq;

  // build/lib-react-tsx/nmr/Signals.tsx
  var React109 = __toESM(require_react(), 1);
  var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
  var SvgSignals = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.653,
            d: "M43.556 773.06c99 12.954 89.087-59.214 105.609-151.341 21.809 85.65 13.614 146.848 80.099 151.474 112.614 7.798 85.254-471.209 94.11-549.193 13.217 120.81-19.695 526.458 120.676 549.193 32.648 5.287 66.089 7.402 101.512 0C684.876 744.378 653.153 344.809 666.37 224c8.724 77.984-18.637 556.991 93.977 549.193 66.617-4.626 58.29-65.824 80.1-151.474 16.521 92.127 6.608 164.295 105.74 151.342"
          }
        )
      ]
    }
  );
  var Signals_default = SvgSignals;

  // build/lib-react-tsx/nmr/Simulator.tsx
  var React110 = __toESM(require_react(), 1);
  var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
  var SvgSimulator = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("path", { d: "M493.451 251.114c1.298 3.96 2.149 7.125 2.488 9.442.28 2.317-.12 4.07-1.359 5.203-1.19 1.185-3.337 1.869-6.446 2.149-3.11.28-7.346.449-12.775.449-5.596 0-10.006-.107-13.174-.281-3.109-.168-5.538-.506-7.178-.957-1.639-.512-2.828-1.189-3.509-2.095-.621-.906-1.188-2.036-1.64-3.505l-14.416-43.026h-80.506l-13.574 41.898c-.449 1.524-1.02 2.821-1.749 3.898-.681 1.017-1.87 1.862-3.45 2.49-1.581.562-3.9 1.014-6.789 1.238-2.937.231-6.785.34-11.527.34-5.096 0-9.055-.169-11.934-.51-2.879-.334-4.866-1.125-5.938-2.426-1.131-1.242-1.53-3.059-1.19-5.371.34-2.317 1.19-5.428 2.498-9.272L367.37 60.643c.68-1.865 1.41-3.396 2.317-4.578.909-1.133 2.32-2.038 4.24-2.658 1.918-.564 4.585-.962 8.026-1.133 3.389-.168 7.975-.28 13.575-.28 6.496 0 11.696.11 15.604.28 3.84.169 6.838.567 8.987 1.133 2.148.62 3.738 1.526 4.64 2.773.958 1.184 1.749 2.825 2.43 4.972zM395.02 93.944h-.168l-30.309 91.078h60.774zm313.173 109.115c0 7.636-1.021 14.528-3.109 20.697-2.142 6.217-5.03 11.7-8.699 16.448a55.8 55.8 0 0 1-13.291 12.21c-5.089 3.45-10.814 6.294-16.962 8.484-6.15 2.19-12.775 3.843-19.783 4.86-7.011 1.073-14.84 1.583-23.471 1.583h-56.927c-3.646 0-6.728-1.073-9.218-3.223-2.489-2.146-3.729-5.651-3.729-10.513V66.748c0-4.862 1.257-8.385 3.729-10.515 2.47-2.133 5.547-3.221 9.218-3.221h53.816c13.117 0 24.279 1.141 33.365 3.33 9.091 2.193 16.786 5.544 23.004 10.012 6.276 4.462 11.026 10.12 14.363 16.959 3.279 6.842 4.979 14.925 4.979 24.201 0 5.196-.679 10.064-2.039 14.642-1.299 4.581-3.219 8.765-5.767 12.497-2.548 3.783-5.649 7.067-9.386 9.947-3.671 2.883-7.91 5.202-12.668 6.955 6.109 1.132 11.705 3.056 16.854 5.823 5.085 2.776 9.615 6.274 13.401 10.686 3.789 4.354 6.831 9.44 9.038 15.32 2.21 5.826 3.282 12.383 3.282 19.675zm-56.309-90.234c0-4.354-.68-8.194-1.977-11.59a20.6 20.6 0 0 0-5.999-8.537c-2.599-2.261-5.93-4.013-10.006-5.258-4.009-1.187-9.412-1.807-16.105-1.807h-22.049v55.63h24.357c6.278 0 11.313-.736 15.036-2.206 3.798-1.467 6.905-3.561 9.395-6.108 2.479-2.597 4.298-5.65 5.538-9.155 1.192-3.448 1.81-7.124 1.81-10.969zm11.087 91.758c0-4.975-.798-9.437-2.499-13.34-1.63-3.957-4.058-7.237-7.228-9.895-3.218-2.601-7.295-4.694-12.272-6.103-4.978-1.414-11.452-2.151-19.385-2.151h-25.836v60.948h31.486c6.056 0 11.135-.623 15.322-1.926 4.119-1.242 7.688-3.11 10.745-5.592 3.041-2.491 5.419-5.602 7.118-9.275 1.699-3.729 2.549-7.918 2.549-12.666z" }),
        /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "M40.677 918.5h95.78l50.591-144.818L242.565 918.5h86.862l58.943-524.723L445.842 918.5h107.484l57.472-524.723 58.95 524.723h86.862l55.519-144.818L862.718 918.5H958.5"
          }
        )
      ]
    }
  );
  var Simulator_default = SvgSimulator;

  // build/lib-react-tsx/nmr/Simulatormicro.tsx
  var React111 = __toESM(require_react(), 1);
  var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
  var SvgSimulatormicro = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "M40.677 918.5h95.78l50.591-797.277L242.565 918.5h86.862l58.943-798 57.472 798h107.484l57.472-170 58.95 170h86.862l55.519-265 50.589 265H958.5"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "40,40",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 75,
            d: "M558.5 126.5v288"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 49.312,
            d: "M583 105h325v325H583z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "40,40",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 75,
            d: "M932.5 128.5v288m-327-334h288m-288 371h288"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("path", { d: "M700.17 262.665q0 23.204 4.593 31.179c3.062 5.318 8.565 7.977 16.517 7.977q19.01 0 31.42-26.506 12.407-26.504 12.408-67.435v-43.022h30.453v108.281q0 14.828 3.062 21.753 3.06 6.93 9.506 6.929 6.928.001 10.555-6.848 3.625-6.847 3.625-20.223v-4.512h6.93q.158 1.29.241 2.82.08 1.53.081 4.431 0 18.37-7.815 28.44-7.817 10.07-21.995 10.07-16.597.002-24.975-14.1-8.382-14.098-8.541-42.619-7.574 29.33-20.222 43.022-12.651 13.7-31.986 13.698-14.503-.001-24.008-8.621-9.51-8.617-13.213-25.378-.324 3.062-.322 9.346 0 20.785 10.554 46.487 10.552 25.698 10.554 30.373 0 6.443-3.705 10.151-3.709 3.706-10.152 3.706-7.575 0-10.876-5.398-3.304-5.4-3.304-17.644 0-2.9.645-19.095c.429-10.795.645-20.6.645-29.406q0-11.921-.482-33.516-.484-21.591-.484-31.26v-80.889h30.293v97.809z" })
      ]
    }
  );
  var Simulatormicro_default = SvgSimulatormicro;

  // build/lib-react-tsx/nmr/Sum.tsx
  var React112 = __toESM(require_react(), 1);
  var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
  var SvgSum2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
          "path",
          {
            d: "m713.547 237.766 84.27-.682V77.631s-5.122-24.916-20.866-40.995-42.111-23.322-42.111-23.322H115.788s-38.483 9.884-54.3 33.69-8.969 61.533-8.969 61.533l274.61 388.2a7.3 7.3 0 0 1 1.321 3.719 8.6 8.6 0 0 1-1.321 3.945L60.85 873.556s-17.841 40.987-5.111 69.46 56.026 44.435 56.026 44.435h694.089s30-5.73 46.746-21.809 20.254-42.505 20.254-42.505v-234.49h-91.555l2 194.646s.146 1.94-.87 2.829-3.194.729-3.194.729l-606.513-3.5s-1.678-.251-2-1.062.7-2.183.7-2.183l242.047-340.2s12.2-18.089 12.2-38.858-12.2-44.218-12.2-44.218L164.056 106.218a2 2 0 0 1 .257-1.136 1.9 1.9 0 0 1 .943-.47l540.54-2s3.231.076 5.083 1.861 2.327 5.276 2.327 5.276Z",
            "data-name": "Path 1"
          }
        )
      ]
    }
  );
  var Sum_default2 = SvgSum2;

  // build/lib-react-tsx/nmr/Tools.tsx
  var React113 = __toESM(require_react(), 1);
  var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
  var SvgTools = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
          "path",
          {
            fill: "#FFF",
            strokeWidth: 50,
            d: "M188.491 960.059c-11.069 11.069-29.019 11.069-40.087 0L38.586 850.24c-11.07-11.071-11.072-29.019 0-40.087l297.208-287.211c11.07-11.07 29.019-11.071 40.089.001l109.818 109.819c11.07 11.07 11.07 29.017 0 40.087z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)("path", { fill: "#FFF", strokeWidth: 80, d: "M930 71.47 94.203 907.271" }),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
          "path",
          {
            strokeLinecap: "square",
            strokeWidth: 50,
            d: "m815.25 131.774 58.031 58.032 57.136-53.741 36.77-62.791-37.336-37.334-59.396 32.243-57.135 61.66"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeWidth: 50,
            d: "M280.166 28.167c93.974 0 170.155 76.181 170.155 170.155S374.14 368.477 280.166 368.477s-170.155-76.181-170.155-170.155"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "square",
            strokeWidth: 50,
            d: "m268.979 42.067 123.497 123.496-30.17 112.597-112.597 30.17-123.884-123.884"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "square",
            strokeWidth: 50,
            d: "m142.569 239.02 87.597 92.248 39.535 2.326 96.124-25.582 29.457-31.008 24.031-98.449-9.302-38.76-77.52-74.419"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
          "path",
          {
            fill: "#FFF",
            strokeLinecap: "round",
            strokeWidth: 120,
            d: "m384.131 301.333 555.892 555.892"
          }
        )
      ]
    }
  );
  var Tools_default = SvgTools;

  // build/lib-react-tsx/nmr/Tree.tsx
  var React114 = __toESM(require_react(), 1);
  var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
  var SvgTree = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("path", { d: "M499.307 43.814a21.397 21.397 0 0 0-21.075 21.698V290.25l-193.664 84.127A21.4 21.4 0 0 0 271.698 394v216.098l-145.464 85.23a21.4 21.4 0 0 0-10.578 18.46V944a21.397 21.397 0 1 0 42.79 0V726.049l134.718-78.936 134.719 78.936V944a21.397 21.397 0 1 0 42.79 0V713.787a21.4 21.4 0 0 0-10.58-18.459l-145.605-85.314v-201.98l185.14-80.425 185.14 80.424v202.059l-145.598 85.23a21.4 21.4 0 0 0-10.586 18.465V944a21.397 21.397 0 1 0 42.789 0V726.055l134.785-78.903 134.653 78.897V944a21.397 21.397 0 1 0 42.79 0V713.787a21.4 21.4 0 0 0-10.58-18.459L727.56 610.096V394a21.4 21.4 0 0 0-12.871-19.623L521.023 290.25V65.512a21.397 21.397 0 0 0-21.716-21.698z" })
      ]
    }
  );
  var Tree_default = SvgTree;

  // build/lib-react-tsx/nmr/ZeroFilling.tsx
  var React115 = __toESM(require_react(), 1);
  var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
  var SvgZeroFilling = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "m27.989 24.288 24.468 939.363 52.128-677.659 29.787 456.383 44.681-297.873 23.404 202.128 38.298-108.511 26.596 42.339h698.936"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "50,50",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 48.987,
            d: "M293.947 55.51v886.864"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("path", { d: "M786.083 122.546c22.189 42.847 30.287 92.068 30.287 147.656 0 43.728-3.812 84.928-17.435 123.597-25.708 72.732-70.201 109.094-133.482 109.094-43.292 0-78.888-19.661-106.787-58.996-29.886-41.965-40.824-98.985-40.824-171.058 0-56.689 5.995-105.469 25.991-146.338 27.026-55.588 68.555-83.386 124.585-83.386 50.536 0 89.757 26.48 117.665 79.431zm-50.098 308.539c12.079-35.35 18.126-86.502 18.126-153.472 0-53.353-3.624-95.941-10.875-127.778-13.629-59.279-39.114-82.172-76.465-82.172-37.359 0-62.953 23.769-76.796 84.803q-10.876 48.745-10.875 128.443c0 49.84 3.732 89.689 11.206 119.549 14.057 55.767 40.424 76.898 79.102 76.898 32.3 0 54.489-10.924 66.577-46.271z" }),
        /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("path", { strokeWidth: 50, d: "m763.095 123.225-180.85 307.447" })
      ]
    }
  );
  var ZeroFilling_default = SvgZeroFilling;

  // build/lib-react-tsx/periodic/Carbon.tsx
  var React116 = __toESM(require_react(), 1);
  var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
  var SvgCarbon = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("path", { fill: "none", d: "M500 100h150v50H500Z" }),
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M105.938 31.182h788.88v935.636h-788.88Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-99.27 690.312q0 8.464-.678 14.558-.338 5.755-1.354 10.156-1.016 4.063-2.708 7.11-1.693 3.046-5.417 7.109-3.724 3.724-14.557 9.817-10.495 6.094-26.068 11.85-15.234 5.416-35.208 9.14-19.636 3.724-42.657 3.724-45.026 0-81.25-13.88t-61.614-41.302q-25.39-27.76-38.933-69.063-13.541-41.302-13.541-96.146 0-55.859 14.896-99.192 14.895-43.334 41.64-72.787t63.985-44.687q37.578-15.235 82.604-15.235 18.281 0 35.208 3.047t31.146 8.125q14.557 4.74 26.068 11.172 11.51 6.432 15.911 11.172 4.74 4.401 6.432 7.448t2.709 7.786q1.015 4.74 1.354 11.172.677 6.433.677 15.912 0 10.156-.677 17.265-.677 7.11-2.37 11.51-1.693 4.402-4.062 6.433t-5.417 2.031q-5.078 0-12.865-5.755-7.786-6.094-20.312-13.203-12.188-7.448-29.453-13.203-16.927-6.094-40.625-6.094-26.068 0-46.719 10.833-20.313 10.495-34.87 30.47-14.219 19.635-21.666 47.734-7.448 28.098-7.448 63.307 0 38.594 7.786 67.031 8.125 28.099 22.682 46.38 14.896 18.282 35.547 27.422 20.99 8.802 47.058 8.802 23.697 0 40.963-5.416 17.266-5.756 29.453-12.526 12.526-6.771 20.313-12.188 8.125-5.417 12.526-5.417 3.385 0 5.416 1.355t3.386 5.416 2.031 11.51q.677 7.11.677 19.297",
            fontFamily: "sans-serif",
            fontSize: 693.333,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(759.077 -169.385)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
          "path",
          {
            stroke: "none",
            d: "M340.94 834.496q0 3.1-.331 5.313-.332 2.103-.996 3.43-.554 1.218-1.329 1.772-.774.553-1.77.553H257.49q-.885 0-1.66-.553-.775-.554-1.439-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.221-5.312.332-2.214.886-3.542.664-1.328 1.438-1.881.775-.664 1.771-.664h26.673v-93.19l-23.02 12.727q-2.546 1.218-4.206 1.55-1.55.221-2.546-.664-.885-.996-1.217-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.111-1.77.554-2.988t1.217-1.992q.775-.775 2.103-1.66l30.768-19.922q.554-.443 1.328-.664.886-.332 2.214-.443 1.328-.221 3.431-.221 2.214-.111 5.645-.111 4.205 0 6.75.221 2.657.11 3.985.554 1.328.332 1.771.996t.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.663 1.328.885 3.542.332 2.103.332 5.312m116.432-.774q0 3.21-.332 5.534-.221 2.213-.775 3.652-.553 1.439-1.439 2.103-.885.553-1.992.553h-82.343q-2.435 0-4.206-.443-1.771-.442-2.878-1.66-1.107-1.328-1.66-3.763-.443-2.435-.443-6.308 0-3.653.332-6.198.332-2.657 1.218-4.649.885-2.103 2.213-3.984 1.44-1.992 3.653-4.317l24.791-26.562q7.416-7.747 11.953-14.056 4.538-6.42 7.084-11.621 2.545-5.313 3.43-9.74.997-4.427.997-8.411 0-3.652-1.218-6.862-1.106-3.32-3.43-5.755-2.214-2.435-5.645-3.763-3.431-1.44-8.08-1.44-6.53 0-11.62 1.661-4.981 1.66-8.855 3.763-3.763 1.992-6.308 3.763-2.546 1.66-3.985 1.66-.996 0-1.77-.664-.665-.664-1.107-2.213-.443-1.55-.775-4.095-.221-2.657-.221-6.42 0-2.545.11-4.205.222-1.771.554-2.989.332-1.328.885-2.213.553-.996 1.882-2.324 1.438-1.329 5.09-3.32 3.764-2.104 9.187-3.985 5.423-1.992 11.953-3.32 6.53-1.329 13.613-1.329 11.179 0 19.48 2.878 8.41 2.767 13.945 7.858 5.534 4.98 8.19 11.953 2.767 6.862 2.767 14.83 0 6.974-1.328 13.725t-5.534 14.61q-4.206 7.747-11.843 17.265-7.636 9.407-20.254 21.914l-16.712 17.155h56.446q1.106 0 1.992.664.996.664 1.66 2.103.664 1.328.996 3.652.332 2.214.332 5.313m56.003-4.095q0 10.293-3.653 13.834-3.541 3.542-12.838 3.542t-12.839-3.431q-3.541-3.542-3.541-13.281 0-10.404 3.541-13.946 3.653-3.541 13.06-3.541 9.186 0 12.728 3.541 3.542 3.431 3.542 13.282m122.63-56.224q0 17.155-2.767 30.99t-9.076 23.573q-6.198 9.74-16.27 14.942-9.96 5.202-24.459 5.202-14.72 0-24.349-4.98-9.629-5.092-15.273-14.5-5.645-9.518-7.969-23.131-2.213-13.724-2.213-30.99 0-17.044 2.766-30.878 2.878-13.946 9.076-23.685 6.309-9.74 16.27-14.942 10.071-5.202 24.46-5.202 14.72 0 24.348 5.092 9.74 4.98 15.384 14.498 5.645 9.408 7.858 23.132 2.214 13.613 2.214 30.879m-29.33 1.438q0-10.182-.553-17.93-.553-7.857-1.77-13.613-1.108-5.755-2.878-9.74-1.66-3.983-4.095-6.308-2.435-2.435-5.534-3.43-3.1-.997-6.862-.997-6.53 0-10.847 3.21-4.205 3.099-6.751 9.407-2.435 6.309-3.431 15.717-.996 9.407-.996 21.914 0 15.273 1.217 25.345 1.218 9.96 3.763 15.937 2.657 5.866 6.752 8.301 4.095 2.324 9.85 2.324 4.316 0 7.637-1.328 3.32-1.439 5.755-4.206 2.545-2.767 4.206-6.972 1.66-4.206 2.656-9.74 1.107-5.534 1.439-12.506.442-6.973.442-15.385m140.228 59.655q0 3.1-.332 5.313-.332 2.103-.996 3.43-.553 1.218-1.328 1.772-.775.553-1.77.553h-79.024q-.886 0-1.66-.553-.775-.554-1.44-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.222-5.312.332-2.214.885-3.542.664-1.328 1.439-1.881.775-.664 1.77-.664h26.674v-93.19l-23.02 12.727q-2.546 1.218-4.207 1.55-1.55.221-2.545-.664-.886-.996-1.218-3.32-.332-2.325-.332-6.53 0-2.657.111-4.317.11-1.77.553-2.988t1.218-1.992q.775-.775 2.103-1.66l30.768-19.922q.553-.443 1.328-.664.885-.332 2.214-.443 1.328-.221 3.43-.221 2.214-.111 5.645-.111 4.206 0 6.751.221 2.657.11 3.985.554 1.328.332 1.77.996.443.664.443 1.66v118.314h23.353q.996 0 1.771.664.885.553 1.439 1.881.664 1.328.885 3.542.332 2.103.332 5.312",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var Carbon_default = SvgCarbon;

  // build/lib-react-tsx/periodic/Electronegativity.tsx
  var React117 = __toESM(require_react(), 1);
  var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
  var SvgElectronegativity = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime117.jsx)("path", { fill: "none", d: "M499.9 100h150v50h-150z" }),
        /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M103.838 31.182h788.88v935.636h-788.88Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-156.484 355.156q0 10.156-1.016 17.266-.677 6.77-2.708 10.833-1.693 4.063-4.063 6.094t-5.417 2.031H-312.89v117.813h134.401q3.047 0 5.417 1.692 2.37 1.693 4.063 5.756 2.03 4.062 2.708 10.833 1.016 6.77 1.016 16.927t-1.016 16.927q-.677 6.771-2.708 11.172-1.693 4.401-4.063 6.432-2.37 1.693-5.417 1.693h-134.4v163.177q0 3.724-2.032 6.432t-7.448 4.74q-5.078 1.693-13.541 2.708t-21.667 1.016q-12.865 0-21.667-1.016-8.463-1.015-13.541-2.708-5.079-2.031-7.448-4.74-2.032-2.708-2.032-6.432v-397.11q0-14.895 7.448-21.327 7.787-6.771 18.959-6.771h206.171q3.047 0 5.417 2.031 2.37 1.693 4.063 6.094 2.03 4.062 2.708 11.172 1.016 7.109 1.016 17.265",
            fontFamily: "sans-serif",
            fontSize: 693.333,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(778.362 33.23)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(
          "path",
          {
            stroke: "none",
            d: "M657.365 223.315q0 5.645-1.217 8.633-1.107 2.878-3.1 2.878h-12.727v25.898q0 1.107-.664 1.992-.664.775-2.324 1.328-1.66.554-4.317.775-2.656.332-6.862.332-3.984 0-6.751-.332-2.656-.221-4.316-.775-1.55-.553-2.214-1.328-.553-.885-.553-1.992v-25.898h-54.786q-1.549 0-2.766-.332-1.218-.443-2.103-1.771-.775-1.439-1.218-3.985-.332-2.656-.332-6.972 0-3.542.11-6.087.222-2.657.554-4.76.443-2.102 1.107-3.984.775-1.881 1.882-3.984l44.492-78.47q.553-.996 1.881-1.66 1.328-.775 3.653-1.218 2.434-.553 6.087-.775t8.854-.221q5.644 0 9.629.332 3.984.221 6.308.885 2.435.554 3.542 1.44t1.107 2.102v86.218h12.728q1.77 0 2.988 2.766 1.328 2.657 1.328 8.965m-45.045-77.584h-.222l-37.74 65.853h37.962zm96.62 102.819q0 10.293-3.652 13.834-3.541 3.542-12.838 3.542t-12.839-3.431q-3.541-3.542-3.541-13.281 0-10.404 3.541-13.946 3.653-3.541 13.06-3.541 9.186 0 12.728 3.541 3.542 3.431 3.542 13.282m122.629-56.224q0 17.155-2.766 30.99t-9.076 23.574q-6.197 9.74-16.27 14.94-9.96 5.203-24.459 5.203-14.72 0-24.349-4.98-9.629-5.092-15.273-14.5-5.645-9.518-7.969-23.13-2.213-13.725-2.213-30.99 0-17.045 2.767-30.88 2.877-13.945 9.075-23.684 6.309-9.74 16.27-14.942 10.071-5.202 24.46-5.202 14.72 0 24.348 5.092 9.74 4.98 15.384 14.498 5.645 9.408 7.858 23.132 2.214 13.613 2.214 30.879m-29.329 1.439q0-10.183-.553-17.93-.553-7.858-1.77-13.613-1.108-5.756-2.878-9.74-1.66-3.984-4.095-6.309-2.435-2.435-5.534-3.43-3.1-.997-6.862-.997-6.53 0-10.847 3.21-4.205 3.099-6.75 9.407-2.436 6.31-3.432 15.717t-.996 21.914q0 15.273 1.217 25.345 1.218 9.96 3.763 15.937 2.657 5.866 6.752 8.301 4.095 2.324 9.85 2.324 4.316 0 7.637-1.328 3.32-1.439 5.755-4.206 2.546-2.767 4.206-6.972 1.66-4.206 2.656-9.74 1.107-5.534 1.439-12.506.442-6.973.442-15.384",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var Electronegativity_default = SvgElectronegativity;

  // build/lib-react-tsx/periodic/ElectronicBoron.tsx
  var React118 = __toESM(require_react(), 1);
  var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
  var SvgElectronicBoron = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)("path", { fill: "none", strokeWidth: 40, d: "M105.12 32.364H894V968H105.12Z" }),
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
          "path",
          {
            stroke: "none",
            d: "M621.094 728.438q0 26.953-7.422 48.828t-20.703 38.672q-12.89 16.796-31.25 28.906-17.969 12.11-39.844 19.922T475 876.484Q450.39 880 419.922 880H285.547q-12.89 0-21.875-7.422-8.594-7.812-8.594-25V406.953q0-17.187 8.594-24.61 8.984-7.812 21.875-7.812H412.5q46.484 0 78.516 7.813 32.421 7.812 54.296 23.828 22.266 15.625 33.985 39.844 11.719 24.218 11.719 57.03 0 18.36-4.688 34.767-4.687 16.015-13.672 29.296-8.984 13.282-22.265 23.438-12.891 10.156-29.688 16.406 21.485 3.906 39.453 13.672 18.36 9.766 31.64 25.39 13.673 15.235 21.485 35.938 7.813 20.703 7.813 46.485M488.28 515.547q0-15.235-4.687-27.344t-14.063-19.922q-9.375-8.203-23.828-12.5-14.062-4.297-37.89-4.297h-51.954v131.25h57.422q22.266 0 35.547-5.078 13.281-5.468 21.875-14.453 8.985-9.375 13.281-21.484 4.297-12.5 4.297-26.172m26.172 216.406q0-17.578-5.86-31.25-5.859-14.062-17.187-23.437T462.5 662.813q-17.578-5.079-45.703-5.079h-60.938v143.75h74.22q21.484 0 35.937-4.297 14.843-4.687 25.39-13.28 10.938-8.985 16.797-21.876 6.25-13.281 6.25-30.078",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            transform: "translate(83.086 -224.565)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
          "path",
          {
            stroke: "none",
            d: "M215.604 838.839q0 2.005-.215 3.437-.215 1.36-.644 2.22-.358.788-.86 1.146-.5.358-1.145.358h-51.133q-.573 0-1.074-.358t-.931-1.146q-.359-.86-.573-2.22-.215-1.432-.215-3.437 0-2.077.143-3.438.215-1.432.573-2.292.43-.859.93-1.217.502-.43 1.147-.43h17.259v-60.3l-14.896 8.236q-1.647.788-2.721 1.003-1.003.143-1.647-.43-.573-.644-.788-2.148t-.215-4.225q0-1.72.072-2.793.071-1.146.358-1.934.286-.788.787-1.289t1.361-1.074l19.909-12.89q.358-.287.86-.43.572-.215 1.432-.287.859-.143 2.22-.143 1.432-.072 3.652-.072 2.721 0 4.368.143 1.72.072 2.579.359.859.214 1.145.644t.287 1.074v76.556h15.11q.645 0 1.146.43.573.358.931 1.217.43.86.573 2.292.215 1.36.215 3.438m60.873-13.321q0 5.443-2.077 9.597-2.005 4.153-5.73 6.946-3.723 2.793-8.808 4.154-5.085 1.432-11.029 1.432-3.58 0-6.875-.573-3.222-.501-5.8-1.289-2.579-.86-4.297-1.719-1.72-.859-2.507-1.575-.788-.788-1.217-2.363-.43-1.648-.43-4.799 0-2.076.143-3.294.143-1.289.43-2.005.286-.788.716-1.003.43-.286 1.074-.286.788 0 2.292.93 1.576.86 3.867 1.934 2.292 1.075 5.3 2.006 3.08.93 6.946.93 2.435 0 4.297-.5 1.934-.502 3.294-1.433 1.433-.93 2.149-2.363t.716-3.294q0-2.149-1.36-3.653-1.29-1.575-3.51-2.721-2.148-1.146-4.941-2.149-2.722-1.002-5.658-2.22-2.864-1.217-5.657-2.793-2.722-1.575-4.942-3.867-2.148-2.291-3.509-5.514-1.289-3.223-1.289-7.735 0-4.583 1.79-8.378 1.79-3.868 5.157-6.589t8.164-4.225q4.87-1.504 10.885-1.504 3.008 0 5.801.43 2.865.43 5.156 1.074 2.292.644 3.867 1.432 1.576.716 2.22 1.29.717.5 1.003 1.073.287.502.43 1.29.143.716.215 1.861.143 1.075.143 2.722 0 1.933-.143 3.15-.072 1.218-.358 1.934-.215.717-.645 1.003-.43.215-1.003.215-.644 0-2.005-.716-1.36-.788-3.437-1.647-2.006-.86-4.727-1.576-2.65-.788-6.087-.788-2.435 0-4.225.502-1.79.5-2.937 1.432-1.145.93-1.718 2.22-.573 1.217-.573 2.65 0 2.22 1.36 3.724t3.581 2.65 5.013 2.148q2.865 1.002 5.73 2.22 2.936 1.146 5.729 2.721 2.864 1.576 5.084 3.867t3.58 5.515q1.362 3.15 1.362 7.52m72.903-45.849q0 2.077-.215 3.581-.143 1.433-.5 2.364-.359.93-.932 1.36-.573.358-1.289.358h-53.281q-1.576 0-2.722-.286-1.145-.287-1.862-1.074-.716-.86-1.074-2.435-.286-1.576-.286-4.082 0-2.364.215-4.01.214-1.72.787-3.008.573-1.361 1.433-2.579.93-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.936-4.154 4.583-7.52 1.647-3.437 2.22-6.302.645-2.864.645-5.442 0-2.364-.788-4.44-.716-2.149-2.22-3.725-1.432-1.575-3.652-2.434-2.22-.931-5.228-.931-4.225 0-7.52 1.074-3.222 1.074-5.729 2.435-2.435 1.289-4.082 2.435-1.647 1.074-2.578 1.074-.645 0-1.146-.43-.43-.43-.716-1.432t-.501-2.65q-.143-1.719-.143-4.154 0-1.647.071-2.72.143-1.147.358-1.934.215-.86.573-1.433.358-.644 1.218-1.504.93-.86 3.294-2.148 2.435-1.36 5.944-2.578 3.509-1.29 7.734-2.149 4.225-.86 8.809-.86 7.233 0 12.604 1.863 5.443 1.79 9.023 5.085 3.581 3.222 5.3 7.734 1.79 4.44 1.79 9.596 0 4.512-.86 8.88-.859 4.369-3.58 9.454-2.721 5.013-7.663 11.171-4.941 6.088-13.105 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.644 2.364.215 1.432.215 3.438m107.709 58.666q0 2.077-.215 3.581-.144 1.432-.502 2.363t-.93 1.36q-.573.359-1.29.359h-53.28q-1.576 0-2.722-.286-1.146-.287-1.862-1.075-.716-.86-1.074-2.435-.287-1.575-.287-4.082 0-2.363.215-4.01.215-1.719.788-3.008.573-1.36 1.432-2.578.931-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.937-4.154 4.584-7.52 1.647-3.438 2.22-6.302.644-2.865.644-5.443 0-2.363-.788-4.44-.716-2.148-2.22-3.724-1.432-1.575-3.652-2.435-2.22-.93-5.228-.93-4.225 0-7.52 1.073-3.222 1.075-5.728 2.435-2.435 1.29-4.083 2.435-1.647 1.074-2.578 1.074-.644 0-1.145-.43-.43-.429-.717-1.432-.286-1.002-.5-2.65-.144-1.718-.144-4.153 0-1.647.071-2.721.144-1.146.359-1.934.214-.86.572-1.432.359-.645 1.218-1.504.93-.86 3.294-2.148 2.435-1.361 5.944-2.579 3.51-1.289 7.735-2.148t8.808-.86q7.233 0 12.604 1.863 5.443 1.79 9.024 5.084 3.58 3.223 5.3 7.735 1.79 4.44 1.79 9.596 0 4.512-.86 8.88t-3.58 9.453q-2.722 5.013-7.663 11.172-4.942 6.087-13.106 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.645 2.364.215 1.432.215 3.437m60.013-12.819q0 5.443-2.077 9.597-2.005 4.153-5.73 6.946-3.723 2.793-8.808 4.154-5.085 1.432-11.029 1.432-3.58 0-6.875-.573-3.222-.501-5.8-1.289-2.579-.86-4.297-1.719-1.719-.859-2.507-1.575-.788-.788-1.217-2.363-.43-1.648-.43-4.799 0-2.076.143-3.294.144-1.289.43-2.005.286-.788.716-1.003.43-.286 1.074-.286.788 0 2.292.93 1.576.86 3.867 1.934 2.292 1.075 5.3 2.006 3.08.93 6.946.93 2.435 0 4.297-.5 1.934-.502 3.294-1.433 1.433-.93 2.149-2.363t.716-3.294q0-2.149-1.36-3.653-1.29-1.575-3.51-2.721-2.148-1.146-4.941-2.149-2.722-1.002-5.658-2.22-2.864-1.217-5.657-2.793-2.722-1.575-4.942-3.867-2.148-2.291-3.509-5.514-1.289-3.223-1.289-7.735 0-4.583 1.79-8.378 1.79-3.868 5.157-6.589t8.164-4.225q4.87-1.504 10.885-1.504 3.008 0 5.801.43 2.865.43 5.156 1.074 2.292.644 3.867 1.432 1.576.716 2.22 1.29.717.5 1.003 1.073.287.502.43 1.29.143.716.215 1.861.143 1.075.143 2.722 0 1.933-.143 3.15-.072 1.218-.358 1.934-.215.717-.645 1.003-.43.215-1.003.215-.644 0-2.005-.716-1.36-.788-3.437-1.647-2.006-.86-4.727-1.576-2.65-.788-6.087-.788-2.435 0-4.225.502-1.79.5-2.937 1.432-1.145.93-1.718 2.22-.573 1.217-.573 2.65 0 2.22 1.36 3.724t3.581 2.65 5.013 2.148q2.865 1.002 5.73 2.22 2.936 1.146 5.729 2.721 2.864 1.576 5.084 3.867t3.58 5.515q1.362 3.15 1.362 7.52m72.903-45.849q0 2.077-.215 3.581-.143 1.433-.5 2.364-.359.93-.932 1.36-.573.358-1.289.358h-53.281q-1.576 0-2.722-.286-1.145-.287-1.862-1.074-.716-.86-1.074-2.435-.286-1.576-.286-4.082 0-2.364.215-4.01.214-1.72.787-3.008.573-1.361 1.433-2.579.93-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.936-4.154 4.583-7.52 1.647-3.437 2.22-6.302.645-2.864.645-5.442 0-2.364-.788-4.44-.716-2.149-2.22-3.725-1.432-1.575-3.652-2.434-2.22-.931-5.228-.931-4.225 0-7.52 1.074-3.222 1.074-5.729 2.435-2.435 1.289-4.082 2.435-1.647 1.074-2.578 1.074-.644 0-1.146-.43-.43-.43-.716-1.432t-.501-2.65q-.143-1.719-.143-4.154 0-1.647.071-2.72.143-1.147.358-1.934.215-.86.573-1.433.358-.644 1.218-1.504.93-.86 3.294-2.148 2.435-1.36 5.944-2.578 3.509-1.29 7.734-2.149 4.225-.86 8.809-.86 7.233 0 12.604 1.863 5.443 1.79 9.023 5.085 3.581 3.222 5.3 7.734 1.79 4.44 1.79 9.596 0 4.512-.86 8.88-.859 4.369-3.58 9.454-2.721 5.013-7.663 11.171-4.941 6.088-13.105 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.644 2.364.215 1.432.215 3.438m107.709 58.666q0 2.077-.215 3.581-.144 1.432-.502 2.363t-.93 1.36q-.573.359-1.29.359h-53.28q-1.576 0-2.722-.286-1.146-.287-1.862-1.075-.716-.86-1.074-2.435-.287-1.575-.287-4.082 0-2.363.215-4.01.215-1.719.788-3.008.573-1.36 1.432-2.578.931-1.289 2.363-2.793l16.042-17.187q4.798-5.013 7.734-9.095 2.937-4.154 4.584-7.52 1.647-3.438 2.22-6.302.644-2.865.644-5.443 0-2.363-.788-4.44-.716-2.148-2.22-3.724-1.432-1.575-3.652-2.435-2.22-.93-5.228-.93-4.225 0-7.52 1.073-3.222 1.075-5.728 2.435-2.435 1.29-4.082 2.435-1.648 1.074-2.579 1.074-.644 0-1.145-.43-.43-.429-.717-1.432-.286-1.002-.5-2.65-.144-1.718-.144-4.153 0-1.647.071-2.721.144-1.146.359-1.934.214-.86.572-1.432.359-.645 1.218-1.504.93-.86 3.294-2.148 2.435-1.361 5.944-2.579 3.51-1.289 7.735-2.148t8.808-.86q7.233 0 12.604 1.863 5.443 1.79 9.024 5.084 3.58 3.223 5.3 7.735 1.79 4.44 1.79 9.596 0 4.512-.86 8.88t-3.58 9.453q-2.722 5.013-7.663 11.172-4.942 6.087-13.106 14.18l-10.814 11.1h36.524q.716 0 1.289.43.644.43 1.074 1.36.43.86.645 2.364.215 1.432.215 3.437m79.349-27.643q0 8.522-1.862 15.397-1.79 6.804-5.3 11.602t-8.737 7.376-11.96 2.578q-2.793 0-5.156-.573-2.291-.501-4.512-1.575-2.148-1.146-4.296-2.793t-4.44-3.867v30.078q0 .716-.43 1.289t-1.504.93q-1.003.43-2.721.645-1.72.215-4.369.215t-4.368-.215-2.793-.644q-1.003-.358-1.433-.931t-.43-1.29v-89.231q0-.716.359-1.218.358-.572 1.217-.93.931-.359 2.363-.502 1.504-.215 3.724-.215 2.149 0 3.581.215 1.504.143 2.363.501.931.359 1.29.931.358.502.358 1.218v7.52q2.793-2.865 5.442-5.014 2.722-2.22 5.515-3.652 2.793-1.504 5.729-2.22 3.008-.716 6.373-.716 7.019 0 11.96 2.793 4.941 2.721 8.02 7.52 3.152 4.798 4.584 11.171 1.433 6.374 1.433 13.607m-18.764 1.29q0-4.083-.644-7.807-.573-3.795-2.077-6.732-1.432-2.936-3.867-4.655-2.363-1.79-5.944-1.79-1.79 0-3.58.573-1.72.501-3.582 1.719-1.79 1.217-3.723 3.15-1.934 1.934-4.083 4.799v21.055q3.796 4.798 7.234 7.447 3.437 2.579 7.161 2.579 3.51 0 5.944-1.79 2.507-1.791 4.082-4.656 1.576-2.936 2.292-6.588.787-3.653.787-7.305m91.811-31.811q0 2.005-.215 3.437-.215 1.361-.645 2.22-.358.788-.86 1.146-.5.358-1.145.358h-51.133q-.573 0-1.074-.358t-.931-1.146q-.358-.859-.573-2.22-.215-1.432-.215-3.437 0-2.077.143-3.438.215-1.432.573-2.291.43-.86.931-1.218.501-.43 1.146-.43h17.26v-60.299l-14.897 8.236q-1.647.788-2.721 1.002-1.003.144-1.647-.43-.573-.644-.788-2.148t-.215-4.225q0-1.719.072-2.793.071-1.146.358-1.934.286-.787.788-1.289.501-.5 1.36-1.074l19.91-12.89q.357-.287.859-.43.572-.215 1.432-.287.86-.143 2.22-.143 1.432-.071 3.652-.071 2.722 0 4.369.143 1.718.071 2.578.358.86.215 1.146.644t.286 1.075v76.556h15.11q.645 0 1.147.43.573.357.93 1.217.43.86.574 2.291.214 1.361.214 3.438",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var ElectronicBoron_default = SvgElectronicBoron;

  // build/lib-react-tsx/periodic/ElectronicLithium.tsx
  var React119 = __toESM(require_react(), 1);
  var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
  var SvgElectronicLithium = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime119.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M115.938 31.182h788.88v935.636h-788.88z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
          "g",
          {
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0,
            children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
              "path",
              {
                stroke: "none",
                d: "M-161.563 788.76q0 10.157-1.015 17.266-.677 6.77-2.37 11.51-1.693 4.401-4.401 6.433-2.37 2.031-5.755 2.031H-375.86q-11.172 0-18.959-6.432-7.448-6.771-7.448-21.667V400.115q0-3.386 2.032-6.094 2.37-2.709 7.448-4.401 5.078-1.693 13.541-2.709 8.802-1.015 21.667-1.015 13.203 0 21.667 1.015 8.463 1.016 13.541 2.709 5.078 1.692 7.11 4.4 2.37 2.71 2.37 6.095v352.421h137.786q3.385 0 5.755 2.032 2.708 1.692 4.401 6.093 1.693 4.063 2.37 11.172 1.015 6.771 1.015 16.927m133.387 25.73q0 3.385-2.031 6.093-2.032 2.37-7.11 4.063-4.74 1.693-12.864 2.37-8.125 1.015-20.651 1.015t-20.651-1.015q-8.125-.677-13.204-2.37-4.74-1.693-6.77-4.063-2.032-2.708-2.032-6.093V513.187q0-3.385 2.032-5.755 2.03-2.708 6.77-4.4 5.079-2.032 13.204-3.048 8.125-1.015 20.65-1.015 12.527 0 20.652 1.015 8.125 1.016 12.864 3.047 5.078 1.693 7.11 4.401 2.03 2.37 2.03 5.755zm6.432-404.22q0 25.73-10.495 35.548-10.494 9.817-38.932 9.817-28.776 0-38.932-9.479-9.818-9.479-9.818-34.192 0-25.73 10.156-35.547 10.495-10.157 39.271-10.157 28.438 0 38.594 9.818 10.156 9.48 10.156 34.193",
                fontFamily: "sans-serif",
                fontSize: 693.333,
                fontWeight: 700,
                letterSpacing: 0,
                style: {
                  lineHeight: 1.25
                },
                transform: "translate(725.077 -169.385)"
              }
            )
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime119.jsxs)(
          "g",
          {
            stroke: "none",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
                "path",
                {
                  d: "M-295.52 459.932q0 3.1-.333 5.313-.332 2.103-.996 3.43-.553 1.218-1.328 1.772-.775.553-1.77.553h-79.024q-.886 0-1.66-.553-.775-.554-1.44-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.222-5.312.332-2.214.885-3.542.664-1.328 1.439-1.881.775-.664 1.77-.664h26.674v-93.19l-23.021 12.727q-2.546 1.218-4.206 1.55-1.55.221-2.545-.664-.886-.996-1.218-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.112-1.77.554-2.988t1.218-1.992q.774-.775 2.103-1.66l30.768-19.922q.553-.443 1.328-.665.885-.332 2.213-.442 1.329-.222 3.431-.222 2.214-.11 5.645-.11 4.206 0 6.751.221 2.657.11 3.985.553 1.328.333 1.77.997.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.664 1.328.885 3.542.332 2.103.332 5.312m94.076-20.586q0 8.412-3.21 14.831-3.099 6.42-8.854 10.736t-13.613 6.419q-7.858 2.214-17.045 2.214-5.534 0-10.625-.886-4.98-.775-8.965-1.992-3.984-1.328-6.64-2.656t-3.874-2.435q-1.217-1.218-1.881-3.653-.664-2.545-.664-7.415 0-3.21.22-5.091.222-1.992.665-3.099.443-1.217 1.107-1.55.664-.442 1.66-.442 1.217 0 3.542 1.439 2.435 1.328 5.976 2.988t8.19 3.099q4.76 1.439 10.736 1.439 3.763 0 6.64-.775 2.989-.775 5.092-2.214 2.213-1.438 3.32-3.652t1.107-5.091q0-3.32-2.103-5.645-1.992-2.435-5.423-4.205-3.32-1.771-7.637-3.32-4.206-1.55-8.743-3.432-4.428-1.881-8.744-4.316-4.206-2.435-7.637-5.977-3.32-3.541-5.423-8.522-1.992-4.98-1.992-11.953 0-7.083 2.767-12.95 2.767-5.976 7.969-10.181 5.201-4.206 12.617-6.53 7.526-2.325 16.823-2.325 4.648 0 8.965.664 4.427.665 7.968 1.66 3.542.997 5.977 2.214 2.435 1.107 3.43 1.992 1.108.775 1.55 1.66.443.775.664 1.993.222 1.106.332 2.877.222 1.66.222 4.206 0 2.988-.222 4.87-.11 1.881-.553 2.988-.332 1.107-.996 1.55-.664.332-1.55.332-.996 0-3.098-1.107-2.103-1.218-5.313-2.546-3.099-1.328-7.305-2.435-4.095-1.217-9.407-1.217-3.763 0-6.53.775-2.767.774-4.538 2.213-1.77 1.439-2.656 3.431-.886 1.882-.886 4.095 0 3.431 2.103 5.755 2.103 2.325 5.534 4.096t7.748 3.32q4.427 1.55 8.854 3.43 4.537 1.772 8.854 4.207 4.427 2.434 7.858 5.976t5.534 8.522q2.103 4.87 2.103 11.621",
                  fontSize: 226.667,
                  fontWeight: 700,
                  style: {
                    lineHeight: 1.25
                  },
                  transform: "translate(622.462 431.23)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
                "path",
                {
                  d: "M496.653 803.866q0 2.086-.215 3.597-.144 1.439-.504 2.374t-.935 1.367q-.576.36-1.295.36H440.18q-1.582 0-2.733-.288t-1.87-1.08q-.72-.863-1.08-2.445-.288-1.583-.288-4.101 0-2.374.216-4.029.216-1.726.792-3.021.575-1.367 1.438-2.59.936-1.295 2.374-2.806l16.115-17.265q4.82-5.036 7.77-9.137 2.949-4.172 4.604-7.553 1.654-3.454 2.23-6.331.647-2.878.647-5.468 0-2.374-.791-4.46-.72-2.158-2.23-3.74-1.439-1.583-3.67-2.447-2.23-.935-5.25-.935-4.245 0-7.554 1.08-3.238 1.078-5.756 2.445-2.446 1.295-4.1 2.446-1.655 1.08-2.59 1.08-.648 0-1.151-.432-.432-.432-.72-1.44-.287-1.006-.503-2.661-.144-1.727-.144-4.173 0-1.654.072-2.733.144-1.151.36-1.943.215-.863.575-1.439.36-.647 1.223-1.51.935-.864 3.31-2.158 2.445-1.367 5.97-2.59 3.525-1.295 7.77-2.159t8.849-.863q7.265 0 12.661 1.87 5.467 1.8 9.064 5.108 3.597 3.238 5.324 7.77 1.798 4.46 1.798 9.64 0 4.532-.863 8.92-.863 4.389-3.597 9.497-2.734 5.035-7.697 11.222-4.964 6.115-13.165 14.244l-10.863 11.151h36.69q.718 0 1.294.432.647.431 1.08 1.367.43.863.647 2.374.215 1.438.215 3.453",
                  baselineShift: "super",
                  fontSize: "65%"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
                "path",
                {
                  d: "M-13.958 459.158q0 3.21-.332 5.533-.222 2.214-.775 3.653t-1.439 2.103q-.885.553-1.992.553h-82.344q-2.435 0-4.206-.443-1.77-.442-2.877-1.66-1.107-1.328-1.66-3.763-.443-2.435-.443-6.308 0-3.653.332-6.198.332-2.657 1.217-4.649.886-2.103 2.214-3.984 1.439-1.992 3.652-4.317l24.792-26.562q7.415-7.748 11.953-14.056 4.538-6.42 7.083-11.621 2.546-5.313 3.431-9.74.997-4.427.997-8.411 0-3.653-1.218-6.862-1.107-3.32-3.43-5.755-2.214-2.435-5.645-3.763-3.431-1.44-8.08-1.44-6.53 0-11.621 1.66-4.98 1.661-8.854 3.764-3.763 1.992-6.309 3.763-2.545 1.66-3.984 1.66-.996 0-1.77-.664-.665-.664-1.108-2.214-.442-1.549-.774-4.095-.222-2.656-.222-6.419 0-2.545.11-4.206.222-1.77.554-2.988.332-1.328.886-2.213.553-.996 1.881-2.325 1.439-1.328 5.091-3.32 3.763-2.103 9.187-3.984 5.423-1.992 11.953-3.32 6.53-1.329 13.613-1.329 11.178 0 19.48 2.878 8.41 2.767 13.944 7.858 5.534 4.98 8.19 11.953 2.767 6.862 2.767 14.83 0 6.973-1.328 13.725t-5.534 14.61q-4.205 7.747-11.842 17.265-7.637 9.407-20.254 21.914l-16.712 17.155h56.445q1.107 0 1.992.664.996.664 1.66 2.103.665 1.328.997 3.652.332 2.214.332 5.313m92.748-19.812q0 8.412-3.21 14.831-3.1 6.42-8.855 10.736t-13.613 6.419q-7.858 2.214-17.044 2.214-5.534 0-10.625-.886-4.98-.775-8.965-1.992-3.984-1.328-6.64-2.656-2.657-1.328-3.874-2.435-1.218-1.218-1.882-3.653-.664-2.545-.664-7.415 0-3.21.221-5.091.222-1.992.664-3.099.443-1.217 1.107-1.55.664-.442 1.66-.442 1.218 0 3.542 1.439 2.435 1.328 5.977 2.988 3.541 1.66 8.19 3.099 4.759 1.439 10.735 1.439 3.763 0 6.641-.775 2.988-.775 5.091-2.214 2.214-1.438 3.32-3.652 1.107-2.214 1.107-5.091 0-3.32-2.103-5.645-1.992-2.435-5.423-4.205-3.32-1.771-7.637-3.32-4.205-1.55-8.743-3.432-4.427-1.881-8.744-4.316-4.205-2.435-7.636-5.977-3.32-3.541-5.423-8.522-1.993-4.98-1.993-11.953 0-7.083 2.767-12.95 2.767-5.976 7.97-10.181 5.2-4.206 12.616-6.53 7.526-2.325 16.823-2.325 4.649 0 8.965.664 4.427.665 7.969 1.66 3.541.997 5.976 2.214 2.435 1.107 3.431 1.992 1.107.775 1.55 1.66.442.775.664 1.993.221 1.106.332 2.877.221 1.66.221 4.206 0 2.988-.221 4.87-.11 1.881-.554 2.988-.332 1.107-.996 1.55-.664.332-1.55.332-.995 0-3.098-1.107-2.103-1.218-5.313-2.546-3.098-1.328-7.304-2.435-4.095-1.217-9.408-1.217-3.763 0-6.53.775-2.767.774-4.537 2.213t-2.657 3.431q-.885 1.882-.885 4.095 0 3.431 2.103 5.755 2.103 2.325 5.534 4.096t7.747 3.32q4.427 1.55 8.854 3.43 4.538 1.772 8.854 4.207 4.427 2.434 7.858 5.976t5.534 8.522q2.103 4.87 2.103 11.621",
                  fontSize: 226.667,
                  fontWeight: 700,
                  style: {
                    lineHeight: 1.25
                  },
                  transform: "translate(622.462 431.23)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
                "path",
                {
                  d: "M776.025 804.37q0 2.014-.216 3.452-.216 1.367-.648 2.23-.36.792-.863 1.152-.504.36-1.151.36h-51.365q-.576 0-1.08-.36-.503-.36-.935-1.151-.36-.864-.575-2.23-.216-1.44-.216-3.454 0-2.086.144-3.453.216-1.439.575-2.302.432-.863.936-1.223.503-.432 1.15-.432h17.338v-60.573l-14.963 8.273q-1.655.791-2.734 1.007-1.007.144-1.655-.431-.575-.648-.791-2.159t-.216-4.244q0-1.727.072-2.806.072-1.15.36-1.942t.791-1.295q.504-.504 1.367-1.08l20-12.948q.36-.288.863-.432.575-.216 1.438-.288.864-.144 2.23-.144 1.44-.072 3.67-.072 2.733 0 4.388.144 1.726.072 2.59.36.863.216 1.15.647.289.432.289 1.08v76.904h15.179q.647 0 1.151.431.575.36.935 1.223.432.863.576 2.302.216 1.367.216 3.453",
                  baselineShift: "super",
                  fontSize: "65%"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var ElectronicLithium_default = SvgElectronicLithium;

  // build/lib-react-tsx/periodic/IsotopeCarbon.tsx
  var React120 = __toESM(require_react(), 1);
  var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
  var SvgIsotopeCarbon = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M115.938 31.182h788.88v935.636h-788.88z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-99.27 759.646q0 8.463-.678 14.557-.338 5.755-1.354 10.156-1.016 4.063-2.708 7.11t-5.417 7.11q-3.724 3.723-14.557 9.817-10.495 6.094-26.068 11.849-15.234 5.416-35.208 9.14-19.636 3.724-42.657 3.724-45.026 0-81.25-13.88t-61.614-41.302q-25.39-27.76-38.933-69.062-13.541-41.303-13.541-96.146 0-55.86 14.896-99.193 14.895-43.333 41.64-72.786t63.985-44.688q37.578-15.234 82.604-15.234 18.281 0 35.208 3.047 16.927 3.046 31.146 8.125 14.557 4.74 26.068 11.171 11.51 6.433 15.911 11.172 4.74 4.401 6.432 7.448t2.709 7.787q1.015 4.74 1.354 11.172.677 6.432.677 15.911 0 10.156-.677 17.266t-2.37 11.51-4.062 6.432-5.417 2.032q-5.078 0-12.865-5.756-7.786-6.093-20.312-13.203-12.188-7.448-29.453-13.203-16.927-6.094-40.625-6.094-26.068 0-46.719 10.834-20.313 10.495-34.87 30.468-14.219 19.636-21.666 47.735t-7.448 63.307q0 38.594 7.786 67.031 8.125 28.1 22.682 46.38 14.896 18.282 35.547 27.422 20.99 8.803 47.058 8.803 23.697 0 40.963-5.417 17.266-5.755 29.453-12.526 12.526-6.771 20.313-12.188 8.125-5.416 12.526-5.416 3.385 0 5.416 1.354t3.386 5.417 2.031 11.51q.677 7.11.677 19.297",
            fontFamily: "sans-serif",
            fontSize: 693.333,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(768.308 -98.308)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("path", { d: "M270.787 292.24q0 3.099-.332 5.312-.332 2.103-.996 3.431-.554 1.218-1.328 1.771-.775.554-1.771.554h-79.024q-.885 0-1.66-.554-.775-.553-1.439-1.77-.553-1.329-.885-3.432-.332-2.213-.332-5.312 0-3.21.221-5.313.332-2.213.886-3.541.664-1.328 1.439-1.882.774-.664 1.77-.664h26.674v-93.19l-23.021 12.728q-2.546 1.217-4.206 1.55-1.55.22-2.546-.665-.885-.996-1.217-3.32t-.332-6.53q0-2.656.11-4.316.111-1.771.554-2.989t1.217-1.992 2.103-1.66l30.769-19.922q.553-.442 1.328-.664.885-.332 2.213-.443 1.328-.22 3.431-.22 2.214-.112 5.645-.112 4.205 0 6.751.222 2.656.11 3.984.553 1.329.332 1.771.996.443.664.443 1.66V280.84h23.353q.996 0 1.77.664.886.554 1.44 1.882.663 1.328.885 3.541.332 2.103.332 5.313zm115.768-30.879q0 10.736-4.095 19.037t-11.4 13.945-17.487 8.633q-10.182 2.877-22.246 2.877-7.304 0-13.724-1.106-6.419-.997-11.4-2.546-4.87-1.55-8.079-3.21t-4.206-2.545-1.55-1.992q-.442-1.107-.885-2.546-.332-1.55-.553-3.763-.11-2.324-.11-5.534 0-5.312.885-7.305.885-2.102 2.656-2.102 1.107 0 3.763 1.549 2.767 1.439 6.973 3.21 4.206 1.66 9.85 3.21 5.645 1.438 12.839 1.438 6.087 0 10.735-1.439 4.649-1.439 7.858-3.984 3.32-2.656 4.87-6.309 1.66-3.763 1.66-8.3 0-4.98-1.992-8.965-1.881-3.985-5.755-6.752-3.763-2.877-9.629-4.427-5.755-1.55-13.613-1.55h-12.396q-1.439 0-2.435-.331-.996-.443-1.66-1.66-.664-1.218-.996-3.32-.222-2.214-.222-5.645 0-3.21.222-5.202.332-2.103.885-3.21.664-1.106 1.55-1.55.996-.442 2.324-.442h12.506q6.42 0 11.4-1.439 4.98-1.55 8.3-4.316 3.432-2.767 5.203-6.64 1.77-3.985 1.77-8.744 0-3.653-1.217-6.862-1.217-3.32-3.652-5.645-2.324-2.435-6.088-3.763-3.763-1.439-8.854-1.439-5.755 0-10.846 1.771-5.091 1.66-9.186 3.763-3.985 1.993-6.862 3.763-2.767 1.771-4.095 1.771-.886 0-1.55-.332-.664-.443-1.107-1.55t-.664-3.209q-.22-2.103-.22-5.423 0-2.767.11-4.538.11-1.881.442-3.099.332-1.217.775-2.103.554-.885 1.66-1.881 1.107-1.107 4.538-3.21t8.633-4.095 11.953-3.32q6.862-1.439 14.83-1.439 10.404 0 18.373 2.435 8.08 2.435 13.503 7.083 5.534 4.538 8.3 11.29 2.878 6.64 2.878 15.051 0 6.53-1.66 12.175-1.66 5.644-4.87 10.071-3.21 4.428-8.08 7.526-4.758 3.1-11.067 4.649v.332q7.526.885 13.503 3.874 5.976 2.877 10.071 7.304 4.206 4.427 6.42 10.072 2.213 5.534 2.213 11.953z" })
      ]
    }
  );
  var IsotopeCarbon_default = SvgIsotopeCarbon;

  // build/lib-react-tsx/periodic/IsotopeFluor.tsx
  var React121 = __toESM(require_react(), 1);
  var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
  var SvgIsotopeFluor = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime121.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime121.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M115.938 31.182h788.88v935.636h-788.88z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-156.484 424.49q0 10.156-1.016 17.265-.677 6.771-2.708 10.834-1.693 4.062-4.063 6.093-2.37 2.032-5.417 2.032H-312.89v117.812h134.401q3.047 0 5.417 1.693 2.37 1.692 4.063 5.755 2.03 4.062 2.708 10.833 1.016 6.771 1.016 16.927 0 10.157-1.016 16.927-.677 6.771-2.708 11.172-1.693 4.401-4.063 6.433-2.37 1.692-5.417 1.692h-134.4v163.177q0 3.724-2.032 6.433t-7.448 4.74q-5.078 1.692-13.541 2.708-8.464 1.015-21.667 1.015-12.865 0-21.667-1.015-8.463-1.016-13.541-2.709-5.079-2.031-7.448-4.74-2.032-2.708-2.032-6.432V416.026q0-14.896 7.448-21.328 7.787-6.77 18.959-6.77h206.171q3.047 0 5.417 2.03 2.37 1.693 4.063 6.094 2.03 4.063 2.708 11.172 1.016 7.11 1.016 17.266",
            fontFamily: "sans-serif",
            fontSize: 693.333,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(817.077 -13.385)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
          "path",
          {
            stroke: "none",
            d: "M302.787 327.932q0 3.1-.332 5.313-.332 2.103-.996 3.43-.554 1.218-1.328 1.772-.775.553-1.771.553h-79.024q-.885 0-1.66-.553-.775-.554-1.439-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.221-5.312.332-2.214.886-3.542.664-1.328 1.439-1.881.774-.664 1.77-.664h26.674v-93.19l-23.021 12.727q-2.546 1.218-4.206 1.55-1.55.221-2.546-.664-.885-.996-1.217-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.111-1.77.554-2.988t1.217-1.992q.775-.775 2.103-1.66l30.769-19.922q.553-.443 1.328-.664.885-.333 2.213-.443 1.328-.222 3.431-.222 2.214-.11 5.645-.11 4.205 0 6.751.221 2.656.11 3.984.554 1.329.332 1.771.996.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.663 1.328.885 3.542.332 2.103.332 5.312m116.764-67.07q0 8.743-.885 18.151-.886 9.297-3.431 18.262-2.435 8.965-6.862 17.044-4.317 8.08-11.29 14.167-6.861 5.976-16.822 9.518-9.85 3.542-23.353 3.542-4.76 0-9.518-.664-4.649-.665-8.522-1.66-3.874-.997-6.641-2.104-2.656-1.106-3.874-2.213-1.217-1.217-1.77-3.431-.554-2.214-.554-6.198 0-3.652.11-5.866.222-2.213.665-3.43.553-1.218 1.217-1.55.775-.443 1.771-.443 1.328 0 3.763.775 2.435.774 5.866 1.77 3.542.997 7.969 1.771 4.427.775 9.85.775 9.297 0 15.716-3.32 6.42-3.32 10.404-8.965t5.866-13.06q1.881-7.415 2.103-15.605-5.092 3.21-12.286 5.644-7.194 2.324-16.49 2.324-11.4 0-19.369-2.988t-12.95-8.633-7.304-13.724q-2.213-8.08-2.213-18.261 0-10.736 3.21-19.7 3.209-9.076 9.517-15.606 6.309-6.641 15.717-10.293 9.407-3.653 21.803-3.653 9.96 0 17.376 2.325 7.526 2.324 12.839 6.64 5.423 4.317 8.965 10.514 3.652 6.088 5.644 13.614 2.103 7.526 2.878 16.27.885 8.743.885 18.261m-28.887-3.984q0-11.843-1.328-19.812-1.328-7.968-3.984-12.727t-6.64-6.752-9.298-1.992q-5.201 0-8.964 1.882-3.763 1.77-6.309 5.09-2.435 3.321-3.652 7.859t-1.218 9.96q0 5.867.996 10.404 1.107 4.427 3.32 7.416 2.325 2.877 5.977 4.316t8.854 1.439q6.42 0 12.064-1.882 5.755-1.992 10.182-5.201",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var IsotopeFluor_default = SvgIsotopeFluor;

  // build/lib-react-tsx/periodic/IsotopeHydrogen.tsx
  var React122 = __toESM(require_react(), 1);
  var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
  var SvgIsotopeHydrogen = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime122.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime122.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime122.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M115.938 31.182h788.88v935.636h-788.88z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-60.339 813.812q0 3.386-2.37 6.094-2.03 2.709-7.109 4.401-5.078 1.693-13.541 2.709-8.464 1.015-21.329 1.015-13.203 0-22.005-1.015-8.463-1.016-13.541-2.709-4.74-1.692-7.11-4.4-2.031-2.71-2.031-6.095V636.755h-163.854v177.057q0 3.386-2.031 6.094t-7.11 4.401-13.541 2.709-21.667 1.015q-12.865 0-21.667-1.015-8.463-1.016-13.541-2.709-5.079-1.692-7.448-4.4-2.032-2.71-2.032-6.095V400.115q0-3.386 2.032-6.094 2.37-2.709 7.448-4.401 5.078-1.693 13.541-2.709 8.802-1.015 21.667-1.015 13.203 0 21.667 1.015 8.463 1.016 13.541 2.709 5.078 1.692 7.11 4.4 2.03 2.71 2.03 6.095v160.807h163.855V400.115q0-3.386 2.031-6.094 2.37-2.709 7.11-4.401 5.078-1.693 13.541-2.709 8.802-1.015 22.005-1.015 12.865 0 21.329 1.015 8.463 1.016 13.541 2.709 5.078 1.692 7.11 4.4 2.37 2.71 2.37 6.095z",
            fontFamily: "sans-serif",
            fontSize: 693.333,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(759.562 -69.953)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-295.52 459.932q0 3.1-.333 5.313-.332 2.103-.996 3.43-.553 1.218-1.328 1.772-.775.553-1.77.553h-79.024q-.886 0-1.66-.553-.775-.554-1.44-1.771-.553-1.328-.885-3.431-.332-2.214-.332-5.313 0-3.21.222-5.312.332-2.214.885-3.542.664-1.328 1.439-1.881.775-.664 1.77-.664h26.674v-93.19l-23.021 12.727q-2.546 1.218-4.206 1.55-1.55.221-2.545-.664-.886-.996-1.218-3.32-.332-2.325-.332-6.53 0-2.657.11-4.317.112-1.77.554-2.988t1.218-1.992q.774-.775 2.103-1.66l30.768-19.922q.553-.443 1.328-.665.885-.332 2.213-.442 1.329-.222 3.431-.222 2.214-.11 5.645-.11 4.206 0 6.751.221 2.657.11 3.985.553 1.328.333 1.77.997.443.664.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.664 1.328.885 3.542.332 2.103.332 5.312",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(616.308 -124)",
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var IsotopeHydrogen_default = SvgIsotopeHydrogen;

  // build/lib-react-tsx/periodic/Mass.tsx
  var React123 = __toESM(require_react(), 1);
  var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
  var SvgMass = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime123.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)("path", { fill: "none", strokeWidth: 50.639, d: "M129.833 50H870v850H129.833z" }),
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-112.76 736.198q0 8.138-.651 13.997-.326 5.534-1.303 9.766-.976 3.906-2.604 6.836-1.627 2.93-5.208 6.836-3.58 3.58-13.997 9.44-10.092 5.86-25.066 11.393-14.648 5.209-33.854 8.79-18.88 3.58-41.015 3.58-43.295 0-78.125-13.346-34.831-13.347-59.245-39.714-24.414-26.693-37.435-66.406-13.02-39.714-13.02-92.448 0-53.711 14.322-95.378 14.323-41.666 40.04-69.987 25.715-28.32 61.523-42.968 36.132-14.649 79.427-14.649 17.578 0 33.854 2.93t29.948 7.812q13.997 4.558 25.065 10.742t15.3 10.743q4.557 4.231 6.184 7.161 1.628 2.93 2.604 7.487t1.302 10.742q.652 6.185.652 15.3 0 9.765-.652 16.601-.65 6.836-2.278 11.068t-3.906 6.185q-2.28 1.953-5.209 1.953-4.883 0-12.37-5.534-7.487-5.86-19.53-12.695-11.72-7.162-28.321-12.695-16.276-5.86-39.063-5.86-25.065 0-44.921 10.417-19.532 10.091-33.53 29.297-13.671 18.88-20.832 45.898t-7.162 60.873q0 37.109 7.487 64.453 7.813 27.018 21.81 44.596 14.323 17.578 34.18 26.367 20.182 8.464 45.247 8.464 22.786 0 39.388-5.209 16.602-5.533 28.32-12.044 12.045-6.51 19.532-11.719 7.812-5.208 12.044-5.208 3.255 0 5.208 1.302t3.255 5.209q1.303 3.906 1.954 11.067.65 6.836.65 18.555",
            fontFamily: "sans-serif",
            fontSize: 506.667,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            transform: "translate(768.77 -217.692)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
          "path",
          {
            stroke: "none",
            d: "M341.403 802.081q0 3.076-.33 5.273-.329 2.088-.988 3.406-.55 1.209-1.318 1.758-.77.55-1.758.55h-78.443q-.879 0-1.648-.55t-1.428-1.758q-.55-1.318-.879-3.406-.33-2.197-.33-5.273 0-3.186.22-5.273.33-2.198.88-3.516.659-1.318 1.428-1.868.769-.659 1.757-.659h26.477V698.26l-22.851 12.634q-2.527 1.209-4.175 1.539-1.538.22-2.527-.66-.879-.988-1.208-3.296-.33-2.307-.33-6.481 0-2.637.11-4.285.11-1.758.55-2.966.439-1.209 1.208-1.978t2.087-1.648l30.542-19.775q.55-.44 1.319-.66.878-.33 2.197-.439 1.318-.22 3.406-.22 2.197-.11 5.603-.11 4.174 0 6.701.22 2.637.11 3.955.55 1.319.33 1.758.988.44.66.44 1.648v117.444h23.18q.99 0 1.759.66.878.549 1.428 1.867.659 1.318.879 3.516.33 2.087.33 5.273m115.576-.769q0 3.186-.33 5.493-.22 2.197-.77 3.626-.549 1.428-1.427 2.087-.88.55-1.978.55h-81.738q-2.417 0-4.175-.44t-2.856-1.648q-1.1-1.318-1.648-3.735-.44-2.417-.44-6.263 0-3.625.33-6.152.33-2.637 1.208-4.614.88-2.088 2.197-3.955 1.429-1.978 3.626-4.285l24.61-26.367q7.36-7.69 11.865-13.953 4.504-6.372 7.03-11.535 2.528-5.274 3.407-9.668.988-4.395.988-8.35 0-3.626-1.208-6.812-1.099-3.295-3.406-5.712-2.197-2.417-5.603-3.736-3.406-1.428-8.02-1.428-6.482 0-11.536 1.648-4.943 1.648-8.789 3.735-3.735 1.978-6.262 3.736-2.527 1.648-3.955 1.648-.989 0-1.758-.66-.659-.659-1.098-2.197t-.77-4.065q-.22-2.637-.22-6.372 0-2.527.11-4.175.22-1.758.55-2.966.33-1.318.879-2.197.55-.989 1.868-2.307 1.428-1.319 5.053-3.296 3.736-2.088 9.119-3.955 5.383-1.978 11.865-3.296 6.482-1.319 13.513-1.319 11.097 0 19.336 2.857 8.35 2.746 13.843 7.8 5.493 4.944 8.13 11.865 2.747 6.812 2.747 14.722 0 6.921-1.319 13.623t-5.493 14.502q-4.175 7.69-11.755 17.139-7.58 9.338-20.105 21.753l-16.59 17.028h56.03q1.1 0 1.978.66.989.659 1.648 2.087.66 1.318.989 3.626.33 2.197.33 5.273m55.59-4.065q0 10.217-3.625 13.733-3.516 3.516-12.744 3.516t-12.745-3.406q-3.515-3.516-3.515-13.184 0-10.327 3.515-13.843 3.626-3.515 12.964-3.515 9.119 0 12.635 3.515 3.515 3.406 3.515 13.184m121.29-55.811q0 17.03-2.747 30.762-2.747 13.733-9.009 23.401-6.152 9.668-16.15 14.832-9.888 5.163-24.28 5.163-14.612 0-24.17-4.944-9.558-5.053-15.16-14.392-5.604-9.448-7.911-22.961-2.197-13.623-2.197-30.762 0-16.919 2.746-30.652 2.857-13.843 9.01-23.51 6.261-9.668 16.15-14.832 9.997-5.164 24.279-5.164 14.612 0 24.17 5.054 9.668 4.944 15.27 14.392 5.604 9.339 7.801 22.962 2.197 13.513 2.197 30.651m-29.114 1.429q0-10.108-.55-17.798-.55-7.8-1.758-13.513-1.098-5.713-2.856-9.668-1.648-3.955-4.065-6.263-2.417-2.417-5.493-3.405-3.076-.99-6.812-.99-6.482 0-10.766 3.187-4.175 3.076-6.702 9.338-2.417 6.263-3.406 15.6-.988 9.34-.988 21.754 0 15.161 1.208 25.159 1.209 9.887 3.735 15.82 2.637 5.823 6.702 8.24 4.065 2.307 9.778 2.307 4.285 0 7.58-1.319 3.296-1.428 5.713-4.174 2.527-2.747 4.175-6.922t2.637-9.668q1.099-5.493 1.428-12.414.44-6.922.44-15.271m139.197 59.216q0 3.076-.33 5.273-.329 2.088-.988 3.406-.55 1.209-1.318 1.758-.77.55-1.758.55h-78.443q-.878 0-1.648-.55t-1.428-1.758q-.55-1.318-.879-3.406-.33-2.197-.33-5.273 0-3.186.22-5.273.33-2.198.88-3.516.659-1.318 1.428-1.868.769-.659 1.757-.659h26.477V698.26l-22.851 12.634q-2.527 1.209-4.175 1.539-1.538.22-2.527-.66-.879-.988-1.208-3.296-.33-2.307-.33-6.481 0-2.637.11-4.285.11-1.758.55-2.966.439-1.209 1.208-1.978t2.087-1.648l30.542-19.775q.55-.44 1.319-.66.878-.33 2.197-.439 1.318-.22 3.406-.22 2.197-.11 5.603-.11 4.174 0 6.701.22 2.637.11 3.955.55 1.319.33 1.758.988.44.66.44 1.648v117.444h23.18q.99 0 1.759.66.879.549 1.428 1.867.659 1.318.879 3.516.33 2.087.33 5.273",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var Mass_default = SvgMass;

  // build/lib-react-tsx/periodic/OxidationState.tsx
  var React124 = __toESM(require_react(), 1);
  var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
  var SvgOxidationState = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("path", { d: "M499.5 99.5v51h151v-51zm1 1h149v49h-149z" }),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("path", { d: "M95.938 11.182v975.636h828.88V11.182Zm40 40h748.88v895.636h-748.88Z" }),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-60.339 744.48q0 3.385-2.37 6.093-2.03 2.708-7.109 4.4-5.078 1.694-13.541 2.71-8.464 1.015-21.329 1.015-13.203 0-22.005-1.016-8.463-1.015-13.541-2.708-4.74-1.693-7.11-4.401-2.031-2.708-2.031-6.094V567.422h-163.854v177.057q0 3.386-2.031 6.094t-7.11 4.4-13.541 2.71-21.667 1.015q-12.865 0-21.667-1.016-8.463-1.015-13.541-2.708t-7.448-4.401q-2.032-2.708-2.032-6.094V330.781q0-3.385 2.032-6.094 2.37-2.708 7.448-4.4t13.541-2.709q8.802-1.015 21.667-1.015 13.203 0 21.667 1.015 8.463 1.016 13.541 2.708t7.11 4.401 2.03 6.094V491.59h163.855V330.78q0-3.385 2.031-6.094 2.37-2.708 7.11-4.4 5.078-1.693 13.541-2.709 8.802-1.015 22.005-1.015 12.865 0 21.329 1.015 8.463 1.016 13.541 2.708t7.11 4.401q2.37 2.709 2.37 6.094z",
            fontFamily: "sans-serif",
            fontSize: 693.333,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(627.077 -57.385)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          "path",
          {
            stroke: "none",
            d: "M718.212 288.694q0 3.099-.332 5.202t-.996 3.43q-.664 1.218-1.55 1.772-.885.553-1.88.553h-34.421v37.52q0 1.106-.554 1.992-.553.774-1.881 1.439-1.328.553-3.542.885t-5.534.332-5.534-.332-3.541-.885q-1.328-.664-1.992-1.44-.554-.885-.554-1.991v-37.52h-34.31q-.996 0-1.881-.553-.775-.554-1.44-1.771-.663-1.328-1.106-3.431-.332-2.103-.332-5.202 0-2.988.332-5.091.332-2.214.886-3.431.664-1.328 1.438-1.882.775-.553 1.771-.553h34.642v-37.409q0-1.107.554-1.992.664-.996 1.992-1.55 1.328-.664 3.541-.996t5.534-.332 5.534.332 3.542.996q1.328.554 1.881 1.55.554.885.554 1.992v37.409h34.752q.886 0 1.66.553.886.554 1.44 1.882.663 1.217.995 3.43.332 2.104.332 5.092m110.235 52.572q0 3.099-.332 5.312-.332 2.103-.996 3.431-.554 1.218-1.329 1.77-.774.554-1.77.554h-79.024q-.885 0-1.66-.553t-1.439-1.77q-.553-1.329-.885-3.432-.332-2.213-.332-5.312 0-3.21.221-5.313.332-2.213.886-3.542.664-1.328 1.438-1.881.775-.664 1.771-.664h26.673v-93.19l-23.02 12.728q-2.546 1.217-4.206 1.55-1.55.22-2.546-.665-.885-.996-1.217-3.32t-.332-6.53q0-2.656.11-4.317.111-1.77.554-2.988.442-1.217 1.217-1.992t2.103-1.66L775.1 209.56q.554-.443 1.328-.664.886-.332 2.214-.443 1.328-.221 3.431-.221 2.214-.11 5.645-.11 4.205 0 6.75.22 2.657.111 3.985.554 1.328.332 1.771.996t.443 1.66v118.314h23.353q.996 0 1.77.664.886.553 1.44 1.881.663 1.329.885 3.542.332 2.103.332 5.313M715.941 694.663q0 6.419-1.217 8.965-1.217 2.545-3.874 2.545h-46.04q-2.767 0-3.985-2.545-1.217-2.657-1.217-8.965 0-6.198 1.217-8.744t3.985-2.545h46.041q1.328 0 2.214.553.996.553 1.66 1.882t.885 3.541q.332 2.214.332 5.313m111.119 44.603q0 3.099-.332 5.312-.332 2.103-.996 3.431-.553 1.218-1.328 1.77-.775.554-1.77.554H743.61q-.886 0-1.66-.553-.775-.553-1.44-1.77-.553-1.329-.885-3.432-.332-2.213-.332-5.312 0-3.21.222-5.313.332-2.213.885-3.542.664-1.328 1.439-1.881.775-.664 1.77-.664h26.674v-93.19l-23.02 12.728q-2.546 1.217-4.207 1.55-1.55.22-2.545-.665-.886-.996-1.218-3.32t-.332-6.53q0-2.656.111-4.317.11-1.77.553-2.988t1.218-1.992q.775-.775 2.103-1.66l30.768-19.922q.553-.443 1.328-.664.885-.332 2.214-.443 1.328-.221 3.43-.221 2.214-.11 5.645-.11 4.206 0 6.751.22 2.657.111 3.985.554 1.328.332 1.77.996.443.664.443 1.66v118.314h23.353q.996 0 1.771.664.885.553 1.439 1.881.664 1.329.885 3.542.332 2.103.332 5.313",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          "path",
          {
            stroke: "none",
            d: "M-291.315 376.172q0 17.155-2.767 30.99t-9.076 23.574q-6.197 9.74-16.27 14.941-9.96 5.202-24.459 5.202-14.72 0-24.349-4.98-9.629-5.092-15.273-14.5-5.645-9.517-7.969-23.13-2.213-13.725-2.213-30.99 0-17.045 2.767-30.88 2.877-13.945 9.075-23.684 6.309-9.74 16.27-14.942 10.071-5.201 24.46-5.201 14.72 0 24.348 5.09 9.74 4.981 15.384 14.5 5.645 9.407 7.858 23.131 2.214 13.613 2.214 30.879m-29.33 1.439q0-10.183-.553-17.93-.553-7.858-1.77-13.613-1.108-5.755-2.878-9.74-1.66-3.984-4.095-6.308-2.435-2.435-5.534-3.431-3.1-.997-6.862-.997-6.53 0-10.847 3.21-4.205 3.099-6.75 9.408-2.436 6.308-3.432 15.716t-.996 21.914q0 15.273 1.217 25.345 1.218 9.96 3.763 15.937 2.657 5.866 6.752 8.301 4.095 2.324 9.85 2.324 4.316 0 7.637-1.328 3.32-1.439 5.755-4.205 2.546-2.767 4.206-6.973t2.656-9.74q1.107-5.534 1.439-12.506.442-6.973.442-15.384",
            fontFamily: "sans-serif",
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: ".01%"
            },
            transform: "translate(1115.605 101.104)",
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var OxidationState_default = SvgOxidationState;

  // build/lib-react-tsx/raman/Assignment.tsx
  var React125 = __toESM(require_react(), 1);
  var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment7 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime125.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime125.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 730.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M101.35 640.31c87.832-7.236 153.621-89.197 158.583-167.475 11.576-179.157 13.743-241.208 48.179-248.84 74.856.224-33.321 414.775 212.233 419.503 96.256 1.886 87.445-72.992 92.222-151.822 4.962-83.974 4.062-147.326 14.171-213.66 37.85 109.516-11.394 356.845 162.804 360.337 35.649.734 34.68 3.081 66.653 1.427"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(
          "path",
          {
            stroke: "none",
            d: "M326.284 161.008c0 7.485-6.092 13.576-13.402 13.576-7.485 0-13.576-6.091-13.576-13.576zm0 0V70.675h-26.978v90.332zm-26.978-90.333c0-7.31 6.091-13.402 13.576-13.402 7.31 0 13.402 6.092 13.402 13.402zm344.868 144.986c0 7.484-6.092 13.576-13.576 13.576-7.31 0-13.402-6.092-13.402-13.576zm0 0v-90.334h-26.978v90.334zm-26.978-90.334c0-7.31 6.091-13.402 13.402-13.402 7.484 0 13.576 6.092 13.576 13.402zM447.477 902.976c0 3.312-1.102 6.803-2.94 10.474-2.021 3.677-4.962 7.353-9.004 10.66-4.043 3.306-9.004 6.062-15.252 8.083-6.063 2.205-12.862 3.126-20.58 3.126-16.17 0-28.848-4.777-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.655 2.021-20.213 6.248-28.482 4.042-8.268 10.106-14.7 18.008-19.292 7.9-4.412 17.456-6.798 28.48-6.798 6.8 0 13.047 1.1 18.744 3.121 5.512 1.841 10.473 4.412 14.332 7.533 4.043 3.312 6.983 6.618 9.004 10.11 2.205 3.676 3.124 6.982 3.124 9.923 0 3.306-1.102 5.878-3.491 8.083s-5.145 3.307-8.453 3.307q-3.308 0-5.512-1.651c-1.47-1.106-2.94-2.941-4.778-5.512-3.308-4.962-6.615-8.454-10.106-11.03-3.491-2.385-7.902-3.671-13.414-3.671-7.718 0-13.965 3.121-18.743 9.183q-7.166 9.1-7.166 24.81c0 4.962.734 9.554 1.837 13.78 1.287 4.042 3.124 7.533 5.33 10.475 2.388 2.941 5.144 5.147 8.452 6.612 3.307 1.656 6.798 2.391 10.84 2.391 5.146 0 9.74-1.286 13.415-3.676 3.859-2.571 7.166-6.248 9.923-11.21 1.654-2.936 3.49-5.327 5.328-6.982 1.838-1.651 4.043-2.386 6.8-2.386 3.123 0 5.88 1.1 7.9 3.491 2.205 2.571 3.308 5.142 3.308 7.898m110.25-18.922v34.908c0 5.518-1.102 9.74-3.674 12.5-2.573 2.757-5.88 4.042-9.923 4.042-4.042 0-7.166-1.286-9.739-4.042-2.388-2.76-3.675-6.982-3.675-12.5v-41.89c0-6.618-.184-11.76-.734-15.437-.368-3.676-1.655-6.617-3.675-9.003-1.838-2.391-5.145-3.492-9.372-3.492-8.636 0-14.332 2.942-16.905 8.819-2.756 5.882-4.226 14.335-4.226 25.54v35.463c0 5.518-1.286 9.56-3.675 12.315-2.389 2.942-5.696 4.227-9.739 4.227-4.042 0-7.35-1.286-9.739-4.227-2.572-2.756-3.859-6.797-3.859-12.315v-75.149c0-4.962 1.103-8.823 3.492-11.394 2.205-2.571 5.145-3.862 9.004-3.862 3.491 0 6.43 1.29 9.003 3.677 2.39 2.39 3.492 5.697 3.492 9.924v2.57c4.593-5.512 9.555-9.553 14.7-12.124 5.145-2.576 11.025-3.862 17.273-3.862 6.615 0 12.311 1.47 17.088 4.042 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.513 9.188-9.37 14.333-11.945 4.961-2.571 10.658-4.042 16.722-4.042 7.166 0 13.414 1.47 18.556 4.227 5.332 2.941 9.188 6.983 11.764 12.31 2.201 4.597 3.307 12.13 3.307 22.419v51.264c0 5.518-1.287 9.74-3.677 12.5-2.57 2.757-5.877 4.042-9.924 4.042-4.041 0-7.347-1.286-9.739-4.227-2.57-2.756-3.856-6.797-3.856-12.315V874.68c0-5.512-.186-10.104-.736-13.595-.55-3.311-1.838-6.247-3.859-8.453-2.205-2.391-5.329-3.492-9.739-3.492-3.491 0-6.799 1.1-9.739 3.122-3.123 2.02-5.512 4.776-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.524m184.856-10.294v-67.802c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.57-1.656-1.657-2.39-3.492-2.39-5.698 0-2.571.735-4.412 2.39-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.941 10.845-5.882 14.521-9.004 3.491-3.126 6.798-6.617 9.554-10.474 2.756-3.861 4.592-6.247 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.777 1.106 6.247 3.126 1.656 2.021 2.391 4.962 2.391 8.449v85.628c0 9.924-3.311 14.886-10.109 14.886-3.121 0-5.512-.92-7.348-2.941-1.84-2.021-2.756-5.142-2.756-9.189M641.306 850c-4.412 0-7.903-4.042-7.903-9.189 0-4.961 3.491-9.183 7.903-9.183zm0 0H690v-18.372h-48.694ZM690 831.628c4.412 0 7.903 4.222 7.903 9.183 0 5.147-3.491 9.189-7.903 9.189Z"
          }
        )
      ]
    }
  );
  var Assignment_default7 = SvgAssignment7;

  // build/lib-react-tsx/raman/Overlay.tsx
  var React126 = __toESM(require_react(), 1);
  var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
  var SvgOverlay4 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime126.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime126.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 730.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M448.044 905.942c0 3.311-1.102 6.802-2.94 10.474-2.021 3.676-4.962 7.353-9.004 10.66-4.043 3.305-9.004 6.061-15.252 8.082-6.063 2.206-12.862 3.126-20.58 3.126-16.17 0-28.849-4.776-38.036-14.15-9.004-9.554-13.598-22.234-13.598-38.22 0-10.654 2.021-20.213 6.248-28.481 4.042-8.268 10.106-14.7 18.008-19.293 7.9-4.411 17.456-6.797 28.48-6.797 6.8 0 13.047 1.1 18.744 3.12 5.512 1.842 10.473 4.413 14.332 7.534 4.043 3.311 6.983 6.618 9.004 10.109 2.205 3.676 3.124 6.983 3.124 9.924 0 3.306-1.102 5.877-3.491 8.083s-5.146 3.306-8.453 3.306q-3.308 0-5.512-1.65c-1.47-1.106-2.94-2.942-4.778-5.513-3.308-4.962-6.615-8.453-10.106-11.03-3.492-2.385-7.902-3.67-13.414-3.67-7.718 0-13.965 3.12-18.743 9.183q-7.166 9.1-7.166 24.81c0 4.962.734 9.553 1.837 13.78 1.286 4.042 3.124 7.533 5.33 10.474 2.388 2.941 5.144 5.147 8.451 6.613 3.308 1.656 6.8 2.39 10.842 2.39 5.145 0 9.739-1.285 13.414-3.676 3.858-2.57 7.166-6.247 9.922-11.21 1.655-2.935 3.492-5.326 5.329-6.982 1.838-1.65 4.043-2.386 6.8-2.386 3.123 0 5.879 1.1 7.9 3.492 2.205 2.57 3.308 5.142 3.308 7.898m110.25-18.922v34.908c0 5.517-1.102 9.739-3.675 12.5-2.572 2.756-5.88 4.042-9.922 4.042s-7.166-1.287-9.739-4.042c-2.389-2.761-3.675-6.983-3.675-12.5v-41.891c0-6.618-.184-11.76-.734-15.436-.369-3.677-1.655-6.618-3.675-9.004-1.838-2.39-5.145-3.491-9.372-3.491-8.636 0-14.333 2.941-16.905 8.818-2.756 5.883-4.226 14.336-4.226 25.54v35.464c0 5.517-1.286 9.559-3.675 12.315-2.389 2.941-5.696 4.227-9.739 4.227-4.042 0-7.35-1.287-9.739-4.227-2.572-2.756-3.859-6.798-3.859-12.315v-75.15c0-4.961 1.103-8.823 3.492-11.394 2.205-2.57 5.145-3.861 9.004-3.861 3.491 0 6.43 1.29 9.003 3.676 2.39 2.391 3.492 5.697 3.492 9.924v2.571c4.593-5.512 9.555-9.554 14.7-12.125 5.145-2.576 11.025-3.861 17.273-3.861 6.615 0 12.31 1.47 17.088 4.041 4.778 2.576 8.637 6.618 11.76 11.945 4.41-5.512 9.188-9.369 14.333-11.945 4.961-2.57 10.658-4.041 16.721-4.041 7.167 0 13.415 1.47 18.557 4.227 5.332 2.94 9.188 6.982 11.764 12.31 2.201 4.596 3.307 12.13 3.307 22.418v51.265c0 5.517-1.287 9.739-3.677 12.5-2.57 2.756-5.877 4.042-9.924 4.042-4.041 0-7.347-1.287-9.739-4.227-2.57-2.756-3.856-6.798-3.856-12.315v-44.282c0-5.512-.186-10.104-.736-13.595-.55-3.312-1.838-6.248-3.86-8.454-2.204-2.39-5.328-3.491-9.738-3.491-3.491 0-6.799 1.1-9.739 3.121-3.123 2.02-5.512 4.777-7.35 8.268-1.837 4.412-2.94 12.315-2.94 23.525m184.856-10.295v-67.801c-12.68 9.554-21.318 14.516-25.545 14.516-2.2 0-4.041-.92-5.692-2.571-1.656-1.656-2.391-3.492-2.391-5.698 0-2.57.736-4.411 2.391-5.697 1.65-1.1 4.407-2.756 8.448-4.592 6.068-2.94 10.844-5.882 14.521-9.003 3.491-3.126 6.798-6.618 9.554-10.474 2.756-3.862 4.592-6.248 5.512-7.168.736-.92 2.386-1.47 4.777-1.47 2.57 0 4.776 1.106 6.247 3.126 1.656 2.02 2.391 4.962 2.391 8.448v85.629c0 9.923-3.311 14.885-10.109 14.885-3.121 0-5.512-.92-7.348-2.94-1.84-2.022-2.756-5.143-2.756-9.19m-101.277-23.759c-4.412 0-7.903-4.042-7.903-9.19 0-4.961 3.491-9.183 7.903-9.183zm0 0h48.694v-18.373h-48.694zm48.694-18.373c4.412 0 7.903 4.222 7.903 9.184 0 5.147-3.491 9.189-7.903 9.189z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M100 500c87.832 20.764 145.038-71.722 150-150 11.575-179.157.308-263.626 60.762-260.315C399.999 100 331.793 510.236 522.995 509.188 609.72 499.132 599.999 150 629.388 143.706 649.999 150 639.801 504.509 749.999 500c35.627-1.438 106.873 3.124 138.846 1.47"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m96.692 629.177-.736-.184-.735-.183-.734-.369-.55-.184-.736-.368-.55-.368-.552-.368-.55-.368-.737-.368-.368-.55-.552-.369-.552-.552-.368-.552-.55-.552-.368-.552-.368-.552-.368-.552-.184-.734-.368-.552-.184-.552-.368-.734-.184-.735-.184-.552v-.734l-.184-.734v-.734l-.184-.552v-.735l.184-.734v-.734l.184-.734.184-.735.184-.734.184-.734.184-.552.368-.734.184-.552.368-.735.368-.552.368-.552.552-.552.368-.552.55-.552.552-.368.368-.552.552-.368.55-.368.553-.552.736-.184.552-.368.55-.368.734-.184.552-.184.734-.368h.735l.552-.184.736-.184h3.673l.552.184.736.184-6.431 27.93z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m129.4 631.567-1.838.183h-2.389l-2.389.184h-4.778l-2.204-.184h-2.389l-2.389-.184-2.389-.368-2.388-.184-2.39-.368-2.388-.552-2.388-.368-2.39-.552 6.432-27.93 1.837.368 1.655.368 1.837.184 1.655.368 1.654.184 1.838.184 1.654.184h1.838l1.654.184h3.492l1.654-.184h1.838l1.837-.184z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M127.562 602.901h2.206l.552.184h.734l.736.184.735.183.552.184.734.369.552.183.734.369.552.368.55.368.55.368.553.368.55.368.552.552.552.552.368.368.368.552.55.55.368.735.369.552.184.552.368.734.368.552.184.734.184.552.184.734.184.735v.734l.184.734v1.469l-.184.734v.734l-.184.734v.552l-.184.735-.368.734-.184.552-.184.734-.368.552-.368.552-.369.735-.368.552-.368.552-.552.55-.368.368-.552.552-.55.368-.552.552-.552.368-.55.369-.552.367-.55.369-.737.367-.55.184-.734.184-.736.184-.734.184-.55.184-.737.184h-.734l-1.838-28.666zm61.924 7.35-.55.552-.735.184-.55.368-.736.184-.552.368-.734.184-.734.184h-.735l-.552.184h-3.491l-.734-.184-.736-.184-.55-.184-.734-.184-.55-.184-.737-.183-.552-.369-.55-.367-.734-.369-.552-.368-.552-.368-.55-.552-.55-.368-.369-.552-.552-.552-.55-.552-.368-.552-.368-.552-.368-.735-.368-.552-.368-.734-.184-.734-.184-.552-.184-.734-.184-.735-.184-.552-.184-.734v-2.755l.184-.734v-.734l.184-.552.184-.735.184-.734.184-.552.368-.734.184-.55.368-.552.368-.735.368-.552.368-.552.55-.552.368-.552.552-.368.55-.552.55-.368.553-.552.736-.368 15.067 24.256z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m214.293 591.876-1.47 1.286-1.839 1.654-2.02 1.47-1.838 1.655-1.838 1.47-2.021 1.47-1.837 1.471-2.022 1.47-2.02 1.287-2.022 1.47-2.021 1.286-1.838 1.286-2.021 1.103-15.068-24.256 1.47-.918 1.655-1.102 1.654-1.102 1.838-1.287 1.654-1.102 1.655-1.286 1.654-1.286 1.654-1.103 1.655-1.47 1.654-1.286 1.47-1.287 1.655-1.286 1.47-1.286z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m195.55 570.193.55-.552.736-.366.55-.369.552-.367.735-.369.55-.366.736-.184.552-.366.734-.184h.736l.552-.184.735-.184h3.49l.55.184.737.184.734.184.55.184.736.184.55.184.735.366.552.368.55.368.736.368.55.368.55.552.55.368.553.552.368.553.55.552.368.55.368.736.368.552.368.552.368.734.184.736.184.55.184.735.184.552.184.734.184.734v2.757l-.184.734v.552l-.184.736-.184.734-.184.552-.184.737-.368.55-.184.734-.368.552-.368.552-.368.734-.368.552-.55.552-.368.553-.552.368-.55.55-18.743-21.683zm58.984-23.704-.368.552-.368.552-.55.552-.553.552-.552.369-.55.55-.55.368-.55.368-.552.366-.735.368-.552.184-.734.368-.552.184-.734.184-.55.184-.735.184h-.736l-.55.183h-2.205l-.552-.183h-.736l-.734-.184-.736-.184-.55-.184-.734-.184-.736-.368-.55-.184-.735-.368-.552-.366-.552-.368-.736-.552-.55-.368-.55-.552-.369-.552-.55-.552-.368-.552-.552-.552-.368-.553-.368-.552-.184-.552-.368-.734-.184-.55-.368-.736-.184-.552-.184-.734v-.737l-.184-.734v-1.286l-.184-.736.184-.552v-1.47l.184-.735.184-.55.184-.736.184-.734.368-.552.368-.736.184-.552.368-.735.55-.552 23.336 16.538z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m270.52 520.58-.918 1.654-1.102 2.205-1.286 2.021-1.287 2.205-1.102 2.022-1.286 2.205-1.286 2.02-1.47 2.022-1.287 2.206-1.286 2.02-1.47 2.022-1.287 2.02-.918 1.287-23.336-16.537.552-.919 1.286-1.837 1.286-1.838 1.103-1.837 1.286-1.838 1.102-1.837 1.102-2.022 1.103-1.837 1.286-1.837 1.102-1.838.919-2.021 1.102-1.838.918-1.654z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m245.347 506.799.368-.55.368-.735.368-.552.55-.552.368-.552.552-.368.55-.552.55-.369.553-.552.55-.368.552-.366.734-.368.55-.184.552-.368.735-.184.55-.184.734-.184.736-.184.55-.183h3.493l.734.183h.736l.735.184.55.184.736.184.734.368.55.184.736.368.55.368.735.552.552.368.55.368.55.552.553.552.368.368.552.552.368.552.368.552.368.735.368.552.184.55.368.736.184.552.184.734.184.735.184.552.184.734v3.493l-.184.734v.552l-.184.736-.184.734-.184.552-.368.736-.184.734-.368.553-25.174-13.782zm47.04-43.365-.184.734-.184.736-.184.734-.368.55-.369.735-.184.552-.368.552-.552.734-.368.552-.368.552-.552.368-.368.552-.552.369-.552.552-.55.368-.55.368-.735.368-.55.368-.55.184-.736.368-.55.183-.735.184-.55.184-.736.184-.734.184h-3.491l-.736-.184-.734-.184-.734-.184-.737-.184-.734-.183-.55-.368-.736-.184-.55-.368-.55-.368-.735-.368-.552-.552-.368-.368-.55-.552-.552-.368-.368-.552-.55-.552-.368-.55-.368-.552-.368-.552-.368-.737-.184-.55-.369-.552-.184-.734-.184-.736-.184-.552-.184-.734-.184-.736v-3.491l.184-.735.184-.736 27.93 6.248z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m295.694 440.832-.184 2.021-.184 2.206-.184 2.02-.184 2.022-.368 2.205-.184 2.021-.368 2.205-.368 2.021-.552 2.205-.368 2.022-.368 1.654-27.93-6.248.184-1.286.368-1.838.368-1.654.368-1.655.184-1.837.368-1.655.184-1.654.184-1.654.184-1.655.184-1.654v-1.654z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m296.246 432.747-28.666-1.837-.55 8.085 28.665 1.837z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M267.58 430.91v-.735l.185-.736.183-.552.185-.734.184-.736.184-.734.184-.55.368-.737.368-.552.368-.55.368-.552.368-.552.368-.552.552-.552.55-.552.368-.368.55-.552.55-.368.553-.369.734-.368.55-.368.552-.368.736-.184.55-.184.735-.368.736-.184h.55l.734-.184h.734l.736-.184h1.471l.734.184h.736l.734.184.736.184.55.184.735.184.55.368.736.368.552.184.55.368.735.368.55.552.552.368.368.366.55.552.552.553.368.552.368.552.368.552.368.552.368.552.368.734.184.552.368.736.184.552.184.734.184.736v.735l.184.736v2.022l-28.665-1.838zm31.055-55.861v1.47l-.184.735-.185.552-.184.736-.184.734-.184.552-.368.736-.184.552-.368.734-.368.553-.368.552-.368.55-.55.552-.368.552-.55.366-.55.552-.553.368-.55.369-.552.368-.55.368-.55.368-.736.368-.55.184-.735.184-.736.368-.55.184h-.734l-.736.184h-3.675l-.734-.184-.737-.184-.55-.184-.734-.183-.736-.184-.552-.369-.734-.183-.55-.369-.55-.368-.553-.368-.55-.368-.552-.552-.552-.368-.368-.552-.552-.55-.368-.553-.55-.55-.369-.552-.368-.552-.184-.552-.368-.736-.184-.552-.368-.734-.184-.737-.184-.552-.184-.734v-.736l-.184-.734v-1.47l28.665.918z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m299.37 346.017-.185 5.329v6.43l-.184 6.8-.184 6.798-.184 3.675-28.665-.918.184-3.491.184-6.615v-6.8l.184-6.43v-5.146zm-28.85-.368.185-.735v-1.47l.184-.734.184-.55.184-.736.368-.735.184-.552.368-.736.184-.552.368-.55.368-.552.552-.552.368-.552.368-.552.55-.552.552-.368.55-.55.552-.369.55-.368.55-.366.551-.368.734-.369.55-.183.737-.184.55-.369.734-.184h.736l.734-.183h.736l.735-.184h1.47l.734.184h.55l.736.183.735.184.736.184.55.184.734.366.55.184.737.368.55.368.55.369.552.368.55.552.55.368.369.55.55.552.368.552.55.553.368.552.368.55.368.552.184.552.368.734.184.736.184.552.184.735.184.736.184.734v1.286l.184.734-28.849-.368zm29.217-56.962v1.469l-.184.735v.552l-.184.736-.184.734-.368.552-.184.736-.368.552-.184.734-.368.55-.368.553-.55.552-.368.55-.369.552-.552.552-.552.368-.552.552-.55.368-.55.368-.55.368-.552.366-.735.368-.55.184-.736.366-.55.184-.734.184-.736.184h-.735l-.55.184h-2.941l-.736-.184-.734-.184h-.734l-.736-.368-.55-.184-.735-.184-.55-.368-.736-.368-.55-.368-.55-.367-.55-.368-.553-.368-.55-.552-.368-.368-.55-.552-.368-.552-.55-.552-.368-.55-.368-.552-.368-.552-.184-.735-.368-.552-.184-.734-.368-.552-.185-.734v-.736l-.183-.735-.185-.736v-1.47l28.666.368z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m300.472 260.388-.184 3.675-.184 3.859v4.042l-.184 4.227v4.226l-.184 4.594v3.675l-28.665-.368v-3.675l.184-4.594v-4.594l.184-4.41v-4.226l.184-4.043.184-3.49z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M271.806 259.287v-.737l.184-.734.184-.736v-.734l.184-.737.368-.552.185-.734.368-.552.184-.736.368-.552.368-.552.368-.552.55-.55.368-.552.55-.552.368-.552.55-.369.55-.367.55-.553.553-.368.734-.184.552-.366.55-.368.736-.184.55-.183.735-.368h.734l.736-.184.735-.184h2.758l.734.184h.736l.734.184.737.184.552.184.734.368.734.184.552.368.55.368.552.368.552.368.55.368.55.552.551.368.552.552.368.552.368.552.552.552.368.55.368.552.184.735.368.552.184.734.368.552.184.734.184.736v.55l.184.735v2.206l-28.665-1.102zm39.691-41.161-.55.368-.736.368-.55.368-.735.368-.55.368-.736.184-.55.184-.734.184-.737.184-.55.183h-.734l-.736.184h-2.021l-.734-.184h-.734l-.552-.183-.734-.184-.55-.184-.735-.184-.736-.368-.552-.184-.55-.368-.736-.368-.552-.368-.55-.552-.55-.368-.55-.55-.553-.368-.368-.552-.55-.55-.368-.734-.368-.553-.368-.552-.368-.736-.368-.552-.184-.734-.184-.736-.184-.552-.184-.734-.184-.736-.184-.552v-2.757l.184-.736v-.734l.184-.736.184-.552.184-.735.184-.55.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.55-.552.368-.552.552-.552.55-.367.55-.552 17.64 22.785z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m315.723 207.835 11.944 7.718-1.102-.184h-4.226l-.918.184h-1.836l-.736.184-.735.184h-.736l-.734.184-.736.184-.552.183-.55.184-.55.184h-.55l-.369.184-.55.368-.368.184-.368.184-.368.183-.368.184-.368.184.55-.184-17.64-22.784.55-.369 1.102-.736 1.287-.918 1.286-.736 1.286-.734 1.47-.552 1.287-.552 1.47-.553 1.286-.552 1.47-.552 1.47-.367 1.471-.369 1.287-.368 1.47-.184 1.654-.368 1.47-.184 1.47-.183 1.471-.184h1.654l1.47-.184h6.434l1.47.184 12.128 7.717z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M329.137 186.887h.736l.734.185h.736l.735.184.734.183.552.369.734.184.55.368.736.184.55.368.55.368.551.366.55.552.552.366.552.552.368.552.55.369.369.552.368.552.368.736.368.552.368.552.184.734.368.552.184.736.184.55.184.735.184.736v4.409l-.184.736-.184.552-.184.734-.184.736-.368.55-.184.735-.368.552-.368.552-.368.736-.368.552-.552.552-.368.368-.55.552-.369.552-.552.368-.552.55-.55.369-.55.368-.736.368-.55.184-.553.368-.734.184-.736.184-.552.184-.734.183-.736.184h-.734l-.737.184h-1.47l1.47-28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m316.458 209.122-.368-.552-.368-.734 25.542-13.23.55 1.286.368.552z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m342.183 196.443.185.734.368.552.184.736.184.735.184.736.184.55v.734l.184.736v2.021l-.184.736v.734l-.184.552-.184.736-.184.734-.368.55-.184.737-.369.55-.183.552-.369.552-.368.734-.55.552-.368.552-.55.368-.368.55-.55.552-.55.367-.553.368-.736.55-.55.368-.734.368-.55.184-.736.368-.735.184-.55.184-.736.184-.734.184h-.734l-.736.184h-1.285l-.736-.184h-.734l-.552-.184h-.736l-.735-.184-.552-.184-.736-.367-.55-.184-.734-.368-.55-.368-.55-.184-.553-.552-.55-.368-.55-.368-.552-.552-.55-.368-.368-.55-.55-.553-.369-.552-.368-.734-.368-.552-.368-.734 25.725-12.679zm-15.803 63.394v-2.206l.185-.734v-.736l.184-.552.184-.735.184-.734.184-.552.368-.734.184-.552.368-.552.368-.736.368-.552.368-.552.55-.553.368-.55.552-.368.55-.55.369-.368.55-.368.736-.552.55-.369.552-.184.734-.368.552-.368.735-.184.552-.184.734-.184.736-.184h.734l.736-.184h2.941l.734.184.55.184.735.184.736.184.55.184.734.368.552.184.736.368.55.369.55.368.551.368.55.552.552.369.368.552.55.367.369.552.368.55.55.553.368.734.184.552.368.552.368.734.184.736.184.552.184.735.184.734.184.736v.734l-28.665 2.206z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M327.851 287.767v-3.858l-.184-3.86-.184-3.674-.184-3.675-.184-3.675-.368-3.676-.184-3.49-.184-2.022 28.665-2.205.184 2.205.184 3.675.366 3.859.184 3.859.184 3.858.184 3.86.184 3.858v4.042zm28.665-.919v2.207l-.184.734v.736l-.184.734-.368.552-.184.736-.184.552-.368.735-.368.552-.368.552-.368.552-.368.736-.368.368-.552.552-.366.552-.552.366-.55.552-.553.369-.552.367-.55.369-.734.366-.552.368-.55.184-.737.367-.734.184-.55.184-.736.184h-.734l-.736.184h-2.205l-.734-.184h-.736l-.734-.184-.55-.184-.737-.184-.734-.184-.55-.368-.736-.184-.55-.368-.553-.368-.55-.366-.552-.368-.55-.55-.55-.368-.55-.552-.369-.552-.55-.369-.368-.552-.368-.552-.368-.734-.368-.552-.368-.552-.184-.734-.184-.55-.368-.737-.184-.734v-.734l-.184-.736v-.734l-.184-.736 28.665-.919zm-27.379 58.249v-1.47l.184-.734v-.734l.184-.736.184-.735.184-.552.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.368-.552.368-.552.55-.552.55-.552.369-.368.55-.552.55-.366.55-.368.736-.368.55-.369.553-.184.734-.367.736-.184.552-.184.734-.184.736-.184h.735l.736-.184h2.204l.734.184h.553l.736.184.734.184.736.184.552.368.734.184.55.368.552.368.737.366.552.369.55.368.55.368.368.552.55.368.55.552.369.552.368.552.368.552.368.734.368.55.368.553.184.736.184.55.184.734.184.734.184.736.184.735v1.47l-28.665.55zm.735 28.85v-.184l-.184-9.004-.368-9.004-.184-9.003v-1.654l28.665-.553v1.47l.368 9.005.184 8.82.368 9.004zm28.849-1.103v.919l-.184.552v.736l-.184.734v.736l-.184.734-.184.552-.368.736-.184.735-.368.552-.184.552-.368.736-.368.552-.55.55-.368.552-.368.368-.552.553-.55.552-.553.367-.552.369-.55.552-.55.184-.55.366-.735.368-.55.368-.736.184-.55.184-.734.184-.737.183-.734.184h-3.675l-.736-.184-.55-.183-.734-.184-.736-.184-.55-.184-.735-.184-.552-.366-.736-.368-.552-.368-.552-.369-.55-.368-.55-.368-.552-.552-.368-.368-.552-.552-.368-.552-.55-.552-.369-.55-.368-.552-.368-.735-.184-.552-.368-.734-.184-.552-.184-.734-.184-.736-.184-.552-.184-.735v-.736l-.184-.734 28.849-1.102zm-24.991 59.168-.183-.734v-.736l.184-.735v-1.288l.184-.734.184-.734.184-.736.184-.552.368-.735.184-.552.368-.552.368-.734.368-.552.368-.552.368-.552.55-.552.368-.368.55-.552.55-.368.551-.55.552-.369.552-.366.55-.368.735-.368.55-.184.736-.368.55-.184.734-.184.736-.184h.735l.734-.184h2.94l.737.184h.552l.734.184.736.184.55.184.734.368.55.184.737.368.552.368.55.366.55.369.55.367.55.55.553.369.368.55.55.552.368.552.368.552.368.552.368.735.368.552.184.552.368.734.184.734.184.552.184.734.184.735v.736l-28.482 2.756zm3.676 29.216-.55-4.042-.735-4.594-.55-4.594-.55-4.594-.552-4.777-.55-4.594-.185-2.021 28.482-2.756.184 1.837.55 4.41.552 4.41.552 4.41.55 4.41.55 4.227.553 4.042z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m365.704 457.002.184.735v2.938l-.184.736v.552l-.184.735-.184.734-.368.552-.184.734-.184.552-.368.736-.369.552-.368.552-.368.55-.368.553-.552.552-.55.552-.368.368-.552.552-.552.368-.55.368-.55.368-.737.369-.55.367-.734.369-.55.184-.736.184-.735.183-.736.184-.55.184h-.734l-.734.184h-1.471l-.736-.184h-.734l-.736-.184-.55-.184-.734-.183-.737-.184-.552-.184-.734-.369-.55-.367-.552-.369-.552-.368-.55-.368-.55-.368-.553-.368-.55-.552-.55-.552-.368-.552-.368-.552-.55-.55-.368-.553-.184-.552-.368-.736-.368-.552-.185-.734-.183-.552-.369-.734v-.735l-.184-.736 28.299-4.226zm-14.517 62.475-.184-.734-.184-.736-.184-.552-.184-.734v-3.493l.184-.734.184-.734v-.734l.368-.552.184-.737.184-.552.368-.734.368-.552.184-.552.55-.552.368-.552.368-.55.55-.552.369-.552.552-.369.55-.552.55-.367.552-.369.55-.368.735-.368.55-.368.736-.184.734-.366.734-.184.736-.184.553-.184h.734l.736-.184h2.204l.55.184h.737l.734.184.55.184.736.184.734.184.55.368.553.184.736.368.552.368.55.368.55.368.55.552.55.368.553.552.368.368.55.552.368.552.368.735.368.55.368.552.368.736.184.734.368.552zm11.393 28.115-.736-1.655-.918-1.838-.919-2.02-.918-2.022-.918-2.021-.918-2.021-.735-2.022-.918-2.205-.734-2.021-.736-2.021-.918-2.022-.735-2.204-.736-2.022-.552-2.021 27.196-9.188.55 1.838.734 1.837.55 1.838.737 1.838.734 1.837.734 1.838.552 1.837.734 1.654.919 1.837.734 1.838.736 1.654.734 1.838.919 1.654.734 1.655z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m388.489 535.28.368.736.184.55.184.735.184.734.184.736.184.552v.734l.184.737v1.47l-.184.552v.734l-.184.736-.184.734-.184.552-.184.737-.184.552-.368.734-.184.552-.368.552-.368.552-.368.736-.368.552-.55.368-.55.552-.369.552-.55.367-.552.552-.55.366-.735.368-.552.368-.734.368-.552.368-.736.184-.734.184-.735.184-.55.184-.736.183h-.734l-.736.184h-1.286l-.736-.184h-.735l-.736-.183-.55-.184-.734-.184-.552-.184-.736-.184-.55-.368-.735-.184-.552-.367-.55-.367-.55-.367-.55-.369-.553-.552-.55-.367-.55-.553-.368-.552-.55-.552-.368-.55-.368-.734-.368-.552-.368-.734 25.908-12.312zm11.025 62.659-.552-.368-.55-.552-.368-.552-.552-.552-.368-.734-.368-.552-.368-.552-.184-.735-.368-.552-.185-.734-.184-.552-.184-.734-.184-.734-.184-.552v-3.491l.184-.734v-.735l.184-.552.184-.734.184-.552.369-.736.184-.734.368-.552.368-.552.368-.735.55-.552.368-.552.55-.552.55-.552.368-.368.55-.552.737-.368.55-.552.552-.184.552-.368.734-.366.55-.184.737-.368.734-.184.55-.184h.736l.734-.184h.552l.736-.184h1.471l.552.184h.734l.736.184.552.184.734.184.736.184.552.184.735.367.55.369.552.366.736.368.55.368.55.552.55.368-19.477 20.948z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m425.055 616.682-1.654-.918-2.021-1.102-1.838-1.287-2.021-1.286-1.838-1.102-1.837-1.287-1.838-1.47-1.837-1.286-1.654-1.286-1.838-1.47-1.654-1.287-1.654-1.47-1.655-1.47-1.654-1.471-.55-.552 19.477-20.947.184.366 1.47 1.102 1.287 1.102 1.286 1.103 1.47 1.102 1.287 1.102 1.47 1.102 1.47 1.103 1.47 1.102 1.471.918 1.47 1.103 1.47.918 1.655.918 1.47.918 1.838 1.103zm14.701-24.622.552.367.552.369.55.552.55.367.55.552.552.552.368.369.552.734.368.552.368.552.368.552.184.552.368.734.184.552.184.735.184.734.184.552.184.734v.734l.183.553v2.202l-.183.552v.735l-.184.734-.184.734-.184.55-.368.735-.184.734-.368.552-.368.734-.368.552-.368.552-.552.552-.368.552-.552.552-.55.552-.55.369-.55.552-.552.368-.55.368-.553.368-.734.368-.55.184-.736.184-.552.368-.735.184h-.55l-.736.184-.734.184h-2.755l-.736-.184h-.55l-.734-.184-.736-.184-.55-.184-.735-.183-.736-.368-.55-.368-.734-.368 14.7-24.623zm44.651 44.467-.736-.184-.734-.184-.736-.183-.55-.184-.735-.369-.552-.183-.736-.368-.552-.369-.55-.367-.55-.369-.552-.552-.55-.368-.553-.552-.367-.368-.552-.552-.368-.552-.369-.552-.367-.552-.369-.735-.368-.552-.184-.552-.368-.734-.184-.734-.184-.55-.184-.735-.184-.734v-1.286l-.183-.734.183-.735v-1.468l.184-.734.184-.735.184-.734.184-.734.368-.552.184-.734.368-.552.369-.553.367-.734.369-.552.552-.552.368-.368.552-.552.368-.552.55-.369.553-.368.55-.552.55-.368.736-.184.55-.368.553-.368.734-.184.736-.184.55-.184.734-.184.736-.184h.735l.55-.183h1.47l.736.183h.734l-4.226 28.482z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M514.91 638.732h-3.49l-2.94-.184h-2.94l-2.94-.183-2.757-.184-2.756-.184-2.757-.368-2.756-.184-2.756-.368-2.756-.368-1.655-.184 4.226-28.481 1.287.184 2.388.368 2.39.183 2.388.369 2.389.184 2.389.183 2.572.184 2.572.184h2.39l2.755.184h3.123z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M515.277 610.067h.736l.734.184h.735l.736.184.734.184.55.184.736.184.735.367.55.184.55.369.736.368.55.368.55.368.553.552.367.368.552.552.55.368.368.552.369.552.552.552.184.734.367.55.369.553.367.734.184.552.184.734.184.734.184.552v.735l.184.734v2.937l-.184.734-.184.734-.184.735-.184.552-.184.734-.183.552-.369.734-.367.552-.369.552-.368.735-.368.552-.368.552-.55.367-.368.552-.552.553-.55.368-.552.368-.55.368-.55.368-.735.368-.55.368-.55.184-.737.368-.734.184-.552.184-.736.184h-.734l-.736.184h-1.471l.369-28.665zm57.514 27.747h-1.472l-.736-.184-.736-.184h-.736l-.55-.184-.736-.184-.737-.368-.55-.184-.55-.368-.736-.368-.55-.368-.556-.368-.55-.369-.55-.367-.55-.552-.37-.552-.55-.368-.365-.552-.37-.552-.55-.735-.364-.552-.186-.552-.37-.734-.182-.552-.37-.734-.186-.552-.182-.734-.186-.735v-1.468l-.186-.734v-.735l.186-.734v-.734l.186-.734v-.552l.182-.735.37-.734.186-.55.182-.736.37-.55.364-.552.37-.735.364-.552.37-.552.55-.552.364-.368.556-.552.55-.552.55-.367.55-.369.55-.368.557-.368.55-.368.736-.368.55-.184.736-.184.55-.367h.736l.736-.184.737-.184h1.472l.55 28.665zm28.666-.552-.55-28.665-28.666.552.55 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M600.907 608.597h2.202l.737.184.736.184.556.184.736.184.73.183.556.368.55.184.736.368.55.369.55.367.551.552.556.369.55.368.365.552.555.552.364.552.365.552.37.552.364.552.37.735.364.55.186.552.37.734.182.734.186.735v.552l.186.734v.734l.186.734v.735l-.186.734v.734l-.186.734-.186.735v.734l-.364.552-.186.734-.186.552-.364.734-.37.552-.364.552-.37.553-.365.552-.55.552-.37.552-.55.552-.55.367-.55.369-.55.552-.556.368-.55.368-.55.184-.737.368-.55.368-.736.184-.736.184-.55.183-.736.184h-.737l-.736.184h-.736l-.55-28.665zm57.878 27.563h-1.467l-.736-.184h-.736l-.556-.184-.73-.184-.737-.184-.555-.368-.736-.184-.55-.368-.55-.368-.737-.368-.55-.368-.55-.368-.556-.368-.364-.552-.55-.552-.55-.369-.37-.552-.365-.552-.37-.734-.364-.552-.37-.552-.364-.734-.186-.552-.186-.734-.182-.553-.186-.734-.186-.734-.186-.734v-3.671l.186-.735.186-.552.186-.734.182-.736.186-.55.364-.735.186-.552.37-.552.364-.734.37-.552.55-.552.364-.552.37-.368.55-.552.55-.552.55-.368.556-.368.55-.368.55-.368.737-.368.55-.368.55-.184.737-.184.736-.184.736-.184.55-.183.736-.184h1.472l.55 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m687.45 635.609-.55-28.666-28.666.552.55 28.665zm-.55-28.666h2.209l.736.184.736.184.736.184.55.184.736.184.55.368.737.184.55.368.55.368.556.368.55.552.55.368.55.368.55.552.37.552.55.552.37.553.365.552.37.552.364.734.186.552.364.552.186.734.186.734.182.735.186.55v.734l.186.734v2.203l-.186.734v.735l-.186.734-.182.734-.186.552-.364.734-.186.552-.37.735-.364.552-.37.552-.365.552-.37.552-.364.552-.55.552-.55.552-.37.368-.55.368-.55.552-.556.368-.736.369-.55.183-.55.369-.737.368-.736.184-.55.184-.736.184-.736.184h-.736l-.736.183h-.737l-.55-28.665zm58.068 27.563h-1.472l-.736-.184h-.736l-.736-.184-.736-.184-.55-.184-.736-.367-.55-.184-.737-.369-.555-.368-.55-.368-.55-.368-.55-.368-.551-.368-.556-.552-.55-.552-.365-.368-.55-.552-.37-.552-.364-.735-.37-.552-.364-.552-.186-.734-.37-.552-.182-.734-.186-.552-.186-.734-.186-.735v-.734l-.183-.734v-2.203l.183-.734v-.736l.186-.55.186-.735.186-.734.364-.552.186-.734.364-.552.37-.552.364-.735.37-.552.364-.552.37-.552.55-.368.365-.552.555-.55.55-.369.551-.367.55-.369.736-.367.55-.369.556-.367.736-.184.55-.184.737-.184.736-.184.736-.184.736-.184h1.466l.556 28.665zm28.662-.551-.55-28.665-28.667.552.556 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M773.08 605.29h2.207l.55.183.737.184.736.184.736.184.55.184.736.368.55.184.556.367.736.369.55.367.55.552.55.369.37.368.55.552.366.55.555.552.365.552.37.552.364.552.364.734.37.552.186.552.182.735.186.734.186.734.186.552.182.734v3.672l-.182.734-.186.734-.186.734-.186.552-.182.735-.37.552-.186.734-.364.552-.364.55-.37.552-.55.552-.37.552-.55.552-.365.552-.555.368-.55.368-.55.553-.551.367-.55.369-.736.183-.556.369-.73.368-.556.183-.736.184-.736.184-.55.184h-.737l-.736.184h-.736l-.55-28.665zm57.882 27.562h-1.472l-.736-.184h-.736l-.737-.183-.55-.184-.736-.184-.736-.184-.55-.368-.55-.369-.736-.184-.55-.368-.556-.552-.55-.368-.55-.368-.551-.552-.37-.368-.55-.552-.365-.552-.37-.552-.55-.55-.364-.552-.186-.734-.37-.552-.182-.735-.37-.552-.186-.734-.182-.734-.186-.734v-1.287l-.186-.734v-.734l.186-.736v-.735l.186-.734v-.734l.182-.734.37-.552.186-.735.182-.552.37-.734.364-.552.37-.552.364-.552.37-.552.55-.55.364-.552.556-.552.55-.368.55-.552.55-.368.551-.368.556-.369.55-.367.736-.184.55-.368.736-.184.55-.184.737-.184.736-.183h.736l.736-.184h.736l.55 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "m859.813 632.117-5.697.184-5.882.184-6.063.184-5.882.184h-5.327l-.55-28.666 5.327-.183h5.882l5.877-.184 5.698-.184 5.697-.184z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(
          "path",
          {
            stroke: "none",
            d: "M858.893 603.452h1.472l.736.184h.736l.736.184.736.184.55.184.736.183.55.369.737.184.55.368.55.368.55.368.556.552.55.368.55.368.55.552.37.552.55.55.365.552.37.553.364.552.37.552.364.734.186.552.186.734.365.734.186.552v.735l.186.734v.734l.182.734v.735l-.182.734v.734l-.186.734v.735l-.186.552-.182.734-.37.552-.186.734-.365.552-.37.734-.364.553-.37.55-.364.552-.364.552-.556.552-.365.368-.55.552-.556.368-.55.552-.55.368-.55.368-.736.368-.55.184-.737.368-.555.184-.73.184-.737.184-.556.184-.736.184h-1.466l-.92-28.666z"
          }
        )
      ]
    }
  );
  var Overlay_default4 = SvgOverlay4;

  // build/lib-react-tsx/reaction/Equilibrium.tsx
  var React127 = __toESM(require_react(), 1);
  var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
  var SvgEquilibrium = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime127.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M126.155 256.41v60.838h-1.321l-1.174-.177-1.247-.176-1.248-.265-1.247-.354-1.174-.353-1.174-.53-1.174-.53-1.101-.617-1.1-.707-1.028-.706-1.027-.795-1.028-.883-.953-.883-.881-.883-1.027-1.06-.88-1.059-.735-1.06-.733-1.147-.734-1.236-.734-1.237-.514-1.236-.587-1.324-.513-1.325-.44-1.413-.44-1.412-.294-1.413-.294-1.501-.22-1.501-.147-1.501-.073-1.59v-3.002l.147-1.59.147-1.5.22-1.501.293-1.501.294-1.413.44-1.413.44-1.413.514-1.324.587-1.324.587-1.237.66-1.236.734-1.236.734-1.148.734-1.06.88-1.059.88-.971.881-.972.954-.882 1.027-.883 1.028-.883 1.027-.619 1.1-.706 1.101-.618 1.174-.53 1.174-.441 1.174-.442 1.248-.353 1.247-.265 1.248-.176 1.247-.177zm701.635 60.838H126.155V256.41H827.79zm0 0V256.41h1.247l1.321.176 1.247.177 1.248.265 1.247.353 1.174.441 1.174.442 1.174.53 1.101.618 1.1.706 1.028.707 1.027.794 1.028.883.953.883.881.883.88 1.06.808 1.06.807 1.059.734 1.148.733 1.236.66 1.236.588 1.236.587 1.325.513 1.324.44 1.413.368 1.413.367 1.412.293 1.502.22 1.5.147 1.502.073 1.589v3.09l-.073 1.59-.147 1.5-.22 1.502-.293 1.501-.367 1.413-.367 1.412-.44 1.413-.514 1.325-.587 1.324-.587 1.236-.66 1.237-.734 1.236-.734 1.148-.734 1.06-.88 1.059-.881 1.06-.88.882-.954.883-1.028.883-1.027.883-1.027.618-1.1.707-1.102.618-1.174.53-1.174.53-1.174.352-1.247.354-1.248.265-1.247.176-1.32.177z",
            className: "fil0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeWidth: 62.964,
            d: "M867.823 286.865 753.387 373.46",
            className: "fil1 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 62.964,
            d: "m753.387 200.2 114.436 86.665",
            className: "fil1 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M874.386 486.188v60.837h1.321l1.174-.177 1.247-.176 1.248-.265 1.247-.354 1.174-.353 1.174-.53 1.174-.53 1.101-.617 1.1-.707 1.028-.706 1.027-.795 1.028-.883.953-.883.881-.883 1.027-1.06.88-1.059.735-1.06.733-1.147.734-1.236.734-1.237.514-1.236.587-1.324.513-1.325.44-1.413.44-1.412.294-1.413.294-1.501.22-1.501.147-1.501.073-1.59v-3.002l-.147-1.59-.147-1.5-.22-1.501-.293-1.501-.294-1.413-.44-1.413-.44-1.413-.514-1.324-.587-1.324-.587-1.237-.66-1.236-.734-1.236-.734-1.148-.734-1.06-.88-1.059-.88-.971-.881-.972-.954-.882-1.027-.883-1.028-.883-1.027-.619-1.1-.706-1.101-.618-1.174-.53-1.174-.441-1.174-.442-1.248-.353-1.247-.265-1.248-.176-1.247-.177zm-701.635 60.837h701.635v-60.837H172.751zm0 0v-60.837h-1.247l-1.321.176-1.247.177-1.248.265-1.247.353-1.174.441-1.174.442-1.174.53-1.101.618-1.1.706-1.028.707-1.027.794-1.028.883-.953.883-.881.883-.88 1.06-.808 1.06-.807 1.059-.734 1.148-.733 1.236-.66 1.236-.588 1.236-.587 1.325-.513 1.324-.44 1.413-.368 1.413-.367 1.412-.293 1.502-.22 1.5-.147 1.502-.073 1.589v3.09l.073 1.59.147 1.5.22 1.502.293 1.501.367 1.413.367 1.412.44 1.413.514 1.325.587 1.324.587 1.236.66 1.237.734 1.236.734 1.148.734 1.06.88 1.059.881 1.06.88.882.954.883 1.028.883 1.027.883 1.027.618 1.1.707 1.102.618 1.174.53 1.174.53 1.174.352 1.247.354 1.248.265 1.247.176 1.32.177z",
            className: "fil0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeWidth: 62.964,
            d: "m132.72 516.643 114.435 86.594",
            className: "fil1 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
          "path",
          {
            fillRule: "evenodd",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 62.964,
            d: "m247.155 429.978-114.436 86.665",
            className: "fil1 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        )
      ]
    }
  );
  var Equilibrium_default = SvgEquilibrium;

  // build/lib-react-tsx/reaction/Search.tsx
  var React128 = __toESM(require_react(), 1);
  var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
  var SvgSearch2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime128.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime128.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.85,
            d: "M423.177 667.09c-166.181 0-301.72-135.541-301.72-301.721 0-166.183 135.538-301.726 301.72-301.726 166.18 0 301.725 135.544 301.725 301.726 0 166.18-135.544 301.72-301.725 301.72",
            className: "fil0 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.868,
            d: "M875.32 876.926 652.38 578.482l-78.036 58.23 222.94 298.444",
            className: "fil0 str1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.849,
            d: "M797.267 935.193c11.855 15.876 34.551 19.165 50.425 7.306m.002-.001L868 927.33m0 0c15.874-11.858 19.162-34.545 7.304-50.418",
            className: "fil0 str1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 24.319,
            d: "M423.177 612.992c-136.382 0-247.623-111.241-247.623-247.623 0-136.389 111.241-247.623 247.623-247.623 136.387 0 247.623 111.234 247.623 247.623 0 136.382-111.236 247.623-247.623 247.623",
            className: "fil0 str2",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime128.jsxs)(
          "g",
          {
            fillRule: "evenodd",
            strokeWidth: 35.156,
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
                "path",
                {
                  d: "M264.615 327.049h244.013c8.157 0 14.83 6.673 14.83 14.83v51.23c0 8.156-6.674 14.83-14.83 14.83H264.615c-8.156 0-14.83-6.674-14.83-14.83v-51.23c0-8.157 6.674-14.83 14.83-14.83z",
                  className: "fil1"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
                "path",
                {
                  fillRule: "nonzero",
                  d: "M474.557 499.986V234.981l132.502 132.538zm66.233-66.234",
                  className: "fil2"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var Search_default2 = SvgSearch2;

  // build/lib-react-tsx/safety/Toxic.tsx
  var React129 = __toESM(require_react(), 1);
  var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
  var SvgToxic2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime129.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M336.034 221.151h103.78v-97.184h129.385v97.184h103.585c32.007 0 58.195 26.188 58.195 58.194v427.338c0 32.2-26.188 58.391-58.195 58.391h-336.75c-32.007 0-58.194-26.19-58.194-58.39v-427.34c0-32.006 26.187-58.194 58.194-58.194"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 58.194,
            d: "M420.027 156.943h168.958V81.097H420.027z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M420.027 156.943h168.958V81.097H420.027zM649.7 393.406c0-60.328-64.983-109.211-145.29-109.211-80.115 0-145.099 48.883-145.099 109.211 0 32.201 18.622 61.104 48.108 81.084a43 43 0 0 0-.581 7.177c0 20.95 13.772 38.796 32.588 45.198.581 13.578 11.833 24.441 25.606 24.441h78.95c13.772 0 24.83-10.863 25.411-24.441 19.01-6.402 32.59-24.248 32.59-45.198 0-2.521-.195-4.85-.584-7.177 29.68-19.98 48.302-48.883 48.302-81.084M596.357 652.95c-.777 2.139-1.358 4.076-1.746 6.21l-48.884-21.339 55.479-24.052v.385c5.237 11.833 18.816 17.267 30.649 12.029 11.832-5.043 17.264-18.814 12.027-30.458a23.75 23.75 0 0 0-13.58-12.8c5.432-7.178 7.178-17.07 3.299-25.994-5.82-13.19-20.95-19.204-33.947-13.385-13.19 5.626-19.204 20.756-13.385 33.947.777 1.94 1.94 3.686 3.298 5.432l-83.024 36.082-2.134.965-1.94-.965-83.023-36.082c1.358-1.747 2.328-3.492 3.297-5.432 5.626-13.19-.388-28.321-13.384-33.947-12.997-5.82-28.322.195-33.947 13.385a25.52 25.52 0 0 0 3.298 25.994c-6.013 2.133-11.057 6.596-13.773 12.8-5.043 11.644.388 25.415 12.027 30.458 11.833 5.238 25.605-.196 30.649-12.03l.194-.384 55.284 24.052-48.883 21.339c-.194-2.134-.777-4.071-1.746-6.21-5.625-12.995-20.756-19.01-33.947-13.38-12.997 5.818-19.01 20.947-13.384 33.942 3.88 9.12 12.415 14.743 21.532 15.519-2.716 5.629-2.91 12.414-.195 18.624 5.238 11.833 18.817 17.262 30.65 12.029 11.833-5.048 17.07-18.82 12.026-30.653l-.194-.192 75.458-32.982 75.653 32.982-.194.192c-5.237 11.833.194 25.605 12.027 30.653 11.638 5.233 25.411-.196 30.455-12.029 2.715-6.21 2.522-12.995 0-18.624 9.117-.777 17.458-6.4 21.337-15.52 5.82-12.994-.194-28.123-13.384-33.942-12.997-5.629-28.127.385-33.947 13.38zM441.172 437.246c-24.248 0-43.84-19.786-43.84-44.034s19.592-43.84 43.84-43.84c24.247 0 43.84 19.593 43.84 43.84s-19.593 44.034-43.84 44.034m126.669 0c-24.248 0-44.034-19.786-44.034-44.034s19.786-43.84 44.034-43.84 43.84 19.593 43.84 43.84-19.593 44.034-43.84 44.034"
          }
        )
      ]
    }
  );
  var Toxic_default2 = SvgToxic2;

  // build/lib-react-tsx/spectra/Analyse.tsx
  var React130 = __toESM(require_react(), 1);
  var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
  var SvgAnalyse = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime130.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 850.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M97.35 628.573c87.832 20.764 119.621-79.197 124.583-157.475 11.576-179.157 25.725-256.15 86.179-252.84 158.21-1.105 12.679 436.775 212.233 419.503 95.92-8.27 107.445-74.992 112.222-153.822 4.962-83.974 7.324-167.606 17.433-233.94 37.85 109.516-34.656 379.125 139.542 382.617 35.649.734 64.68-.919 96.653-2.573"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m94.042 757.75-.736-.184-.735-.183-.734-.369-.55-.184-.736-.368-.55-.368-.552-.368-.55-.368-.737-.368-.368-.55-.552-.369-.552-.552-.368-.552-.55-.552-.368-.552-.368-.552-.368-.552-.184-.734-.368-.552-.184-.552-.368-.734-.184-.735-.184-.552v-.734l-.184-.734v-.734l-.184-.552v-.735l.184-.734v-.734l.184-.734.184-.735.184-.734.184-.734.184-.552.368-.734.184-.552.368-.735.368-.552.368-.552.552-.552.368-.552.55-.552.552-.368.368-.552.552-.368.55-.368.553-.552.736-.184.552-.368.55-.368.734-.184.552-.184.734-.368h.735l.552-.184.736-.184h3.673l.552.184.736.184-6.431 27.93z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m126.75 760.14-1.838.183h-2.389l-2.389.184h-4.778l-2.204-.184h-2.389l-2.389-.184-2.389-.368-2.388-.184-2.39-.368-2.388-.552-2.388-.368-2.39-.552 6.432-27.93 1.837.368 1.655.368 1.837.184 1.655.368 1.654.184 1.838.184 1.654.184h1.838l1.654.184h3.492l1.654-.184h1.838l1.837-.184z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M124.912 731.474h2.206l.552.184h.734l.736.184.735.183.552.184.734.369.552.183.734.369.552.368.55.368.55.368.553.368.55.368.552.552.552.552.368.368.368.552.55.55.368.735.369.552.184.552.368.734.368.552.184.734.184.552.184.734.184.735v.734l.184.734v1.469l-.184.734v.734l-.184.734v.552l-.184.735-.368.734-.184.552-.184.734-.368.552-.368.552-.369.735-.368.552-.368.552-.552.55-.368.368-.552.552-.55.368-.552.552-.552.368-.55.369-.552.367-.55.369-.737.367-.55.184-.734.184-.736.184-.734.184-.55.184-.737.184h-.734l-1.838-28.666zm61.924 7.35-.55.552-.735.184-.55.368-.736.184-.552.368-.734.184-.734.184h-.735l-.552.184h-3.491l-.734-.184-.736-.184-.55-.184-.734-.184-.55-.184-.737-.183-.552-.369-.55-.367-.734-.369-.552-.368-.552-.368-.55-.552-.55-.368-.369-.552-.552-.552-.55-.552-.368-.552-.368-.552-.368-.735-.368-.552-.368-.734-.184-.734-.184-.552-.184-.734-.184-.735-.184-.552-.184-.734v-2.755l.184-.734v-.734l.184-.552.184-.735.184-.734.184-.552.368-.734.184-.55.368-.552.368-.735.368-.552.368-.552.55-.552.368-.552.552-.368.55-.552.55-.368.553-.552.736-.368 15.067 24.256z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m211.643 720.449-1.47 1.286-1.839 1.654-2.02 1.47-1.838 1.655-1.838 1.47-2.021 1.47-1.837 1.471-2.022 1.47-2.02 1.287-2.022 1.47-2.021 1.286-1.838 1.286-2.021 1.103-15.068-24.256 1.47-.918 1.655-1.102 1.654-1.102 1.838-1.287 1.654-1.102 1.655-1.286 1.654-1.286 1.654-1.103 1.655-1.47 1.654-1.286 1.47-1.287 1.655-1.286 1.47-1.286z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m192.9 698.766.55-.552.736-.366.55-.369.552-.367.735-.369.55-.366.736-.184.552-.366.734-.184h.736l.552-.184.735-.184h3.49l.55.184.737.184.734.184.55.184.736.184.55.184.735.366.552.368.55.368.736.368.55.368.55.552.55.368.553.552.368.553.55.552.368.55.368.736.368.552.368.552.368.734.184.736.184.55.184.735.184.552.184.734.184.734v2.757l-.184.734v.552l-.184.736-.184.734-.184.552-.184.737-.368.55-.184.734-.368.552-.368.552-.368.734-.368.552-.55.552-.368.553-.552.368-.55.55-18.743-21.683zm58.984-23.704-.368.552-.368.552-.55.552-.553.552-.552.369-.55.55-.55.368-.55.368-.552.366-.735.368-.552.184-.734.368-.552.184-.734.184-.55.184-.735.184h-.736l-.55.183h-2.205l-.552-.183h-.736l-.734-.184-.736-.184-.55-.184-.734-.184-.736-.368-.55-.184-.735-.368-.552-.366-.552-.368-.736-.552-.55-.368-.55-.552-.369-.552-.55-.552-.368-.552-.552-.552-.368-.553-.368-.552-.184-.552-.368-.734-.184-.55-.368-.736-.184-.552-.184-.734v-.737l-.184-.734v-1.286l-.184-.736.184-.552v-1.47l.184-.735.184-.55.184-.736.184-.734.368-.552.368-.736.184-.552.368-.735.55-.552 23.336 16.538z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m267.87 649.153-.918 1.654-1.102 2.205-1.286 2.021-1.287 2.205-1.102 2.022-1.286 2.205-1.286 2.02-1.47 2.022-1.287 2.206-1.286 2.02-1.47 2.022-1.287 2.02-.918 1.287-23.336-16.537.552-.919 1.286-1.837 1.286-1.838 1.103-1.837 1.286-1.838 1.102-1.837 1.102-2.022 1.103-1.837 1.286-1.837 1.102-1.838.919-2.021 1.102-1.838.918-1.654z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m242.697 635.372.368-.55.368-.735.368-.552.55-.552.368-.552.552-.368.55-.552.55-.369.553-.552.55-.368.552-.366.734-.368.55-.184.552-.368.735-.184.55-.184.734-.184.736-.184.55-.183h3.493l.734.183h.736l.735.184.55.184.736.184.734.368.55.184.736.368.55.368.735.552.552.368.55.368.55.552.553.552.368.368.552.552.368.552.368.552.368.735.368.552.184.55.368.736.184.552.184.734.184.735.184.552.184.734v3.493l-.184.734v.552l-.184.736-.184.734-.184.552-.368.736-.184.734-.368.553-25.174-13.782zm47.04-43.365-.184.734-.184.736-.184.734-.368.55-.369.735-.184.552-.368.552-.552.734-.368.552-.368.552-.552.368-.368.552-.552.369-.552.552-.55.368-.55.368-.735.368-.55.368-.55.184-.736.368-.55.183-.735.184-.55.184-.736.184-.734.184h-3.491l-.736-.184-.734-.184-.734-.184-.737-.184-.734-.183-.55-.368-.736-.184-.55-.368-.55-.368-.735-.368-.552-.552-.368-.368-.55-.552-.552-.368-.368-.552-.55-.552-.368-.55-.368-.552-.368-.552-.368-.737-.184-.55-.369-.552-.184-.734-.184-.736-.184-.552-.184-.734-.184-.736v-3.491l.184-.735.184-.736 27.93 6.248z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m293.044 569.405-.184 2.021-.184 2.206-.184 2.02-.184 2.022-.368 2.205-.184 2.021-.368 2.205-.368 2.021-.552 2.205-.368 2.022-.368 1.654-27.93-6.248.184-1.286.368-1.838.368-1.654.368-1.655.184-1.837.368-1.655.184-1.654.184-1.654.184-1.655.184-1.654v-1.654z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m293.596 561.32-28.666-1.837-.55 8.085 28.665 1.837z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M264.93 559.483v-.735l.185-.736.183-.552.185-.734.184-.736.184-.734.184-.55.368-.737.368-.552.368-.55.368-.552.368-.552.368-.552.552-.552.55-.552.368-.368.55-.552.55-.368.553-.369.734-.368.55-.368.552-.368.736-.184.55-.184.735-.368.736-.184h.55l.734-.184h.734l.736-.184h1.471l.734.184h.736l.734.184.736.184.55.184.735.184.55.368.736.368.552.184.55.368.735.368.55.552.552.368.368.366.55.552.552.553.368.552.368.552.368.552.368.552.368.552.368.734.184.552.368.736.184.552.184.734.184.736v.735l.184.736v2.022l-28.665-1.838zm31.055-55.861v1.47l-.184.735-.185.552-.184.736-.184.734-.184.552-.368.736-.184.552-.368.734-.368.553-.368.552-.368.55-.55.552-.368.552-.55.366-.55.552-.553.368-.55.369-.552.368-.55.368-.55.368-.736.368-.55.184-.735.184-.736.368-.55.184h-.734l-.736.184h-3.675l-.734-.184-.737-.184-.55-.184-.734-.183-.736-.184-.552-.369-.734-.183-.55-.369-.55-.368-.553-.368-.55-.368-.552-.552-.552-.368-.368-.552-.552-.55-.368-.553-.55-.55-.369-.552-.368-.552-.184-.552-.368-.736-.184-.552-.368-.734-.184-.737-.184-.552-.184-.734v-.736l-.184-.734v-1.47l28.665.918z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m296.72 474.59-.185 5.329v6.43l-.184 6.8-.184 6.798-.184 3.675-28.665-.918.184-3.491.184-6.615v-6.8l.184-6.43v-5.146zm-28.85-.368.185-.735v-1.47l.184-.734.184-.55.184-.736.368-.735.184-.552.368-.736.184-.552.368-.55.368-.552.552-.552.368-.552.368-.552.55-.552.552-.368.55-.55.552-.369.55-.368.55-.366.551-.368.734-.369.55-.183.737-.184.55-.369.734-.184h.736l.734-.183h.736l.735-.184h1.47l.734.184h.55l.736.183.735.184.736.184.55.184.734.366.55.184.737.368.55.368.55.369.552.368.55.552.55.368.369.55.55.552.368.552.55.553.368.552.368.55.368.552.184.552.368.734.184.736.184.552.184.735.184.736.184.734v1.286l.184.734-28.849-.368zm29.217-56.962v1.469l-.184.735v.552l-.184.736-.184.734-.368.552-.184.736-.368.552-.184.734-.368.55-.368.553-.55.552-.368.55-.369.552-.552.552-.552.368-.552.552-.55.368-.55.368-.55.368-.552.366-.735.368-.55.184-.736.366-.55.184-.734.184-.736.184h-.735l-.55.184h-2.941l-.736-.184-.734-.184h-.734l-.736-.368-.55-.184-.735-.184-.55-.368-.736-.368-.55-.368-.55-.367-.55-.368-.553-.368-.55-.552-.368-.368-.55-.552-.368-.552-.55-.552-.368-.55-.368-.552-.368-.552-.184-.735-.368-.552-.184-.734-.368-.552-.185-.734v-.736l-.183-.735-.185-.736v-1.47l28.666.368z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m297.822 388.961-.184 3.675-.184 3.859v4.042l-.184 4.227v4.226l-.184 4.594v3.675l-28.665-.368v-3.675l.184-4.594v-4.594l.184-4.41v-4.226l.184-4.043.184-3.49z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M269.156 387.86v-.737l.184-.734.184-.736v-.734l.184-.737.368-.552.185-.734.368-.552.184-.736.368-.552.368-.552.368-.552.55-.55.368-.552.55-.552.368-.552.55-.369.55-.367.55-.553.553-.368.734-.184.552-.366.55-.368.736-.184.55-.183.735-.368h.734l.736-.184.735-.184h2.758l.734.184h.736l.734.184.737.184.552.184.734.368.734.184.552.368.55.368.552.368.552.368.55.368.55.552.551.368.552.552.368.552.368.552.552.552.368.55.368.552.184.735.368.552.184.734.368.552.184.734.184.736v.55l.184.735v2.206l-28.665-1.102zm39.691-41.161-.55.368-.736.368-.55.368-.735.368-.55.368-.736.184-.55.184-.734.184-.737.184-.55.183h-.734l-.736.184h-2.021l-.734-.184h-.734l-.552-.183-.734-.184-.55-.184-.735-.184-.736-.368-.552-.184-.55-.368-.736-.368-.552-.368-.55-.552-.55-.368-.55-.55-.553-.368-.368-.552-.55-.55-.368-.734-.368-.553-.368-.552-.368-.736-.368-.552-.184-.734-.184-.736-.184-.552-.184-.734-.184-.736-.184-.552v-2.757l.184-.736v-.734l.184-.736.184-.552.184-.735.184-.55.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.55-.552.368-.552.552-.552.55-.367.55-.552 17.64 22.785z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m313.073 336.408 11.944 7.718-1.102-.184h-4.226l-.918.184h-1.836l-.736.184-.735.184h-.736l-.734.184-.736.184-.552.183-.55.184-.55.184h-.55l-.369.184-.55.368-.368.184-.368.184-.368.183-.368.184-.368.184.55-.184-17.64-22.784.55-.369 1.102-.736 1.287-.918 1.286-.736 1.286-.734 1.47-.552 1.287-.552 1.47-.553 1.286-.552 1.47-.552 1.47-.367 1.471-.369 1.287-.368 1.47-.184 1.654-.368 1.47-.184 1.47-.183 1.471-.184h1.654l1.47-.184h6.434l1.47.184 12.128 7.717z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M326.487 315.46h.736l.734.185h.736l.735.184.734.183.552.369.734.184.55.368.736.184.55.368.55.368.551.366.55.552.552.366.552.552.368.552.55.369.369.552.368.552.368.736.368.552.368.552.184.734.368.552.184.736.184.55.184.735.184.736v4.409l-.184.736-.184.552-.184.734-.184.736-.368.55-.184.735-.368.552-.368.552-.368.736-.368.552-.552.552-.368.368-.55.552-.369.552-.552.368-.552.55-.55.369-.55.368-.736.368-.55.184-.553.368-.734.184-.736.184-.552.184-.734.183-.736.184h-.734l-.737.184h-1.47l1.47-28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m313.808 337.695-.368-.552-.368-.734 25.542-13.23.55 1.286.368.552z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m339.533 325.016.185.734.368.552.184.736.184.735.184.736.184.55v.734l.184.736v2.021l-.184.736v.734l-.184.552-.184.736-.184.734-.368.55-.184.737-.369.55-.183.552-.369.552-.368.734-.55.552-.368.552-.55.368-.368.55-.55.552-.55.367-.553.368-.736.55-.55.368-.734.368-.55.184-.736.368-.735.184-.55.184-.736.184-.734.184h-.734l-.736.184h-1.285l-.736-.184h-.734l-.552-.184h-.736l-.735-.184-.552-.184-.736-.367-.55-.184-.734-.368-.55-.368-.55-.184-.553-.552-.55-.368-.55-.368-.552-.552-.55-.368-.368-.55-.55-.553-.369-.552-.368-.734-.368-.552-.368-.734 25.725-12.679zM323.73 388.41v-2.206l.185-.734v-.736l.184-.552.184-.735.184-.734.184-.552.368-.734.184-.552.368-.552.368-.736.368-.552.368-.552.55-.553.368-.55.552-.368.55-.55.369-.368.55-.368.736-.552.55-.369.552-.184.734-.368.552-.368.735-.184.552-.184.734-.184.736-.184h.734l.736-.184h2.941l.734.184.55.184.735.184.736.184.55.184.734.368.552.184.736.368.55.369.55.368.551.368.55.552.552.369.368.552.55.367.369.552.368.55.55.553.368.734.184.552.368.552.368.734.184.736.184.552.184.735.184.734.184.736v.734l-28.665 2.206z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M325.201 416.34v-3.858l-.184-3.86-.184-3.674-.184-3.675-.184-3.675-.368-3.676-.184-3.49-.184-2.022 28.665-2.205.184 2.205.184 3.675.366 3.859.184 3.859.184 3.858.184 3.86.184 3.858v4.042zm28.665-.919v2.207l-.184.734v.736l-.184.734-.368.552-.184.736-.184.552-.368.735-.368.552-.368.552-.368.552-.368.736-.368.368-.552.552-.366.552-.552.366-.55.552-.553.369-.552.367-.55.369-.734.366-.552.368-.55.184-.737.367-.734.184-.55.184-.736.184h-.734l-.736.184h-2.205l-.734-.184h-.736l-.734-.184-.55-.184-.737-.184-.734-.184-.55-.368-.736-.184-.55-.368-.553-.368-.55-.366-.552-.368-.55-.55-.55-.368-.55-.552-.369-.552-.55-.369-.368-.552-.368-.552-.368-.734-.368-.552-.368-.552-.184-.734-.184-.55-.368-.737-.184-.734v-.734l-.184-.736v-.734l-.184-.736 28.665-.919zm-27.379 58.249v-1.47l.184-.734v-.734l.184-.736.184-.735.184-.552.368-.736.184-.552.368-.734.368-.552.368-.552.368-.552.368-.552.368-.552.55-.552.55-.552.369-.368.55-.552.55-.366.55-.368.736-.368.55-.369.553-.184.734-.367.736-.184.552-.184.734-.184.736-.184h.735l.736-.184h2.204l.734.184h.553l.736.184.734.184.736.184.552.368.734.184.55.368.552.368.737.366.552.369.55.368.55.368.368.552.55.368.55.552.369.552.368.552.368.552.368.734.368.55.368.553.184.736.184.55.184.734.184.734.184.736.184.735v1.47l-28.665.55zm.735 28.85v-.184l-.184-9.004-.368-9.004-.184-9.003v-1.654l28.665-.553v1.47l.368 9.005.184 8.82.368 9.004zm28.849-1.103v.919l-.184.552v.736l-.184.734v.736l-.184.734-.184.552-.368.736-.184.735-.368.552-.184.552-.368.736-.368.552-.55.55-.368.552-.368.368-.552.553-.55.552-.553.367-.552.369-.55.552-.55.184-.55.366-.735.368-.55.368-.736.184-.55.184-.734.184-.737.183-.734.184h-3.675l-.736-.184-.55-.183-.734-.184-.736-.184-.55-.184-.735-.184-.552-.366-.736-.368-.552-.368-.552-.369-.55-.368-.55-.368-.552-.552-.368-.368-.552-.552-.368-.552-.55-.552-.369-.55-.368-.552-.368-.735-.184-.552-.368-.734-.184-.552-.184-.734-.184-.736-.184-.552-.184-.735v-.736l-.184-.734 28.849-1.102zm-24.991 59.168-.183-.734v-.736l.184-.735v-1.288l.184-.734.184-.734.184-.736.184-.552.368-.735.184-.552.368-.552.368-.734.368-.552.368-.552.368-.552.55-.552.368-.368.55-.552.55-.368.551-.55.552-.369.552-.366.55-.368.735-.368.55-.184.736-.368.55-.184.734-.184.736-.184h.735l.734-.184h2.94l.737.184h.552l.734.184.736.184.55.184.734.368.55.184.737.368.552.368.55.366.55.369.55.367.55.55.553.369.368.55.55.552.368.552.368.552.368.552.368.735.368.552.184.552.368.734.184.734.184.552.184.734.184.735v.736l-28.482 2.756zm3.676 29.216-.55-4.042-.735-4.594-.55-4.594-.55-4.594-.552-4.777-.55-4.594-.185-2.021 28.482-2.756.184 1.837.55 4.41.552 4.41.552 4.41.55 4.41.55 4.227.553 4.042z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m363.054 585.575.184.735v2.938l-.184.736v.552l-.184.735-.184.734-.368.552-.184.734-.184.552-.368.736-.369.552-.368.552-.368.55-.368.553-.552.552-.55.552-.368.368-.552.552-.552.368-.55.368-.55.368-.737.369-.55.367-.734.369-.55.184-.736.184-.735.183-.736.184-.55.184h-.734l-.734.184h-1.471l-.736-.184h-.734l-.736-.184-.55-.184-.734-.183-.737-.184-.552-.184-.734-.369-.55-.367-.552-.369-.552-.368-.55-.368-.55-.368-.553-.368-.55-.552-.55-.552-.368-.552-.368-.552-.55-.55-.368-.553-.184-.552-.368-.736-.368-.552-.185-.734-.183-.552-.369-.734v-.735l-.184-.736 28.299-4.226zm-14.517 62.475-.184-.734-.184-.736-.184-.552-.184-.734v-3.493l.184-.734.184-.734v-.734l.368-.552.184-.737.184-.552.368-.734.368-.552.184-.552.55-.552.368-.552.368-.55.55-.552.369-.552.552-.369.55-.552.55-.367.552-.369.55-.368.735-.368.55-.368.736-.184.734-.366.734-.184.736-.184.553-.184h.734l.736-.184h2.204l.55.184h.737l.734.184.55.184.736.184.734.184.55.368.553.184.736.368.552.368.55.368.55.368.55.552.55.368.553.552.368.368.55.552.368.552.368.735.368.55.368.552.368.736.184.734.368.552zm11.393 28.115-.736-1.655-.918-1.838-.919-2.02-.918-2.022-.918-2.021-.918-2.021-.735-2.022-.918-2.205-.734-2.021-.736-2.021-.918-2.022-.735-2.204-.736-2.022-.552-2.021 27.196-9.188.55 1.838.734 1.837.55 1.838.737 1.838.734 1.837.734 1.838.552 1.837.734 1.654.919 1.837.734 1.838.736 1.654.734 1.838.919 1.654.734 1.655z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m385.839 663.853.368.736.184.55.184.735.184.734.184.736.184.552v.734l.184.737v1.47l-.184.552v.734l-.184.736-.184.734-.184.552-.184.737-.184.552-.368.734-.184.552-.368.552-.368.552-.368.736-.368.552-.55.368-.55.552-.369.552-.55.367-.552.552-.55.366-.735.368-.552.368-.734.368-.552.368-.736.184-.734.184-.735.184-.55.184-.736.183h-.734l-.736.184h-1.286l-.736-.184h-.735l-.736-.183-.55-.184-.734-.184-.552-.184-.736-.184-.55-.368-.735-.184-.552-.367-.55-.367-.55-.367-.55-.369-.553-.552-.55-.367-.55-.553-.368-.552-.55-.552-.368-.55-.368-.734-.368-.552-.368-.734 25.908-12.312zm11.025 62.659-.552-.368-.55-.552-.368-.552-.552-.552-.368-.734-.368-.552-.368-.552-.184-.735-.368-.552-.185-.734-.184-.552-.184-.734-.184-.734-.184-.552v-3.491l.184-.734v-.735l.184-.552.184-.734.184-.552.369-.736.184-.734.368-.552.368-.552.368-.735.55-.552.368-.552.55-.552.55-.552.368-.368.55-.552.737-.368.55-.552.552-.184.552-.368.734-.366.55-.184.737-.368.734-.184.55-.184h.736l.734-.184h.552l.736-.184h1.471l.552.184h.734l.736.184.552.184.734.184.736.184.552.184.735.367.55.369.552.366.736.368.55.368.55.552.55.368-19.477 20.948z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m422.405 745.255-1.654-.918-2.021-1.102-1.838-1.287-2.021-1.286-1.838-1.102-1.837-1.287-1.838-1.47-1.837-1.286-1.654-1.286-1.838-1.47-1.654-1.287-1.654-1.47-1.655-1.47-1.654-1.471-.55-.552 19.477-20.947.184.366 1.47 1.102 1.287 1.102 1.286 1.103 1.47 1.102 1.287 1.102 1.47 1.102 1.47 1.103 1.47 1.102 1.471.918 1.47 1.103 1.47.918 1.655.918 1.47.918 1.838 1.103zm14.701-24.622.552.367.552.369.55.552.55.367.55.552.552.552.368.369.552.734.368.552.368.552.368.552.184.552.368.734.184.552.184.735.184.734.184.552.184.734v.734l.183.553v2.202l-.183.552v.735l-.184.734-.184.734-.184.55-.368.735-.184.734-.368.552-.368.734-.368.552-.368.552-.552.552-.368.552-.552.552-.55.552-.55.369-.55.552-.552.368-.55.368-.553.368-.734.368-.55.184-.736.184-.552.368-.735.184h-.55l-.736.184-.734.184h-2.755l-.736-.184h-.55l-.734-.184-.736-.184-.55-.184-.735-.183-.736-.368-.55-.368-.734-.368 14.7-24.623zm44.651 44.467-.736-.184-.734-.184-.736-.183-.55-.184-.735-.369-.552-.183-.736-.368-.552-.369-.55-.367-.55-.369-.552-.552-.55-.368-.553-.552-.367-.368-.552-.552-.368-.552-.369-.552-.367-.552-.369-.735-.368-.552-.184-.552-.368-.734-.184-.734-.184-.55-.184-.735-.184-.734v-1.286l-.183-.734.183-.735v-1.468l.184-.734.184-.735.184-.734.184-.734.368-.552.184-.734.368-.552.369-.553.367-.734.369-.552.552-.552.368-.368.552-.552.368-.552.55-.369.553-.368.55-.552.55-.368.736-.184.55-.368.553-.368.734-.184.736-.184.55-.184.734-.184.736-.184h.735l.55-.183h1.47l.736.183h.734l-4.226 28.482z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M512.26 767.305h-3.49l-2.94-.184h-2.94l-2.94-.183-2.757-.184-2.756-.184-2.757-.368-2.756-.184-2.756-.368-2.756-.368-1.655-.184 4.226-28.481 1.287.184 2.388.368 2.39.183 2.388.369 2.389.184 2.389.183 2.572.184 2.572.184h2.39l2.755.184h3.123z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M512.627 738.64h.736l.734.184h.735l.736.184.734.184.55.184.736.184.735.367.55.184.55.369.736.368.55.368.55.368.553.552.367.368.552.552.55.368.368.552.369.552.552.552.184.734.367.55.369.553.367.734.184.552.184.734.184.734.184.552v.735l.184.734v2.937l-.184.734-.184.734-.184.735-.184.552-.184.734-.183.552-.369.734-.367.552-.369.552-.368.735-.368.552-.368.552-.55.367-.368.552-.552.553-.55.368-.552.368-.55.368-.55.368-.735.368-.55.368-.55.184-.737.368-.734.184-.552.184-.736.184h-.734l-.736.184h-1.471l.369-28.665zm57.514 27.747h-1.472l-.736-.184-.736-.184h-.736l-.55-.184-.736-.184-.737-.368-.55-.184-.55-.368-.736-.368-.55-.368-.556-.368-.55-.369-.55-.367-.55-.552-.37-.552-.55-.368-.365-.552-.37-.552-.55-.735-.364-.552-.186-.552-.37-.734-.182-.552-.37-.734-.186-.552-.182-.734-.186-.735v-1.468l-.186-.734v-.735l.186-.734v-.734l.186-.734v-.552l.182-.735.37-.734.186-.55.182-.736.37-.55.364-.552.37-.735.364-.552.37-.552.55-.552.364-.368.556-.552.55-.552.55-.367.55-.369.55-.368.557-.368.55-.368.736-.368.55-.184.736-.184.55-.367h.736l.736-.184.737-.184h1.472l.55 28.665zm28.666-.552-.55-28.665-28.666.552.55 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M598.257 737.17h2.202l.737.184.736.184.556.184.736.184.73.183.556.368.55.184.736.368.55.369.55.367.551.552.556.369.55.368.365.552.555.552.364.552.365.552.37.552.364.552.37.735.364.55.186.552.37.734.182.734.186.735v.552l.186.734v.734l.186.734v.735l-.186.734v.734l-.186.734-.186.735v.734l-.364.552-.186.734-.186.552-.364.734-.37.552-.364.552-.37.553-.365.552-.55.552-.37.552-.55.552-.55.367-.55.369-.55.552-.556.368-.55.368-.55.184-.737.368-.55.368-.736.184-.736.184-.55.183-.736.184h-.737l-.736.184h-.736l-.55-28.665zm57.878 27.563h-1.467l-.736-.184h-.736l-.556-.184-.73-.184-.737-.184-.555-.368-.736-.184-.55-.368-.55-.368-.737-.368-.55-.368-.55-.368-.556-.368-.364-.552-.55-.552-.55-.369-.37-.552-.365-.552-.37-.734-.364-.552-.37-.552-.364-.734-.186-.552-.186-.734-.182-.553-.186-.734-.186-.734-.186-.734v-3.671l.186-.735.186-.552.186-.734.182-.736.186-.55.364-.735.186-.552.37-.552.364-.734.37-.552.55-.552.364-.552.37-.368.55-.552.55-.552.55-.368.556-.368.55-.368.55-.368.737-.368.55-.368.55-.184.737-.184.736-.184.736-.184.55-.183.736-.184h1.472l.55 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m684.8 764.182-.55-28.666-28.666.552.55 28.665zm-.55-28.666h2.209l.736.184.736.184.736.184.55.184.736.184.55.368.737.184.55.368.55.368.556.368.55.552.55.368.55.368.55.552.37.552.55.552.37.553.365.552.37.552.364.734.186.552.364.552.186.734.186.734.182.735.186.55v.734l.186.734v2.203l-.186.734v.735l-.186.734-.182.734-.186.552-.364.734-.186.552-.37.735-.364.552-.37.552-.365.552-.37.552-.364.552-.55.552-.55.552-.37.368-.55.368-.55.552-.556.368-.736.369-.55.183-.55.369-.737.368-.736.184-.55.184-.736.184-.736.184h-.736l-.736.183h-.737l-.55-28.665zm58.068 27.563h-1.472l-.736-.184h-.736l-.736-.184-.736-.184-.55-.184-.736-.367-.55-.184-.737-.369-.555-.368-.55-.368-.55-.368-.55-.368-.551-.368-.556-.552-.55-.552-.365-.368-.55-.552-.37-.552-.364-.735-.37-.552-.364-.552-.186-.734-.37-.552-.182-.734-.186-.552-.186-.734-.186-.735v-.734l-.183-.734v-2.203l.183-.734v-.736l.186-.55.186-.735.186-.734.364-.552.186-.734.364-.552.37-.552.364-.735.37-.552.364-.552.37-.552.55-.368.365-.552.555-.55.55-.369.551-.367.55-.369.736-.367.55-.369.556-.367.736-.184.55-.184.737-.184.736-.184.736-.184.736-.184h1.466l.556 28.665zm28.662-.551-.55-28.665-28.667.552.556 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M770.43 733.863h2.207l.55.183.737.184.736.184.736.184.55.184.736.368.55.184.556.367.736.369.55.367.55.552.55.369.37.368.55.552.366.55.555.552.365.552.37.552.364.552.364.734.37.552.186.552.182.735.186.734.186.734.186.552.182.734v3.672l-.182.734-.186.734-.186.734-.186.552-.182.735-.37.552-.186.734-.364.552-.364.55-.37.552-.55.552-.37.552-.55.552-.365.552-.555.368-.55.368-.55.553-.551.367-.55.369-.736.183-.556.369-.73.368-.556.183-.736.184-.736.184-.55.184h-.737l-.736.184h-.736l-.55-28.665zm57.882 27.562h-1.472l-.736-.184h-.736l-.737-.183-.55-.184-.736-.184-.736-.184-.55-.368-.55-.369-.736-.184-.55-.368-.556-.552-.55-.368-.55-.368-.551-.552-.37-.368-.55-.552-.365-.552-.37-.552-.55-.55-.364-.552-.186-.734-.37-.552-.182-.735-.37-.552-.186-.734-.182-.734-.186-.734v-1.287l-.186-.734v-.734l.186-.736v-.735l.186-.734v-.734l.182-.734.37-.552.186-.735.182-.552.37-.734.364-.552.37-.552.364-.552.37-.552.55-.55.364-.552.556-.552.55-.368.55-.552.55-.368.551-.368.556-.369.55-.367.736-.184.55-.368.736-.184.55-.184.737-.184.736-.183h.736l.736-.184h.736l.55 28.665z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "m857.163 760.69-5.697.184-5.882.184-6.063.184-5.882.184h-5.327l-.55-28.666 5.327-.183h5.882l5.877-.184 5.698-.184 5.697-.184z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            stroke: "none",
            d: "M856.243 732.025h1.472l.736.184h.736l.736.184.736.184.55.184.736.183.55.369.737.184.55.368.55.368.55.368.556.552.55.368.55.368.55.552.37.552.55.55.365.552.37.553.364.552.37.552.364.734.186.552.186.734.365.734.186.552v.735l.186.734v.734l.182.734v.735l-.182.734v.734l-.186.734v.735l-.186.552-.182.734-.37.552-.186.734-.365.552-.37.734-.364.553-.37.55-.364.552-.364.552-.556.552-.365.368-.55.552-.556.368-.55.552-.55.368-.55.368-.736.368-.55.184-.737.368-.555.184-.73.184-.737.184-.556.184-.736.184h-1.466l-.92-28.666z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "31.05295017,31.05295017",
            strokeWidth: 31.053,
            d: "M750 850V100"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
          "path",
          {
            fill: "none",
            strokeDasharray: "31.0529,31.0529",
            strokeWidth: 31.053,
            d: "M530 850V100"
          }
        )
      ]
    }
  );
  var Analyse_default = SvgAnalyse;

  // build/lib-react-tsx/spectra/Compare.tsx
  var React131 = __toESM(require_react(), 1);
  var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
  var SvgCompare = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime131.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 850.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M97.35 628.573c87.832 20.764 119.621-79.197 124.583-157.475 11.576-179.157 25.725-256.15 86.179-252.84 158.21-1.105 12.679 436.775 212.233 419.503 95.92-8.27 107.445-74.992 112.222-153.822 4.962-83.974 7.324-167.606 17.433-233.94 37.85 109.516-34.656 379.125 139.542 382.617 35.649.734 64.68-.919 96.653-2.573"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M100 750c87.833 20.763 150-50 150-100 0 0 0-50 50-50 100 0 23.442 176.46 222.995 159.187C600 749.999 643.223 756.829 648 677.999c0-50 2 22 2-78 0 100-32.005 150.551 142.193 154.043 35.649.734 64.68-.919 96.652-2.573"
          }
        )
      ]
    }
  );
  var Compare_default = SvgCompare;

  // build/lib-react-tsx/spectra/Deconvolution.tsx
  var React132 = __toESM(require_react(), 1);
  var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
  var SvgDeconvolution = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime132.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime132.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.323,
            d: "M49.941 850.47h883.662m13.965 0-51.27 38.956m0-77.726 51.27 38.77"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 31.973,
            d: "M94.492 348.573C285.488 350.806 182.212 58.297 300 58.571c126.782-1.064 52.857 285.714 220.345 287.761C628.763 344.997 600 208.571 650 208.571s-8.942 134.839 139.542 132.616c35.653-.514 56.109 1.939 88.081.285M94.492 728.573C300 750 200 600 300 600s52.857 124.286 220.345 126.333C628.763 724.997 600 499.999 650 499.999s-8.942 223.41 139.542 221.188c35.653-.514 56.109 1.939 88.081.285"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime132.jsx)("path", { fillRule: "evenodd", d: "M330 491.999h250v50H330z" }),
        /* @__PURE__ */ (0, import_jsx_runtime132.jsx)("path", { d: "M430 392h50v250h-50z" })
      ]
    }
  );
  var Deconvolution_default = SvgDeconvolution;

  // build/lib-react-tsx/spectra/Pca.tsx
  var React133 = __toESM(require_react(), 1);
  var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
  var SvgPca = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime133.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("ellipse", { cx: 75, cy: 425, fill: "none", stroke: "none", rx: 325, ry: 125 }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 225, cy: 225, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 225, cy: 225, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 114.91, cy: 408.333, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 333.018, cy: 375.991, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 255.18, cy: 550.405, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 683.198, cy: 238.333, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 875.901, cy: 313.378, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 822.838, cy: 128.784, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 781.306, cy: 870.135, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 620.676, cy: 785.901, r: 75, stroke: "none" }),
        /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("circle", { cx: 874.279, cy: 712.387, r: 75, stroke: "none" })
      ]
    }
  );
  var Pca_default = SvgPca;

  // build/lib-react-tsx/spectra/Phylogram.tsx
  var React134 = __toESM(require_react(), 1);
  var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
  var SvgPhylogram = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 50,
            d: "M50 550h350m250-150h300M850 700h100m-100 0h100M850 850h100M750 100h200M750 200h200m-300-50h100m100 550v150M650 150v250m0-275v300M400 275v500m0-475h250m200 375v200M750 75v150M375 775h475"
          }
        )
      ]
    }
  );
  var Phylogram_default = SvgPhylogram;

  // build/lib-react-tsx/structure/3DModelText.tsx
  var React135 = __toESM(require_react(), 1);
  var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);
  var Svg3DModelText = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime135.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime135.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime135.jsx)("path", { d: "M404.514 595.703c0 27.632-5.257 52.182-15.784 73.675-10.526 21.339-25.287 39.323-44.146 53.94-18.859 14.465-41.364 25.574-67.674 33.175-26.316 7.602-54.964 11.264-86.104 11.264-18.853 0-36.54-1.32-53.062-3.95-16.521-2.781-31.139-6.137-43.854-10.084-12.716-4.093-23.242-8.184-31.568-12.43-8.189-4.378-13.596-7.602-16.225-9.943-2.64-2.19-4.537-4.818-5.709-7.602-1.314-2.914-2.486-6.28-3.509-10.087-1.023-3.938-1.749-8.767-2.188-14.618-.44-5.841-.583-12.857-.583-21.194 0-13.74 1.166-23.243 3.36-28.5 2.338-5.27 5.847-7.887 10.378-7.887 2.777 0 7.749 1.89 14.761 5.84 7.018 3.795 15.938 7.898 26.75 12.43 10.823 4.376 23.538 8.48 38.157 12.418 14.47 3.805 31.134 5.698 49.696 5.698 15.641 0 29.533-1.894 41.517-5.545 11.984-3.663 22.213-8.921 30.551-15.652 8.48-6.721 14.761-14.761 18.853-24.407 4.097-9.504 6.291-20.173 6.291-31.867 0-12.858-2.634-24.407-7.6-34.637-4.972-10.383-12.429-19.15-22.219-26.464-9.801-7.162-22.225-12.86-37.277-16.808-14.916-4.092-32.603-5.996-52.918-5.996h-47.947c-3.651 0-6.869-.583-9.35-1.605-2.64-.88-4.829-3.068-6.434-6.137-1.755-3.223-2.926-7.458-3.658-13.013-.731-5.698-1.023-12.87-1.023-21.636 0-8.326.292-15.058 1.023-20.46.731-5.267 1.903-9.36 3.36-12.143 1.612-2.915 3.657-4.818 5.995-5.984q3.73-1.762 8.772-1.76h48.381c16.664 0 31.282-1.902 44.151-5.697 12.858-3.95 23.682-9.361 32.305-16.521 8.767-7.16 15.345-15.785 20.024-25.868 4.527-10.234 6.726-21.35 6.726-33.626 0-9.502-1.462-18.418-4.68-26.75-3.069-8.475-7.75-15.79-13.887-21.922-6.138-6.138-14.036-10.966-23.825-14.48-9.646-3.652-21.053-5.406-34.208-5.406-14.91 0-28.797 2.194-41.952 6.583-13.155 4.532-24.847 9.354-35.374 14.618-10.384 5.264-19.293 10.229-26.459 14.76-7.309 4.539-12.721 6.865-16.076 6.865-2.343 0-4.389-.583-5.995-1.457-1.759-1.028-3.217-2.92-4.388-5.846-1.023-2.783-1.903-7.018-2.486-12.43-.583-5.406-.88-12.418-.88-20.898 0-7.155.154-13.155.44-17.83.297-4.681.88-8.635 1.76-11.847.726-3.063 1.897-5.846 3.212-8.034 1.171-2.338 3.366-4.818 6.138-7.601 2.926-2.628 8.778-6.726 17.544-12.132 8.921-5.417 20.03-10.675 33.472-15.79 13.452-5.263 28.802-9.503 46.483-13.155 17.543-3.503 36.551-5.27 57.158-5.27 26.756 0 50.581 3.069 71.337 9.367 20.612 6.28 38.003 15.344 52.181 27.185 14.178 11.835 24.854 26.454 32.163 43.707 7.16 17.247 10.812 36.694 10.812 58.467 0 16.812-2.046 32.448-6.43 47.066-4.24 14.622-10.521 27.633-18.71 39.04-8.332 11.397-18.709 21.043-31.133 29.083-12.43 8.04-26.75 14.036-42.975 17.984v1.309c19.293 2.2 36.837 7.16 52.181 14.772 15.498 7.6 28.505 17.093 39.175 28.5 10.675 11.396 19.001 24.266 24.704 38.74 5.708 14.32 8.479 29.82 8.479 46.483zm558.54-122.94c0 50.73-6.721 94.287-20.019 130.398-13.305 36.1-32.306 65.633-57.158 88.435-24.854 22.802-54.959 39.609-90.482 50.278-35.665 10.682-77.914 16.08-127.026 16.08h-132.29c-9.504 0-17.396-2.781-23.825-8.325q-9.652-8.332-9.651-27.19V239.325c0-12.578 3.217-21.636 9.651-27.191 6.429-5.555 14.321-8.332 23.825-8.332h142.079c49.409 0 91.362 5.846 125.713 17.395 34.351 11.544 63.444 28.654 86.978 51.307 23.533 22.659 41.512 50.719 53.793 84.196 12.276 33.333 18.412 72.065 18.412 116.063zm-116.494 3.805c0-26.311-3.075-50.575-9.213-73.233-6.143-22.52-16.081-42.103-29.676-58.613-13.448-16.526-30.838-29.54-52.188-38.746-21.19-9.35-49.112-14.034-83.755-14.034h-56.861v376.997h58.615c30.843 0 56.867-4.093 77.91-11.99 21.194-8.041 38.739-20.172 52.917-36.254s24.705-36.244 31.723-60.222c7.019-23.98 10.528-51.895 10.528-83.905z" })
      ]
    }
  );
  var DModelText_default = Svg3DModelText;

  // build/lib-react-tsx/structure/3DModel.tsx
  var React136 = __toESM(require_react(), 1);
  var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
  var Svg3DModel = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime136.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime136.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime136.jsx)("path", { d: "M502.616 698.225c111.244 0 201.965-90.735 201.965-201.985s-90.72-201.999-201.965-201.999c-111.248 0-201.983 90.749-201.983 201.999 0 111.249 90.737 201.985 201.983 201.985z" }),
        /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60.471,
            d: "m449.349 384.629-100.541-138.86m421.97 527.157L601.53 598.317m178.829-380.158L609.042 390.712M416.17 508.564 244.836 681.133"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
          "path",
          {
            fill: "none",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 60.471,
            d: "M852.9 245.769c56.541 0 102.665-46.109 102.665-102.664 0-56.542-46.124-102.652-102.665-102.652-56.545 0-102.682 46.11-102.682 102.652.001 56.555 46.14 102.664 102.682 102.664zm-556.502 5.653c56.541 0 102.68-46.124 102.68-102.666 0-56.54-46.139-102.652-102.68-102.652-56.54 0-102.665 46.112-102.665 102.652.001 56.542 46.125 102.666 102.665 102.666zM149.512 850.318c56.54 0 102.65-46.125 102.65-102.667 0-56.556-46.11-102.664-102.65-102.664-56.557 0-102.681 46.108-102.681 102.664.001 56.542 46.125 102.667 102.681 102.667zm697.732 104.527c56.544 0 102.668-46.124 102.668-102.665 0-56.558-46.124-102.668-102.668-102.668-56.54 0-102.648 46.11-102.648 102.668.001 56.541 46.11 102.665 102.648 102.665z"
          }
        )
      ]
    }
  );
  var DModel_default = Svg3DModel;

  // build/lib-react-tsx/structure/Abundance.tsx
  var React137 = __toESM(require_react(), 1);
  var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
  var SvgAbundance = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime137.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(
          "g",
          {
            stroke: "none",
            strokeWidth: 0.919,
            fontFamily: "sans-serif",
            fontSize: 36.754,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
                "path",
                {
                  d: "M305.857 267.242q7.003 7.11 11.147 16.589t4.144 25.221q0 17.773-6.002 33.177-5.859 15.404-18.15 26.406-12.004 10.664-28.295 16.42-16.15 5.585-39.3 5.585-26.44 0-45.446-4.908-18.864-4.91-30.726-11.003v-55.352h5.574q12.29 8.803 29.296 15.235 17.15 6.432 31.298 6.432 8.288 0 18.006-1.524 9.718-1.692 16.435-7.109 5.288-4.231 8.432-10.156 3.143-6.094 3.143-17.435 0-11.003-4.287-16.927-4.287-6.094-11.29-8.632-7.001-2.71-16.863-2.878-9.861-.338-18.292-.338h-11.72v-45.027h12.148q11.147 0 19.722-.847t14.577-3.893q6.288-3.216 9.432-8.464 3.144-5.416 3.144-15.741 0-7.619-3.287-12.188-3.287-4.74-8.288-7.448-5.574-3.047-13.149-4.062t-13.004-1.016q-13.434 0-29.154 5.585-15.72 5.417-30.44 15.743h-5.287v-54.674q11.718-5.586 31.869-10.664 20.15-5.247 40.872-5.247 20.15 0 35.299 4.231 15.148 4.063 25.009 11.003 11.718 8.293 17.435 20.143t5.716 27.76q0 20.99-11.004 37.578-11.004 16.42-29.01 20.99v2.369q7.287 1.186 15.434 4.74 8.145 3.555 14.862 10.325m228.942 118.152h-167.06v-41.64q19.15-16.42 38.3-34.87 19.292-18.45 30.868-31.823 17.292-19.805 24.58-34.531t7.289-29.115q0-17.265-9.432-26.574-9.29-9.48-26.867-9.48-13.149 0-27.725 6.432-14.434 6.432-26.867 16.42h-4.573v-56.03q10.147-5.246 29.868-10.494 19.865-5.247 39.73-5.247 40.014 0 61.021 19.974 21.009 19.804 21.009 56.198 0 23.867-10.147 45.363-10.004 21.498-30.726 44.35-13.004 14.218-26.152 26.236-13.149 11.849-18.721 16.589H534.8z",
                  baselineShift: "super",
                  fontSize: 318.532
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime137.jsx)("path", { d: "M853.23 476.853q0 57.291-41.115 93.229-40.894 35.677-111.25 35.677-40.675 0-71.017-8.333-30.12-8.594-56.504-21.615v-92.969h9.234q26.164 24.74 58.484 38.021 32.54 13.281 62.44 13.281 7.696 0 20.228-1.562t20.447-5.208q9.674-4.688 15.83-11.72 6.377-7.03 6.377-20.833 0-12.76-9.235-21.875-9.014-9.375-26.603-14.323-18.469-5.208-39.136-9.635-20.447-4.688-38.476-11.719-41.334-15.885-59.583-42.969-18.029-27.343-18.029-67.708 0-54.167 40.895-88.281 41.114-34.376 105.534-34.376 32.32 0 63.76 7.553 31.661 7.291 54.747 18.49V319.3h-9.015q-19.787-18.75-48.59-31.25-28.582-12.76-58.483-12.76-10.554 0-21.107 1.823-10.334 1.562-20.008 6.25-8.574 3.906-14.73 11.979-6.157 7.812-6.157 17.969 0 15.364 9.894 23.698 9.894 8.073 37.377 14.843 18.029 4.427 34.519 8.594 16.71 4.167 35.837 11.459 37.597 14.583 55.406 39.843 18.029 25 18.029 65.105" })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
          "path",
          {
            stroke: "none",
            d: "M331.135 828.153q0 10.957-2.812 20.391-2.813 9.434-8.555 15.879-6.211 6.973-15.41 10.488-9.2 3.457-21.446 3.457-4.336 0-9.375-.527t-6.62-.938v-17.168h2.343q1.758.82 4.98 1.758 3.282.938 8.907.938 4.57 0 8.965-1.113 4.394-1.172 7.558-3.633 3.457-2.637 5.684-6.563 2.226-3.984 2.988-9.55-5.098 2.93-9.492 4.511-4.336 1.524-10.84 1.524-4.922 0-9.434-1.172-4.453-1.23-8.144-3.75-4.863-3.457-7.793-9.082-2.871-5.684-2.871-14.297 0-14.004 9.726-22.793 9.786-8.848 25.606-8.848 8.144 0 14.414 2.168 6.328 2.11 10.898 6.504 5.332 5.04 8.028 12.832 2.695 7.793 2.695 18.984m-22.441-3.28q0-7.15-1.407-11.72-1.347-4.628-3.75-7.148-1.699-1.875-3.925-2.695t-4.688-.82q-2.285 0-4.394.82-2.051.761-3.985 2.695-1.816 1.875-2.988 4.922-1.113 3.047-1.113 7.265 0 4.102 1.23 6.915 1.23 2.753 3.399 4.394 2.05 1.582 4.804 2.227 2.813.644 6.094.644 2.637 0 5.742-.644 3.106-.703 4.805-1.407 0-.644.058-1.816.118-1.23.118-3.633m110.859 31.699h-11.895v20.332h-21.503v-20.332h-42.247v-16.523l40.84-50.625h22.91v51.21h11.895zm-33.398-15.937V809.11l-25.372 31.524zm70.781 36.036h-21.914v-23.028h21.914zm88.184-48.517q0 10.957-2.813 20.391t-8.555 15.879q-6.21 6.973-15.41 10.488-9.2 3.457-21.445 3.457-4.336 0-9.375-.527-5.04-.527-6.621-.938v-17.168h2.343q1.758.82 4.98 1.758 3.282.938 8.907.938 4.57 0 8.965-1.113 4.395-1.172 7.559-3.633 3.457-2.637 5.683-6.563 2.227-3.984 2.988-9.55-5.097 2.93-9.492 4.511-4.336 1.524-10.84 1.524-4.921 0-9.433-1.172-4.453-1.23-8.145-3.75-4.863-3.457-7.793-9.082-2.87-5.684-2.87-14.297 0-14.004 9.726-22.793 9.785-8.848 25.605-8.848 8.145 0 14.414 2.168 6.328 2.11 10.899 6.504 5.332 5.04 8.027 12.832t2.695 18.984m-22.442-3.28q0-7.15-1.406-11.72-1.348-4.628-3.75-7.148-1.7-1.875-3.926-2.695t-4.688-.82q-2.285 0-4.394.82-2.05.761-3.984 2.695-1.817 1.875-2.989 4.922-1.113 3.047-1.113 7.265 0 4.102 1.23 6.915 1.231 2.753 3.399 4.394 2.05 1.582 4.805 2.227 2.812.644 6.093.644 2.637 0 5.743-.644 3.105-.703 4.804-1.407 0-.644.059-1.816.117-1.23.117-3.633m101.075 10.898q2.871 2.462 4.57 5.743t1.7 8.73q0 6.153-2.461 11.485-2.403 5.332-7.442 9.14-4.921 3.692-11.601 5.684-6.621 1.933-16.113 1.933-10.84 0-18.633-1.699-7.735-1.699-12.598-3.808v-19.16h2.285q5.04 3.046 12.012 5.273 7.031 2.227 12.832 2.227 3.398 0 7.383-.528 3.984-.586 6.738-2.46 2.168-1.466 3.457-3.516 1.29-2.11 1.29-6.036 0-3.808-1.759-5.859-1.757-2.11-4.629-2.988-2.87-.938-6.914-.996-4.043-.118-7.5-.118h-4.804v-15.585h4.98q4.57 0 8.086-.293t5.977-1.348q2.578-1.113 3.867-2.93 1.289-1.875 1.289-5.449 0-2.637-1.348-4.219-1.347-1.64-3.398-2.578-2.285-1.055-5.39-1.406-3.106-.352-5.333-.352-5.508 0-11.953 1.934-6.445 1.875-12.48 5.45h-2.168v-18.927q4.804-1.933 13.066-3.691 8.262-1.816 16.758-1.816 8.262 0 14.473 1.464 6.21 1.407 10.253 3.809 4.805 2.871 7.149 6.973 2.344 4.101 2.344 9.609 0 7.266-4.512 13.008-4.512 5.683-11.895 7.265v.82q2.989.41 6.328 1.641 3.34 1.23 6.094 3.575m117.012-19.805q0 14.59-6.738 21.621t-19.63 7.031q-13.3 0-20.038-7.09-6.68-7.148-6.68-21.328 0-14.472 6.855-21.445 6.856-7.031 19.864-7.031 13.125 0 19.746 7.031 6.62 6.973 6.62 21.21m45.703-26.543-45.703 87.246h-15.762l45.703-87.246zm37.09 60.41q0 14.59-6.738 21.621t-19.63 7.031q-13.3 0-20.038-7.09-6.68-7.148-6.68-21.327 0-14.473 6.855-21.446 6.856-7.031 19.864-7.031 13.125 0 19.746 7.031 6.62 6.973 6.62 21.211m-100.078-33.691q0-9.375-2.168-12.657-2.168-3.28-7.09-3.28t-7.09 3.28-2.168 12.715q0 9.434 2.168 12.715t7.09 3.281 7.09-3.28 2.168-12.774m82.793 33.867q0-9.375-2.168-12.656t-7.09-3.282-7.09 3.282q-2.168 3.28-2.168 12.715 0 9.433 2.168 12.714t7.09 3.282 7.09-3.282 2.168-12.773",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime137.jsx)("path", { fill: "none", strokeWidth: 40, d: "M103.12 30H892v935.636H103.12Z" })
      ]
    }
  );
  var Abundance_default = SvgAbundance;

  // build/lib-react-tsx/structure/Atomistic2.tsx
  var React138 = __toESM(require_react(), 1);
  var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
  var SvgAtomistic2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime138.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime138.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 53.632,
            d: "M328.953 111.543c74.852-43.268 209.754 50.505 301.387 209.26 91.634 158.754 105.289 322.444 30.6 365.548-74.854 43.103-209.755-50.506-301.388-209.26-91.635-158.756-105.288-322.445-30.6-365.548"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 53.632,
            d: "M782.35 232.953c43.103 74.853-50.506 209.754-209.26 301.387-158.755 91.635-322.445 105.29-365.548 30.6-43.268-74.853 50.505-209.755 209.26-301.388 158.755-91.634 322.444-105.287 365.548-30.599"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.669,
            d: "M494.945 340.052c-32.573 0-58.894 26.32-58.894 58.894s26.32 58.897 58.894 58.897 58.897-26.323 58.897-58.897-26.322-58.894-58.897-58.894"
          }
        )
      ]
    }
  );
  var Atomistic2_default = SvgAtomistic2;

  // build/lib-react-tsx/structure/AtomisticElectron.tsx
  var React139 = __toESM(require_react(), 1);
  var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);
  var SvgAtomisticElectron = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime139.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime139.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime139.jsx)("path", { fill: "none", d: "M352-84h150v50H352z" }),
        /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 40,
            d: "M499.318 174.78c-180.085 0-326.065 145.98-326.065 326.212 0 180.088 145.98 326.065 326.065 326.065 180.084 0 326.212-145.977 326.212-326.065 0-180.232-146.128-326.212-326.212-326.212"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 39.974,
            d: "M329.396 129.742c-54.712 0-99.15 44.439-99.15 99.151s44.438 99.15 99.15 99.15 99.15-44.438 99.15-99.15-44.438-99.15-99.15-99.15"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M329.396 147.32c-45.057 0-81.573 36.516-81.573 81.573s36.516 81.573 81.573 81.573 81.574-36.516 81.574-81.573-36.517-81.573-81.574-81.573"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 30.021,
            d: "M275.655 224.893h103.483"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime139.jsx)("circle", { cx: 500.098, cy: 501.154, r: 25 })
      ]
    }
  );
  var AtomisticElectron_default = SvgAtomisticElectron;

  // build/lib-react-tsx/structure/AtomisticNeutron.tsx
  var React140 = __toESM(require_react(), 1);
  var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
  var SvgAtomisticNeutron = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime140.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime140.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 65.811,
            d: "M499.757 948.085c246.683 0 447.882-201.198 447.882-447.892 0-246.688-201.199-447.886-447.882-447.886-246.688 0-447.89 201.198-447.89 447.886 0 246.694 201.202 447.892 447.89 447.892",
            clipRule: "evenodd"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
          "path",
          {
            fill: "none",
            strokeMiterlimit: 10,
            strokeWidth: 35.61,
            d: "M499.751 660.4c88.232 0 160.204-71.969 160.204-160.208 0-88.237-71.972-160.204-160.204-160.204s-160.196 71.967-160.196 160.204c0 88.24 71.965 160.208 160.196 160.208z",
            clipRule: "evenodd"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(
          "path",
          {
            fillRule: "evenodd",
            d: "M166.143 278.772c47.393 0 86.063-38.66 86.063-86.065 0-47.403-38.67-86.066-86.063-86.066-47.413 0-86.069 38.663-86.069 86.066 0 47.405 38.656 86.065 86.069 86.065z",
            clipRule: "evenodd"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime140.jsx)("path", { d: "M580.458 584.001q0 3.48-1.212 6.204-1.208 2.724-3.254 4.538-2.044 1.817-4.841 2.646c-2.797.829-3.755.831-5.675.831h-16.943c-3.532 0-6.58-.351-9.153-1.057s-4.938-1.993-7.107-3.86c-2.17-1.863-4.257-4.385-6.273-7.564-2.016-3.174-4.291-7.285-6.816-12.327l-48.704-91.521a442 442 0 0 1-8.618-17.624 319 319 0 0 1-7.873-18.379h-.3c.404 7.261.703 14.498.912 21.707.195 7.212.298 14.647.298 22.311v102.417a4.7 4.7 0 0 1-.828 2.724q-.834 1.211-2.878 2.041c-1.364.553-3.2.98-5.522 1.282-2.323.304-5.292.456-8.923.456-3.527 0-6.455-.152-8.771-.456q-3.483-.453-5.453-1.282c-1.308-.553-2.211-1.234-2.719-2.041-.508-.808-.758-1.715-.758-2.724V416.387c0-4.74 1.391-8.293 4.159-10.666q4.16-3.552 10.21-3.553h21.33q5.75.001 9.682.984c2.622.657 4.973 1.738 7.032 3.25 2.073 1.514 4.013 3.606 5.829 6.278q2.722 4.012 5.591 9.91l38.126 71.552c2.211 4.337 4.409 8.6 6.58 12.785a481 481 0 0 1 6.271 12.557 2175 2175 0 0 1 5.9 12.331 674 674 0 0 1 5.604 12.101h.146c-.3-7.059-.528-14.421-.675-22.086a1096 1096 0 0 1-.237-21.939v-91.822c0-1.008.307-1.915.912-2.723q.906-1.21 3.024-2.118 2.122-.907 5.599-1.287c2.316-.25 5.294-.379 8.924-.379q5.142.002 8.625.379c2.322.254 4.104.682 5.369 1.287 1.258.605 2.143 1.311 2.643 2.118q.764 1.21.766 2.723z" })
      ]
    }
  );
  var AtomisticNeutron_default = SvgAtomisticNeutron;

  // build/lib-react-tsx/structure/Atomistic.tsx
  var React141 = __toESM(require_react(), 1);
  var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);
  var SvgAtomistic = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime141.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime141.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 40.183,
            d: "M498.035 147.601c-151.635 0-274.552 122.917-274.552 274.675 0 151.637 122.917 274.551 274.552 274.551 151.634 0 274.677-122.914 274.677-274.551 0-151.758-123.043-274.675-274.677-274.675"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 41.374,
            d: "M321.396 107.742c-54.712 0-99.15 44.439-99.15 99.151s44.438 99.15 99.15 99.15 99.15-44.438 99.15-99.15-44.438-99.15-99.15-99.15"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M321.396 125.32c-45.057 0-81.573 36.516-81.573 81.573s36.516 81.573 81.573 81.573 81.574-36.516 81.574-81.573-36.517-81.573-81.574-81.573"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 32.242,
            d: "M498.035 294.903c-70.309 0-127.373 56.94-127.373 127.373 0 70.309 57.064 127.251 127.373 127.251 70.31 0 127.373-56.942 127.373-127.251 0-70.432-57.063-127.373-127.373-127.373"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 35.021,
            d: "M269.655 206.893h103.483m73.156 215.383h103.482m-51.741-51.865V474.02"
          }
        )
      ]
    }
  );
  var Atomistic_default = SvgAtomistic;

  // build/lib-react-tsx/structure/Bohr.tsx
  var React142 = __toESM(require_react(), 1);
  var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
  var SvgBohr = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime142.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime142.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.125,
            d: "M490.253 62.562c-187.603 0-339.69 152.088-339.69 339.69 0 187.481 152.087 339.57 339.69 339.57 187.48 0 339.57-152.089 339.57-339.57 0-187.602-152.09-339.69-339.57-339.69"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.125,
            d: "M490.253 195.592c-114.22 0-206.66 92.441-206.66 206.66 0 114.1 92.44 206.662 206.66 206.662 114.098 0 206.66-92.563 206.66-206.661 0-114.22-92.562-206.66-206.66-206.66"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 37.125,
            d: "M490.253 326.272c-41.95 0-75.981 34.03-75.981 75.98 0 41.954 34.03 75.859 75.98 75.859 41.954 0 75.859-33.905 75.859-75.858 0-41.95-33.905-75.981-75.858-75.981"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M490.253 326.272c-41.95 0-75.981 34.03-75.981 75.98 0 41.954 34.03 75.859 75.98 75.859 41.954 0 75.859-33.905 75.859-75.858 0-41.95-33.905-75.981-75.858-75.981m0-177.952c27.474 0 49.872 22.275 49.872 49.871 0 27.473-22.398 49.871-49.872 49.871-27.595 0-49.87-22.398-49.87-49.87 0-27.597 22.275-49.872 49.87-49.872m0 408c27.474 0 49.872 22.401 49.872 49.872 0 27.596-22.398 49.872-49.872 49.872-27.595 0-49.87-22.276-49.87-49.872 0-27.471 22.275-49.872 49.87-49.872M833.16 352.383c27.6 0 49.873 22.275 49.873 49.87 0 27.474-22.273 49.872-49.872 49.872-27.596 0-49.87-22.398-49.87-49.872 0-27.595 22.274-49.87 49.87-49.87"
          }
        )
      ]
    }
  );
  var Bohr_default = SvgBohr;

  // build/lib-react-tsx/structure/Conformers.tsx
  var React143 = __toESM(require_react(), 1);
  var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
  var SvgConformers = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime143.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime143.jsx)("path", { d: "M607.912 83.936a15 15 0 0 0-10.676 4.017L439.258 235.32H204.564l-147.023-144a15.002 15.002 0 0 0-23.303 18.526l151.397 248.283a15 15 0 0 0 12.808 7.191H449.84a15 15 0 0 0 12.709-7.033l157.627-251.396a15.002 15.002 0 0 0-12.264-22.955ZM533.836 188.12l-92.295 147.2H206.865l-84.414-138.432 65.496 64.146a15 15 0 0 0 10.496 4.285h246.725a15 15 0 0 0 10.23-4.03zm416.182 153.446a15 15 0 0 0-10.706 3.993L790.632 483.64l-236.056 1.52a15 15 0 0 0-12.47 6.81L389.15 726.695a15.002 15.002 0 0 0 22.524 19.407l144.144-127.934L796.85 613.6a15 15 0 0 0 12.396-6.985l152.955-242.052a15.002 15.002 0 0 0-12.183-22.997zm-74.76 104.424L788.2 583.758l-238.486 4.52a15 15 0 0 0-9.672 3.779l-64.865 57.57 87.658-134.52 233.826-1.505a15 15 0 0 0 10.111-4.008z" })
      ]
    }
  );
  var Conformers_default = SvgConformers;

  // build/lib-react-tsx/structure/Diastereotopic.tsx
  var React144 = __toESM(require_react(), 1);
  var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
  var SvgDiastereotopic = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("path", { d: "M252.565 300.988c0 1.382-.436 2.695-1.39 3.79-.939 1.164-2.477 2.111-4.59 2.77-2.12.731-4.96 1.313-8.531 1.748-3.577.443-8.026.66-13.486.66-5.544 0-10.139-.216-13.78-.66-3.578-.434-6.497-1.017-8.533-1.748-2.048-.659-3.579-1.606-4.448-2.77-.954-1.095-1.388-2.408-1.388-3.79V189.2H93.022v111.788a6 6 0 0 1-1.312 3.79c-.876 1.164-2.329 2.111-4.517 2.77q-3.172 1.096-8.533 1.748c-3.571.443-8.089.66-13.633.66-5.396 0-9.922-.216-13.563-.66-3.642-.434-6.561-1.017-8.679-1.748-2.113-.659-3.643-1.606-4.59-2.77-.955-1.095-1.39-2.408-1.39-3.79V39.873c0-1.39.435-2.702 1.39-3.789.948-1.173 2.478-2.12 4.59-2.779 2.118-.723 5.037-1.305 8.679-1.747 3.641-.436 8.167-.653 13.563-.653 5.542 0 10.062.218 13.633.653q5.36.663 8.533 1.747c2.188.659 3.641 1.606 4.517 2.779.878 1.086 1.312 2.398 1.312 3.789v101.501h103.396V39.873c0-1.39.436-2.702 1.388-3.789.869-1.173 2.399-2.12 4.448-2.779 2.036-.723 4.955-1.305 8.533-1.747q5.463-.654 13.78-.653c5.459 0 9.909.218 13.486.653q5.356.663 8.531 1.747c2.111.659 3.65 1.606 4.59 2.779.953 1.086 1.39 2.398 1.39 3.789v261.115zM967.05 165.071c0 25.301-3.361 47.033-9.989 65.037-6.639 18.011-16.118 32.747-28.517 44.119-12.391 11.374-27.414 19.759-45.131 25.085-17.796 5.318-38.868 8.021-63.367 8.021h-65.99c-4.736 0-8.674-1.39-11.888-4.16-3.2-2.772-4.812-7.292-4.812-13.563V48.622c0-6.272 1.612-10.792 4.812-13.563 3.214-2.772 7.151-4.154 11.888-4.154h70.881c24.644 0 45.565 2.912 62.704 8.68 17.13 5.753 31.644 14.285 43.389 25.588 11.738 11.305 20.706 25.302 26.831 42.001 6.115 16.624 9.189 35.948 9.189 57.897zm-58.118 1.894c0-13.12-1.529-25.231-4.597-36.527-3.057-11.226-8.018-21.002-14.804-29.238-6.699-8.244-15.381-14.735-26.033-19.324q-15.85-7-41.774-7.001h-28.362v188.052H822.6c15.389 0 28.362-2.042 38.865-5.978 10.568-4.014 19.325-10.062 26.397-18.083 7.074-8.027 12.321-18.083 15.822-30.047 3.502-11.958 5.248-25.884 5.248-41.854z" }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("path", { strokeWidth: 37.088, d: "M508.229 777.649v148.985" }),
              /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("path", { strokeWidth: 37.086, d: "M572.738 814.893 443.717 889.39" }),
              /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("path", { strokeWidth: 37.084, d: "m572.738 889.39-129.021-74.497" })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("path", { d: "M472.871 641.211 210.263 386.17l103.529-73.225 207.06 320.692 444.43 222.213-22.727 42.928-434.331-222.215L73.902 893.727l-22.728-40.403z" }),
        /* @__PURE__ */ (0, import_jsx_runtime144.jsx)("path", { d: "m538.127 585.561 34.592-34.599 34.599 34.599-34.599 34.591zm63.779-63.89 34.596-34.596 34.594 34.594-34.596 34.597zm63.921-63.755 34.6-34.6 34.597 34.597-34.6 34.6zm63.838-63.894 34.592-34.601 34.6 34.601-34.6 34.591z" })
      ]
    }
  );
  var Diastereotopic_default = SvgDiastereotopic;

  // build/lib-react-tsx/structure/Lcao.tsx
  var React145 = __toESM(require_react(), 1);
  var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);
  var SvgLcao = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime145.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime145.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M467.491 268.613a199.64 198.45 0 0 1-199.64 198.45 199.64 198.45 0 0 1-199.638-198.45 199.64 198.45 0 0 1 199.639-198.45 199.64 198.45 0 0 1 199.639 198.45Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
          "path",
          {
            stroke: "none",
            d: "M273.225 323.34q0 3.418-.367 5.86-.366 2.318-1.098 3.783-.61 1.343-1.465 1.953t-1.953.61h-87.158q-.977 0-1.832-.61-.854-.61-1.586-1.953-.61-1.465-.977-3.784-.366-2.441-.366-5.86 0-3.54.244-5.859.366-2.441.976-3.906.733-1.465 1.587-2.075.855-.732 1.954-.732h29.418V207.983l-25.39 14.038q-2.808 1.343-4.639 1.71-1.709.244-2.807-.733-.977-1.099-1.343-3.662-.366-2.564-.366-7.202 0-2.93.122-4.761.122-1.953.61-3.296t1.343-2.197 2.32-1.831l33.935-21.973q.61-.488 1.464-.732.977-.367 2.442-.489 1.465-.244 3.784-.244 2.441-.122 6.226-.122 4.638 0 7.446.244 2.93.122 4.394.61 1.465.367 1.954 1.1.488.732.488 1.83v130.494h25.757q1.098 0 1.953.732.976.61 1.587 2.075.732 1.465.976 3.906.367 2.32.367 5.86m103.759-22.705q0 9.277-3.54 16.357-3.418 7.08-9.765 11.84-6.348 4.762-15.015 7.081-8.667 2.441-18.799 2.441-6.103 0-11.719-.976-5.493-.855-9.887-2.197-4.395-1.465-7.325-2.93t-4.272-2.686q-1.343-1.342-2.075-4.028-.733-2.808-.733-8.179 0-3.54.245-5.615.244-2.197.732-3.418.488-1.343 1.22-1.709.733-.488 1.832-.488 1.343 0 3.906 1.587 2.686 1.465 6.592 3.296t9.033 3.418q5.249 1.587 11.84 1.587 4.151 0 7.325-.855 3.296-.854 5.615-2.441 2.442-1.587 3.662-4.029 1.221-2.441 1.221-5.615 0-3.662-2.32-6.226-2.197-2.685-5.98-4.638-3.663-1.953-8.424-3.662-4.638-1.71-9.643-3.784-4.883-2.076-9.644-4.761-4.638-2.686-8.423-6.592-3.662-3.906-5.981-9.4-2.197-5.493-2.197-13.183 0-7.813 3.052-14.282 3.051-6.592 8.789-11.23 5.737-4.64 13.916-7.203 8.3-2.563 18.554-2.563 5.127 0 9.888.732 4.883.733 8.79 1.831 3.905 1.099 6.59 2.442 2.686 1.22 3.785 2.197 1.22.854 1.709 1.83.488.855.732 2.198.245 1.22.367 3.174.244 1.831.244 4.639 0 3.296-.244 5.37-.122 2.076-.61 3.297-.367 1.22-1.1 1.709-.732.366-1.708.366-1.099 0-3.418-1.22-2.32-1.344-5.86-2.808-3.418-1.465-8.056-2.686-4.517-1.343-10.376-1.343-4.15 0-7.202.855-3.052.854-5.005 2.441t-2.93 3.784q-.977 2.075-.977 4.517 0 3.784 2.32 6.348t6.103 4.516 8.545 3.662q4.883 1.71 9.766 3.784 5.005 1.954 9.765 4.64 4.883 2.685 8.667 6.59 3.785 3.907 6.104 9.4 2.32 5.371 2.32 12.818",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40.002,
            d: "M843.146 722.01a342.224 167.455 0 0 1-342.224 167.456A342.224 167.455 0 0 1 158.7 722.01a342.224 167.455 0 0 1 342.223-167.455A342.224 167.455 0 0 1 843.146 722.01Z",
            transform: "skewY(.891)scale(.99988 1)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
          "path",
          {
            stroke: "none",
            d: "M604.273 652.167q0 6.775-1.648 9.522-1.648 2.563-4.76 2.563h-40.65q6.775 5.127 12.085 12.452 5.493 7.14 9.338 15.93 3.846 8.606 6.043 18.677 2.197 9.887 2.197 20.507 0 19.043-4.76 33.692-4.761 14.465-14.65 26.184-9.704 11.535-25.085 18.31t-34.24 6.775q-20.691 0-35.523-6.042-14.648-6.226-24.353-17.578-9.521-11.536-14.465-27.832-4.944-16.297-4.944-36.438 0-20.325 5.493-36.988 5.676-16.662 16.48-28.381t27.1-17.944q16.479-6.409 38.451-6.409h81.3q2.197 0 3.478.732 1.282.733 2.014 2.38.733 1.649.916 4.03.183 2.38.183 5.858m-48.34 81.116q0-10.803-2.014-20.874-1.831-10.254-5.86-19.043-4.028-8.972-10.436-16.296-6.226-7.507-14.649-12.818h-7.324q-14.282 0-24.902 4.761-10.437 4.578-17.212 13-6.775 8.424-10.071 19.96-3.113 11.535-3.113 25.268 0 13.366 2.564 25.085 2.563 11.536 8.24 20.325 5.859 8.606 15.197 13.733 9.339 4.944 23.071 4.944 22.522 0 34.424-14.832 12.085-15.015 12.085-43.213",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 40,
            d: "M945.323 263.687a199.64 198.45 0 0 1-199.64 198.45 199.64 198.45 0 0 1-199.638-198.45 199.64 198.45 0 0 1 199.639-198.45 199.64 198.45 0 0 1 199.639 198.45Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
          "path",
          {
            stroke: "none",
            d: "M751.057 318.414q0 3.418-.367 5.859-.366 2.32-1.098 3.784-.61 1.343-1.465 1.953t-1.953.61h-87.159q-.976 0-1.83-.61t-1.587-1.953q-.61-1.465-.977-3.784-.366-2.441-.366-5.86 0-3.54.244-5.859.366-2.441.976-3.906.733-1.465 1.587-2.075.855-.733 1.953-.733h29.42V203.057l-25.391 14.038q-2.808 1.343-4.639 1.71-1.709.243-2.807-.733-.977-1.099-1.343-3.662-.366-2.564-.366-7.202 0-2.93.122-4.761.122-1.953.61-3.296t1.343-2.197 2.32-1.831l33.935-21.973q.61-.488 1.464-.732.977-.367 2.442-.489 1.465-.244 3.784-.244 2.441-.122 6.226-.122 4.638 0 7.446.244 2.93.122 4.394.61 1.465.367 1.954 1.1.488.732.488 1.83V305.84h25.757q1.098 0 1.953.733.976.61 1.587 2.075.732 1.465.976 3.906.367 2.32.367 5.86m103.759-22.705q0 9.277-3.54 16.357-3.418 7.08-9.765 11.84-6.348 4.762-15.015 7.08-8.667 2.442-18.799 2.442-6.103 0-11.719-.976-5.493-.855-9.887-2.198-4.395-1.464-7.325-2.93-2.93-1.464-4.272-2.685-1.343-1.343-2.075-4.028-.733-2.808-.733-8.179 0-3.54.245-5.615.244-2.197.732-3.418.488-1.343 1.22-1.709.733-.488 1.832-.488 1.343 0 3.906 1.587 2.686 1.464 6.592 3.296 3.906 1.83 9.033 3.417 5.249 1.587 11.84 1.587 4.151 0 7.325-.854 3.296-.855 5.615-2.441 2.442-1.587 3.662-4.029 1.221-2.441 1.221-5.615 0-3.662-2.32-6.226-2.197-2.685-5.98-4.638-3.663-1.953-8.424-3.662-4.638-1.71-9.643-3.785-4.883-2.075-9.644-4.76-4.638-2.686-8.423-6.592-3.662-3.906-5.981-9.4-2.197-5.493-2.197-13.183 0-7.813 3.052-14.282 3.051-6.592 8.789-11.23 5.737-4.64 13.916-7.203 8.3-2.563 18.554-2.563 5.127 0 9.888.732 4.883.732 8.789 1.831t6.592 2.441q2.685 1.221 3.784 2.198 1.22.854 1.709 1.83.488.855.732 2.198.245 1.22.367 3.174.244 1.83.244 4.639 0 3.295-.244 5.37-.122 2.076-.61 3.297-.367 1.22-1.1 1.708-.732.367-1.708.367-1.099 0-3.418-1.221-2.32-1.343-5.86-2.808-3.418-1.464-8.056-2.685-4.517-1.343-10.376-1.343-4.15 0-7.202.855-3.052.854-5.005 2.441t-2.93 3.784q-.977 2.075-.977 4.517 0 3.784 2.32 6.347t6.103 4.517 8.545 3.662q4.883 1.71 9.766 3.784 5.005 1.953 9.765 4.639 4.883 2.686 8.667 6.592 3.785 3.906 6.104 9.4 2.32 5.37 2.32 12.817",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0
          }
        )
      ]
    }
  );
  var Lcao_default = SvgLcao;

  // build/lib-react-tsx/structure/LewisNitrogen.tsx
  var React146 = __toESM(require_react(), 1);
  var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
  var SvgLewisNitrogen = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime146.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("path", { fill: "none", d: "M500 100h150v50H500z" }),
        /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
          "path",
          {
            stroke: "none",
            d: "M671.875 844.063q0 8.984-3.125 16.015t-8.594 11.719q-5.078 4.687-12.5 7.031-7.031 1.953-14.453 1.953h-43.75q-13.672 0-23.828-2.734-9.766-2.735-18.36-9.766-8.202-7.422-16.015-19.531-7.812-12.5-17.578-32.031L387.89 580.39q-10.938-21.094-22.266-45.313-11.328-24.61-20.312-47.656h-.782q1.563 28.125 2.344 56.25.781 27.734.781 57.422v264.453q0 3.906-2.344 7.031-1.953 3.125-7.421 5.469-5.079 1.953-14.063 3.125t-23.047 1.172q-13.672 0-22.656-1.172t-14.062-3.125q-5.079-2.344-7.032-5.469t-1.953-7.031V411.25q0-18.36 10.547-27.344 10.938-9.375 26.563-9.375h55.078q14.843 0 25 2.735 10.156 2.343 17.968 8.203 8.204 5.86 15.235 16.406 7.031 10.156 14.453 25.39l98.437 184.766q8.594 16.797 16.797 33.203 8.594 16.016 16.407 32.422 7.812 16.016 15.234 31.64 7.422 15.626 14.453 31.25h.39q-1.171-27.343-1.952-57.03-.391-29.688-.391-56.641v-237.11q0-3.906 2.344-7.03 2.343-3.126 7.812-5.47t14.453-3.124q8.985-1.172 23.047-1.172 13.281 0 22.266 1.172 8.984.78 13.672 3.125 5.078 2.343 7.03 5.468 1.954 3.125 1.954 7.032z",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            transform: "translate(35.086 -146.565)",
            wordSpacing: 0
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M398.638 72c27.52 0 49.793 22.273 49.793 49.792s-22.273 49.793-49.793 49.793-49.792-22.273-49.792-49.793S371.118 72 398.638 72M600 70c27.52 0 49.792 22.273 49.792 49.792S627.52 169.585 600 169.585s-49.793-22.273-49.793-49.793S572.48 70 600 70M174 400c27.52 0 49.792 22.273 49.792 49.792S201.52 499.585 174 499.585s-49.793-22.273-49.793-49.793S146.48 400 174 400m648 0c27.52 0 49.792 22.273 49.792 49.792S849.52 499.585 822 499.585s-49.793-22.273-49.793-49.793S794.48 400 822 400M500 778c27.52 0 49.792 22.273 49.792 49.792S527.52 877.585 500 877.585s-49.793-22.273-49.793-49.793S472.48 778 500 778"
          }
        )
      ]
    }
  );
  var LewisNitrogen_default = SvgLewisNitrogen;

  // build/lib-react-tsx/structure/LewisOxygen.tsx
  var React147 = __toESM(require_react(), 1);
  var import_jsx_runtime147 = __toESM(require_jsx_runtime(), 1);
  var SvgLewisOxygen = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime147.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M410.638 50c27.52 0 49.793 22.273 49.793 49.792s-22.273 49.793-49.793 49.793-49.792-22.273-49.792-49.793S383.118 50 410.638 50m167.22 0c27.518 0 49.792 22.273 49.792 49.792s-22.274 49.793-49.792 49.793c-27.403 0-49.795-22.273-49.795-49.793S550.455 50 577.858 50"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 58.305,
            d: "M384.168 280.304c-64.136 67.401-64.136 176.78 0 244.183 64.252 67.517 168.385 67.517 232.521 0 64.25-67.403 64.25-176.782 0-244.183-64.136-67.517-168.27-67.517-232.521 0"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M237.356 329.048c0 27.52-22.273 49.79-49.793 49.79s-49.792-22.27-49.792-49.79 22.273-49.793 49.792-49.793 49.793 22.273 49.793 49.793m0 167.334c0 27.403-22.273 49.677-49.793 49.677s-49.792-22.274-49.792-49.677c0-27.518 22.273-49.792 49.792-49.792s49.793 22.274 49.793 49.792m571.389-145.878c27.404 0 49.675 22.272 49.675 49.792s-22.271 49.792-49.675 49.792c-27.52 0-49.794-22.27-49.794-49.792 0-27.52 22.273-49.792 49.794-49.792M500.428 651.007c27.521 0 49.792 22.274 49.792 49.792 0 27.52-22.27 49.795-49.792 49.795-27.52 0-49.793-22.274-49.793-49.795 0-27.518 22.272-49.792 49.793-49.792"
          }
        )
      ]
    }
  );
  var LewisOxygen_default = SvgLewisOxygen;

  // build/lib-react-tsx/structure/Magnifier5.tsx
  var React148 = __toESM(require_react(), 1);
  var import_jsx_runtime148 = __toESM(require_jsx_runtime(), 1);
  var SvgMagnifier5 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("path", { d: "M580.305 27.525c-182.445 0-331.588 149.146-331.588 331.59 0 181.776 148.064 330.45 329.596 331.537a27 27 0 0 0 1.992.051c182.444 0 331.59-149.143 331.59-331.588 0-182.444-149.146-331.59-331.59-331.59zm0 53.409c153.404 0 278.181 124.777 278.181 278.181S733.71 637.297 580.305 637.297s-278.18-124.778-278.18-278.182S426.901 80.934 580.305 80.934z" }),
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("path", { d: "M349.785 547.707a26.7 26.7 0 0 0-22.53 10.7L101.993 860.013a26.707 26.707 0 1 0 42.791 31.96l209.268-280.19 36.043 26.974-209.3 280.234a26.707 26.707 0 1 0 42.79 31.96L448.85 649.343a26.707 26.707 0 0 0-5.395-37.36l-78.803-58.978a26.7 26.7 0 0 0-14.867-5.299z" }),
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("path", { d: "M203.086 907.97a26.7 26.7 0 0 0-22.313 11.05c-3.228 4.333-9.171 5.195-13.582 1.91a26.707 26.707 0 1 0-31.904 42.83c27.7 20.634 67.628 14.94 88.318-12.836a26.707 26.707 0 0 0-20.52-42.953Z" }),
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("path", { d: "M129.361 900.033a26.707 26.707 0 0 0-14.65 48.254l20.478 15.4a26.707 26.707 0 1 0 32.1-42.685l-20.478-15.4a26.7 26.7 0 0 0-17.45-5.569z" }),
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("path", { d: "M124.285 848.992a26.7 26.7 0 0 0-22.312 11.049c-20.634 27.7-14.941 67.63 12.836 88.32a26.707 26.707 0 1 0 31.904-42.832c-4.334-3.228-5.195-9.172-1.91-13.582a26.707 26.707 0 0 0-20.518-42.955zm456.02-752.33c-144.618 0-262.617 117.992-262.617 262.453 0 144.157 117.507 261.933 261.707 262.43a12 12 0 0 0 .91.023c144.461 0 262.453-117.991 262.453-262.453S724.766 96.662 580.305 96.662zm0 24.574c131.098 0 237.879 106.781 237.879 237.88 0 131.097-106.781 237.878-237.88 237.878-131.27 0-238.042-106.78-238.042-237.879s106.773-237.879 238.043-237.879z" }),
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(
          "path",
          {
            stroke: "none",
            d: "M682.207 417.602c0 16.219-2.785 30.8-8.52 43.578-5.733 12.943-13.597 23.755-23.918 32.438-10.485 8.683-22.772 15.564-37.353 20.151-14.417 4.587-30.636 7.045-48.33 7.045-9.338 0-18.185-.655-26.54-1.802q-12.533-1.72-22.608-4.424c-6.717-1.802-12.123-3.604-16.383-5.406s-7.045-3.277-8.519-4.423c-1.147-1.147-2.294-2.458-2.949-3.768a68 68 0 0 1-1.474-5.08 67 67 0 0 1-.82-7.371c-.163-2.95-.163-6.39-.163-10.485 0-4.26.163-8.028.491-10.977q.492-4.67 1.475-7.372.982-2.703 2.457-3.932c.983-.82 1.966-1.147 3.277-1.147 1.474 0 3.931.82 7.044 2.621 3.277 1.802 7.373 3.768 12.615 6.062 5.243 2.13 11.632 4.096 19.004 5.734 7.372 1.966 16.383 2.785 26.704 2.785 9.01 0 17.202-.983 24.574-2.785 7.537-1.802 13.762-4.915 18.84-9.01 5.243-4.096 9.011-9.339 11.96-15.564 2.785-6.062 4.096-13.598 4.096-22.28 0-7.537-1.147-14.09-3.44-19.824-2.294-5.898-6.062-10.813-10.977-14.909-4.915-3.931-11.468-7.044-19.332-9.01-7.863-1.966-17.53-3.113-28.834-3.113q-13.515 0-24.574 1.475c-7.536.983-14.417 1.31-20.97 1.31-4.423 0-7.7-1.147-9.666-3.276-1.802-2.294-2.785-6.554-2.785-12.451v-130.9c0-6.225 1.147-10.812 3.604-13.433 2.294-2.785 6.226-4.096 11.468-4.096H654.52q1.965 0 3.932 1.474c1.147.82 2.293 2.294 3.112 4.26.82 2.13 1.475 4.751 1.966 8.028.328 3.44.492 7.372.492 12.123 0 9.174-.82 16.055-2.458 20.15-1.638 4.26-3.931 6.39-7.044 6.39H547.212v64.549c5.57-.656 10.977-.983 16.22-1.147 5.406-.164 10.976-.328 16.873-.328 16.383 0 30.964 1.966 43.579 5.734s23.264 9.338 31.783 16.71c8.683 7.537 15.236 16.547 19.823 27.524 4.423 10.976 6.717 23.755 6.717 38.172"
          }
        )
      ]
    }
  );
  var Magnifier5_default = SvgMagnifier5;

  // build/lib-react-tsx/structure/Orbital.tsx
  var React149 = __toESM(require_react(), 1);
  var import_jsx_runtime149 = __toESM(require_jsx_runtime(), 1);
  var SvgOrbital = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
          "path",
          {
            fill: "none",
            stroke: "#fefefe",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 68.991,
            d: "M495.208 408.23c-19.731 19.591-94.242 91.617-105.556 105.143-102.382 133.565.138 234.568 105.418 236.36 108.178 1.795 219.39-99.07 114.248-236.36-26.352-31.048-63.885-64.578-104.865-105.558-5.795-5.795-3.174-5.519-9.245.415"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
          "path",
          {
            stroke: "none",
            d: "M495.208 408.23c-19.731 19.591-94.242 91.617-105.556 105.143-102.382 133.565.138 234.568 105.418 236.36 108.178 1.795 219.39-99.07 114.248-236.36-26.352-31.048-63.885-64.578-104.865-105.558-5.795-5.795-3.174-5.519-9.245.415"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
          "path",
          {
            fill: "none",
            stroke: "#fefefe",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 41.395,
            d: "M499.486 313.16c156.197 0 283 56.158 283 125.426 0 69.126-126.803 125.287-283 125.287-156.334 0-283-56.16-283-125.287 0-69.268 126.666-125.426 283-125.426m0 80.581c97.414 0 176.34 20.008 176.34 44.845 0 24.696-78.926 44.705-176.34 44.705-97.416 0-176.34-20.009-176.34-44.705 0-24.837 78.924-44.845 176.34-44.845"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M499.486 313.16c156.197 0 283 56.158 283 125.426 0 69.126-126.803 125.287-283 125.287-156.334 0-283-56.16-283-125.287 0-69.268 126.666-125.426 283-125.426m0 80.581c97.414 0 176.34 20.008 176.34 44.845 0 24.696-78.926 44.705-176.34 44.705-97.416 0-176.34-20.009-176.34-44.705 0-24.837 78.924-44.845 176.34-44.845"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
          "path",
          {
            fill: "none",
            stroke: "#fefefe",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 41.395,
            d: "M495.208 386.29c-19.731-18.49-94.242-86.928-105.556-99.623C287.27 160 389.79 64.517 495.07 62.723c108.178-1.794 219.39 93.828 114.248 223.944-26.352 29.39-63.885 61.126-104.865 99.9-5.795 5.518-3.174 5.38-9.245-.277"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
          "path",
          {
            stroke: "none",
            d: "M495.208 386.29c-19.731-18.49-94.242-86.928-105.556-99.623C287.27 160 389.79 64.517 495.07 62.723c108.178-1.794 219.39 93.828 114.248 223.944-26.352 29.39-63.885 61.126-104.865 99.9-5.795 5.518-3.174 5.38-9.245-.277"
          }
        )
      ]
    }
  );
  var Orbital_default = SvgOrbital;

  // build/lib-react-tsx/structure/SearchLipinski.tsx
  var React150 = __toESM(require_react(), 1);
  var import_jsx_runtime150 = __toESM(require_jsx_runtime(), 1);
  var SvgSearchLipinski = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime150.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime150.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.85,
            d: "M423.177 667.09c-166.181 0-301.72-135.541-301.72-301.721 0-166.183 135.538-301.726 301.72-301.726 166.18 0 301.725 135.544 301.725 301.726 0 166.18-135.544 301.72-301.725 301.72",
            className: "fil0 str0",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.868,
            d: "M875.32 876.926 652.38 578.482l-78.036 58.23 222.94 298.444",
            className: "fil0 str1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 52.849,
            d: "M797.267 935.193c11.855 15.876 34.551 19.165 50.425 7.306m.002-.001L868 927.33m0 0c15.874-11.858 19.162-34.545 7.304-50.418",
            className: "fil0 str1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 24.319,
            d: "M423.177 612.992c-136.382 0-247.623-111.241-247.623-247.623 0-136.389 111.241-247.623 247.623-247.623 136.387 0 247.623 111.234 247.623 247.623 0 136.382-111.236 247.623-247.623 247.623",
            className: "fil0 str2",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(
          "path",
          {
            strokeWidth: 74.462,
            d: "M527.549 415.683c0 16.134-2.833 30.536-8.421 43.206-5.666 12.67-13.536 23.372-23.766 32.03-10.23 8.656-22.509 15.345-36.91 19.91-14.323 4.644-30.299 6.925-47.848 6.925-9.207 0-17.942-.55-26.285-1.731-8.263-1.101-15.74-2.598-22.35-4.327-6.611-1.811-12.041-3.543-16.213-5.352-4.249-1.732-7.004-3.227-8.341-4.33-1.258-1.18-2.281-2.44-2.912-3.855a27 27 0 0 1-1.495-4.957 66 66 0 0 1-.786-7.241q-.238-4.368-.237-10.388c0-4.25.157-7.949.472-10.94s.788-5.43 1.495-7.239c.708-1.889 1.497-3.148 2.44-3.935.945-.788 1.968-1.18 3.226-1.18 1.497 0 3.857.943 7.004 2.675 3.149 1.81 7.32 3.698 12.436 5.902 5.193 2.125 11.49 4.093 18.808 5.823 7.398 1.811 16.211 2.677 26.521 2.677 8.893 0 17-.945 24.317-2.755 7.319-1.81 13.537-4.8 18.574-8.892 5.115-4.093 8.97-9.208 11.804-15.347 2.755-6.139 4.093-13.537 4.093-22.113 0-7.398-1.103-13.93-3.464-19.676-2.282-5.824-5.901-10.702-10.781-14.637-4.958-4.014-11.333-7.004-19.202-9.05-7.79-1.968-17.314-2.991-28.567-2.991q-13.34 0-24.318 1.417a161 161 0 0 1-20.62 1.337c-4.484 0-7.632-1.1-9.6-3.305-1.89-2.204-2.833-6.374-2.833-12.355V231.452c0-6.138 1.18-10.624 3.54-13.3s6.218-4.014 11.413-4.014h141.34c1.417 0 2.677.473 3.935 1.418 1.182.865 2.283 2.36 3.07 4.327.865 2.046 1.496 4.643 1.888 7.949.394 3.306.551 7.318.551 11.884 0 9.207-.786 15.896-2.44 20.066-1.573 4.172-3.935 6.218-7.004 6.218H394v63.903q8.145-.945 16.054-1.18a563 563 0 0 1 16.684-.237c16.132 0 30.534 1.888 43.047 5.666s23.06 9.287 31.558 16.605c8.579 7.32 15.031 16.37 19.517 27.23 4.407 10.781 6.69 23.373 6.69 37.696z",
            className: "fil1",
            clipRule: "evenodd",
            imageRendering: "optimizeQuality",
            shapeRendering: "geometricPrecision",
            textRendering: "geometricPrecision"
          }
        )
      ]
    }
  );
  var SearchLipinski_default = SvgSearchLipinski;

  // build/lib-react-tsx/structure/Search.tsx
  var React151 = __toESM(require_react(), 1);
  var import_jsx_runtime151 = __toESM(require_jsx_runtime(), 1);
  var SvgSearch3 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime151.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)(
          "g",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(
                "path",
                {
                  strokeWidth: 46.298,
                  d: "M415.199 668.968c-173.539 0-315.081-141.541-315.081-315.079 0-173.545 141.542-315.093 315.081-315.093 173.553 0 315.099 141.548 315.099 315.093 0 173.538-141.546 315.079-315.099 315.079"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(
                "path",
                {
                  strokeWidth: 46.296,
                  d: "M887.36 888.085 654.566 576.416l-81.491 60.867 232.794 311.669m0 0c12.383 16.576 36.082 20.013 52.657 7.634m0 0 21.208-15.843m0 0c16.576-12.389 20.012-36.083 7.626-52.656"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(
                "path",
                {
                  strokeWidth: 21.304,
                  d: "M415.199 612.475c-142.419 0-258.587-116.169-258.587-258.586 0-142.43 116.168-258.59 258.587-258.59 142.437 0 258.598 116.162 258.598 258.59 0 142.416-116.161 258.586-258.598 258.586"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(
                "path",
                {
                  strokeWidth: 40.213,
                  d: "m266.632 268.108 148.567-85.779 148.583 85.779v171.553l-148.583 85.78-148.567-85.78z"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var Search_default3 = SvgSearch3;

  // build/lib-react-tsx/structure/So4.tsx
  var React152 = __toESM(require_react(), 1);
  var import_jsx_runtime152 = __toESM(require_jsx_runtime(), 1);
  var SvgSo4 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime152.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            stroke: "none",
            d: "M449.65 685.624c-3.342 12.496-16.276 20.051-28.918 16.566-12.498-3.342-20.053-16.278-16.712-28.92zm0 0 149.093-556.129-45.63-12.207L404.021 673.27zm103.464-568.336c3.343-12.642 16.279-20.053 28.92-16.71 12.643 3.341 20.052 16.274 16.709 28.917z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M594.966 52.332c-36.472-9.737-73.82 11.916-83.556 48.245s11.916 73.82 48.247 83.557c36.325 9.736 73.675-11.916 83.41-48.245 9.735-36.33-11.772-73.821-48.1-83.557M443.11 618.776c-36.328-9.735-73.675 11.772-83.41 48.102-9.737 36.475 11.77 73.821 48.245 83.556 36.328 9.735 73.675-11.772 83.41-48.244 9.737-36.329-11.77-73.675-48.245-83.414"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 58.853,
            d: "M356.939 362.729c-21.362 79.779 26.01 161.739 105.79 183.1 79.779 21.36 161.739-26.013 183.1-105.791 21.36-79.634-26.014-161.738-105.79-183.1-79.635-21.362-161.74 26.012-183.1 105.791"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            stroke: "none",
            d: "M785.623 453.114c12.497 3.343 20.053 16.278 16.567 28.92-3.343 12.643-16.277 20.052-28.92 16.71zm0 0L229.495 304.021l-12.207 45.63 555.981 149.093zM217.288 349.65c-12.642-3.342-20.054-16.275-16.711-28.918 3.343-12.497 16.276-20.054 28.918-16.711z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M152.331 307.944c-9.735 36.33 11.916 73.676 48.246 83.412s73.82-11.77 83.557-48.245c9.737-36.33-11.916-73.676-48.245-83.412-36.33-9.736-73.822 11.77-83.558 48.245"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            fill: "#fefefe",
            fillRule: "evenodd",
            stroke: "none",
            d: "M375.539 367.67c-18.6 69.46 22.669 140.959 92.13 159.559s140.96-22.67 159.56-92.133c18.6-69.46-22.67-140.957-92.133-159.557-69.46-18.601-140.957 22.669-159.557 92.13"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            fillRule: "evenodd",
            stroke: "none",
            d: "M718.776 459.657c-9.736 36.325 11.772 73.675 48.102 83.41 36.475 9.735 73.822-11.772 83.556-48.101 9.735-36.472-11.771-73.82-48.244-83.556-36.33-9.736-73.675 11.916-83.414 48.247"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 14.532,
            d: "M455.754 418.53c0 3.633-.72 6.83-2.035 9.591-1.31 2.907-3.197 5.377-5.668 7.266-2.324 2.035-5.085 3.488-8.282 4.505-3.343 1.017-6.686 1.453-10.463 1.453-2.616 0-5.087-.145-7.265-.582a50 50 0 0 1-5.96-1.598c-1.743-.726-3.196-1.308-4.358-2.035-1.167-.726-2.035-1.308-2.471-1.743-.433-.437-.88-1.018-1.023-1.89-.288-.725-.288-1.598-.288-2.906 0-.872 0-1.598.144-2.18 0-.58.144-1.017.288-1.453.144-.29.288-.58.576-.726s.577-.146.88-.146c.575 0 1.31.292 2.325 1.018 1.023.58 2.324 1.308 3.922 2.18 1.599.725 3.633 1.598 5.813 2.179 2.325.726 4.941 1.163 7.847 1.163 2.326 0 4.36-.29 6.25-1.018 1.743-.582 3.34-1.453 4.795-2.47 1.31-1.163 2.324-2.47 3.051-4.069.72-1.598 1.023-3.488 1.023-5.522 0-2.18-.432-4.069-1.454-5.522-1.023-1.599-2.325-3.052-3.923-4.214a41.4 41.4 0 0 0-5.667-3.197c-2.034-1.018-4.214-2.035-6.394-3.052-2.325-1.017-4.359-2.18-6.539-3.342-2.034-1.309-3.925-2.761-5.523-4.36-1.598-1.744-3.052-3.632-4.069-5.958-1.023-2.325-1.452-4.94-1.452-8.137s.576-6.104 1.743-8.72c1.167-2.47 2.907-4.65 4.941-6.394s4.65-3.051 7.556-3.923c2.907-.872 5.96-1.308 9.3-1.308q2.617 0 5.232.436c1.744.292 3.343.727 4.941 1.163 1.598.582 2.906 1.017 4.069 1.744 1.311.581 2.034 1.018 2.47 1.453.288.437.576.727.734.872.145.291.145.582.289.872 0 .29.144.726.144 1.163 0 .582.144 1.162.144 1.889 0 .726-.144 1.453-.144 2.034 0 .437-.144 1.017-.288 1.308q-.217.655-.433.872c-.288.146-.576.291-.864.291-.433 0-1.023-.29-2.035-.872-.879-.58-2.034-1.162-3.488-1.889-1.311-.726-2.906-1.308-4.795-1.889-1.89-.582-3.924-.871-6.25-.871q-3.268 0-5.666.871c-1.598.581-2.906 1.309-3.924 2.325-1.023.872-1.888 2.035-2.325 3.343a10.5 10.5 0 0 0-.879 4.214c0 2.18.576 4.069 1.6 5.667 1.022 1.454 2.323 2.906 3.923 4.07 1.743 1.307 3.632 2.324 5.667 3.341l6.54 3.052c2.178 1.017 4.358 2.18 6.393 3.342q3.27 1.744 5.667 4.36c1.745 1.598 3.051 3.633 4.069 5.812 1.023 2.325 1.599 4.942 1.599 8.138zm89.369-18.019c0 6.249-.72 11.916-2.324 17.002-1.454 5.087-3.633 9.3-6.54 12.933-3.052 3.488-6.684 6.249-11.188 8.138-4.36 1.89-9.592 2.761-15.55 2.761-5.813 0-10.899-.871-15.113-2.616-4.215-1.743-7.847-4.214-10.608-7.556-2.76-3.342-4.795-7.411-6.249-12.352-1.311-4.94-2.034-10.608-2.034-17.002 0-6.103.72-11.626 2.325-16.711 1.453-4.941 3.633-9.3 6.684-12.788 2.906-3.488 6.54-6.249 11.044-8.138 4.506-1.889 9.59-2.761 15.549-2.761 5.814 0 10.754.871 14.967 2.47 4.215 1.744 7.849 4.36 10.61 7.557 2.76 3.342 4.94 7.41 6.248 12.352 1.453 4.795 2.179 10.463 2.179 16.711m-10.899.726c0-4.36-.432-8.573-1.167-12.352-.879-3.778-2.178-6.975-3.923-9.881-1.89-2.761-4.213-4.94-7.265-6.394-3.052-1.599-6.83-2.325-11.335-2.325-4.504 0-8.284.726-11.335 2.47-3.052 1.599-5.522 3.924-7.41 6.685-1.89 2.906-3.198 6.103-4.07 9.881-.879 3.779-1.167 7.702-1.167 11.77 0 4.506.288 8.72 1.023 12.644.865 3.778 2.18 7.12 3.924 9.881s4.214 4.94 7.266 6.54c3.052 1.598 6.83 2.325 11.334 2.325 4.505 0 8.283-.872 11.48-2.616 3.052-1.599 5.522-3.924 7.41-6.685 1.891-2.906 3.198-6.248 4.07-10.027.72-3.778 1.167-7.702 1.167-11.916z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            stroke: "none",
            d: "M455.754 418.53c0 3.633-.72 6.83-2.035 9.591-1.31 2.907-3.197 5.377-5.668 7.266-2.324 2.035-5.085 3.488-8.282 4.505-3.343 1.017-6.686 1.453-10.463 1.453-2.616 0-5.087-.145-7.265-.582a50 50 0 0 1-5.96-1.598c-1.743-.726-3.196-1.308-4.358-2.035-1.167-.726-2.035-1.308-2.471-1.743-.433-.437-.88-1.018-1.023-1.89-.288-.725-.288-1.598-.288-2.906 0-.872 0-1.598.144-2.18 0-.58.144-1.017.288-1.453.144-.29.288-.58.576-.726s.577-.146.88-.146c.575 0 1.31.292 2.325 1.018 1.023.58 2.324 1.308 3.922 2.18 1.599.725 3.633 1.598 5.813 2.179 2.325.726 4.941 1.163 7.847 1.163 2.326 0 4.36-.29 6.25-1.018 1.743-.582 3.34-1.453 4.795-2.47 1.31-1.163 2.324-2.47 3.051-4.069.72-1.598 1.023-3.488 1.023-5.522 0-2.18-.432-4.069-1.454-5.522-1.023-1.599-2.325-3.052-3.923-4.214a41.4 41.4 0 0 0-5.667-3.197c-2.034-1.018-4.214-2.035-6.394-3.052-2.325-1.017-4.359-2.18-6.539-3.342-2.034-1.309-3.925-2.761-5.523-4.36-1.598-1.744-3.052-3.632-4.069-5.958-1.023-2.325-1.452-4.94-1.452-8.137s.576-6.104 1.743-8.72c1.167-2.47 2.907-4.65 4.941-6.394s4.65-3.051 7.556-3.923c2.907-.872 5.96-1.308 9.3-1.308q2.617 0 5.232.436c1.744.292 3.343.727 4.941 1.163 1.598.582 2.906 1.017 4.069 1.744 1.311.581 2.034 1.018 2.47 1.453.288.437.576.727.734.872.145.291.145.582.289.872 0 .29.144.726.144 1.163 0 .582.144 1.162.144 1.889 0 .726-.144 1.453-.144 2.034 0 .437-.144 1.017-.288 1.308q-.217.655-.433.872c-.288.146-.576.291-.864.291-.433 0-1.023-.29-2.035-.872-.879-.58-2.034-1.162-3.488-1.889-1.311-.726-2.906-1.308-4.795-1.889-1.89-.582-3.924-.871-6.25-.871q-3.268 0-5.666.871c-1.598.581-2.906 1.309-3.924 2.325-1.023.872-1.888 2.035-2.325 3.343a10.5 10.5 0 0 0-.879 4.214c0 2.18.576 4.069 1.6 5.667 1.022 1.454 2.323 2.906 3.923 4.07 1.743 1.307 3.632 2.324 5.667 3.341l6.54 3.052c2.178 1.017 4.358 2.18 6.393 3.342q3.27 1.744 5.667 4.36c1.745 1.598 3.051 3.633 4.069 5.812 1.023 2.325 1.599 4.942 1.599 8.138zm89.369-18.019c0 6.249-.72 11.916-2.324 17.002-1.454 5.087-3.633 9.3-6.54 12.933-3.052 3.488-6.684 6.249-11.188 8.138-4.36 1.89-9.592 2.761-15.55 2.761-5.813 0-10.899-.871-15.113-2.616-4.215-1.743-7.847-4.214-10.608-7.556-2.76-3.342-4.795-7.411-6.249-12.352-1.311-4.94-2.034-10.608-2.034-17.002 0-6.103.72-11.626 2.325-16.711 1.453-4.941 3.633-9.3 6.684-12.788 2.906-3.488 6.54-6.249 11.044-8.138 4.506-1.889 9.59-2.761 15.549-2.761 5.814 0 10.754.871 14.967 2.47 4.215 1.744 7.849 4.36 10.61 7.557 2.76 3.342 4.94 7.41 6.248 12.352 1.453 4.795 2.179 10.463 2.179 16.711m-10.899.726c0-4.36-.432-8.573-1.167-12.352-.879-3.778-2.178-6.975-3.923-9.881-1.89-2.761-4.213-4.94-7.265-6.394-3.052-1.599-6.83-2.325-11.335-2.325-4.504 0-8.284.726-11.335 2.47-3.052 1.599-5.522 3.924-7.41 6.685-1.89 2.906-3.198 6.103-4.07 9.881-.879 3.779-1.167 7.702-1.167 11.77 0 4.506.288 8.72 1.023 12.644.865 3.778 2.18 7.12 3.924 9.881s4.214 4.94 7.266 6.54c3.052 1.598 6.83 2.325 11.334 2.325 4.505 0 8.283-.872 11.48-2.616 3.052-1.599 5.522-3.924 7.41-6.685 1.891-2.906 3.198-6.248 4.07-10.027.72-3.778 1.167-7.702 1.167-11.916z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 7.266,
            d: "M594.824 457.913c0 1.163-.144 2.033-.447 2.614-.288.582-.72.87-1.311.87H585.8v13.371c0 .293 0 .582-.144.728-.144.144-.289.288-.72.435a2.9 2.9 0 0 1-1.312.288c-.432 0-1.167.147-1.89.147-.865 0-1.453-.147-2.034-.147-.432 0-.864-.144-1.31-.288-.289-.147-.433-.293-.577-.435-.144-.147-.144-.435-.144-.728v-13.37H551.51c-.432 0-.72 0-1.023-.144-.288 0-.432-.293-.72-.44-.144-.288-.288-.723-.432-1.158-.145-.582-.145-1.163-.145-1.891s0-1.163.145-1.745c0-.435 0-.87.144-1.31.144-.435.144-.87.432-1.158.144-.44.288-.874.576-1.163l22.816-38.655c.144-.146.432-.437.72-.582.289-.291.735-.437 1.168-.58.432-.146 1.167-.146 1.89-.292h2.468c1.167 0 2.038 0 2.908.146.735 0 1.311.145 1.89.29.433.146.865.292 1.167.436.144.29.289.582.289.872v40.398h7.266c.432 0 1.023.288 1.31.87.29.582.448 1.456.448 2.619zm-17.148-38.22h-.144l-20.633 34.73h20.78z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
          "path",
          {
            stroke: "none",
            d: "M594.824 457.913c0 1.163-.144 2.033-.447 2.614-.288.582-.72.87-1.311.87H585.8v13.371c0 .293 0 .582-.144.728-.144.144-.289.288-.72.435a2.9 2.9 0 0 1-1.312.288c-.432 0-1.167.147-1.89.147-.865 0-1.453-.147-2.034-.147-.432 0-.864-.144-1.31-.288-.289-.147-.433-.293-.577-.435-.144-.147-.144-.435-.144-.728v-13.37H551.51c-.432 0-.72 0-1.023-.144-.288 0-.432-.293-.72-.44-.144-.288-.288-.723-.432-1.158-.145-.582-.145-1.163-.145-1.891s0-1.163.145-1.745c0-.435 0-.87.144-1.31.144-.435.144-.87.432-1.158.144-.44.288-.874.576-1.163l22.816-38.655c.144-.146.432-.437.72-.582.289-.291.735-.437 1.168-.58.432-.146 1.167-.146 1.89-.292h2.468c1.167 0 2.038 0 2.908.146.735 0 1.311.145 1.89.29.433.146.865.292 1.167.436.144.29.289.582.289.872v40.398h7.266c.432 0 1.023.288 1.31.87.29.582.448 1.456.448 2.619zm-17.148-38.22h-.144l-20.633 34.73h20.78z"
          }
        )
      ]
    }
  );
  var So4_default = SvgSo4;

  // build/lib-react-tsx/structure/StructuralIsomers.tsx
  var React153 = __toESM(require_react(), 1);
  var import_jsx_runtime153 = __toESM(require_jsx_runtime(), 1);
  var SvgStructuralIsomers = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime153.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(
          "path",
          {
            stroke: "none",
            d: "M91.996 338.219c-11.394 6.58-15.407 21.185-8.827 32.74 6.58 11.395 21.185 15.087 32.58 8.507zm0 0 391.436-225.97 23.753 41.245-391.436 225.972zm415.189-184.725c11.395-6.74 15.407-21.344 8.827-32.74-6.58-11.394-21.185-15.245-32.58-8.505zm157.278 648.643H329.201l.321-47.825h335.265zm-335.102-23.911-.16 23.91c-13.321 0-23.914-10.75-23.753-23.91.16-13.32 10.913-23.914 24.234-23.914zm-20.542-11.878L476.37 478.912l41.247 23.751L349.904 790.1Zm188.255-275.56-20.704-11.876c6.74-11.557 21.346-15.41 32.74-8.829s15.247 21.185 8.507 32.58zm20.543-12.198 167.711 287.44-41.245 24.396-167.713-287.44Zm147.008 299.636 20.703-12.198c6.742 11.394 2.731 26-8.667 32.74-11.394 6.74-26.16 3.05-32.74-8.343zM876.313 472.87c11.232 6.58 25.999 2.73 32.74-8.666 6.579-11.556 2.887-26.16-8.507-32.74zm0 0L484.876 246.9l24.235-41.407 391.435 225.972zM509.111 205.493c-11.235-6.58-26-2.566-32.74 8.827-6.58 11.396-2.89 26 8.505 32.58z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(
          "path",
          {
            stroke: "none",
            d: "M876.313 379.466c11.232 6.58 25.999 2.727 32.74-8.668 6.579-11.555 2.887-26.16-8.507-32.74zm0 0L484.876 153.494l24.235-41.405 391.435 225.97zM509.111 112.089c-11.235-6.58-26-2.569-32.74 8.827-6.58 11.393-2.89 25.998 8.505 32.578z"
          }
        )
      ]
    }
  );
  var StructuralIsomers_default = SvgStructuralIsomers;

  // build/lib-react-tsx/structure/StructuralIsomers2.tsx
  var React154 = __toESM(require_react(), 1);
  var import_jsx_runtime154 = __toESM(require_jsx_runtime(), 1);
  var SvgStructuralIsomers2 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime154.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime154.jsx)("path", { d: "M797.952 261.166q0 20.894-5.188 37.395c-3.463 11.001-8.608 20.361-15.481 28.036-6.832 7.628-15.304 13.484-25.375 17.521-10.115 4.037-21.779 6.034-35.041 6.034-13.087 0-24.485-1.686-34.247-5.102-9.757-3.416-17.876-8.649-24.351-15.66-6.523-7.052-11.401-15.969-14.641-26.792-3.236-10.824-4.88-23.644-4.88-38.459 0-13.618 1.731-25.861 5.236-36.73 3.459-10.867 8.604-20.094 15.436-27.725q10.245-11.443 25.417-17.564c10.069-4.081 21.824-6.079 35.131-6.079 12.775 0 23.997 1.686 33.759 5.057 9.711 3.373 17.876 8.562 24.396 15.57 6.563 7.054 11.488 15.881 14.815 26.616 3.376 10.689 5.014 23.29 5.014 37.882zm-35.84 1.819c0-8.873-.709-16.9-2.084-24.132-1.375-7.229-3.771-13.441-7.099-18.585-3.327-5.146-7.763-9.139-13.306-11.932-5.548-2.839-12.466-4.26-20.806-4.26-8.383 0-15.437 1.598-21.07 4.747-5.589 3.194-10.16 7.407-13.619 12.687-3.463 5.278-5.899 11.444-7.364 18.497-1.422 7.098-2.13 14.551-2.13 22.447 0 9.183.71 17.433 2.084 24.751 1.378 7.32 3.727 13.574 7.013 18.763 3.283 5.19 7.719 9.181 13.262 11.887 5.542 2.751 12.51 4.126 20.937 4.126 8.387 0 15.39-1.597 21.024-4.703 5.638-3.106 10.205-7.363 13.664-12.731q5.192-8.05 7.319-18.763c1.466-7.14 2.175-14.769 2.175-22.799zm195.842 79.534a3.46 3.46 0 0 1-.842 2.308c-.578.708-1.51 1.287-2.794 1.685q-1.932.666-5.189 1.065c-2.175.266-4.881.4-8.208.4q-5.053 0-8.382-.4c-2.171-.265-3.948-.62-5.19-1.065-1.239-.398-2.171-.977-2.705-1.685a3.46 3.46 0 0 1-.845-2.308v-68H860.9v68c0 .844-.268 1.641-.798 2.308-.531.708-1.421 1.287-2.752 1.685q-1.93.666-5.188 1.065c-2.175.266-4.925.4-8.296.4q-4.923 0-8.251-.4c-2.215-.265-3.993-.62-5.276-1.065-1.289-.398-2.22-.977-2.795-1.685a3.46 3.46 0 0 1-.845-2.308V183.673c0-.843.268-1.64.845-2.307.575-.708 1.507-1.288 2.795-1.686 1.284-.445 3.062-.8 5.276-1.065q3.328-.4 8.251-.4c3.372 0 6.121.133 8.296.4q3.258.397 5.188 1.065c1.332.398 2.221.978 2.752 1.686.53.667.798 1.465.798 2.307v61.745h62.898v-61.745c0-.843.268-1.64.845-2.307.534-.708 1.467-1.288 2.705-1.686 1.242-.445 3.02-.8 5.19-1.065q3.329-.4 8.382-.4c3.327 0 6.033.133 8.208.4q3.258.397 5.189 1.065c1.285.398 2.216.978 2.794 1.686.575.667.842 1.465.842 2.307zM584.268 503.718c0 13.926-1.73 26.394-5.188 37.394-3.459 11-8.604 20.359-15.481 28.034-6.832 7.63-15.303 13.483-25.372 17.521-10.114 4.038-21.778 6.035-35.044 6.035-13.086 0-24.488-1.686-34.245-5.104-9.76-3.413-17.876-8.648-24.354-15.656-6.52-7.054-11.399-15.968-14.64-26.793-3.238-10.824-4.879-23.645-4.879-38.456 0-13.622 1.73-25.861 5.235-36.729 3.459-10.869 8.604-20.096 15.435-27.724q10.247-11.445 25.418-17.569c10.068-4.081 21.824-6.076 35.133-6.076 12.774 0 24.001 1.686 33.759 5.057 9.714 3.371 17.875 8.561 24.396 15.569 6.568 7.052 11.489 15.882 14.816 26.615 3.37 10.69 5.011 23.287 5.011 37.882zm-35.841 1.816c0-8.87-.711-16.9-2.085-24.129-1.376-7.23-3.771-13.441-7.1-18.587-3.322-5.145-7.759-9.138-13.307-11.934-5.542-2.836-12.464-4.256-20.804-4.256-8.385 0-15.44 1.597-21.072 4.747-5.589 3.192-10.158 7.406-13.619 12.687-3.458 5.276-5.899 11.443-7.364 18.496-1.417 7.098-2.128 14.549-2.128 22.444 0 9.187.713 17.434 2.086 24.752 1.375 7.32 3.726 13.576 7.008 18.766s7.719 9.181 13.262 11.887c5.546 2.752 12.51 4.127 20.941 4.127 8.384 0 15.393-1.598 21.026-4.702 5.634-3.108 10.204-7.364 13.663-12.731 3.459-5.37 5.9-11.622 7.321-18.766 1.461-7.141 2.172-14.771 2.172-22.801z" }),
        /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 32.63,
            d: "M600.127 188.254 372.785 57M38.672 250.33 372.785 57M38.672 698.881l325.454-193.326M960.28 698.881 634.823 505.555"
          }
        )
      ]
    }
  );
  var StructuralIsomers2_default = SvgStructuralIsomers2;

  // build/lib-react-tsx/structure/UnsaturationFormula.tsx
  var React155 = __toESM(require_react(), 1);
  var import_jsx_runtime155 = __toESM(require_jsx_runtime(), 1);
  var SvgUnsaturationFormula = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime155.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime155.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime155.jsxs)(
          "g",
          {
            stroke: "none",
            fontFamily: "sans-serif",
            fontSize: 40,
            fontWeight: 400,
            letterSpacing: 0,
            style: {
              lineHeight: 1.25
            },
            wordSpacing: 0,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime155.jsx)("path", { d: "M304.813 630.063q0 5.859-.47 10.078-.234 3.984-.937 7.03-.703 2.813-1.875 4.923t-3.75 4.922q-2.578 2.578-10.078 6.797-7.265 4.218-18.047 8.203-10.547 3.75-24.375 6.328-13.594 2.578-29.531 2.578-31.172 0-56.25-9.61t-42.656-28.593Q99.266 623.5 89.89 594.906q-9.375-28.593-9.375-66.562 0-38.672 10.312-68.672 10.313-30 28.828-50.39t44.297-30.938q26.016-10.547 57.188-10.547 12.656 0 24.375 2.11t21.562 5.624q10.078 3.281 18.047 7.735 7.969 4.453 11.016 7.734 3.28 3.047 4.453 5.156 1.172 2.11 1.875 5.39.703 3.282.937 7.735.469 4.453.469 11.016 0 7.031-.469 11.953t-1.64 7.969-2.813 4.453-3.75 1.406q-3.515 0-8.906-3.984-5.39-4.219-14.063-9.14-8.437-5.157-20.39-9.141-11.719-4.22-28.125-4.22-18.047 0-32.344 7.5-14.062 7.266-24.14 21.094-9.844 13.594-15 33.047-5.157 19.454-5.157 43.829 0 26.718 5.39 46.406 5.626 19.453 15.704 32.11 10.312 12.655 24.61 18.984 14.53 6.093 32.577 6.093 16.407 0 28.36-3.75 11.953-3.984 20.39-8.672 8.672-4.687 14.063-8.437 5.625-3.75 8.672-3.75 2.344 0 3.75.937t2.344 3.75 1.406 7.97q.469 4.921.469 13.359" }),
              /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(
                "path",
                {
                  d: "M465.688 706.188q0 14.93-4.57 27.726-4.571 12.645-13.407 21.938-8.836 9.14-21.785 14.472-12.95 5.18-29.86 5.18-13.71 0-23.918-3.2-10.207-3.046-17.671-8.835-7.465-5.942-12.188-14.32-4.723-8.38-7.617-18.891-2.742-10.512-3.809-22.852-1.066-12.34-1.066-26.203 0-11.578 1.066-24.223 1.219-12.644 4.418-24.832 3.352-12.187 9.293-23.156 5.942-11.12 15.235-19.347 9.445-8.38 22.699-13.254 13.406-4.875 31.687-4.875 5.79 0 11.578.761 5.942.61 10.97 1.676 5.027 1.067 8.53 2.438 3.504 1.37 4.57 2.437 1.22.914 1.829 2.133.61 1.219.914 2.742.457 1.371.61 3.504t.152 5.18q0 4.722-.305 7.922-.152 3.046-.762 4.875-.61 1.675-1.676 2.437t-2.59.762q-1.828 0-4.722-.914-2.895-1.067-7.008-2.285-4.113-1.22-9.75-2.133-5.484-.914-12.797-.914-12.34 0-20.87 4.57-8.532 4.57-13.864 12.492-5.332 7.77-7.77 18.13t-2.59 21.937q3.352-2.133 7.618-4.266 4.418-2.133 9.445-3.656 5.18-1.524 11.121-2.438 5.942-1.066 12.645-1.066 14.93 0 25.593 4.113t17.368 11.73q6.855 7.618 10.054 18.434 3.2 10.817 3.2 24.07m-39.305 3.808q0-7.77-1.371-13.558-1.371-5.942-4.418-9.903-3.047-4.113-8.074-6.094-5.028-2.132-12.188-2.132-4.266 0-8.379.761-4.113.762-8.074 2.133t-7.617 3.352q-3.657 1.828-6.856 3.96 0 16.301 1.828 27.27 1.828 10.817 5.332 17.215 3.657 6.398 8.989 9.14 5.484 2.59 12.644 2.59 7.008 0 12.188-2.59 5.332-2.59 8.836-7.312t5.332-10.969q1.828-6.398 1.828-13.863",
                  baselineShift: "sub",
                  fontSize: "65%"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime155.jsx)("path", { d: "M745.203 667.563q0 2.343-1.64 4.218-1.407 1.875-4.922 3.047-3.516 1.172-9.375 1.875-5.86.703-14.766.703-9.14 0-15.234-.703-5.86-.703-9.375-1.875-3.282-1.172-4.922-3.047-1.407-1.875-1.407-4.218V544.984H570.126v122.578q0 2.344-1.406 4.22-1.407 1.874-4.922 3.046-3.516 1.172-9.375 1.875-5.86.703-15 .703-8.906 0-15-.703-5.86-.703-9.375-1.875-3.516-1.172-5.156-3.047-1.407-1.875-1.407-4.218V381.156q0-2.344 1.407-4.219 1.64-1.875 5.156-3.046 3.515-1.172 9.375-1.875 6.094-.704 15-.704 9.14 0 15 .704 5.86.703 9.375 1.875 3.515 1.171 4.922 3.046t1.406 4.22v111.327h113.438V381.156q0-2.344 1.406-4.219 1.64-1.875 4.922-3.046 3.515-1.172 9.375-1.875 6.093-.704 15.234-.704 8.906 0 14.766.704 5.859.703 9.375 1.875 3.515 1.171 4.922 3.046 1.64 1.875 1.64 4.22z" }),
              /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(
                "path",
                {
                  d: "M926.938 706.188q0 14.93-4.57 27.726-4.571 12.645-13.407 21.938-8.836 9.14-21.785 14.472-12.95 5.18-29.86 5.18-13.71 0-23.918-3.2-10.207-3.046-17.671-8.835-7.465-5.942-12.188-14.32-4.723-8.38-7.617-18.891-2.742-10.512-3.809-22.852-1.066-12.34-1.066-26.203 0-11.578 1.066-24.223 1.219-12.644 4.418-24.832 3.352-12.187 9.293-23.156 5.942-11.12 15.235-19.347 9.445-8.38 22.699-13.254 13.406-4.875 31.687-4.875 5.79 0 11.578.761 5.942.61 10.97 1.676 5.027 1.067 8.53 2.438 3.504 1.37 4.57 2.437 1.22.914 1.829 2.133.61 1.219.914 2.742.457 1.371.61 3.504t.152 5.18q0 4.722-.305 7.922-.152 3.046-.762 4.875-.61 1.675-1.676 2.437t-2.59.762q-1.827 0-4.722-.914-2.895-1.067-7.008-2.285-4.113-1.22-9.75-2.133-5.484-.914-12.797-.914-12.34 0-20.87 4.57-8.532 4.57-13.864 12.492-5.332 7.77-7.77 18.13t-2.59 21.937q3.352-2.133 7.618-4.266 4.418-2.133 9.445-3.656 5.18-1.524 11.121-2.438 5.942-1.066 12.645-1.066 14.93 0 25.593 4.113t17.368 11.73q6.855 7.618 10.054 18.434 3.2 10.817 3.2 24.07m-39.305 3.808q0-7.77-1.371-13.558-1.371-5.942-4.418-9.903-3.047-4.113-8.074-6.094-5.028-2.132-12.188-2.132-4.266 0-8.379.761-4.113.762-8.074 2.133t-7.617 3.352q-3.657 1.828-6.856 3.96 0 16.301 1.828 27.27 1.829 10.817 5.332 17.215 3.657 6.398 8.989 9.14 5.484 2.59 12.644 2.59 7.008 0 12.188-2.59 5.332-2.59 8.836-7.312t5.332-10.969q1.828-6.398 1.828-13.863",
                  baselineShift: "sub",
                  fontSize: "65%"
                }
              )
            ]
          }
        )
      ]
    }
  );
  var UnsaturationFormula_default = SvgUnsaturationFormula;

  // build/lib-react-tsx/structure/UnsaturationStructure.tsx
  var React156 = __toESM(require_react(), 1);
  var import_jsx_runtime156 = __toESM(require_jsx_runtime(), 1);
  var SvgUnsaturationStructure = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime156.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime156.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeMiterlimit: 22.926,
            strokeWidth: 43.255,
            d: "M529.4 586.817H47.701l240.852-372.074zm422.055-175.398H469.751L710.604 39.344zM290.169 212.852 710.378 38.395m-175.501 548.51 415.025-171.863M50.906 585.358 472.405 409.6"
          }
        )
      ]
    }
  );
  var UnsaturationStructure_default = SvgUnsaturationStructure;

  // build/lib-react-tsx/structure/Virtual.tsx
  var React157 = __toESM(require_react(), 1);
  var import_jsx_runtime157 = __toESM(require_jsx_runtime(), 1);
  var SvgVirtual = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime157.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)("g", { transform: "rotate(113.866 257.648 239.32)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "path",
            {
              strokeLinejoin: "round",
              strokeWidth: 60,
              d: "M133.234 116.347h170v170h-170z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "circle",
            {
              cx: 568.114,
              cy: 201.347,
              r: 100,
              strokeLinejoin: "round",
              strokeWidth: 60
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "path",
            {
              fill: "#000",
              stroke: "#000",
              strokeWidth: 100,
              d: "M245.509 201.347h290.42"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "path",
            {
              strokeLinejoin: "round",
              strokeWidth: 60,
              d: "M133.234 116.347h170v170h-170z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "circle",
            {
              cx: 568.114,
              cy: 201.347,
              r: 100,
              strokeLinejoin: "round",
              strokeWidth: 60
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "path",
            {
              fill: "#000",
              stroke: "#000",
              strokeWidth: 100,
              d: "M245.509 201.347h290.42"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)("g", { transform: "rotate(-34.262 235.323 312.714)", children: [
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "circle",
            {
              cx: 820.135,
              cy: 570.359,
              r: 100,
              strokeLinejoin: "round",
              strokeWidth: 60
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "path",
            {
              fill: "#000",
              stroke: "#000",
              strokeWidth: 100,
              d: "M497.53 570.36h290.42"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
            "circle",
            {
              cx: 459.581,
              cy: 570.359,
              r: 100,
              strokeLinejoin: "round",
              strokeWidth: 60
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
          "path",
          {
            strokeLinejoin: "round",
            strokeWidth: 60,
            d: "m379.552 600.377 161.717 52.417-52.417 161.717-161.717-52.417z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
          "path",
          {
            fill: "#000",
            stroke: "#000",
            strokeWidth: 100,
            d: "m460.048 716.167 276.269 89.547"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
          "path",
          {
            strokeLinejoin: "round",
            strokeWidth: 60,
            d: "m737.4 714.35 161.716 52.417L846.7 928.485l-161.717-52.418z"
          }
        )
      ]
    }
  );
  var Virtual_default = SvgVirtual;

  // build/lib-react-tsx/tga/Assignment.tsx
  var React158 = __toESM(require_react(), 1);
  var import_jsx_runtime158 = __toESM(require_jsx_runtime(), 1);
  var SvgAssignment8 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime158.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          "path",
          {
            stroke: "none",
            d: "M111.035 811.032c0 12.99 8.7 23.41 19.543 23.41 10.725 0 19.421-10.42 19.421-23.408zm0 0V162.018H150v649.018zM150 162.016c0-12.848-8.696-23.266-19.421-23.266-10.844 0-19.545 10.418-19.545 23.266z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m130.575 131.361 49.93 65.898m-99.856 0 49.929-65.898"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          "path",
          {
            stroke: "none",
            d: "M150.002 811.032c-14.71 0-26.508 8.701-26.508 19.426 0 10.841 11.798 19.543 26.505 19.543zm0 0h734.904V850H150zM884.906 850c14.546 0 26.344-8.702 26.344-19.545 0-10.723-11.798-19.422-26.344-19.422z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          "path",
          {
            fill: "none",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 38.845,
            d: "m918.636 830.458-65.895 50.045m0-99.974 65.895 49.927"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(
          "path",
          {
            fill: "none",
            strokeWidth: 29.999,
            d: "M188.047 294.563c83.578 2.32 143.94 23.215 150.902 134.65s44.11 132.331 155.546 134.654c111.435 2.32 171.797 58.036 188.048 102.147S749.87 719.41 796.3 724.055c46.431 4.64 44.11 4.64 44.11 4.64"
          }
        )
      ]
    }
  );
  var Assignment_default8 = SvgAssignment8;

  // build/lib-react-tsx/xps/Request.tsx
  var React159 = __toESM(require_react(), 1);
  var import_jsx_runtime159 = __toESM(require_jsx_runtime(), 1);
  var SvgRequest4 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime159.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime159.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(
          "path",
          {
            fill: "#000",
            stroke: "none",
            d: "M172.145 163.208h97.108l50.597 87.768 49.041-87.768h96.135l-88.74 138.17L473.394 448.5H374.34l-56.241-91.66-56.436 91.66h-98.47l98.47-148.679zm329.272 0h146.538q47.873 0 71.615 22.77 23.937 22.768 23.937 64.803 0 43.202-26.078 67.528-25.882 24.326-79.204 24.326h-48.262V448.5h-88.546zm88.546 121.629h21.601q25.493 0 35.807-8.757 10.315-8.952 10.315-22.77 0-13.427-8.952-22.768t-33.667-9.341h-25.104zm184.291 69.279 83.875-5.254q2.725 20.434 11.093 31.137 13.622 17.32 38.92 17.32 18.878 0 28.997-8.757 10.314-8.952 10.314-20.629 0-11.092-9.73-19.85-9.73-8.757-45.149-16.54-57.992-13.04-82.707-34.64-24.91-21.602-24.91-55.074 0-21.99 12.65-41.45 12.844-19.656 38.337-30.749 25.688-11.287 70.253-11.287 54.684 0 83.29 20.434 28.803 20.239 34.252 64.609l-83.097 4.865q-3.308-19.266-14.012-28.023-10.508-8.757-29.19-8.757-15.374 0-23.159 6.616-7.784 6.422-7.784 15.763 0 6.811 6.422 12.26 6.228 5.644 29.58 10.51 57.798 12.454 82.708 25.298 25.104 12.65 36.39 31.526 11.482 18.877 11.482 42.23 0 27.439-15.179 50.597t-42.424 35.223q-27.244 11.871-68.695 11.871-72.783 0-100.806-28.023t-31.72-71.226",
            "aria-label": "XPS",
            fontFamily: "Arial Black",
            fontSize: 398.552,
            fontWeight: 700,
            style: {
              lineHeight: 1.25
            },
            transform: "scale(.83636 1.19566)"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(
          "path",
          {
            stroke: "none",
            d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235-217.03 251.696-37.674-32.266 217.03-251.899ZM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008 53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38v-449.49l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107Zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447Zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307z"
          }
        )
      ]
    }
  );
  var Request_default4 = SvgRequest4;

  // build/lib-react-tsx/xray/Request.tsx
  var React160 = __toESM(require_react(), 1);
  var import_jsx_runtime160 = __toESM(require_jsx_runtime(), 1);
  var SvgRequest5 = ({
    title,
    titleId,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "currentColor",
      stroke: "currentColor",
      viewBox: "0 0 1000 1000",
      width: "1em",
      height: "1em",
      "aria-labelledby": titleId,
      ...props,
      children: [
        title ? /* @__PURE__ */ (0, import_jsx_runtime160.jsx)("title", { id: titleId, children: title }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(
          "path",
          {
            stroke: "none",
            d: "M973.852 153.252V602.74l-49.7.403V153.652zm0 449.489c0 35.273-15.23 67.332-40.084 90.582l-33.865-36.075c15.03-14.025 24.248-33.265 24.248-54.103zm-40.084 90.582c-24.444 22.643-57.91 36.87-94.585 36.87l.404-49.695c23.642 0 45.086-9.018 60.316-23.25zm-94.585 36.87H377.47l.401-49.695h461.717zM377.67 705.345l-.2 24.848c-13.828 0-24.85-11.019-24.85-24.848.2-13.828 11.423-24.847 25.25-24.847zm18.837 16.235-217.03 251.696-37.674-32.266 217.03-251.899ZM160.64 957.244l18.837 16.032c-9.018 10.621-24.849 11.821-35.27 2.804-10.22-8.815-11.422-24.646-2.404-35.07zm-24.248-5.008 53.506-251.702 48.496 9.623-53.506 251.898zm77.754-246.89-24.448-5.008c2.805-13.43 16.032-22.246 29.658-19.442 13.427 2.804 22.044 15.83 19.038 29.457zm-.2 24.847H160.84l.401-49.695h53.105zm-53.106 0c-36.672 0-70.139-14.025-94.386-36.669l34.267-36.472c15.43 14.428 36.873 23.446 60.52 23.446zm-94.386-36.669c-24.65-23.047-40.08-55.112-40.08-90.38l49.899-.403c0 20.844 9.218 40.28 24.448 54.311zm-40.08-90.38v-449.49l49.899-.401V602.74zm0-449.491c0-35.47 15.43-67.534 40.28-90.58l33.867 36.072c-15.03 14.027-24.248 33.065-24.248 54.107Zm40.28-90.58C90.902 40.228 124.368 26 161.24 26l-.4 49.899c-23.647 0-45.09 8.817-60.32 23.246zM161.24 26h678.346l-.404 49.899H160.84zm678.346 0c36.669 0 70.136 14.228 94.383 36.873l-34.268 36.473c-15.427-14.63-36.871-23.447-60.519-23.447Zm94.383 36.873c24.652 23.045 39.882 55.11 39.882 90.379l-49.7.401c0-21.041-9.22-40.28-24.45-54.307zM608.631 427.327c11.694-7.59 15.182-23.388 7.59-35.287-7.59-11.694-23.387-14.976-35.286-7.18zm0 0-119.402 77.96-27.696-42.467 119.402-77.96zM461.533 462.82c-11.694 7.59-15.182 23.387-7.59 35.287 7.59 11.694 23.387 14.976 35.286 7.18zM315.872 296.437c18.258 0 34.876-7.591 46.98-19.49l35.698 35.697c-21.337 21.337-50.88 34.672-83.089 34.672zm46.775-19.696c12.105-12.104 19.695-28.516 19.695-46.775l50.88-.411c0 32.415-13.336 61.752-34.672 83.089zm19.695-46.775c0-18.465-7.59-35.287-19.695-47.392l36.108-36.108c21.131 21.337 34.466 50.674 34.466 83.09zm-19.695-47.392c-12.104-12.104-28.927-19.695-47.186-19.695l.41-50.879c32.21 0 61.547 13.335 82.884 34.467zm-47.186-19.695c-18.464 0-35.082 7.59-47.186 19.49l-35.698-35.697C253.914 125.335 283.457 112 315.872 112Zm-47.186 19.49c-11.9 12.104-19.49 28.722-19.49 47.186l-50.88.411c0-32.415 13.336-61.958 34.672-83.294zm-19.49 47.186c0 18.26 7.59 35.082 19.695 47.186l-36.108 36.108c-21.131-21.336-34.466-50.674-34.466-82.883zm19.695 47.186c12.104 12.105 28.927 19.696 47.392 19.696l-.411 50.879c-32.415 0-61.753-13.335-83.09-34.467z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(
          "path",
          {
            stroke: "none",
            d: "M692.746 433.277c18.259 0 34.876-7.591 46.981-19.695l35.905 35.902c-21.339 21.337-50.676 34.672-83.296 34.672zm46.981-19.49c12.104-12.104 19.49-28.722 19.49-46.981l50.878-.411c0 32.21-13.13 61.753-34.463 83.089zm19.49-46.981c0-18.464-7.386-35.288-19.49-47.392l36.106-36.107c21.133 21.336 34.262 50.674 34.262 83.088zm-19.695-47.186c-12.104-12.31-28.927-19.696-47.186-19.696l.41-51.084c32.416 0 61.959 13.335 83.088 34.467zm-47.186-19.696c-18.26 0-34.877 7.386-46.982 19.285l-35.697-35.697c21.336-21.337 50.674-34.672 83.089-34.672zm-46.982 19.285c-12.104 12.105-19.49 28.722-19.49 47.186l-50.879.411c0-32.415 13.336-61.957 34.672-83.294zm-19.49 47.186c0 18.26 7.591 35.082 19.696 47.187l-36.108 36.107c-21.337-21.336-34.467-50.673-34.467-82.883Zm19.696 47.187c12.104 12.104 28.927 19.695 47.186 19.695l-.411 50.88c-32.21 0-61.753-13.336-82.884-34.468zM386.856 580.17c18.259 0 34.877-7.386 46.98-19.49l35.699 35.902c-21.337 21.337-50.675 34.467-83.09 34.467zm46.98-19.49c11.9-12.105 19.49-28.722 19.49-46.982l50.88-.41c0 32.62-13.335 61.957-34.466 83.293zm19.49-46.982c0-18.259-7.59-34.876-19.694-47.185l36.312-36.108c21.132 21.131 34.262 50.469 34.262 82.884zm-19.694-47.185c-12.31-12.105-28.928-19.696-47.187-19.696l.411-50.879c32.415 0 61.753 13.13 83.089 34.467zm-47.187-19.696c-18.464 0-35.081 7.591-46.98 19.49l-35.903-35.697c21.336-21.336 50.879-34.672 83.294-34.672zm-46.98 19.696c-12.105 11.899-19.49 28.516-19.49 46.776l-50.88.41c0-32.414 13.13-61.957 34.467-83.088zm-19.49 46.776c0 18.464 7.385 35.081 19.694 47.39l-36.312 36.109c-21.131-21.337-34.261-50.674-34.261-83.09Zm19.694 47.39c12.105 12.105 28.723 19.49 47.187 19.49l-.411 50.88c-32.415 0-61.752-13.13-83.089-34.261z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(
          "path",
          {
            stroke: "none",
            d: "M580.935 358.805c12.72 5.744 27.696.205 33.646-12.72 5.95-12.72.409-27.902-12.31-33.646zm0 0-178.692-81.038 21.336-46.365 178.692 81.037zM423.58 231.402c-12.72-5.745-27.696 0-33.646 12.72-5.95 12.925-.41 27.9 12.31 33.645z"
          }
        )
      ]
    }
  );
  var Request_default5 = SvgRequest5;

  // build/react-docs.tsx
  var import_jsx_runtime161 = __toESM(require_jsx_runtime(), 1);
  (0, import_client.createRoot)(document.getElementById("root")).render(/* @__PURE__ */ (0, import_jsx_runtime161.jsx)(App, {}));
  function App() {
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("div", { className: "w-screen flex flex-row flex-wrap", children: Object.entries(react_index_exports).map(([name, Component]) => /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)(
      "div",
      {
        className: "flex flex-col items-center justify-center p-4 border",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("div", { children: name }),
          /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("div", { className: "text-red-500", children: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(Component, { className: "w-16 h-16" }) })
        ]
      },
      name
    )) });
  }
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
